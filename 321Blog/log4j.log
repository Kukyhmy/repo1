2019-08-04 00:14:05,449 DEBUG {conn-10001,procId-290} connected
2019-08-04 00:14:05,460 DEBUG {conn-10002,procId-291} connected
2019-08-04 00:14:05,464 DEBUG {conn-10003,procId-292} connected
2019-08-04 00:14:05,468 DEBUG {conn-10004,procId-293} connected
2019-08-04 00:14:05,473 DEBUG {conn-10005,procId-294} connected
2019-08-04 00:14:05,479 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:05,480 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:05,487 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:05,490 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:05,803 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:05,835 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:06,353 INFO [Behemoth] modules [], plugins [], sites []
2019-08-04 00:14:06,363 DEBUG [Behemoth] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 00:14:06,371 DEBUG [Behemoth] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 00:14:06,390 DEBUG [Behemoth] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 00:14:06,392 DEBUG [Behemoth] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 00:14:06,392 DEBUG [Behemoth] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 00:14:06,393 DEBUG [Behemoth] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:14:06,393 DEBUG [Behemoth] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 00:14:06,393 DEBUG [Behemoth] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 00:14:06,393 DEBUG [Behemoth] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:14:06,394 DEBUG [Behemoth] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 00:14:06,394 DEBUG [Behemoth] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:14:06,394 DEBUG [Behemoth] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 00:14:06,394 DEBUG [Behemoth] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 00:14:06,394 DEBUG [Behemoth] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 00:14:06,394 DEBUG [Behemoth] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 00:14:06,395 DEBUG [Behemoth] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:14:07,689 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.0.135 netmask:255.255.255.0 broadcast:192.168.0.255 scope:site
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 00:14:07,704 DEBUG using gathering [true]
2019-08-04 00:14:07,722 DEBUG [Behemoth] node_sampler_interval[5s]
2019-08-04 00:14:07,732 DEBUG Using select timeout of 500
2019-08-04 00:14:07,732 DEBUG Epoll-bug workaround enabled = false
2019-08-04 00:14:07,768 DEBUG [Behemoth] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:14:07,790 DEBUG [Behemoth] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:14:07,819 DEBUG [Behemoth] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:14:08,464 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:08,464 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:18,573 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:18,657 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 00:14:18,664 DEBUG {conn-10005, pstmt-20000} Parameters : [1, 0, 8]
2019-08-04 00:14:18,664 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 00:14:18,665 DEBUG {conn-10005, pstmt-20000} executed. 4.330923 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 00:14:18,668 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 00:14:18,669 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 00:14:18,673 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 80, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 00:14:18,674 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 122, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 00:14:18,675 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 27, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 00:14:18,675 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 256, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 00:14:18,675 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 00:14:18,675 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 00:14:18,676 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:18,678 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:18,679 DEBUG {conn-10005, pstmt-20001} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 00:14:18,679 DEBUG {conn-10005, pstmt-20001} Parameters : [24, 22, 24, 20]
2019-08-04 00:14:18,679 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER, INTEGER, INTEGER, INTEGER]
2019-08-04 00:14:18,680 DEBUG {conn-10005, pstmt-20001} executed. 0.810667 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 00:14:18,680 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-04 00:14:18,680 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 00:14:18,680 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 00:14:18,680 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 00:14:18,680 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 00:14:18,681 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-04 00:14:18,681 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 00:14:18,681 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:18,686 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:18,687 DEBUG {conn-10005, pstmt-20002} created. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 00:14:18,687 DEBUG {conn-10005, pstmt-20002} Parameters : [1]
2019-08-04 00:14:18,687 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 00:14:18,688 DEBUG {conn-10005, pstmt-20002} executed. 0.792675 millis. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 00:14:18,688 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-04 00:14:18,688 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [count(*)]
2019-08-04 00:14:18,688 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [4]
2019-08-04 00:14:18,690 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-04 00:14:18,690 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 00:14:18,690 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:18,692 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:18,693 DEBUG {conn-10005, pstmt-20003} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 00:14:18,693 DEBUG {conn-10005, pstmt-20003} Parameters : [9]
2019-08-04 00:14:18,693 DEBUG {conn-10005, pstmt-20003} Types : [INTEGER]
2019-08-04 00:14:18,694 DEBUG {conn-10005, pstmt-20003} executed. 0.826602 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 00:14:18,694 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-04 00:14:18,694 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 00:14:18,694 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 80, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 00:14:18,695 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 122, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 00:14:18,695 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 27, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 00:14:18,696 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 256, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 00:14:18,696 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-04 00:14:18,696 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 00:14:18,697 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:18,697 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:18,698 DEBUG {conn-10005, pstmt-20004} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 00:14:18,698 DEBUG {conn-10005, pstmt-20004} Parameters : [9]
2019-08-04 00:14:18,698 DEBUG {conn-10005, pstmt-20004} Types : [INTEGER]
2019-08-04 00:14:18,699 DEBUG {conn-10005, pstmt-20004} executed. 1.035309 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 00:14:18,700 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-04 00:14:18,700 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 00:14:18,700 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 256, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 00:14:18,701 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 122, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 00:14:18,701 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 80, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 00:14:18,701 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 27, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 00:14:18,702 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-04 00:14:18,702 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 00:14:18,702 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:18,702 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:18,705 DEBUG {conn-10005, pstmt-20005} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 00:14:18,705 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 00:14:18,705 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 00:14:18,706 DEBUG {conn-10005, pstmt-20005} executed. 1.498474 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 00:14:18,706 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 00:14:18,706 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [tag_id, tag_count, tag_name]
2019-08-04 00:14:18,706 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [66, 1, Spring]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [67, 1, SpringMVC]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [68, 1, MyBatis]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [69, 1, easyUI]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [127, 1, 目录]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [128, 1, AdminLte3]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [130, 1, SpringBoot]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [131, 1, 入门教程]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [132, 1, 实战教程]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [133, 1, spring-boot企业级开发]
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 00:14:18,708 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 00:14:18,708 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:18,711 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:18,711 DEBUG {conn-10005, pstmt-20006} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 00:14:18,712 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-04 00:14:18,712 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-04 00:14:18,712 DEBUG {conn-10005, pstmt-20006} executed. 0.75669 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 00:14:18,712 DEBUG {conn-10005, pstmt-20006, rs-50006} open
2019-08-04 00:14:18,712 DEBUG {conn-10005, pstmt-20006, rs-50006} Header: [config_name, config_value, create_time, update_time]
2019-08-04 00:14:18,713 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 00:14:18,713 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 00:14:18,713 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 00:14:18,713 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 00:14:18,713 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 00:14:18,714 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 00:14:18,714 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 00:14:18,714 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 00:14:18,715 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 00:14:18,715 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 00:14:18,715 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 00:14:18,715 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 00:14:18,716 DEBUG {conn-10005, pstmt-20006, rs-50006} closed
2019-08-04 00:14:18,716 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 00:14:18,716 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:19,419 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:19,419 DEBUG {conn-10005, pstmt-20007} created. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 00:14:19,421 DEBUG {conn-10005, pstmt-20007} Parameters : [anonymousUser]
2019-08-04 00:14:19,421 DEBUG {conn-10005, pstmt-20007} Types : [VARCHAR]
2019-08-04 00:14:19,422 DEBUG {conn-10005, pstmt-20007, rs-50007} query executed. 0.919133 millis. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 00:14:19,422 DEBUG {conn-10005, pstmt-20007, rs-50007} open
2019-08-04 00:14:19,422 DEBUG {conn-10005, pstmt-20007, rs-50007} Header: [userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime]
2019-08-04 00:14:19,423 DEBUG {conn-10005, pstmt-20007, rs-50007} closed
2019-08-04 00:14:19,423 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-04 00:14:19,423 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:21,976 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:21,977 DEBUG {conn-10005, pstmt-20008} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 00:14:21,978 DEBUG {conn-10005, pstmt-20008} Parameters : [4]
2019-08-04 00:14:21,978 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT]
2019-08-04 00:14:21,981 DEBUG {conn-10005, pstmt-20008} executed. 2.947084 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 00:14:21,981 DEBUG {conn-10005, pstmt-20008, rs-50008} open
2019-08-04 00:14:21,981 DEBUG {conn-10005, pstmt-20008, rs-50008} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 00:14:21,982 DEBUG {conn-10005, pstmt-20008, rs-50008} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 80, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 00:14:21,983 DEBUG {conn-10005, pstmt-20008, rs-50008} closed
2019-08-04 00:14:21,983 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-04 00:14:21,983 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:21,983 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:21,989 DEBUG {conn-10005, pstmt-20009} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 00:14:21,992 DEBUG {conn-10005, pstmt-20009} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 81, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 00:14:21,992 DEBUG {conn-10005, pstmt-20009} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 00:14:21,995 DEBUG {conn-10005, pstmt-20009} executed. 2.853011 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 00:14:21,995 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 00:14:21,996 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:22,044 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:22,045 DEBUG {conn-10005, pstmt-20010} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 00:14:22,045 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-04 00:14:22,045 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 00:14:22,045 DEBUG {conn-10005, pstmt-20010} executed. 0.674956 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 00:14:22,045 DEBUG {conn-10005, pstmt-20010, rs-50009} open
2019-08-04 00:14:22,046 DEBUG {conn-10005, pstmt-20010, rs-50009} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 00:14:22,046 DEBUG {conn-10005, pstmt-20010, rs-50009} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 00:14:22,046 DEBUG {conn-10005, pstmt-20010, rs-50009} closed
2019-08-04 00:14:22,046 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 00:14:22,046 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:22,047 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:22,049 DEBUG {conn-10005, pstmt-20011} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:14:22,049 DEBUG {conn-10005, pstmt-20011} Parameters : [4, 1]
2019-08-04 00:14:22,049 DEBUG {conn-10005, pstmt-20011} Types : [BIGINT, INTEGER]
2019-08-04 00:14:22,050 DEBUG {conn-10005, pstmt-20011} executed. 0.80347 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:14:22,050 DEBUG {conn-10005, pstmt-20011, rs-50010} open
2019-08-04 00:14:22,050 DEBUG {conn-10005, pstmt-20011, rs-50010} Header: [count(*)]
2019-08-04 00:14:22,050 DEBUG {conn-10005, pstmt-20011, rs-50010} Result: [2]
2019-08-04 00:14:22,050 DEBUG {conn-10005, pstmt-20011, rs-50010} closed
2019-08-04 00:14:22,050 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 00:14:22,050 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:22,051 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:22,051 DEBUG {conn-10005, pstmt-20012} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 00:14:22,052 DEBUG {conn-10005, pstmt-20012} Parameters : [4, 1, 0, 8]
2019-08-04 00:14:22,052 DEBUG {conn-10005, pstmt-20012} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 00:14:22,052 DEBUG {conn-10005, pstmt-20012} executed. 0.573173 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 00:14:22,052 DEBUG {conn-10005, pstmt-20012, rs-50011} open
2019-08-04 00:14:22,052 DEBUG {conn-10005, pstmt-20012, rs-50011} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 00:14:22,052 DEBUG {conn-10005, pstmt-20012, rs-50011} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 00:14:22,053 DEBUG {conn-10005, pstmt-20012, rs-50011} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 00:14:22,053 DEBUG {conn-10005, pstmt-20012, rs-50011} closed
2019-08-04 00:14:22,053 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-04 00:14:22,053 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:22,053 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:22,054 DEBUG {conn-10005, pstmt-20011} Parameters : [4, 1]
2019-08-04 00:14:22,054 DEBUG {conn-10005, pstmt-20011} Types : [BIGINT, INTEGER]
2019-08-04 00:14:22,054 DEBUG {conn-10005, pstmt-20011} executed. 0.446201 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:14:22,054 DEBUG {conn-10005, pstmt-20011, rs-50012} open
2019-08-04 00:14:22,054 DEBUG {conn-10005, pstmt-20011, rs-50012} Header: [count(*)]
2019-08-04 00:14:22,054 DEBUG {conn-10005, pstmt-20011, rs-50012} Result: [2]
2019-08-04 00:14:22,054 DEBUG {conn-10005, pstmt-20011, rs-50012} closed
2019-08-04 00:14:22,054 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 00:14:22,055 DEBUG {conn-10005} pool-recycle
2019-08-04 00:14:22,055 DEBUG {conn-10005} pool-connect
2019-08-04 00:14:22,055 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-04 00:14:22,055 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-04 00:14:22,056 DEBUG {conn-10005, pstmt-20006} executed. 0.834828 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 00:14:22,056 DEBUG {conn-10005, pstmt-20006, rs-50013} open
2019-08-04 00:14:22,056 DEBUG {conn-10005, pstmt-20006, rs-50013} Header: [config_name, config_value, create_time, update_time]
2019-08-04 00:14:22,057 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 00:14:22,057 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 00:14:22,057 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 00:14:22,057 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 00:14:22,058 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 00:14:22,059 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 00:14:22,059 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 00:14:22,059 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 00:14:22,059 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 00:14:22,059 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 00:14:22,059 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 00:14:22,060 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 00:14:22,060 DEBUG {conn-10005, pstmt-20006, rs-50013} closed
2019-08-04 00:14:22,060 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 00:14:22,060 DEBUG {conn-10005} pool-recycle
2019-08-04 00:15:17,172 DEBUG {conn-10001,procId-295} connected
2019-08-04 00:15:17,179 DEBUG {conn-10002,procId-296} connected
2019-08-04 00:15:17,184 DEBUG {conn-10003,procId-297} connected
2019-08-04 00:15:17,189 DEBUG {conn-10004,procId-298} connected
2019-08-04 00:15:17,193 DEBUG {conn-10005,procId-299} connected
2019-08-04 00:15:17,198 DEBUG {conn-10005} pool-connect
2019-08-04 00:15:17,199 DEBUG {conn-10005} pool-recycle
2019-08-04 00:15:17,207 DEBUG {conn-10005} pool-connect
2019-08-04 00:15:17,209 DEBUG {conn-10005} pool-recycle
2019-08-04 00:15:17,501 DEBUG {conn-10005} pool-connect
2019-08-04 00:15:17,536 DEBUG {conn-10005} pool-recycle
2019-08-04 00:15:18,074 INFO [Quagmire] modules [], plugins [], sites []
2019-08-04 00:15:18,083 DEBUG [Quagmire] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 00:15:18,091 DEBUG [Quagmire] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 00:15:18,100 DEBUG [Quagmire] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 00:15:18,101 DEBUG [Quagmire] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 00:15:18,101 DEBUG [Quagmire] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 00:15:18,101 DEBUG [Quagmire] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:15:18,101 DEBUG [Quagmire] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 00:15:18,102 DEBUG [Quagmire] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 00:15:18,102 DEBUG [Quagmire] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:15:18,102 DEBUG [Quagmire] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 00:15:18,102 DEBUG [Quagmire] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:15:18,102 DEBUG [Quagmire] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 00:15:18,102 DEBUG [Quagmire] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 00:15:18,102 DEBUG [Quagmire] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 00:15:18,102 DEBUG [Quagmire] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 00:15:18,102 DEBUG [Quagmire] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:15:19,282 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.0.135 netmask:255.255.255.0 broadcast:192.168.0.255 scope:site
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 00:15:19,298 DEBUG using gathering [true]
2019-08-04 00:15:19,318 DEBUG [Quagmire] node_sampler_interval[5s]
2019-08-04 00:15:19,328 DEBUG Using select timeout of 500
2019-08-04 00:15:19,328 DEBUG Epoll-bug workaround enabled = false
2019-08-04 00:15:19,366 DEBUG [Quagmire] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:15:19,390 DEBUG [Quagmire] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:15:19,425 DEBUG [Quagmire] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:15:20,060 DEBUG {conn-10005} pool-connect
2019-08-04 00:15:20,061 DEBUG {conn-10005} pool-recycle
2019-08-04 00:15:52,569 DEBUG {conn-10005} pool-connect
2019-08-04 00:15:52,651 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 00:15:52,657 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 00:15:52,657 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 00:15:52,660 DEBUG {conn-10005, pstmt-20000} executed. 5.415581 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 00:15:52,663 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 00:15:52,664 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 00:15:52,668 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 81, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 00:15:52,670 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 00:15:52,670 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 00:15:52,671 DEBUG {conn-10005} pool-recycle
2019-08-04 00:15:52,671 DEBUG {conn-10005} pool-connect
2019-08-04 00:15:52,674 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 00:15:52,677 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 82, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 00:15:52,677 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 00:15:52,687 DEBUG {conn-10005, pstmt-20001} executed. 9.648319 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 00:15:52,687 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 00:15:52,687 DEBUG {conn-10005} pool-recycle
2019-08-04 00:15:52,720 DEBUG {conn-10005} pool-connect
2019-08-04 00:15:52,721 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 00:15:52,721 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 00:15:52,721 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 00:15:52,721 DEBUG {conn-10005, pstmt-20002} executed. 0.586024 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 00:15:52,721 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 00:15:52,721 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 00:15:52,722 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 00:15:52,722 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 00:15:52,722 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 00:15:52,722 DEBUG {conn-10005} pool-recycle
2019-08-04 00:15:52,734 DEBUG {conn-10005} pool-connect
2019-08-04 00:15:52,735 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:15:52,736 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 00:15:52,736 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 00:15:52,736 DEBUG {conn-10005, pstmt-20003} executed. 0.583968 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:15:52,736 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 00:15:52,736 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 00:15:52,736 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 00:15:52,737 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 00:15:52,737 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 00:15:52,737 DEBUG {conn-10005} pool-recycle
2019-08-04 00:15:52,738 DEBUG {conn-10005} pool-connect
2019-08-04 00:15:52,741 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 00:15:52,741 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 00:15:52,741 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 00:15:52,742 DEBUG {conn-10005, pstmt-20004} executed. 0.704771 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 00:15:52,742 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 00:15:52,742 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 00:15:52,742 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 00:15:52,743 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 00:15:52,743 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 00:15:52,743 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 00:15:52,743 DEBUG {conn-10005} pool-recycle
2019-08-04 00:15:52,743 DEBUG {conn-10005} pool-connect
2019-08-04 00:15:52,744 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 00:15:52,744 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 00:15:52,744 DEBUG {conn-10005, pstmt-20003} executed. 0.525879 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:15:52,744 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 00:15:52,744 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 00:15:52,744 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 00:15:52,744 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 00:15:52,744 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 00:15:52,745 DEBUG {conn-10005} pool-recycle
2019-08-04 00:15:52,747 DEBUG {conn-10005} pool-connect
2019-08-04 00:15:52,747 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 00:15:52,747 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 00:15:52,747 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 00:15:52,748 DEBUG {conn-10005, pstmt-20005} executed. 0.555694 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 00:15:52,748 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 00:15:52,748 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 00:15:52,748 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 00:15:52,748 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 00:15:52,749 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 00:15:52,749 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 00:15:52,749 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 00:15:52,749 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 00:15:52,749 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 00:15:52,750 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 00:15:52,750 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 00:15:52,750 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 00:15:52,750 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 00:15:52,750 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 00:15:52,750 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 00:15:52,750 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 00:15:52,751 DEBUG {conn-10005} pool-recycle
2019-08-04 00:23:11,673 DEBUG {conn-10001,procId-300} connected
2019-08-04 00:23:11,679 DEBUG {conn-10002,procId-301} connected
2019-08-04 00:23:11,683 DEBUG {conn-10003,procId-302} connected
2019-08-04 00:23:11,688 DEBUG {conn-10004,procId-303} connected
2019-08-04 00:23:11,693 DEBUG {conn-10005,procId-304} connected
2019-08-04 00:23:11,696 DEBUG {conn-10005} pool-connect
2019-08-04 00:23:11,698 DEBUG {conn-10005} pool-recycle
2019-08-04 00:23:11,705 DEBUG {conn-10005} pool-connect
2019-08-04 00:23:11,707 DEBUG {conn-10005} pool-recycle
2019-08-04 00:23:12,031 DEBUG {conn-10005} pool-connect
2019-08-04 00:23:12,070 DEBUG {conn-10005} pool-recycle
2019-08-04 00:23:12,568 INFO [Rainbow] modules [], plugins [], sites []
2019-08-04 00:23:12,577 DEBUG [Rainbow] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 00:23:12,585 DEBUG [Rainbow] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 00:23:12,593 DEBUG [Rainbow] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 00:23:12,594 DEBUG [Rainbow] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 00:23:12,594 DEBUG [Rainbow] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 00:23:12,594 DEBUG [Rainbow] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:23:12,594 DEBUG [Rainbow] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 00:23:12,594 DEBUG [Rainbow] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 00:23:12,595 DEBUG [Rainbow] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:23:12,595 DEBUG [Rainbow] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 00:23:12,595 DEBUG [Rainbow] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:23:12,595 DEBUG [Rainbow] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 00:23:12,595 DEBUG [Rainbow] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 00:23:12,595 DEBUG [Rainbow] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 00:23:12,595 DEBUG [Rainbow] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 00:23:12,595 DEBUG [Rainbow] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:23:13,733 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.0.135 netmask:255.255.255.0 broadcast:192.168.0.255 scope:site
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 00:23:13,748 DEBUG using gathering [true]
2019-08-04 00:23:13,768 DEBUG [Rainbow] node_sampler_interval[5s]
2019-08-04 00:23:13,779 DEBUG Using select timeout of 500
2019-08-04 00:23:13,779 DEBUG Epoll-bug workaround enabled = false
2019-08-04 00:23:13,813 DEBUG [Rainbow] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:23:13,834 DEBUG [Rainbow] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:23:13,863 DEBUG [Rainbow] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:23:14,479 DEBUG {conn-10005} pool-connect
2019-08-04 00:23:14,479 DEBUG {conn-10005} pool-recycle
2019-08-04 00:23:39,837 DEBUG {conn-10005} pool-connect
2019-08-04 00:23:39,915 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 00:23:39,922 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 00:23:39,922 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 00:23:39,924 DEBUG {conn-10005, pstmt-20000} executed. 4.824931 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 00:23:39,927 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 00:23:39,928 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 00:23:39,932 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 82, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 00:23:39,934 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 00:23:39,934 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 00:23:39,934 DEBUG {conn-10005} pool-recycle
2019-08-04 00:23:39,935 DEBUG {conn-10005} pool-connect
2019-08-04 00:23:39,937 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 00:23:39,940 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 83, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 00:23:39,940 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 00:23:39,949 DEBUG {conn-10005, pstmt-20001} executed. 8.881862 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 00:23:39,949 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 00:23:39,950 DEBUG {conn-10005} pool-recycle
2019-08-04 00:23:39,982 DEBUG {conn-10005} pool-connect
2019-08-04 00:23:39,983 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 00:23:39,983 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 00:23:39,983 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 00:23:39,983 DEBUG {conn-10005, pstmt-20002} executed. 0.577799 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 00:23:39,983 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 00:23:39,984 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 00:23:39,984 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 00:23:39,984 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 00:23:39,984 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 00:23:39,984 DEBUG {conn-10005} pool-recycle
2019-08-04 00:23:39,997 DEBUG {conn-10005} pool-connect
2019-08-04 00:23:39,998 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:23:39,998 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 00:23:39,998 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 00:23:39,999 DEBUG {conn-10005, pstmt-20003} executed. 0.611727 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:23:39,999 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 00:23:39,999 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 00:23:39,999 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 00:23:40,000 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 00:23:40,000 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 00:23:40,000 DEBUG {conn-10005} pool-recycle
2019-08-04 00:23:40,001 DEBUG {conn-10005} pool-connect
2019-08-04 00:23:40,003 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 00:23:40,003 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 00:23:40,003 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 00:23:40,004 DEBUG {conn-10005, pstmt-20004} executed. 0.615839 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 00:23:40,004 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 00:23:40,004 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 00:23:40,004 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 00:23:40,005 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 00:23:40,005 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 00:23:40,005 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 00:23:40,005 DEBUG {conn-10005} pool-recycle
2019-08-04 00:23:40,005 DEBUG {conn-10005} pool-connect
2019-08-04 00:23:40,005 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 00:23:40,006 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 00:23:40,006 DEBUG {conn-10005, pstmt-20003} executed. 0.472931 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:23:40,006 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 00:23:40,006 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 00:23:40,006 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 00:23:40,006 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 00:23:40,006 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 00:23:40,006 DEBUG {conn-10005} pool-recycle
2019-08-04 00:23:40,009 DEBUG {conn-10005} pool-connect
2019-08-04 00:23:40,009 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 00:23:40,009 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 00:23:40,009 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 00:23:40,010 DEBUG {conn-10005, pstmt-20005} executed. 0.599903 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 00:23:40,010 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 00:23:40,010 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 00:23:40,010 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 00:23:40,010 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 00:23:40,010 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 00:23:40,010 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 00:23:40,011 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 00:23:40,011 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 00:23:40,011 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 00:23:40,011 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 00:23:40,011 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 00:23:40,011 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 00:23:40,012 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 00:23:40,012 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 00:23:40,012 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 00:23:40,012 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 00:23:40,012 DEBUG {conn-10005} pool-recycle
2019-08-04 00:24:55,283 DEBUG {conn-10001,procId-305} connected
2019-08-04 00:24:55,289 DEBUG {conn-10002,procId-306} connected
2019-08-04 00:24:55,293 DEBUG {conn-10003,procId-307} connected
2019-08-04 00:24:55,297 DEBUG {conn-10004,procId-308} connected
2019-08-04 00:24:55,301 DEBUG {conn-10005,procId-309} connected
2019-08-04 00:24:55,304 DEBUG {conn-10005} pool-connect
2019-08-04 00:24:55,305 DEBUG {conn-10005} pool-recycle
2019-08-04 00:24:55,312 DEBUG {conn-10005} pool-connect
2019-08-04 00:24:55,314 DEBUG {conn-10005} pool-recycle
2019-08-04 00:24:55,592 DEBUG {conn-10005} pool-connect
2019-08-04 00:24:55,625 DEBUG {conn-10005} pool-recycle
2019-08-04 00:24:56,120 INFO [Fury] modules [], plugins [], sites []
2019-08-04 00:24:56,130 DEBUG [Fury] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 00:24:56,137 DEBUG [Fury] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 00:24:56,146 DEBUG [Fury] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 00:24:56,147 DEBUG [Fury] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 00:24:56,148 DEBUG [Fury] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:24:57,311 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.0.135 netmask:255.255.255.0 broadcast:192.168.0.255 scope:site
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 00:24:57,327 DEBUG using gathering [true]
2019-08-04 00:24:57,345 DEBUG [Fury] node_sampler_interval[5s]
2019-08-04 00:24:57,355 DEBUG Using select timeout of 500
2019-08-04 00:24:57,355 DEBUG Epoll-bug workaround enabled = false
2019-08-04 00:24:57,390 DEBUG [Fury] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:24:57,411 DEBUG [Fury] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:24:57,439 DEBUG [Fury] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:24:58,056 DEBUG {conn-10005} pool-connect
2019-08-04 00:24:58,056 DEBUG {conn-10005} pool-recycle
2019-08-04 00:25:03,187 DEBUG {conn-10005} pool-connect
2019-08-04 00:25:03,267 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 00:25:03,273 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 00:25:03,273 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 00:25:03,276 DEBUG {conn-10005, pstmt-20000} executed. 4.745766 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 00:25:03,279 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 00:25:03,280 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 00:25:03,284 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 83, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 00:25:03,285 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 00:25:03,286 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 00:25:03,286 DEBUG {conn-10005} pool-recycle
2019-08-04 00:25:03,286 DEBUG {conn-10005} pool-connect
2019-08-04 00:25:03,289 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 00:25:03,292 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 84, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 00:25:03,292 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 00:25:03,301 DEBUG {conn-10005, pstmt-20001} executed. 8.537957 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 00:25:03,301 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 00:25:03,301 DEBUG {conn-10005} pool-recycle
2019-08-04 00:25:03,334 DEBUG {conn-10005} pool-connect
2019-08-04 00:25:03,335 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 00:25:03,335 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 00:25:03,335 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 00:25:03,335 DEBUG {conn-10005, pstmt-20002} executed. 0.636915 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 00:25:03,335 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 00:25:03,335 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 00:25:03,336 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 00:25:03,336 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 00:25:03,336 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 00:25:03,336 DEBUG {conn-10005} pool-recycle
2019-08-04 00:25:03,348 DEBUG {conn-10005} pool-connect
2019-08-04 00:25:03,349 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:25:03,349 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 00:25:03,349 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 00:25:03,350 DEBUG {conn-10005, pstmt-20003} executed. 0.655422 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:25:03,350 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 00:25:03,350 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 00:25:03,350 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 00:25:03,351 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 00:25:03,351 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 00:25:03,352 DEBUG {conn-10005} pool-recycle
2019-08-04 00:25:03,353 DEBUG {conn-10005} pool-connect
2019-08-04 00:25:03,355 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 00:25:03,355 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 00:25:03,355 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 00:25:03,356 DEBUG {conn-10005, pstmt-20004} executed. 0.819405 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 00:25:03,356 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 00:25:03,356 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 00:25:03,357 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 00:25:03,357 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 00:25:03,357 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 00:25:03,357 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 00:25:03,357 DEBUG {conn-10005} pool-recycle
2019-08-04 00:25:03,358 DEBUG {conn-10005} pool-connect
2019-08-04 00:25:03,358 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 00:25:03,358 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 00:25:03,358 DEBUG {conn-10005, pstmt-20003} executed. 0.551068 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:25:03,358 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 00:25:03,358 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 00:25:03,359 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 00:25:03,359 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 00:25:03,359 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 00:25:03,359 DEBUG {conn-10005} pool-recycle
2019-08-04 00:25:03,361 DEBUG {conn-10005} pool-connect
2019-08-04 00:25:03,361 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 00:25:03,362 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 00:25:03,362 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 00:25:03,362 DEBUG {conn-10005, pstmt-20005} executed. 0.60453 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 00:25:03,362 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 00:25:03,362 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 00:25:03,362 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 00:25:03,363 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 00:25:03,363 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 00:25:03,363 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 00:25:03,363 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 00:25:03,363 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 00:25:03,364 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 00:25:03,364 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 00:25:03,364 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 00:25:03,364 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 00:25:03,364 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 00:25:03,364 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 00:25:03,365 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 00:25:03,365 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 00:25:03,365 DEBUG {conn-10005} pool-recycle
2019-08-04 00:31:06,242 DEBUG {conn-10001,procId-310} connected
2019-08-04 00:31:06,248 DEBUG {conn-10002,procId-311} connected
2019-08-04 00:31:06,253 DEBUG {conn-10003,procId-312} connected
2019-08-04 00:31:06,257 DEBUG {conn-10004,procId-313} connected
2019-08-04 00:31:06,261 DEBUG {conn-10005,procId-314} connected
2019-08-04 00:31:06,264 DEBUG {conn-10005} pool-connect
2019-08-04 00:31:06,265 DEBUG {conn-10005} pool-recycle
2019-08-04 00:31:06,274 DEBUG {conn-10005} pool-connect
2019-08-04 00:31:06,276 DEBUG {conn-10005} pool-recycle
2019-08-04 00:31:06,580 DEBUG {conn-10005} pool-connect
2019-08-04 00:31:06,614 DEBUG {conn-10005} pool-recycle
2019-08-04 00:31:07,138 INFO [Sphinx] modules [], plugins [], sites []
2019-08-04 00:31:07,146 DEBUG [Sphinx] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 00:31:07,159 DEBUG [Sphinx] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 00:31:07,176 DEBUG [Sphinx] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 00:31:07,178 DEBUG [Sphinx] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 00:31:07,178 DEBUG [Sphinx] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 00:31:07,178 DEBUG [Sphinx] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:31:07,178 DEBUG [Sphinx] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 00:31:07,179 DEBUG [Sphinx] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 00:31:07,179 DEBUG [Sphinx] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:31:07,179 DEBUG [Sphinx] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 00:31:07,179 DEBUG [Sphinx] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:31:07,179 DEBUG [Sphinx] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 00:31:07,179 DEBUG [Sphinx] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 00:31:07,180 DEBUG [Sphinx] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 00:31:07,180 DEBUG [Sphinx] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 00:31:07,180 DEBUG [Sphinx] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 00:31:08,494 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.0.135 netmask:255.255.255.0 broadcast:192.168.0.255 scope:site
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 00:31:08,510 DEBUG using gathering [true]
2019-08-04 00:31:08,527 DEBUG [Sphinx] node_sampler_interval[5s]
2019-08-04 00:31:08,538 DEBUG Using select timeout of 500
2019-08-04 00:31:08,538 DEBUG Epoll-bug workaround enabled = false
2019-08-04 00:31:08,572 DEBUG [Sphinx] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:31:08,593 DEBUG [Sphinx] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:31:08,624 DEBUG [Sphinx] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 00:31:09,260 DEBUG {conn-10005} pool-connect
2019-08-04 00:31:09,260 DEBUG {conn-10005} pool-recycle
2019-08-04 00:31:15,912 DEBUG {conn-10005} pool-connect
2019-08-04 00:31:15,996 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 00:31:16,002 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 00:31:16,002 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 00:31:16,004 DEBUG {conn-10005, pstmt-20000} executed. 4.916433 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 00:31:16,007 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 00:31:16,008 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 00:31:16,013 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 84, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 00:31:16,015 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 00:31:16,015 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 00:31:16,015 DEBUG {conn-10005} pool-recycle
2019-08-04 00:31:16,016 DEBUG {conn-10005} pool-connect
2019-08-04 00:31:16,019 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 00:31:16,021 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 85, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 00:31:16,021 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 00:31:16,030 DEBUG {conn-10005, pstmt-20001} executed. 8.405331 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 00:31:16,030 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 00:31:16,030 DEBUG {conn-10005} pool-recycle
2019-08-04 00:31:16,062 DEBUG {conn-10005} pool-connect
2019-08-04 00:31:16,062 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 00:31:16,062 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 00:31:16,062 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 00:31:16,063 DEBUG {conn-10005, pstmt-20002} executed. 0.684209 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 00:31:16,063 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 00:31:16,063 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 00:31:16,063 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 00:31:16,064 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 00:31:16,064 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 00:31:16,064 DEBUG {conn-10005} pool-recycle
2019-08-04 00:31:16,077 DEBUG {conn-10005} pool-connect
2019-08-04 00:31:16,078 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:31:16,078 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 00:31:16,078 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 00:31:16,079 DEBUG {conn-10005, pstmt-20003} executed. 0.631774 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:31:16,079 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 00:31:16,079 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 00:31:16,079 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 00:31:16,080 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 00:31:16,080 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 00:31:16,080 DEBUG {conn-10005} pool-recycle
2019-08-04 00:31:16,081 DEBUG {conn-10005} pool-connect
2019-08-04 00:31:16,083 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 00:31:16,084 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 00:31:16,084 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 00:31:16,084 DEBUG {conn-10005, pstmt-20004} executed. 0.570602 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 00:31:16,084 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 00:31:16,085 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 00:31:16,085 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 00:31:16,085 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 00:31:16,085 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 00:31:16,085 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 00:31:16,086 DEBUG {conn-10005} pool-recycle
2019-08-04 00:31:16,086 DEBUG {conn-10005} pool-connect
2019-08-04 00:31:16,086 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 00:31:16,086 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 00:31:16,086 DEBUG {conn-10005, pstmt-20003} executed. 0.409703 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 00:31:16,086 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 00:31:16,086 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 00:31:16,086 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 00:31:16,086 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 00:31:16,087 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 00:31:16,087 DEBUG {conn-10005} pool-recycle
2019-08-04 00:31:16,089 DEBUG {conn-10005} pool-connect
2019-08-04 00:31:16,089 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 00:31:16,089 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 00:31:16,089 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 00:31:16,090 DEBUG {conn-10005, pstmt-20005} executed. 0.564434 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 00:31:16,090 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 00:31:16,090 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 00:31:16,090 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 00:31:16,090 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 00:31:16,090 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 00:31:16,091 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 00:31:16,091 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 00:31:16,091 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 00:31:16,091 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 00:31:16,091 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 00:31:16,092 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 00:31:16,092 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 00:31:16,092 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 00:31:16,092 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 00:31:16,092 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 00:31:16,092 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 00:31:16,092 DEBUG {conn-10005} pool-recycle
2019-08-04 07:42:53,527 DEBUG {conn-10001,procId-315} connected
2019-08-04 07:42:53,533 DEBUG {conn-10002,procId-316} connected
2019-08-04 07:42:53,538 DEBUG {conn-10003,procId-317} connected
2019-08-04 07:42:53,542 DEBUG {conn-10004,procId-318} connected
2019-08-04 07:42:53,546 DEBUG {conn-10005,procId-319} connected
2019-08-04 07:42:53,550 DEBUG {conn-10005} pool-connect
2019-08-04 07:42:53,551 DEBUG {conn-10005} pool-recycle
2019-08-04 07:42:53,557 DEBUG {conn-10005} pool-connect
2019-08-04 07:42:53,559 DEBUG {conn-10005} pool-recycle
2019-08-04 07:42:53,850 DEBUG {conn-10005} pool-connect
2019-08-04 07:42:53,880 DEBUG {conn-10005} pool-recycle
2019-08-04 07:42:54,367 INFO [Black Bolt] modules [], plugins [], sites []
2019-08-04 07:42:54,377 DEBUG [Black Bolt] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 07:42:54,386 DEBUG [Black Bolt] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 07:42:54,395 DEBUG [Black Bolt] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 07:42:54,396 DEBUG [Black Bolt] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 07:42:54,396 DEBUG [Black Bolt] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 07:42:54,396 DEBUG [Black Bolt] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 07:42:54,396 DEBUG [Black Bolt] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 07:42:54,396 DEBUG [Black Bolt] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 07:42:54,396 DEBUG [Black Bolt] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 07:42:54,396 DEBUG [Black Bolt] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 07:42:54,396 DEBUG [Black Bolt] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 07:42:54,396 DEBUG [Black Bolt] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 07:42:54,396 DEBUG [Black Bolt] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 07:42:54,396 DEBUG [Black Bolt] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 07:42:54,397 DEBUG [Black Bolt] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 07:42:54,397 DEBUG [Black Bolt] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 07:42:55,486 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 07:42:55,501 DEBUG using gathering [true]
2019-08-04 07:42:55,518 DEBUG [Black Bolt] node_sampler_interval[5s]
2019-08-04 07:42:55,527 DEBUG Using select timeout of 500
2019-08-04 07:42:55,527 DEBUG Epoll-bug workaround enabled = false
2019-08-04 07:42:55,561 DEBUG [Black Bolt] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 07:42:55,585 DEBUG [Black Bolt] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 07:42:55,617 DEBUG [Black Bolt] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 07:42:56,175 DEBUG {conn-10005} pool-connect
2019-08-04 07:42:56,176 DEBUG {conn-10005} pool-recycle
2019-08-04 07:43:02,486 DEBUG {conn-10005} pool-connect
2019-08-04 07:43:02,568 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 07:43:02,575 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 07:43:02,575 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 07:43:02,578 DEBUG {conn-10005, pstmt-20000} executed. 5.064481 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 07:43:02,581 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 07:43:02,581 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 07:43:02,585 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 85, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 07:43:02,587 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 07:43:02,587 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 07:43:02,588 DEBUG {conn-10005} pool-recycle
2019-08-04 07:43:02,589 DEBUG {conn-10005} pool-connect
2019-08-04 07:43:02,592 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 07:43:02,595 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 86, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 07:43:02,595 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 07:43:02,598 DEBUG {conn-10005, pstmt-20001} executed. 2.597526 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 07:43:02,598 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 07:43:02,598 DEBUG {conn-10005} pool-recycle
2019-08-04 07:43:02,631 DEBUG {conn-10005} pool-connect
2019-08-04 07:43:02,632 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 07:43:02,632 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 07:43:02,632 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 07:43:02,633 DEBUG {conn-10005, pstmt-20002} executed. 0.603502 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 07:43:02,633 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 07:43:02,633 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 07:43:02,633 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 07:43:02,633 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 07:43:02,633 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 07:43:02,633 DEBUG {conn-10005} pool-recycle
2019-08-04 07:43:02,646 DEBUG {conn-10005} pool-connect
2019-08-04 07:43:02,647 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 07:43:02,647 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 07:43:02,648 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 07:43:02,648 DEBUG {conn-10005, pstmt-20003} executed. 0.63743 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 07:43:02,648 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 07:43:02,648 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 07:43:02,648 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 07:43:02,649 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 07:43:02,649 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 07:43:02,649 DEBUG {conn-10005} pool-recycle
2019-08-04 07:43:02,650 DEBUG {conn-10005} pool-connect
2019-08-04 07:43:02,652 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 07:43:02,653 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 07:43:02,653 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 07:43:02,653 DEBUG {conn-10005, pstmt-20004} executed. 0.612755 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 07:43:02,653 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 07:43:02,653 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 07:43:02,654 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 07:43:02,654 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 07:43:02,654 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 07:43:02,654 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 07:43:02,654 DEBUG {conn-10005} pool-recycle
2019-08-04 07:43:02,654 DEBUG {conn-10005} pool-connect
2019-08-04 07:43:02,655 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 07:43:02,655 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 07:43:02,655 DEBUG {conn-10005, pstmt-20003} executed. 0.433349 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 07:43:02,655 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 07:43:02,655 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 07:43:02,655 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 07:43:02,655 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 07:43:02,655 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 07:43:02,655 DEBUG {conn-10005} pool-recycle
2019-08-04 07:43:02,658 DEBUG {conn-10005} pool-connect
2019-08-04 07:43:02,658 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 07:43:02,658 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 07:43:02,658 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 07:43:02,659 DEBUG {conn-10005, pstmt-20005} executed. 0.613269 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 07:43:02,659 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 07:43:02,659 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 07:43:02,659 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 07:43:02,659 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 07:43:02,659 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 07:43:02,660 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 07:43:02,660 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 07:43:02,660 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 07:43:02,660 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 07:43:02,661 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 07:43:02,661 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 07:43:02,661 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 07:43:02,661 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 07:43:02,661 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 07:43:02,662 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 07:43:02,662 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 07:43:02,662 DEBUG {conn-10005} pool-recycle
2019-08-04 07:45:13,753 DEBUG {conn-10001,procId-320} connected
2019-08-04 07:45:13,758 DEBUG {conn-10002,procId-321} connected
2019-08-04 07:45:13,763 DEBUG {conn-10003,procId-322} connected
2019-08-04 07:45:13,767 DEBUG {conn-10004,procId-323} connected
2019-08-04 07:45:13,777 DEBUG {conn-10005,procId-324} connected
2019-08-04 07:45:13,781 DEBUG {conn-10005} pool-connect
2019-08-04 07:45:13,782 DEBUG {conn-10005} pool-recycle
2019-08-04 07:45:13,789 DEBUG {conn-10005} pool-connect
2019-08-04 07:45:13,791 DEBUG {conn-10005} pool-recycle
2019-08-04 07:45:14,081 DEBUG {conn-10005} pool-connect
2019-08-04 07:45:14,113 DEBUG {conn-10005} pool-recycle
2019-08-04 07:45:14,625 INFO [Tessa] modules [], plugins [], sites []
2019-08-04 07:45:14,635 DEBUG [Tessa] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 07:45:14,644 DEBUG [Tessa] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 07:45:14,653 DEBUG [Tessa] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 07:45:14,654 DEBUG [Tessa] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 07:45:14,654 DEBUG [Tessa] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 07:45:14,654 DEBUG [Tessa] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 07:45:14,654 DEBUG [Tessa] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 07:45:14,654 DEBUG [Tessa] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 07:45:14,654 DEBUG [Tessa] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 07:45:14,655 DEBUG [Tessa] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 07:45:14,655 DEBUG [Tessa] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 07:45:14,655 DEBUG [Tessa] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 07:45:14,655 DEBUG [Tessa] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 07:45:14,655 DEBUG [Tessa] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 07:45:14,655 DEBUG [Tessa] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 07:45:14,655 DEBUG [Tessa] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 07:45:15,797 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 07:45:15,811 DEBUG using gathering [true]
2019-08-04 07:45:15,829 DEBUG [Tessa] node_sampler_interval[5s]
2019-08-04 07:45:15,839 DEBUG Using select timeout of 500
2019-08-04 07:45:15,839 DEBUG Epoll-bug workaround enabled = false
2019-08-04 07:45:15,875 DEBUG [Tessa] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 07:45:15,898 DEBUG [Tessa] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 07:45:15,926 DEBUG [Tessa] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 07:45:16,500 DEBUG {conn-10005} pool-connect
2019-08-04 07:45:16,500 DEBUG {conn-10005} pool-recycle
2019-08-04 07:45:21,974 DEBUG {conn-10005} pool-connect
2019-08-04 07:45:22,051 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 07:45:22,057 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 07:45:22,057 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 07:45:22,060 DEBUG {conn-10005, pstmt-20000} executed. 4.860915 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 07:45:22,063 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 07:45:22,063 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 07:45:22,068 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 86, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 07:45:22,069 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 07:45:22,069 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 07:45:22,070 DEBUG {conn-10005} pool-recycle
2019-08-04 07:45:22,070 DEBUG {conn-10005} pool-connect
2019-08-04 07:45:22,073 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 07:45:22,076 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 87, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 07:45:22,076 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 07:45:22,086 DEBUG {conn-10005, pstmt-20001} executed. 9.116785 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 07:45:22,086 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 07:45:22,086 DEBUG {conn-10005} pool-recycle
2019-08-04 07:45:22,117 DEBUG {conn-10005} pool-connect
2019-08-04 07:45:22,118 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 07:45:22,118 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 07:45:22,118 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 07:45:22,118 DEBUG {conn-10005, pstmt-20002} executed. 0.630232 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 07:45:22,119 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 07:45:22,119 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 07:45:22,119 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 07:45:22,119 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 07:45:22,119 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 07:45:22,119 DEBUG {conn-10005} pool-recycle
2019-08-04 07:45:22,131 DEBUG {conn-10005} pool-connect
2019-08-04 07:45:22,132 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 07:45:22,133 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 07:45:22,133 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 07:45:22,133 DEBUG {conn-10005, pstmt-20003} executed. 0.654394 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 07:45:22,134 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 07:45:22,134 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 07:45:22,134 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 07:45:22,135 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 07:45:22,135 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 07:45:22,135 DEBUG {conn-10005} pool-recycle
2019-08-04 07:45:22,136 DEBUG {conn-10005} pool-connect
2019-08-04 07:45:22,138 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 07:45:22,138 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 07:45:22,138 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 07:45:22,139 DEBUG {conn-10005, pstmt-20004} executed. 0.602474 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 07:45:22,139 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 07:45:22,139 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 07:45:22,139 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 07:45:22,140 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 07:45:22,140 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 07:45:22,140 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 07:45:22,140 DEBUG {conn-10005} pool-recycle
2019-08-04 07:45:22,140 DEBUG {conn-10005} pool-connect
2019-08-04 07:45:22,140 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 07:45:22,140 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 07:45:22,141 DEBUG {conn-10005, pstmt-20003} executed. 0.483213 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 07:45:22,141 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 07:45:22,141 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 07:45:22,141 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 07:45:22,141 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 07:45:22,141 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 07:45:22,141 DEBUG {conn-10005} pool-recycle
2019-08-04 07:45:22,144 DEBUG {conn-10005} pool-connect
2019-08-04 07:45:22,144 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 07:45:22,144 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 07:45:22,144 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 07:45:22,145 DEBUG {conn-10005, pstmt-20005} executed. 0.582426 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 07:45:22,145 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 07:45:22,145 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 07:45:22,145 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 07:45:22,145 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 07:45:22,145 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 07:45:22,145 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 07:45:22,146 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 07:45:22,146 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 07:45:22,146 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 07:45:22,146 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 07:45:22,146 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 07:45:22,146 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 07:45:22,147 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 07:45:22,147 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 07:45:22,147 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 07:45:22,147 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 07:45:22,147 DEBUG {conn-10005} pool-recycle
2019-08-04 10:49:17,026 DEBUG {conn-10001,procId-325} connected
2019-08-04 10:49:17,032 DEBUG {conn-10002,procId-326} connected
2019-08-04 10:49:17,036 DEBUG {conn-10003,procId-327} connected
2019-08-04 10:49:17,040 DEBUG {conn-10004,procId-328} connected
2019-08-04 10:49:17,045 DEBUG {conn-10005,procId-329} connected
2019-08-04 10:49:17,049 DEBUG {conn-10005} pool-connect
2019-08-04 10:49:17,051 DEBUG {conn-10005} pool-recycle
2019-08-04 10:49:17,058 DEBUG {conn-10005} pool-connect
2019-08-04 10:49:17,061 DEBUG {conn-10005} pool-recycle
2019-08-04 10:49:17,355 DEBUG {conn-10005} pool-connect
2019-08-04 10:49:17,390 DEBUG {conn-10005} pool-recycle
2019-08-04 10:49:17,916 INFO [Cobra] modules [], plugins [], sites []
2019-08-04 10:49:17,927 DEBUG [Cobra] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 10:49:17,934 DEBUG [Cobra] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 10:49:17,944 DEBUG [Cobra] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 10:49:17,944 DEBUG [Cobra] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 10:49:17,944 DEBUG [Cobra] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 10:49:17,944 DEBUG [Cobra] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 10:49:17,945 DEBUG [Cobra] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 10:49:17,945 DEBUG [Cobra] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 10:49:17,945 DEBUG [Cobra] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 10:49:17,945 DEBUG [Cobra] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 10:49:17,945 DEBUG [Cobra] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 10:49:17,945 DEBUG [Cobra] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 10:49:17,945 DEBUG [Cobra] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 10:49:17,945 DEBUG [Cobra] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 10:49:17,945 DEBUG [Cobra] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 10:49:17,945 DEBUG [Cobra] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 10:49:19,096 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 10:49:19,113 DEBUG using gathering [true]
2019-08-04 10:49:19,131 DEBUG [Cobra] node_sampler_interval[5s]
2019-08-04 10:49:19,141 DEBUG Using select timeout of 500
2019-08-04 10:49:19,141 DEBUG Epoll-bug workaround enabled = false
2019-08-04 10:49:19,181 DEBUG [Cobra] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 10:49:19,210 DEBUG [Cobra] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 10:49:19,253 DEBUG [Cobra] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 10:49:19,917 DEBUG {conn-10005} pool-connect
2019-08-04 10:49:19,918 DEBUG {conn-10005} pool-recycle
2019-08-04 10:49:42,578 DEBUG {conn-10005} pool-connect
2019-08-04 10:49:42,663 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 10:49:42,669 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 10:49:42,669 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 10:49:42,672 DEBUG {conn-10005, pstmt-20000} executed. 5.504512 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 10:49:42,676 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 10:49:42,677 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 10:49:42,681 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 87, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 10:49:42,682 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 10:49:42,683 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 10:49:42,683 DEBUG {conn-10005} pool-recycle
2019-08-04 10:49:42,683 DEBUG {conn-10005} pool-connect
2019-08-04 10:49:42,686 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 10:49:42,689 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 88, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 10:49:42,689 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 10:49:42,692 DEBUG {conn-10005, pstmt-20001} executed. 2.45873 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 10:49:42,692 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 10:49:42,692 DEBUG {conn-10005} pool-recycle
2019-08-04 10:49:42,725 DEBUG {conn-10005} pool-connect
2019-08-04 10:49:42,726 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 10:49:42,726 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 10:49:42,726 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 10:49:42,727 DEBUG {conn-10005, pstmt-20002} executed. 0.877494 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 10:49:42,727 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 10:49:42,727 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 10:49:42,727 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 10:49:42,727 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 10:49:42,727 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 10:49:42,728 DEBUG {conn-10005} pool-recycle
2019-08-04 10:49:42,740 DEBUG {conn-10005} pool-connect
2019-08-04 10:49:42,742 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 10:49:42,742 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 10:49:42,742 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 10:49:42,743 DEBUG {conn-10005, pstmt-20003} executed. 0.87184 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 10:49:42,743 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 10:49:42,743 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 10:49:42,743 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 10:49:42,745 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 10:49:42,745 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 10:49:42,745 DEBUG {conn-10005} pool-recycle
2019-08-04 10:49:42,746 DEBUG {conn-10005} pool-connect
2019-08-04 10:49:42,748 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 10:49:42,748 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 10:49:42,748 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 10:49:42,749 DEBUG {conn-10005, pstmt-20004} executed. 0.634345 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 10:49:42,749 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 10:49:42,749 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 10:49:42,749 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 10:49:42,750 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 10:49:42,750 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 10:49:42,750 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 10:49:42,750 DEBUG {conn-10005} pool-recycle
2019-08-04 10:49:42,750 DEBUG {conn-10005} pool-connect
2019-08-04 10:49:42,750 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 10:49:42,750 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 10:49:42,751 DEBUG {conn-10005, pstmt-20003} executed. 0.439004 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 10:49:42,751 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 10:49:42,751 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 10:49:42,751 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 10:49:42,751 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 10:49:42,751 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 10:49:42,751 DEBUG {conn-10005} pool-recycle
2019-08-04 10:49:42,753 DEBUG {conn-10005} pool-connect
2019-08-04 10:49:42,753 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 10:49:42,754 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 10:49:42,754 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 10:49:42,754 DEBUG {conn-10005, pstmt-20005} executed. 0.565976 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 10:49:42,754 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 10:49:42,754 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 10:49:42,754 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 10:49:42,755 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 10:49:42,755 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 10:49:42,755 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 10:49:42,755 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 10:49:42,755 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 10:49:42,756 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 10:49:42,756 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 10:49:42,756 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 10:49:42,756 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 10:49:42,756 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 10:49:42,756 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 10:49:42,757 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 10:49:42,757 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 10:49:42,757 DEBUG {conn-10005} pool-recycle
2019-08-04 11:05:45,198 DEBUG {conn-10005} pool-connect
2019-08-04 11:05:45,199 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 11:05:45,199 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:05:45,199 DEBUG {conn-10005, pstmt-20000} executed. 0.963341 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:05:45,200 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-04 11:05:45,200 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:05:45,200 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 88, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 11:05:45,201 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-04 11:05:45,201 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:05:45,202 DEBUG {conn-10005} pool-recycle
2019-08-04 11:05:45,202 DEBUG {conn-10005} pool-connect
2019-08-04 11:05:45,202 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 89, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 11:05:45,202 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:05:45,211 DEBUG {conn-10005, pstmt-20001} executed. 8.552351 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:05:45,211 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:05:45,211 DEBUG {conn-10005} pool-recycle
2019-08-04 11:05:45,214 DEBUG {conn-10005} pool-connect
2019-08-04 11:05:45,214 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 11:05:45,214 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:05:45,215 DEBUG {conn-10005, pstmt-20002} executed. 0.559293 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:05:45,215 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-04 11:05:45,215 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:05:45,215 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:05:45,216 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-04 11:05:45,216 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:05:45,216 DEBUG {conn-10005} pool-recycle
2019-08-04 11:05:45,216 DEBUG {conn-10005} pool-connect
2019-08-04 11:05:45,216 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:05:45,216 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:05:45,216 DEBUG {conn-10005, pstmt-20003} executed. 0.42204 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:05:45,217 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-04 11:05:45,217 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-04 11:05:45,217 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [2]
2019-08-04 11:05:45,217 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-04 11:05:45,217 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:05:45,217 DEBUG {conn-10005} pool-recycle
2019-08-04 11:05:45,218 DEBUG {conn-10005} pool-connect
2019-08-04 11:05:45,218 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 11:05:45,218 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:05:45,219 DEBUG {conn-10005, pstmt-20004} executed. 0.852305 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:05:45,219 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-04 11:05:45,219 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:05:45,219 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 11:05:45,220 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 11:05:45,220 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-04 11:05:45,220 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:05:45,220 DEBUG {conn-10005} pool-recycle
2019-08-04 11:05:45,221 DEBUG {conn-10005} pool-connect
2019-08-04 11:05:45,221 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:05:45,221 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:05:45,221 DEBUG {conn-10005, pstmt-20003} executed. 0.771084 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:05:45,221 DEBUG {conn-10005, pstmt-20003, rs-50010} open
2019-08-04 11:05:45,221 DEBUG {conn-10005, pstmt-20003, rs-50010} Header: [count(*)]
2019-08-04 11:05:45,221 DEBUG {conn-10005, pstmt-20003, rs-50010} Result: [2]
2019-08-04 11:05:45,221 DEBUG {conn-10005, pstmt-20003, rs-50010} closed
2019-08-04 11:05:45,221 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:05:45,221 DEBUG {conn-10005} pool-recycle
2019-08-04 11:05:45,222 DEBUG {conn-10005} pool-connect
2019-08-04 11:05:45,222 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:05:45,222 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:05:45,222 DEBUG {conn-10005, pstmt-20005} executed. 0.688835 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:05:45,223 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-04 11:05:45,223 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:05:45,223 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:05:45,223 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:05:45,223 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:05:45,223 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:05:45,224 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:05:45,225 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:05:45,225 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:05:45,225 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:05:45,225 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:05:45,225 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:05:45,226 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:05:45,226 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:05:45,226 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-04 11:05:45,226 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:05:45,226 DEBUG {conn-10005} pool-recycle
2019-08-04 11:13:54,015 DEBUG {conn-10001,procId-330} connected
2019-08-04 11:13:54,025 DEBUG {conn-10002,procId-331} connected
2019-08-04 11:13:54,031 DEBUG {conn-10003,procId-332} connected
2019-08-04 11:13:54,038 DEBUG {conn-10004,procId-333} connected
2019-08-04 11:13:54,044 DEBUG {conn-10005,procId-334} connected
2019-08-04 11:13:54,050 DEBUG {conn-10005} pool-connect
2019-08-04 11:13:54,053 DEBUG {conn-10005} pool-recycle
2019-08-04 11:13:54,062 DEBUG {conn-10005} pool-connect
2019-08-04 11:13:54,064 DEBUG {conn-10005} pool-recycle
2019-08-04 11:13:54,442 DEBUG {conn-10005} pool-connect
2019-08-04 11:13:54,488 DEBUG {conn-10005} pool-recycle
2019-08-04 11:13:55,169 INFO [Flambe] modules [], plugins [], sites []
2019-08-04 11:13:55,183 DEBUG [Flambe] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 11:13:55,195 DEBUG [Flambe] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 11:13:55,206 DEBUG [Flambe] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 11:13:55,207 DEBUG [Flambe] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 11:13:55,208 DEBUG [Flambe] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 11:13:55,208 DEBUG [Flambe] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:13:55,208 DEBUG [Flambe] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 11:13:55,208 DEBUG [Flambe] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 11:13:55,208 DEBUG [Flambe] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:13:55,208 DEBUG [Flambe] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 11:13:55,208 DEBUG [Flambe] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:13:55,208 DEBUG [Flambe] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 11:13:55,208 DEBUG [Flambe] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 11:13:55,208 DEBUG [Flambe] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 11:13:55,209 DEBUG [Flambe] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 11:13:55,209 DEBUG [Flambe] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:13:56,699 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 11:13:56,719 DEBUG using gathering [true]
2019-08-04 11:13:56,743 DEBUG [Flambe] node_sampler_interval[5s]
2019-08-04 11:13:56,756 DEBUG Using select timeout of 500
2019-08-04 11:13:56,756 DEBUG Epoll-bug workaround enabled = false
2019-08-04 11:13:56,803 DEBUG [Flambe] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:13:56,828 DEBUG [Flambe] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:13:56,868 DEBUG [Flambe] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:13:57,611 DEBUG {conn-10005} pool-connect
2019-08-04 11:13:57,611 DEBUG {conn-10005} pool-recycle
2019-08-04 11:14:03,881 DEBUG {conn-10005} pool-connect
2019-08-04 11:14:03,973 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:14:03,980 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 11:14:03,980 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:14:03,983 DEBUG {conn-10005, pstmt-20000} executed. 5.977958 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:14:03,987 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 11:14:03,988 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:14:03,993 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 89, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 11:14:03,994 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 11:14:03,995 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:14:03,995 DEBUG {conn-10005} pool-recycle
2019-08-04 11:14:03,996 DEBUG {conn-10005} pool-connect
2019-08-04 11:14:03,999 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:14:04,002 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 90, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 11:14:04,002 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:14:04,011 DEBUG {conn-10005, pstmt-20001} executed. 9.287966 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:14:04,011 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:14:04,012 DEBUG {conn-10005} pool-recycle
2019-08-04 11:14:04,052 DEBUG {conn-10005} pool-connect
2019-08-04 11:14:04,052 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:14:04,053 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 11:14:04,053 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:14:04,053 DEBUG {conn-10005, pstmt-20002} executed. 0.685237 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:14:04,053 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 11:14:04,053 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:14:04,054 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:14:04,054 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 11:14:04,054 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:14:04,054 DEBUG {conn-10005} pool-recycle
2019-08-04 11:14:04,069 DEBUG {conn-10005} pool-connect
2019-08-04 11:14:04,071 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:14:04,071 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:14:04,071 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:14:04,072 DEBUG {conn-10005, pstmt-20003} executed. 0.721221 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:14:04,072 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 11:14:04,072 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 11:14:04,072 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 11:14:04,073 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 11:14:04,073 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:14:04,073 DEBUG {conn-10005} pool-recycle
2019-08-04 11:14:04,074 DEBUG {conn-10005} pool-connect
2019-08-04 11:14:04,077 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:14:04,078 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 11:14:04,078 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:14:04,078 DEBUG {conn-10005, pstmt-20004} executed. 0.721221 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:14:04,078 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 11:14:04,078 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:14:04,079 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 11:14:04,080 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 11:14:04,080 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 11:14:04,080 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:14:04,080 DEBUG {conn-10005} pool-recycle
2019-08-04 11:14:04,081 DEBUG {conn-10005} pool-connect
2019-08-04 11:14:04,081 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:14:04,081 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:14:04,082 DEBUG {conn-10005, pstmt-20003} executed. 0.674956 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:14:04,082 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 11:14:04,082 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 11:14:04,082 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 11:14:04,082 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 11:14:04,082 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:14:04,082 DEBUG {conn-10005} pool-recycle
2019-08-04 11:14:04,085 DEBUG {conn-10005} pool-connect
2019-08-04 11:14:04,086 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:14:04,086 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:14:04,086 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:14:04,086 DEBUG {conn-10005, pstmt-20005} executed. 0.651309 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:14:04,087 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 11:14:04,087 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:14:04,087 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:14:04,087 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:14:04,087 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:14:04,087 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:14:04,088 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:14:04,088 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:14:04,088 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:14:04,088 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:14:04,089 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:14:04,089 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:14:04,089 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:14:04,089 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:14:04,089 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 11:14:04,089 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:14:04,089 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:03,076 DEBUG {conn-10001,procId-335} connected
2019-08-04 11:15:03,084 DEBUG {conn-10002,procId-336} connected
2019-08-04 11:15:03,089 DEBUG {conn-10003,procId-337} connected
2019-08-04 11:15:03,094 DEBUG {conn-10004,procId-338} connected
2019-08-04 11:15:03,100 DEBUG {conn-10005,procId-339} connected
2019-08-04 11:15:03,106 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:03,108 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:03,117 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:03,119 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:03,469 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:03,506 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:04,093 INFO [Cybelle] modules [], plugins [], sites []
2019-08-04 11:15:04,105 DEBUG [Cybelle] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 11:15:04,115 DEBUG [Cybelle] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 11:15:04,125 DEBUG [Cybelle] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 11:15:04,126 DEBUG [Cybelle] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 11:15:04,126 DEBUG [Cybelle] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 11:15:04,126 DEBUG [Cybelle] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:15:04,126 DEBUG [Cybelle] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 11:15:04,126 DEBUG [Cybelle] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 11:15:04,126 DEBUG [Cybelle] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:15:04,126 DEBUG [Cybelle] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 11:15:04,126 DEBUG [Cybelle] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:15:04,127 DEBUG [Cybelle] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 11:15:04,127 DEBUG [Cybelle] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 11:15:04,127 DEBUG [Cybelle] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 11:15:04,127 DEBUG [Cybelle] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 11:15:04,127 DEBUG [Cybelle] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:15:05,500 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 11:15:05,519 DEBUG using gathering [true]
2019-08-04 11:15:05,541 DEBUG [Cybelle] node_sampler_interval[5s]
2019-08-04 11:15:05,554 DEBUG Using select timeout of 500
2019-08-04 11:15:05,555 DEBUG Epoll-bug workaround enabled = false
2019-08-04 11:15:05,597 DEBUG [Cybelle] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:15:05,620 DEBUG [Cybelle] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:15:05,651 DEBUG [Cybelle] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:15:06,432 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:06,432 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:15,203 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:15,284 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:15:15,291 DEBUG {conn-10005, pstmt-20000} Parameters : [2]
2019-08-04 11:15:15,291 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:15:15,293 DEBUG {conn-10005, pstmt-20000} executed. 5.106119 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:15:15,296 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 11:15:15,297 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:15:15,301 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 27, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)

<h2 id="ssm4">从零开始搭建一个精美且实用的管理后台</h2>

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

<h2 id="ssm3">SSM整合进阶篇</h2>

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)

<h2 id="idea">Intellij IDEA相关笔记</h2>

- [如何查看IntelliJ IDEA的版本信息](http://www.cnblogs.com/han-1034683568/p/9135192.html)
- [Plugin 'Lombok Plugin' is incompatible with this installation](http://www.cnblogs.com/han-1034683568/p/9135074.html)
- [IDEA安装Lombok插件失败的解决方案](http://www.cnblogs.com/han-1034683568/p/9134980.html)
- [Intellij IDEA debug模式下项目启动慢/无法启动的事件解决过程记录](http://www.cnblogs.com/han-1034683568/p/8603588.html)
- [Intellij IDEA查看所有断点](http://www.cnblogs.com/han-1034683568/p/8603110.html)
- [IntelliJ IDEA 报错：Error:java: 未结束的字符串文字](http://www.cnblogs.com/han-1034683568/p/6439723.html)
- [IntelliJ IDEA 常用快捷键mac版](http://www.cnblogs.com/han-1034683568/p/6492342.html)

<h2 id="diary">日常手记</h2>

- [开启mac上印象笔记的代码块](http://www.cnblogs.com/han-1034683568/p/9021263.html)
- [程序员，你怎么这么忙？](http://www.cnblogs.com/han-1034683568/p/8968959.html)
- [新购阿里云服务器ECS创建之后无法ssh连接的问题处理](http://www.cnblogs.com/han-1034683568/p/8856560.html)
- [CentOS 7.2:Failed to start IPv4 firewall with iptables](http://www.cnblogs.com/han-1034683568/p/8854613.html)
- [JDK8 stream toMap() java.lang.IllegalStateException: Duplicate key异常解决(key重复)](http://www.cnblogs.com/han-1034683568/p/8624447.html)
- [我在博客园的这一年小记](http://www.cnblogs.com/han-1034683568/p/8443428.html)
- [记录一下我的2017年阅读书单](http://www.cnblogs.com/han-1034683568/p/8432261.html)
- [2017总结](http://www.cnblogs.com/han-1034683568/p/8337394.html)
- [微信公众号问题：{"errcode":40125,"errmsg":"invalid appsecret, view more at http:\/\/t.cn\/LOEdzVq, hints: [ req_id: kL8J90219sg58 ]"}](http://www.cnblogs.com/han-1034683568/p/8286777.html)
- [git删除本地分支](http://www.cnblogs.com/han-1034683568/p/8241369.html)
- [阿里巴巴Java开发规约插件p3c详细教程及使用感受](http://www.cnblogs.com/han-1034683568/p/7682594.html)
- [阿里官方Java代码规范标准《阿里巴巴Java开发手册 终极版 v1.3.0》下载](http://www.cnblogs.com/han-1034683568/p/7680354.html)
- [程序员视角：鹿晗公布恋情是如何把微博搞炸的？](http://www.cnblogs.com/han-1034683568/p/7642213.html)
- [could not resolve host: github.com 问题解决办法](http://www.cnblogs.com/han-1034683568/p/6457894.html)
- [使用git恢复未提交的误删数据](http://www.cnblogs.com/han-1034683568/p/6444937.html)
- [springboot开启access_log日志输出](http://www.cnblogs.com/han-1034683568/p/6963144.html)
- [Error: Cannot find module 'gulp-clone'问题的解决](http://www.cnblogs.com/han-1034683568/p/6479288.html)
- [Markdown语法讲解及MWeb使用教程](http://www.cnblogs.com/han-1034683568/p/6556348.html)
- [javax.net.ssl.SSLHandshakeException: No appropriate protocol (protocol is disabled or cipher suites are inappropriate)](http://www.cnblogs.com/han-1034683568/p/7009096.html)
- [org.springframework.data.redis.serializer.SerializationException: Cannot serialize;](http://www.cnblogs.com/han-1034683568/p/7994322.html)

<h2 id="13blog">My Blog</h2>

- [Docker+SpringBoot+Mybatis+thymeleaf的Java博客系统开源啦](http://www.cnblogs.com/han-1034683568/p/6840493.html)
- [My-Blog搭建过程：如何让一个网站从零到可以上线访问](http://www.cnblogs.com/han-1034683568/p/6885545.html)
- [将数据的初始化放到docker中的整个工作过程(问题记录)](http://www.cnblogs.com/han-1034683568/p/6941313.html)
- [利用Dockerfile构建mysql镜像并实现数据的初始化及权限设置](http://www.cnblogs.com/han-1034683568/p/6941337.html)
- [解决Docker容器时区及时间不同步的问题](http://www.cnblogs.com/han-1034683568/p/6957132.html)
- [Java开源博客My-Blog之docker容器组件化修改](http://www.cnblogs.com/han-1034683568/p/7102765.html)
- [运行shell脚本时报错"\[\[ : not found"解决方法](http://www.cnblogs.com/han-1034683568/p/7211392.html)
- [shell脚本中字符串的常见操作及"command not found"报错处理(附源码)](http://www.cnblogs.com/han-1034683568/p/7217047.html)
- [Java开源博客My-Blog之mysql容器重复初始化的严重bug修复过程](http://www.cnblogs.com/han-1034683568/p/7231895.html)
- [Mybatis-Generator生成Mapper文件中if test="criteria.valid"的问题解答](http://www.cnblogs.com/han-1034683568/p/7281474.html)
- [Springboot与Thymeleaf模板引擎整合基础教程](http://www.cnblogs.com/han-1034683568/p/7520012.html)
- [thymeleaf模板引擎调用java类中的方法](http://www.cnblogs.com/han-1034683568/p/7527564.html)

<h2 id="message-attack">短信接口攻击事件</h2>

- [短信发送接口被恶意访问的网络攻击事件(一)紧张的遭遇战险胜](http://www.cnblogs.com/han-1034683568/p/6973269.html)
- [短信发送接口被恶意访问的网络攻击事件(二)肉搏战-阻止恶意请求](http://www.cnblogs.com/han-1034683568/p/7001785.html)
- [短信发送接口被恶意访问的网络攻击事件(三)定位恶意IP的日志分析脚本](http://www.cnblogs.com/han-1034683568/p/7040417.html)
- [短信发送接口被恶意访问的网络攻击事件(四)完结篇--搭建WAF清理战场](http://www.cnblogs.com/han-1034683568/p/7090409.html)

<h2 id="read">读书笔记</h2>

- [《实战java高并发程序设计》源码整理及读书笔记](http://www.cnblogs.com/han-1034683568/p/6918160.html)
- [《大型网站技术架构:核心原理与案例分析》读书笔记](http://www.cnblogs.com/han-1034683568/p/7597564.html)
- [大型网站技术架构(二)--大型网站架构演化](http://www.cnblogs.com/han-1034683568/p/8423447.html)
- [大型网站技术架构(三)--架构模式](http://www.cnblogs.com/han-1034683568/p/8677349.html)
- [大型网站技术架构(四)--核心架构要素](http://www.cnblogs.com/han-1034683568/p/9049758.html)

<h2 id="ssm2">SSM整合优化篇</h2>

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)

<h2 id="ssm1">SSM整合基础篇</h2>

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简述及技术选型介绍](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Maven构建项目速度太慢的解决办法](http://www.cnblogs.com/han-1034683568/p/6498637.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)]
2019-08-04 11:15:15,304 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 11:15:15,304 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:15:15,305 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:15,305 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:15,308 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:15:15,310 DEBUG {conn-10005, pstmt-20001} Parameters : [文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, , 2]
2019-08-04 11:15:15,310 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:15:15,319 DEBUG {conn-10005, pstmt-20001} executed. 8.519966 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:15:15,319 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:15:15,319 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:15,360 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:15,361 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:15:15,361 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 11:15:15,361 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:15:15,361 DEBUG {conn-10005, pstmt-20002} executed. 0.536161 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:15:15,361 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 11:15:15,362 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:15:15,362 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:15:15,362 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 11:15:15,362 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:15:15,362 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:15,375 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:15,376 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:15:15,376 DEBUG {conn-10005, pstmt-20003} Parameters : [2, 1]
2019-08-04 11:15:15,376 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:15:15,377 DEBUG {conn-10005, pstmt-20003} executed. 0.601959 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:15:15,377 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 11:15:15,377 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 11:15:15,377 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-04 11:15:15,378 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 11:15:15,378 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:15:15,378 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:15,379 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:15,381 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:15:15,382 DEBUG {conn-10005, pstmt-20004} Parameters : [2, 1, 0, 8]
2019-08-04 11:15:15,382 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:15:15,382 DEBUG {conn-10005, pstmt-20004} executed. 0.568546 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:15:15,382 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 11:15:15,382 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:15:15,382 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 11:15:15,382 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:15:15,382 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:15,385 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:15,385 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:15:15,385 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:15:15,385 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:15:15,386 DEBUG {conn-10005, pstmt-20005} executed. 0.622008 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:15:15,386 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-04 11:15:15,386 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:15:15,386 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:15,387 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:15,387 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:15,387 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:15,387 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:15,387 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:15,388 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:15,388 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:15,388 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:15,389 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:15,389 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:15,389 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:15,389 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-04 11:15:15,389 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:15:15,390 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:19,736 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:19,737 DEBUG {conn-10005, pstmt-20000} Parameters : [1]
2019-08-04 11:15:19,737 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:15:19,738 DEBUG {conn-10005, pstmt-20000} executed. 0.875437 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:15:19,738 DEBUG {conn-10005, pstmt-20000, rs-50005} open
2019-08-04 11:15:19,738 DEBUG {conn-10005, pstmt-20000, rs-50005} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:15:19,738 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 256, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, , ## About me

我是十三，一名Java开发者，技术一般，经历平平，但是也一直渴望进步，同时也努力活着，为了人生不留遗憾，也希望能够一直做着自己喜欢的事情，得闲时分享心得、分享一些浅薄的经验，等以后老得不能再老了，就说故事已经讲完了,不去奢求圆满。

相信浏览这段话的你也知道，学习是一件极其枯燥而无聊的过程，甚至有时候显得很无助，我也想告诉你，成长就是这样一件残酷的事情，任何成功都不是一蹴而就，需要坚持、需要付出、需要你的毅力，短期可能看不到收获，因为破茧成蝶所耗费的时间不是一天。

## Contact

- 我的邮箱：2449207463@qq.com
- QQ技术交流群：796794009
- 我的网站：http://13blog.site

## Quote

- Steve Jobs

> Stay hungry,Stay foolish

- Kahlil Gibran

>The FIRST TIME WHEN I saw her being meek that she might attain height.<br>
The SECOND TIME WHEN I saw her limping BEFORE the crippled.<br>
The third TIME WHEN she was given TO choose BETWEEN the hard AND the easy, AND she chose the easy.<br>
The fourth TIME WHEN she COMMITTED a wrong, AND comforted herself that others also COMMIT wrong.<br>
The fifth TIME WHEN she forbore FOR weakness, AND attributed her patience TO strength.<br>
The sixth TIME WHEN she despised the ugliness of a face, AND knew NOT that it was ONE of her own masks.<br>
AND the seventh TIME WHEN she sang a song of praise, AND deemed it a virtue.]
2019-08-04 11:15:19,738 DEBUG {conn-10005, pstmt-20000, rs-50005} closed
2019-08-04 11:15:19,739 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:15:19,739 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:19,739 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:19,739 DEBUG {conn-10005, pstmt-20001} Parameters : [我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 257, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, , 1]
2019-08-04 11:15:19,739 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:15:19,741 DEBUG {conn-10005, pstmt-20001} executed. 1.72106 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:15:19,741 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:15:19,741 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:19,742 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:19,742 DEBUG {conn-10005, pstmt-20002} Parameters : [20]
2019-08-04 11:15:19,742 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:15:19,743 DEBUG {conn-10005, pstmt-20002} executed. 0.525365 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:15:19,743 DEBUG {conn-10005, pstmt-20002, rs-50006} open
2019-08-04 11:15:19,743 DEBUG {conn-10005, pstmt-20002, rs-50006} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:15:19,743 DEBUG {conn-10005, pstmt-20002, rs-50006} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 11:15:19,743 DEBUG {conn-10005, pstmt-20002, rs-50006} closed
2019-08-04 11:15:19,743 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:15:19,744 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:19,744 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:19,744 DEBUG {conn-10005, pstmt-20003} Parameters : [1, 1]
2019-08-04 11:15:19,744 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:15:19,744 DEBUG {conn-10005, pstmt-20003} executed. 0.443117 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:15:19,744 DEBUG {conn-10005, pstmt-20003, rs-50007} open
2019-08-04 11:15:19,744 DEBUG {conn-10005, pstmt-20003, rs-50007} Header: [count(*)]
2019-08-04 11:15:19,744 DEBUG {conn-10005, pstmt-20003, rs-50007} Result: [0]
2019-08-04 11:15:19,745 DEBUG {conn-10005, pstmt-20003, rs-50007} closed
2019-08-04 11:15:19,745 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:15:19,745 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:19,745 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:19,745 DEBUG {conn-10005, pstmt-20004} Parameters : [1, 1, 0, 8]
2019-08-04 11:15:19,745 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:15:19,746 DEBUG {conn-10005, pstmt-20004} executed. 0.68061 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:15:19,746 DEBUG {conn-10005, pstmt-20004, rs-50008} open
2019-08-04 11:15:19,746 DEBUG {conn-10005, pstmt-20004, rs-50008} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:15:19,746 DEBUG {conn-10005, pstmt-20004, rs-50008} closed
2019-08-04 11:15:19,746 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:15:19,746 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:19,746 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:19,747 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:15:19,747 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:15:19,747 DEBUG {conn-10005, pstmt-20005} executed. 0.531534 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:15:19,747 DEBUG {conn-10005, pstmt-20005, rs-50009} open
2019-08-04 11:15:19,747 DEBUG {conn-10005, pstmt-20005, rs-50009} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:15:19,747 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:19,748 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:19,748 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:19,748 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:19,749 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:19,750 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:19,750 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:19,750 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:19,751 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:19,751 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:19,751 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:19,752 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:19,752 DEBUG {conn-10005, pstmt-20005, rs-50009} closed
2019-08-04 11:15:19,752 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:15:19,752 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:21,606 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:21,606 DEBUG {conn-10005, pstmt-20000} Parameters : [1]
2019-08-04 11:15:21,606 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:15:21,607 DEBUG {conn-10005, pstmt-20000} executed. 0.654907 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:15:21,607 DEBUG {conn-10005, pstmt-20000, rs-50010} open
2019-08-04 11:15:21,607 DEBUG {conn-10005, pstmt-20000, rs-50010} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:15:21,607 DEBUG {conn-10005, pstmt-20000, rs-50010} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 257, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, , ## About me

我是十三，一名Java开发者，技术一般，经历平平，但是也一直渴望进步，同时也努力活着，为了人生不留遗憾，也希望能够一直做着自己喜欢的事情，得闲时分享心得、分享一些浅薄的经验，等以后老得不能再老了，就说故事已经讲完了,不去奢求圆满。

相信浏览这段话的你也知道，学习是一件极其枯燥而无聊的过程，甚至有时候显得很无助，我也想告诉你，成长就是这样一件残酷的事情，任何成功都不是一蹴而就，需要坚持、需要付出、需要你的毅力，短期可能看不到收获，因为破茧成蝶所耗费的时间不是一天。

## Contact

- 我的邮箱：2449207463@qq.com
- QQ技术交流群：796794009
- 我的网站：http://13blog.site

## Quote

- Steve Jobs

> Stay hungry,Stay foolish

- Kahlil Gibran

>The FIRST TIME WHEN I saw her being meek that she might attain height.<br>
The SECOND TIME WHEN I saw her limping BEFORE the crippled.<br>
The third TIME WHEN she was given TO choose BETWEEN the hard AND the easy, AND she chose the easy.<br>
The fourth TIME WHEN she COMMITTED a wrong, AND comforted herself that others also COMMIT wrong.<br>
The fifth TIME WHEN she forbore FOR weakness, AND attributed her patience TO strength.<br>
The sixth TIME WHEN she despised the ugliness of a face, AND knew NOT that it was ONE of her own masks.<br>
AND the seventh TIME WHEN she sang a song of praise, AND deemed it a virtue.]
2019-08-04 11:15:21,608 DEBUG {conn-10005, pstmt-20000, rs-50010} closed
2019-08-04 11:15:21,608 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:15:21,608 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:21,608 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:21,608 DEBUG {conn-10005, pstmt-20001} Parameters : [我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, , 1]
2019-08-04 11:15:21,608 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:15:21,616 DEBUG {conn-10005, pstmt-20001} executed. 7.821364 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:15:21,616 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:15:21,616 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:21,617 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:21,617 DEBUG {conn-10005, pstmt-20002} Parameters : [20]
2019-08-04 11:15:21,618 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:15:21,618 DEBUG {conn-10005, pstmt-20002} executed. 0.715052 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:15:21,618 DEBUG {conn-10005, pstmt-20002, rs-50011} open
2019-08-04 11:15:21,618 DEBUG {conn-10005, pstmt-20002, rs-50011} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:15:21,619 DEBUG {conn-10005, pstmt-20002, rs-50011} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 11:15:21,619 DEBUG {conn-10005, pstmt-20002, rs-50011} closed
2019-08-04 11:15:21,619 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:15:21,619 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:21,619 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:21,619 DEBUG {conn-10005, pstmt-20003} Parameters : [1, 1]
2019-08-04 11:15:21,619 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:15:21,620 DEBUG {conn-10005, pstmt-20003} executed. 0.53873 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:15:21,620 DEBUG {conn-10005, pstmt-20003, rs-50012} open
2019-08-04 11:15:21,620 DEBUG {conn-10005, pstmt-20003, rs-50012} Header: [count(*)]
2019-08-04 11:15:21,620 DEBUG {conn-10005, pstmt-20003, rs-50012} Result: [0]
2019-08-04 11:15:21,621 DEBUG {conn-10005, pstmt-20003, rs-50012} closed
2019-08-04 11:15:21,621 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:15:21,621 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:21,621 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:21,621 DEBUG {conn-10005, pstmt-20004} Parameters : [1, 1, 0, 8]
2019-08-04 11:15:21,621 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:15:21,622 DEBUG {conn-10005, pstmt-20004} executed. 0.651309 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:15:21,622 DEBUG {conn-10005, pstmt-20004, rs-50013} open
2019-08-04 11:15:21,622 DEBUG {conn-10005, pstmt-20004, rs-50013} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:15:21,622 DEBUG {conn-10005, pstmt-20004, rs-50013} closed
2019-08-04 11:15:21,622 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:15:21,623 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:21,623 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:21,623 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:15:21,623 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:15:21,623 DEBUG {conn-10005, pstmt-20005} executed. 0.593221 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:15:21,624 DEBUG {conn-10005, pstmt-20005, rs-50014} open
2019-08-04 11:15:21,624 DEBUG {conn-10005, pstmt-20005, rs-50014} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:15:21,624 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:21,624 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:21,624 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:21,625 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:21,625 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:21,625 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:21,625 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:21,626 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:21,626 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:21,626 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:21,626 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:21,627 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:21,627 DEBUG {conn-10005, pstmt-20005, rs-50014} closed
2019-08-04 11:15:21,627 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:15:21,627 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:24,424 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:24,424 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 11:15:24,424 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:15:24,425 DEBUG {conn-10005, pstmt-20000} executed. 0.681638 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:15:24,425 DEBUG {conn-10005, pstmt-20000, rs-50015} open
2019-08-04 11:15:24,425 DEBUG {conn-10005, pstmt-20000, rs-50015} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:15:24,426 DEBUG {conn-10005, pstmt-20000, rs-50015} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 90, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 11:15:24,426 DEBUG {conn-10005, pstmt-20000, rs-50015} closed
2019-08-04 11:15:24,426 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:15:24,426 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:24,426 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:24,427 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 91, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 11:15:24,427 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:15:24,429 DEBUG {conn-10005, pstmt-20001} executed. 2.408867 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:15:24,429 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:15:24,429 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:24,433 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:24,433 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 11:15:24,433 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:15:24,433 DEBUG {conn-10005, pstmt-20002} executed. 0.584996 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:15:24,433 DEBUG {conn-10005, pstmt-20002, rs-50016} open
2019-08-04 11:15:24,433 DEBUG {conn-10005, pstmt-20002, rs-50016} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:15:24,433 DEBUG {conn-10005, pstmt-20002, rs-50016} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:15:24,434 DEBUG {conn-10005, pstmt-20002, rs-50016} closed
2019-08-04 11:15:24,434 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:15:24,434 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:24,434 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:24,434 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:15:24,435 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:15:24,435 DEBUG {conn-10005, pstmt-20003} executed. 0.565461 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:15:24,435 DEBUG {conn-10005, pstmt-20003, rs-50017} open
2019-08-04 11:15:24,435 DEBUG {conn-10005, pstmt-20003, rs-50017} Header: [count(*)]
2019-08-04 11:15:24,435 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [2]
2019-08-04 11:15:24,435 DEBUG {conn-10005, pstmt-20003, rs-50017} closed
2019-08-04 11:15:24,435 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:15:24,435 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:24,436 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:24,436 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 11:15:24,436 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:15:24,436 DEBUG {conn-10005, pstmt-20004} executed. 0.531534 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:15:24,436 DEBUG {conn-10005, pstmt-20004, rs-50018} open
2019-08-04 11:15:24,437 DEBUG {conn-10005, pstmt-20004, rs-50018} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:15:24,437 DEBUG {conn-10005, pstmt-20004, rs-50018} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 11:15:24,437 DEBUG {conn-10005, pstmt-20004, rs-50018} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 11:15:24,437 DEBUG {conn-10005, pstmt-20004, rs-50018} closed
2019-08-04 11:15:24,437 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:15:24,437 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:24,438 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:24,438 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:15:24,438 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:15:24,438 DEBUG {conn-10005, pstmt-20003} executed. 0.499148 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:15:24,438 DEBUG {conn-10005, pstmt-20003, rs-50019} open
2019-08-04 11:15:24,438 DEBUG {conn-10005, pstmt-20003, rs-50019} Header: [count(*)]
2019-08-04 11:15:24,438 DEBUG {conn-10005, pstmt-20003, rs-50019} Result: [2]
2019-08-04 11:15:24,438 DEBUG {conn-10005, pstmt-20003, rs-50019} closed
2019-08-04 11:15:24,439 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:15:24,439 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:24,439 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:24,439 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:15:24,439 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:15:24,439 DEBUG {conn-10005, pstmt-20005} executed. 0.423582 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:15:24,439 DEBUG {conn-10005, pstmt-20005, rs-50020} open
2019-08-04 11:15:24,440 DEBUG {conn-10005, pstmt-20005, rs-50020} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:15:24,440 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:24,440 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:24,440 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:24,440 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:24,440 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:24,440 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:24,441 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:24,441 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:24,441 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:24,441 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:24,442 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:24,442 DEBUG {conn-10005, pstmt-20005, rs-50020} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:24,442 DEBUG {conn-10005, pstmt-20005, rs-50020} closed
2019-08-04 11:15:24,442 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:15:24,442 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:27,760 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:27,761 DEBUG {conn-10005, pstmt-20000} Parameters : [5]
2019-08-04 11:15:27,761 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:15:27,762 DEBUG {conn-10005, pstmt-20000} executed. 0.827116 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:15:27,762 DEBUG {conn-10005, pstmt-20000, rs-50021} open
2019-08-04 11:15:27,762 DEBUG {conn-10005, pstmt-20000, rs-50021} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:15:27,762 DEBUG {conn-10005, pstmt-20000, rs-50021} closed
2019-08-04 11:15:27,762 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:15:27,762 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:27,762 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:27,762 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:15:27,762 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:15:27,763 DEBUG {conn-10005, pstmt-20005} executed. 0.472417 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:15:27,763 DEBUG {conn-10005, pstmt-20005, rs-50022} open
2019-08-04 11:15:27,763 DEBUG {conn-10005, pstmt-20005, rs-50022} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:15:27,763 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:27,763 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:27,763 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:27,764 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:27,764 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:27,764 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:27,764 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:27,764 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:27,764 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:27,764 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:27,764 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:27,764 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:27,764 DEBUG {conn-10005, pstmt-20005, rs-50022} closed
2019-08-04 11:15:27,765 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:15:27,765 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:43,386 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:43,386 DEBUG {conn-10005, pstmt-20000} Parameters : [5]
2019-08-04 11:15:43,386 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:15:43,387 DEBUG {conn-10005, pstmt-20000} executed. 1.04045 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:15:43,388 DEBUG {conn-10005, pstmt-20000, rs-50023} open
2019-08-04 11:15:43,388 DEBUG {conn-10005, pstmt-20000, rs-50023} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:15:43,388 DEBUG {conn-10005, pstmt-20000, rs-50023} closed
2019-08-04 11:15:43,388 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:15:43,388 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:43,388 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:43,388 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:15:43,388 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:15:43,389 DEBUG {conn-10005, pstmt-20005} executed. 0.553125 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:15:43,389 DEBUG {conn-10005, pstmt-20005, rs-50024} open
2019-08-04 11:15:43,389 DEBUG {conn-10005, pstmt-20005, rs-50024} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:15:43,389 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:43,390 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:43,390 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:43,390 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:43,390 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:43,390 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:43,391 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:43,391 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:43,391 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:43,391 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:43,391 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:43,392 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:43,392 DEBUG {conn-10005, pstmt-20005, rs-50024} closed
2019-08-04 11:15:43,392 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:15:43,392 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:51,480 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:51,481 DEBUG {conn-10005, pstmt-20006} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_sub_url = ? and is_deleted = 0 limit 1
2019-08-04 11:15:51,482 DEBUG {conn-10005, pstmt-20006} Parameters : [blog]
2019-08-04 11:15:51,482 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR]
2019-08-04 11:15:51,482 DEBUG {conn-10005, pstmt-20006} executed. 0.815807 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_sub_url = ? and is_deleted = 0 limit 1
2019-08-04 11:15:51,482 DEBUG {conn-10005, pstmt-20006, rs-50025} open
2019-08-04 11:15:51,483 DEBUG {conn-10005, pstmt-20006, rs-50025} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:15:51,483 DEBUG {conn-10005, pstmt-20006, rs-50025} closed
2019-08-04 11:15:51,483 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 11:15:51,483 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:54,681 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:54,682 DEBUG {conn-10005, pstmt-20007} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 11:15:54,682 DEBUG {conn-10005, pstmt-20007} Parameters : [1, 0, 8]
2019-08-04 11:15:54,682 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 11:15:54,683 DEBUG {conn-10005, pstmt-20007} executed. 0.692948 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 11:15:54,683 DEBUG {conn-10005, pstmt-20007, rs-50026} open
2019-08-04 11:15:54,683 DEBUG {conn-10005, pstmt-20007, rs-50026} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 11:15:54,683 DEBUG {conn-10005, pstmt-20007, rs-50026} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 91, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 11:15:54,683 DEBUG {conn-10005, pstmt-20007, rs-50026} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 122, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 11:15:54,683 DEBUG {conn-10005, pstmt-20007, rs-50026} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 11:15:54,684 DEBUG {conn-10005, pstmt-20007, rs-50026} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 11:15:54,684 DEBUG {conn-10005, pstmt-20007, rs-50026} closed
2019-08-04 11:15:54,684 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-04 11:15:54,684 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:54,687 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:54,688 DEBUG {conn-10005, pstmt-20008} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 11:15:54,688 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 22, 24, 20]
2019-08-04 11:15:54,688 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER, INTEGER, INTEGER, INTEGER]
2019-08-04 11:15:54,689 DEBUG {conn-10005, pstmt-20008} executed. 0.727903 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 11:15:54,689 DEBUG {conn-10005, pstmt-20008, rs-50027} open
2019-08-04 11:15:54,689 DEBUG {conn-10005, pstmt-20008, rs-50027} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:15:54,689 DEBUG {conn-10005, pstmt-20008, rs-50027} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 11:15:54,689 DEBUG {conn-10005, pstmt-20008, rs-50027} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 11:15:54,689 DEBUG {conn-10005, pstmt-20008, rs-50027} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:15:54,690 DEBUG {conn-10005, pstmt-20008, rs-50027} closed
2019-08-04 11:15:54,690 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-04 11:15:54,690 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:54,695 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:54,696 DEBUG {conn-10005, pstmt-20009} created. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 11:15:54,696 DEBUG {conn-10005, pstmt-20009} Parameters : [1]
2019-08-04 11:15:54,696 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 11:15:54,697 DEBUG {conn-10005, pstmt-20009} executed. 0.591164 millis. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 11:15:54,697 DEBUG {conn-10005, pstmt-20009, rs-50028} open
2019-08-04 11:15:54,697 DEBUG {conn-10005, pstmt-20009, rs-50028} Header: [count(*)]
2019-08-04 11:15:54,697 DEBUG {conn-10005, pstmt-20009, rs-50028} Result: [4]
2019-08-04 11:15:54,697 DEBUG {conn-10005, pstmt-20009, rs-50028} closed
2019-08-04 11:15:54,697 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 11:15:54,697 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:54,699 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:54,700 DEBUG {conn-10005, pstmt-20010} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 11:15:54,701 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 11:15:54,701 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 11:15:54,701 DEBUG {conn-10005, pstmt-20010} executed. 0.781879 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 11:15:54,701 DEBUG {conn-10005, pstmt-20010, rs-50029} open
2019-08-04 11:15:54,701 DEBUG {conn-10005, pstmt-20010, rs-50029} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 11:15:54,702 DEBUG {conn-10005, pstmt-20010, rs-50029} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 91, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 11:15:54,702 DEBUG {conn-10005, pstmt-20010, rs-50029} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 122, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 11:15:54,702 DEBUG {conn-10005, pstmt-20010, rs-50029} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 11:15:54,702 DEBUG {conn-10005, pstmt-20010, rs-50029} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 11:15:54,703 DEBUG {conn-10005, pstmt-20010, rs-50029} closed
2019-08-04 11:15:54,703 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 11:15:54,703 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:54,703 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:54,704 DEBUG {conn-10005, pstmt-20011} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 11:15:54,704 DEBUG {conn-10005, pstmt-20011} Parameters : [9]
2019-08-04 11:15:54,704 DEBUG {conn-10005, pstmt-20011} Types : [INTEGER]
2019-08-04 11:15:54,705 DEBUG {conn-10005, pstmt-20011} executed. 0.942779 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 11:15:54,705 DEBUG {conn-10005, pstmt-20011, rs-50030} open
2019-08-04 11:15:54,705 DEBUG {conn-10005, pstmt-20011, rs-50030} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 11:15:54,706 DEBUG {conn-10005, pstmt-20011, rs-50030} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 11:15:54,706 DEBUG {conn-10005, pstmt-20011, rs-50030} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 122, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 11:15:54,707 DEBUG {conn-10005, pstmt-20011, rs-50030} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 91, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 11:15:54,707 DEBUG {conn-10005, pstmt-20011, rs-50030} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 11:15:54,710 DEBUG {conn-10005, pstmt-20011, rs-50030} closed
2019-08-04 11:15:54,710 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 11:15:54,711 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:54,712 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:54,716 DEBUG {conn-10005, pstmt-20012} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 11:15:54,717 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-04 11:15:54,717 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-04 11:15:54,718 DEBUG {conn-10005, pstmt-20012} executed. 1.639325 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 11:15:54,718 DEBUG {conn-10005, pstmt-20012, rs-50031} open
2019-08-04 11:15:54,718 DEBUG {conn-10005, pstmt-20012, rs-50031} Header: [tag_id, tag_count, tag_name]
2019-08-04 11:15:54,718 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [66, 1, Spring]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [67, 1, SpringMVC]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [68, 1, MyBatis]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [69, 1, easyUI]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [127, 1, 目录]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [128, 1, AdminLte3]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [130, 1, SpringBoot]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [131, 1, 入门教程]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [132, 1, 实战教程]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [133, 1, spring-boot企业级开发]
2019-08-04 11:15:54,719 DEBUG {conn-10005, pstmt-20012, rs-50031} closed
2019-08-04 11:15:54,720 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-04 11:15:54,720 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:54,720 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:54,720 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:15:54,720 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:15:54,721 DEBUG {conn-10005, pstmt-20005} executed. 0.536161 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:15:54,721 DEBUG {conn-10005, pstmt-20005, rs-50032} open
2019-08-04 11:15:54,721 DEBUG {conn-10005, pstmt-20005, rs-50032} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:15:54,721 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:54,721 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:54,721 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:54,722 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:54,722 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:54,722 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:54,722 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:54,722 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:54,722 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:54,723 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:54,723 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:54,723 DEBUG {conn-10005, pstmt-20005, rs-50032} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:54,723 DEBUG {conn-10005, pstmt-20005, rs-50032} closed
2019-08-04 11:15:54,723 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:15:54,723 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:55,058 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:55,059 DEBUG {conn-10005, pstmt-20013} created. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 11:15:55,062 DEBUG {conn-10005, pstmt-20013} Parameters : [anonymousUser]
2019-08-04 11:15:55,062 DEBUG {conn-10005, pstmt-20013} Types : [VARCHAR]
2019-08-04 11:15:55,063 DEBUG {conn-10005, pstmt-20013, rs-50033} query executed. 1.343228 millis. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 11:15:55,063 DEBUG {conn-10005, pstmt-20013, rs-50033} open
2019-08-04 11:15:55,063 DEBUG {conn-10005, pstmt-20013, rs-50033} Header: [userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime]
2019-08-04 11:15:55,064 DEBUG {conn-10005, pstmt-20013, rs-50033} closed
2019-08-04 11:15:55,064 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-04 11:15:55,065 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:57,363 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:57,363 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 11:15:57,363 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:15:57,363 DEBUG {conn-10005, pstmt-20000} executed. 0.665189 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:15:57,364 DEBUG {conn-10005, pstmt-20000, rs-50034} open
2019-08-04 11:15:57,364 DEBUG {conn-10005, pstmt-20000, rs-50034} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:15:57,364 DEBUG {conn-10005, pstmt-20000, rs-50034} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 91, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 11:15:57,364 DEBUG {conn-10005, pstmt-20000, rs-50034} closed
2019-08-04 11:15:57,364 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:15:57,364 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:57,364 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:57,365 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 92, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 11:15:57,365 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:15:57,373 DEBUG {conn-10005, pstmt-20001} executed. 8.2177 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:15:57,373 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:15:57,373 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:57,376 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:57,377 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 11:15:57,377 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:15:57,377 DEBUG {conn-10005, pstmt-20002} executed. 0.607615 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:15:57,377 DEBUG {conn-10005, pstmt-20002, rs-50035} open
2019-08-04 11:15:57,377 DEBUG {conn-10005, pstmt-20002, rs-50035} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:15:57,377 DEBUG {conn-10005, pstmt-20002, rs-50035} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:15:57,378 DEBUG {conn-10005, pstmt-20002, rs-50035} closed
2019-08-04 11:15:57,378 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:15:57,378 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:57,378 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:57,378 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:15:57,378 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:15:57,379 DEBUG {conn-10005, pstmt-20003} executed. 0.560836 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:15:57,379 DEBUG {conn-10005, pstmt-20003, rs-50036} open
2019-08-04 11:15:57,379 DEBUG {conn-10005, pstmt-20003, rs-50036} Header: [count(*)]
2019-08-04 11:15:57,379 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [2]
2019-08-04 11:15:57,379 DEBUG {conn-10005, pstmt-20003, rs-50036} closed
2019-08-04 11:15:57,379 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:15:57,379 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:57,380 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:57,380 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 11:15:57,380 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:15:57,381 DEBUG {conn-10005, pstmt-20004} executed. 0.633317 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:15:57,381 DEBUG {conn-10005, pstmt-20004, rs-50037} open
2019-08-04 11:15:57,381 DEBUG {conn-10005, pstmt-20004, rs-50037} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:15:57,381 DEBUG {conn-10005, pstmt-20004, rs-50037} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 11:15:57,381 DEBUG {conn-10005, pstmt-20004, rs-50037} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 11:15:57,381 DEBUG {conn-10005, pstmt-20004, rs-50037} closed
2019-08-04 11:15:57,381 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:15:57,382 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:57,382 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:57,382 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:15:57,382 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:15:57,382 DEBUG {conn-10005, pstmt-20003} executed. 0.463679 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:15:57,382 DEBUG {conn-10005, pstmt-20003, rs-50038} open
2019-08-04 11:15:57,382 DEBUG {conn-10005, pstmt-20003, rs-50038} Header: [count(*)]
2019-08-04 11:15:57,382 DEBUG {conn-10005, pstmt-20003, rs-50038} Result: [2]
2019-08-04 11:15:57,383 DEBUG {conn-10005, pstmt-20003, rs-50038} closed
2019-08-04 11:15:57,383 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:15:57,383 DEBUG {conn-10005} pool-recycle
2019-08-04 11:15:57,383 DEBUG {conn-10005} pool-connect
2019-08-04 11:15:57,383 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:15:57,383 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:15:57,383 DEBUG {conn-10005, pstmt-20005} executed. 0.334137 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:15:57,383 DEBUG {conn-10005, pstmt-20005, rs-50039} open
2019-08-04 11:15:57,383 DEBUG {conn-10005, pstmt-20005, rs-50039} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:15:57,383 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:57,383 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:57,383 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:57,384 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:57,384 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:15:57,384 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:57,384 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:57,384 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:57,384 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:15:57,384 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:57,384 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:57,384 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:15:57,384 DEBUG {conn-10005, pstmt-20005, rs-50039} closed
2019-08-04 11:15:57,384 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:15:57,384 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:06,884 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:06,884 DEBUG {conn-10005, pstmt-20007} Parameters : [1, 0, 8]
2019-08-04 11:16:06,884 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 11:16:06,884 DEBUG {conn-10005, pstmt-20007} executed. 0.505318 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 11:16:06,885 DEBUG {conn-10005, pstmt-20007, rs-50040} open
2019-08-04 11:16:06,885 DEBUG {conn-10005, pstmt-20007, rs-50040} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 11:16:06,885 DEBUG {conn-10005, pstmt-20007, rs-50040} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 92, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 11:16:06,885 DEBUG {conn-10005, pstmt-20007, rs-50040} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 122, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 11:16:06,885 DEBUG {conn-10005, pstmt-20007, rs-50040} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 11:16:06,885 DEBUG {conn-10005, pstmt-20007, rs-50040} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 11:16:06,885 DEBUG {conn-10005, pstmt-20007, rs-50040} closed
2019-08-04 11:16:06,885 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-04 11:16:06,885 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:06,886 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:06,886 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 22, 24, 20]
2019-08-04 11:16:06,886 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER, INTEGER, INTEGER, INTEGER]
2019-08-04 11:16:06,890 DEBUG {conn-10005, pstmt-20008} executed. 0.50686 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 11:16:06,890 DEBUG {conn-10005, pstmt-20008, rs-50041} open
2019-08-04 11:16:06,890 DEBUG {conn-10005, pstmt-20008, rs-50041} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:16:06,890 DEBUG {conn-10005, pstmt-20008, rs-50041} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 11:16:06,890 DEBUG {conn-10005, pstmt-20008, rs-50041} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 11:16:06,890 DEBUG {conn-10005, pstmt-20008, rs-50041} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:16:06,890 DEBUG {conn-10005, pstmt-20008, rs-50041} closed
2019-08-04 11:16:06,891 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-04 11:16:06,891 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:06,892 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:06,892 DEBUG {conn-10005, pstmt-20009} Parameters : [1]
2019-08-04 11:16:06,892 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 11:16:06,893 DEBUG {conn-10005, pstmt-20009} executed. 0.564948 millis. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 11:16:06,893 DEBUG {conn-10005, pstmt-20009, rs-50042} open
2019-08-04 11:16:06,893 DEBUG {conn-10005, pstmt-20009, rs-50042} Header: [count(*)]
2019-08-04 11:16:06,893 DEBUG {conn-10005, pstmt-20009, rs-50042} Result: [4]
2019-08-04 11:16:06,893 DEBUG {conn-10005, pstmt-20009, rs-50042} closed
2019-08-04 11:16:06,893 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 11:16:06,893 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:06,894 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:06,894 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 11:16:06,894 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 11:16:06,894 DEBUG {conn-10005, pstmt-20010} executed. 0.624578 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 11:16:06,895 DEBUG {conn-10005, pstmt-20010, rs-50043} open
2019-08-04 11:16:06,895 DEBUG {conn-10005, pstmt-20010, rs-50043} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 11:16:06,895 DEBUG {conn-10005, pstmt-20010, rs-50043} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 92, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 11:16:06,895 DEBUG {conn-10005, pstmt-20010, rs-50043} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 122, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 11:16:06,895 DEBUG {conn-10005, pstmt-20010, rs-50043} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 11:16:06,896 DEBUG {conn-10005, pstmt-20010, rs-50043} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 11:16:06,896 DEBUG {conn-10005, pstmt-20010, rs-50043} closed
2019-08-04 11:16:06,896 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 11:16:06,896 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:06,897 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:06,897 DEBUG {conn-10005, pstmt-20011} Parameters : [9]
2019-08-04 11:16:06,897 DEBUG {conn-10005, pstmt-20011} Types : [INTEGER]
2019-08-04 11:16:06,897 DEBUG {conn-10005, pstmt-20011} executed. 0.472417 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 11:16:06,897 DEBUG {conn-10005, pstmt-20011, rs-50044} open
2019-08-04 11:16:06,897 DEBUG {conn-10005, pstmt-20011, rs-50044} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 11:16:06,897 DEBUG {conn-10005, pstmt-20011, rs-50044} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 11:16:06,898 DEBUG {conn-10005, pstmt-20011, rs-50044} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 122, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 11:16:06,898 DEBUG {conn-10005, pstmt-20011, rs-50044} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 92, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 11:16:06,898 DEBUG {conn-10005, pstmt-20011, rs-50044} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 11:16:06,898 DEBUG {conn-10005, pstmt-20011, rs-50044} closed
2019-08-04 11:16:06,898 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 11:16:06,898 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:06,898 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:06,898 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-04 11:16:06,898 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-04 11:16:06,899 DEBUG {conn-10005, pstmt-20012} executed. 0.65645 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 11:16:06,899 DEBUG {conn-10005, pstmt-20012, rs-50045} open
2019-08-04 11:16:06,899 DEBUG {conn-10005, pstmt-20012, rs-50045} Header: [tag_id, tag_count, tag_name]
2019-08-04 11:16:06,899 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 11:16:06,899 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 11:16:06,899 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [66, 1, Spring]
2019-08-04 11:16:06,899 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [67, 1, SpringMVC]
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [68, 1, MyBatis]
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [69, 1, easyUI]
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [127, 1, 目录]
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [128, 1, AdminLte3]
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [130, 1, SpringBoot]
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [131, 1, 入门教程]
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [132, 1, 实战教程]
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20012, rs-50045} Result: [133, 1, spring-boot企业级开发]
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20012, rs-50045} closed
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-04 11:16:06,900 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:06,900 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:16:06,900 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005} executed. 0.404048 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005, rs-50046} open
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005, rs-50046} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:06,901 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:06,902 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:06,902 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:06,902 DEBUG {conn-10005, pstmt-20005, rs-50046} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:06,902 DEBUG {conn-10005, pstmt-20005, rs-50046} closed
2019-08-04 11:16:06,902 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:16:06,902 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:07,141 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:07,141 DEBUG {conn-10005, pstmt-20013} Parameters : [anonymousUser]
2019-08-04 11:16:07,141 DEBUG {conn-10005, pstmt-20013} Types : [VARCHAR]
2019-08-04 11:16:07,142 DEBUG {conn-10005, pstmt-20013, rs-50047} query executed. 0.707342 millis. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 11:16:07,142 DEBUG {conn-10005, pstmt-20013, rs-50047} open
2019-08-04 11:16:07,142 DEBUG {conn-10005, pstmt-20013, rs-50047} Header: [userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime]
2019-08-04 11:16:07,142 DEBUG {conn-10005, pstmt-20013, rs-50047} closed
2019-08-04 11:16:07,142 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-04 11:16:07,142 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:20,304 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:20,304 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 11:16:20,304 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:16:20,305 DEBUG {conn-10005, pstmt-20000} executed. 0.526393 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:16:20,305 DEBUG {conn-10005, pstmt-20000, rs-50048} open
2019-08-04 11:16:20,305 DEBUG {conn-10005, pstmt-20000, rs-50048} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:16:20,305 DEBUG {conn-10005, pstmt-20000, rs-50048} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 122, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 11:16:20,305 DEBUG {conn-10005, pstmt-20000, rs-50048} closed
2019-08-04 11:16:20,305 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:16:20,305 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:20,305 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:20,306 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 123, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 11:16:20,306 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:16:20,314 DEBUG {conn-10005, pstmt-20001} executed. 8.390423 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:16:20,314 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:16:20,314 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:20,319 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:20,319 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 11:16:20,319 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:16:20,319 DEBUG {conn-10005, pstmt-20002} executed. 0.540273 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:16:20,319 DEBUG {conn-10005, pstmt-20002, rs-50049} open
2019-08-04 11:16:20,319 DEBUG {conn-10005, pstmt-20002, rs-50049} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:16:20,319 DEBUG {conn-10005, pstmt-20002, rs-50049} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 11:16:20,320 DEBUG {conn-10005, pstmt-20002, rs-50049} closed
2019-08-04 11:16:20,320 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:16:20,320 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:20,320 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:20,320 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 11:16:20,320 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:16:20,320 DEBUG {conn-10005, pstmt-20003} executed. 0.336707 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:16:20,320 DEBUG {conn-10005, pstmt-20003, rs-50050} open
2019-08-04 11:16:20,320 DEBUG {conn-10005, pstmt-20003, rs-50050} Header: [count(*)]
2019-08-04 11:16:20,320 DEBUG {conn-10005, pstmt-20003, rs-50050} Result: [0]
2019-08-04 11:16:20,321 DEBUG {conn-10005, pstmt-20003, rs-50050} closed
2019-08-04 11:16:20,321 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:16:20,321 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:20,321 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:20,321 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 11:16:20,321 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:16:20,321 DEBUG {conn-10005, pstmt-20004} executed. 0.42461 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:16:20,321 DEBUG {conn-10005, pstmt-20004, rs-50051} open
2019-08-04 11:16:20,321 DEBUG {conn-10005, pstmt-20004, rs-50051} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20004, rs-50051} closed
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:16:20,322 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:20,322 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20005} executed. 0.336707 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20005, rs-50052} open
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20005, rs-50052} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:20,322 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:20,323 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:20,323 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:20,323 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:20,323 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:20,323 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:20,323 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:20,323 DEBUG {conn-10005, pstmt-20005, rs-50052} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:20,323 DEBUG {conn-10005, pstmt-20005, rs-50052} closed
2019-08-04 11:16:20,323 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:16:20,323 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:24,935 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:24,936 DEBUG {conn-10005, pstmt-20007} Parameters : [1, 0, 8]
2019-08-04 11:16:24,936 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 11:16:24,937 DEBUG {conn-10005, pstmt-20007} executed. 0.840996 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 11:16:24,937 DEBUG {conn-10005, pstmt-20007, rs-50053} open
2019-08-04 11:16:24,937 DEBUG {conn-10005, pstmt-20007, rs-50053} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 11:16:24,937 DEBUG {conn-10005, pstmt-20007, rs-50053} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 92, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 11:16:24,937 DEBUG {conn-10005, pstmt-20007, rs-50053} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 123, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 11:16:24,937 DEBUG {conn-10005, pstmt-20007, rs-50053} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 11:16:24,937 DEBUG {conn-10005, pstmt-20007, rs-50053} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 11:16:24,937 DEBUG {conn-10005, pstmt-20007, rs-50053} closed
2019-08-04 11:16:24,937 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-04 11:16:24,937 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:24,938 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:24,938 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 22, 24, 20]
2019-08-04 11:16:24,938 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER, INTEGER, INTEGER, INTEGER]
2019-08-04 11:16:24,938 DEBUG {conn-10005, pstmt-20008} executed. 0.488867 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 11:16:24,939 DEBUG {conn-10005, pstmt-20008, rs-50054} open
2019-08-04 11:16:24,939 DEBUG {conn-10005, pstmt-20008, rs-50054} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:16:24,939 DEBUG {conn-10005, pstmt-20008, rs-50054} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 11:16:24,939 DEBUG {conn-10005, pstmt-20008, rs-50054} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 11:16:24,939 DEBUG {conn-10005, pstmt-20008, rs-50054} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:16:24,939 DEBUG {conn-10005, pstmt-20008, rs-50054} closed
2019-08-04 11:16:24,939 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-04 11:16:24,939 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:24,939 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:24,940 DEBUG {conn-10005, pstmt-20009} Parameters : [1]
2019-08-04 11:16:24,940 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 11:16:24,940 DEBUG {conn-10005, pstmt-20009} executed. 0.406618 millis. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 11:16:24,940 DEBUG {conn-10005, pstmt-20009, rs-50055} open
2019-08-04 11:16:24,940 DEBUG {conn-10005, pstmt-20009, rs-50055} Header: [count(*)]
2019-08-04 11:16:24,940 DEBUG {conn-10005, pstmt-20009, rs-50055} Result: [4]
2019-08-04 11:16:24,940 DEBUG {conn-10005, pstmt-20009, rs-50055} closed
2019-08-04 11:16:24,940 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 11:16:24,940 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:24,940 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:24,940 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 11:16:24,940 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 11:16:24,941 DEBUG {conn-10005, pstmt-20010} executed. 0.395309 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 11:16:24,941 DEBUG {conn-10005, pstmt-20010, rs-50056} open
2019-08-04 11:16:24,941 DEBUG {conn-10005, pstmt-20010, rs-50056} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 11:16:24,941 DEBUG {conn-10005, pstmt-20010, rs-50056} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 92, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 11:16:24,941 DEBUG {conn-10005, pstmt-20010, rs-50056} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 123, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 11:16:24,941 DEBUG {conn-10005, pstmt-20010, rs-50056} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 11:16:24,941 DEBUG {conn-10005, pstmt-20010, rs-50056} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 11:16:24,941 DEBUG {conn-10005, pstmt-20010, rs-50056} closed
2019-08-04 11:16:24,941 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 11:16:24,941 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:24,942 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:24,942 DEBUG {conn-10005, pstmt-20011} Parameters : [9]
2019-08-04 11:16:24,942 DEBUG {conn-10005, pstmt-20011} Types : [INTEGER]
2019-08-04 11:16:24,942 DEBUG {conn-10005, pstmt-20011} executed. 0.348016 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 11:16:24,942 DEBUG {conn-10005, pstmt-20011, rs-50057} open
2019-08-04 11:16:24,942 DEBUG {conn-10005, pstmt-20011, rs-50057} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 11:16:24,942 DEBUG {conn-10005, pstmt-20011, rs-50057} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 11:16:24,942 DEBUG {conn-10005, pstmt-20011, rs-50057} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 123, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 11:16:24,943 DEBUG {conn-10005, pstmt-20011, rs-50057} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 92, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 11:16:24,943 DEBUG {conn-10005, pstmt-20011, rs-50057} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 11:16:24,943 DEBUG {conn-10005, pstmt-20011, rs-50057} closed
2019-08-04 11:16:24,943 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 11:16:24,943 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:24,944 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:24,944 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-04 11:16:24,944 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-04 11:16:24,945 DEBUG {conn-10005, pstmt-20012} executed. 1.107791 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 11:16:24,945 DEBUG {conn-10005, pstmt-20012, rs-50058} open
2019-08-04 11:16:24,945 DEBUG {conn-10005, pstmt-20012, rs-50058} Header: [tag_id, tag_count, tag_name]
2019-08-04 11:16:24,945 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 11:16:24,945 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 11:16:24,945 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [66, 1, Spring]
2019-08-04 11:16:24,945 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [67, 1, SpringMVC]
2019-08-04 11:16:24,945 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [68, 1, MyBatis]
2019-08-04 11:16:24,945 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [69, 1, easyUI]
2019-08-04 11:16:24,945 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [127, 1, 目录]
2019-08-04 11:16:24,945 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [128, 1, AdminLte3]
2019-08-04 11:16:24,946 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [130, 1, SpringBoot]
2019-08-04 11:16:24,946 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [131, 1, 入门教程]
2019-08-04 11:16:24,946 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [132, 1, 实战教程]
2019-08-04 11:16:24,946 DEBUG {conn-10005, pstmt-20012, rs-50058} Result: [133, 1, spring-boot企业级开发]
2019-08-04 11:16:24,946 DEBUG {conn-10005, pstmt-20012, rs-50058} closed
2019-08-04 11:16:24,946 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-04 11:16:24,946 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:24,946 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:24,946 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:16:24,946 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005} executed. 0.504803 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} open
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:24,947 DEBUG {conn-10005, pstmt-20005, rs-50059} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:24,948 DEBUG {conn-10005, pstmt-20005, rs-50059} closed
2019-08-04 11:16:24,948 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:16:24,948 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:25,230 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:25,230 DEBUG {conn-10005, pstmt-20013} Parameters : [anonymousUser]
2019-08-04 11:16:25,230 DEBUG {conn-10005, pstmt-20013} Types : [VARCHAR]
2019-08-04 11:16:25,231 DEBUG {conn-10005, pstmt-20013, rs-50060} query executed. 0.59065 millis. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 11:16:25,231 DEBUG {conn-10005, pstmt-20013, rs-50060} open
2019-08-04 11:16:25,231 DEBUG {conn-10005, pstmt-20013, rs-50060} Header: [userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime]
2019-08-04 11:16:25,231 DEBUG {conn-10005, pstmt-20013, rs-50060} closed
2019-08-04 11:16:25,231 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-04 11:16:25,231 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:26,209 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:26,209 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 11:16:26,209 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:16:26,210 DEBUG {conn-10005, pstmt-20000} executed. 0.816321 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:16:26,210 DEBUG {conn-10005, pstmt-20000, rs-50061} open
2019-08-04 11:16:26,210 DEBUG {conn-10005, pstmt-20000, rs-50061} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:16:26,210 DEBUG {conn-10005, pstmt-20000, rs-50061} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 123, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 11:16:26,211 DEBUG {conn-10005, pstmt-20000, rs-50061} closed
2019-08-04 11:16:26,211 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:16:26,211 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:26,211 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:26,211 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 124, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 11:16:26,211 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:16:26,219 DEBUG {conn-10005, pstmt-20001} executed. 7.955018 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:16:26,219 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:16:26,219 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:26,224 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:26,225 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 11:16:26,225 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:16:26,225 DEBUG {conn-10005, pstmt-20002} executed. 0.69706 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:16:26,225 DEBUG {conn-10005, pstmt-20002, rs-50062} open
2019-08-04 11:16:26,225 DEBUG {conn-10005, pstmt-20002, rs-50062} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:16:26,226 DEBUG {conn-10005, pstmt-20002, rs-50062} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 11:16:26,228 DEBUG {conn-10005, pstmt-20002, rs-50062} closed
2019-08-04 11:16:26,228 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:16:26,228 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:26,228 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:26,228 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 11:16:26,229 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:16:26,229 DEBUG {conn-10005, pstmt-20003} executed. 0.505317 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:16:26,229 DEBUG {conn-10005, pstmt-20003, rs-50063} open
2019-08-04 11:16:26,229 DEBUG {conn-10005, pstmt-20003, rs-50063} Header: [count(*)]
2019-08-04 11:16:26,229 DEBUG {conn-10005, pstmt-20003, rs-50063} Result: [0]
2019-08-04 11:16:26,229 DEBUG {conn-10005, pstmt-20003, rs-50063} closed
2019-08-04 11:16:26,229 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:16:26,229 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:26,230 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:26,230 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 11:16:26,230 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:16:26,230 DEBUG {conn-10005, pstmt-20004} executed. 0.483727 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:16:26,230 DEBUG {conn-10005, pstmt-20004, rs-50064} open
2019-08-04 11:16:26,230 DEBUG {conn-10005, pstmt-20004, rs-50064} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:16:26,230 DEBUG {conn-10005, pstmt-20004, rs-50064} closed
2019-08-04 11:16:26,231 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:16:26,231 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:26,231 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:26,231 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:16:26,231 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:16:26,236 DEBUG {conn-10005, pstmt-20005} executed. 5.326136 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:16:26,236 DEBUG {conn-10005, pstmt-20005, rs-50065} open
2019-08-04 11:16:26,236 DEBUG {conn-10005, pstmt-20005, rs-50065} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:16:26,236 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005, rs-50065} closed
2019-08-04 11:16:26,237 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:16:26,237 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:33,576 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:33,577 DEBUG {conn-10005, pstmt-20000} Parameters : [5]
2019-08-04 11:16:33,577 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:16:33,577 DEBUG {conn-10005, pstmt-20000} executed. 0.557237 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:16:33,577 DEBUG {conn-10005, pstmt-20000, rs-50066} open
2019-08-04 11:16:33,577 DEBUG {conn-10005, pstmt-20000, rs-50066} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:16:33,577 DEBUG {conn-10005, pstmt-20000, rs-50066} closed
2019-08-04 11:16:33,578 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:16:33,578 DEBUG {conn-10005} pool-recycle
2019-08-04 11:16:33,578 DEBUG {conn-10005} pool-connect
2019-08-04 11:16:33,578 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:16:33,578 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:16:33,578 DEBUG {conn-10005, pstmt-20005} executed. 0.314602 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:16:33,578 DEBUG {conn-10005, pstmt-20005, rs-50067} open
2019-08-04 11:16:33,578 DEBUG {conn-10005, pstmt-20005, rs-50067} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:16:33,578 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:33,578 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:33,578 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:33,578 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:33,579 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:16:33,579 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:33,579 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:33,579 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:33,579 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:16:33,579 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:33,579 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:33,579 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:16:33,579 DEBUG {conn-10005, pstmt-20005, rs-50067} closed
2019-08-04 11:16:33,579 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:16:33,579 DEBUG {conn-10005} pool-recycle
2019-08-04 11:17:47,061 DEBUG {conn-10001,procId-340} connected
2019-08-04 11:17:47,068 DEBUG {conn-10002,procId-341} connected
2019-08-04 11:17:47,072 DEBUG {conn-10003,procId-342} connected
2019-08-04 11:17:47,078 DEBUG {conn-10004,procId-343} connected
2019-08-04 11:17:47,082 DEBUG {conn-10005,procId-344} connected
2019-08-04 11:17:47,086 DEBUG {conn-10005} pool-connect
2019-08-04 11:17:47,087 DEBUG {conn-10005} pool-recycle
2019-08-04 11:17:47,097 DEBUG {conn-10005} pool-connect
2019-08-04 11:17:47,099 DEBUG {conn-10005} pool-recycle
2019-08-04 11:17:47,402 DEBUG {conn-10005} pool-connect
2019-08-04 11:17:47,439 DEBUG {conn-10005} pool-recycle
2019-08-04 11:17:48,033 INFO [Rama-Tut] modules [], plugins [], sites []
2019-08-04 11:17:48,042 DEBUG [Rama-Tut] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 11:17:48,051 DEBUG [Rama-Tut] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 11:17:48,059 DEBUG [Rama-Tut] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 11:17:48,061 DEBUG [Rama-Tut] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 11:17:48,061 DEBUG [Rama-Tut] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 11:17:48,061 DEBUG [Rama-Tut] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:17:48,061 DEBUG [Rama-Tut] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 11:17:48,061 DEBUG [Rama-Tut] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 11:17:48,062 DEBUG [Rama-Tut] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:17:48,062 DEBUG [Rama-Tut] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 11:17:48,062 DEBUG [Rama-Tut] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:17:48,062 DEBUG [Rama-Tut] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 11:17:48,062 DEBUG [Rama-Tut] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 11:17:48,062 DEBUG [Rama-Tut] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 11:17:48,062 DEBUG [Rama-Tut] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 11:17:48,062 DEBUG [Rama-Tut] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:17:49,272 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 11:17:49,288 DEBUG using gathering [true]
2019-08-04 11:17:49,305 DEBUG [Rama-Tut] node_sampler_interval[5s]
2019-08-04 11:17:49,317 DEBUG Using select timeout of 500
2019-08-04 11:17:49,317 DEBUG Epoll-bug workaround enabled = false
2019-08-04 11:17:49,356 DEBUG [Rama-Tut] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:17:49,379 DEBUG [Rama-Tut] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:17:49,412 DEBUG [Rama-Tut] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:17:50,080 DEBUG {conn-10005} pool-connect
2019-08-04 11:17:50,080 DEBUG {conn-10005} pool-recycle
2019-08-04 11:18:00,953 DEBUG {conn-10005} pool-connect
2019-08-04 11:18:01,058 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:18:01,064 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 11:18:01,064 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:18:01,067 DEBUG {conn-10005, pstmt-20000} executed. 4.919517 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:18:01,070 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 11:18:01,071 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:18:01,076 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 92, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 11:18:01,078 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 11:18:01,079 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:18:01,080 DEBUG {conn-10005} pool-recycle
2019-08-04 11:18:01,080 DEBUG {conn-10005} pool-connect
2019-08-04 11:18:01,087 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:18:01,092 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 93, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 11:18:01,092 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:18:01,100 DEBUG {conn-10005, pstmt-20001} executed. 8.060913 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:18:01,100 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:18:01,100 DEBUG {conn-10005} pool-recycle
2019-08-04 11:18:01,137 DEBUG {conn-10005} pool-connect
2019-08-04 11:18:01,137 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:18:01,138 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 11:18:01,138 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:18:01,138 DEBUG {conn-10005, pstmt-20002} executed. 0.688835 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:18:01,139 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 11:18:01,139 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:18:01,139 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:18:01,139 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 11:18:01,139 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:18:01,139 DEBUG {conn-10005} pool-recycle
2019-08-04 11:18:01,155 DEBUG {conn-10005} pool-connect
2019-08-04 11:18:01,157 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:18:01,157 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:18:01,157 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:18:01,158 DEBUG {conn-10005, pstmt-20003} executed. 0.734586 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:18:01,158 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 11:18:01,158 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 11:18:01,158 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 11:18:01,159 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 11:18:01,159 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:18:01,160 DEBUG {conn-10005} pool-recycle
2019-08-04 11:18:01,161 DEBUG {conn-10005} pool-connect
2019-08-04 11:18:01,163 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:18:01,163 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 11:18:01,163 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:18:01,164 DEBUG {conn-10005, pstmt-20004} executed. 0.604016 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:18:01,164 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 11:18:01,164 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:18:01,164 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 11:18:01,165 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 11:18:01,165 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 11:18:01,165 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:18:01,165 DEBUG {conn-10005} pool-recycle
2019-08-04 11:18:01,165 DEBUG {conn-10005} pool-connect
2019-08-04 11:18:01,165 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:18:01,165 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:18:01,166 DEBUG {conn-10005, pstmt-20003} executed. 0.470875 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:18:01,166 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 11:18:01,166 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 11:18:01,166 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 11:18:01,166 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 11:18:01,166 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:18:01,166 DEBUG {conn-10005} pool-recycle
2019-08-04 11:18:01,170 DEBUG {conn-10005} pool-connect
2019-08-04 11:18:01,171 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:18:01,171 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:18:01,171 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:18:01,172 DEBUG {conn-10005, pstmt-20005} executed. 0.782908 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:18:01,172 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 11:18:01,172 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:18:01,172 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:18:01,172 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:18:01,173 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:18:01,173 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:18:01,173 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:18:01,173 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:18:01,173 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:18:01,174 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:18:01,174 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:18:01,174 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:18:01,174 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:18:01,174 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:18:01,175 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 11:18:01,175 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:18:01,175 DEBUG {conn-10005} pool-recycle
2019-08-04 11:50:45,823 DEBUG {conn-10001,procId-345} connected
2019-08-04 11:50:45,829 DEBUG {conn-10002,procId-346} connected
2019-08-04 11:50:45,834 DEBUG {conn-10003,procId-347} connected
2019-08-04 11:50:45,839 DEBUG {conn-10004,procId-348} connected
2019-08-04 11:50:45,844 DEBUG {conn-10005,procId-349} connected
2019-08-04 11:50:45,847 DEBUG {conn-10005} pool-connect
2019-08-04 11:50:45,849 DEBUG {conn-10005} pool-recycle
2019-08-04 11:50:45,857 DEBUG {conn-10005} pool-connect
2019-08-04 11:50:45,859 DEBUG {conn-10005} pool-recycle
2019-08-04 11:50:46,208 DEBUG {conn-10005} pool-connect
2019-08-04 11:50:46,247 DEBUG {conn-10005} pool-recycle
2019-08-04 11:50:46,857 INFO [Magus] modules [], plugins [], sites []
2019-08-04 11:50:46,867 DEBUG [Magus] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 11:50:46,877 DEBUG [Magus] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 11:50:46,887 DEBUG [Magus] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 11:50:46,888 DEBUG [Magus] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 11:50:46,888 DEBUG [Magus] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 11:50:46,888 DEBUG [Magus] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:50:46,888 DEBUG [Magus] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 11:50:46,888 DEBUG [Magus] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 11:50:46,888 DEBUG [Magus] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:50:46,889 DEBUG [Magus] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 11:50:46,889 DEBUG [Magus] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:50:46,889 DEBUG [Magus] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 11:50:46,889 DEBUG [Magus] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 11:50:46,889 DEBUG [Magus] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 11:50:46,889 DEBUG [Magus] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 11:50:46,889 DEBUG [Magus] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:50:48,290 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 11:50:48,308 DEBUG using gathering [true]
2019-08-04 11:50:48,330 DEBUG [Magus] node_sampler_interval[5s]
2019-08-04 11:50:48,343 DEBUG Using select timeout of 500
2019-08-04 11:50:48,343 DEBUG Epoll-bug workaround enabled = false
2019-08-04 11:50:48,393 DEBUG [Magus] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:50:48,429 DEBUG [Magus] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:50:48,474 DEBUG [Magus] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:50:49,235 DEBUG {conn-10005} pool-connect
2019-08-04 11:50:49,235 DEBUG {conn-10005} pool-recycle
2019-08-04 11:50:54,201 DEBUG {conn-10005} pool-connect
2019-08-04 11:50:54,310 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:50:54,319 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 11:50:54,319 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:50:54,322 DEBUG {conn-10005, pstmt-20000} executed. 7.591581 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:50:54,326 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 11:50:54,327 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:50:54,333 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 93, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 11:50:54,335 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 11:50:54,336 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:50:54,336 DEBUG {conn-10005} pool-recycle
2019-08-04 11:50:54,337 DEBUG {conn-10005} pool-connect
2019-08-04 11:50:54,340 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:50:54,344 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 94, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 11:50:54,344 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:50:54,347 DEBUG {conn-10005, pstmt-20001} executed. 3.532593 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:50:54,348 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:50:54,348 DEBUG {conn-10005} pool-recycle
2019-08-04 11:50:54,392 DEBUG {conn-10005} pool-connect
2019-08-04 11:50:54,392 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:50:54,393 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 11:50:54,393 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:50:54,393 DEBUG {conn-10005, pstmt-20002} executed. 0.771598 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:50:54,394 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 11:50:54,394 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:50:54,394 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:50:54,394 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 11:50:54,394 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:50:54,394 DEBUG {conn-10005} pool-recycle
2019-08-04 11:50:54,410 DEBUG {conn-10005} pool-connect
2019-08-04 11:50:54,412 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:50:54,412 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:50:54,412 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:50:54,413 DEBUG {conn-10005, pstmt-20003} executed. 0.793702 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:50:54,413 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 11:50:54,413 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 11:50:54,413 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 11:50:54,414 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 11:50:54,414 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:50:54,415 DEBUG {conn-10005} pool-recycle
2019-08-04 11:50:54,416 DEBUG {conn-10005} pool-connect
2019-08-04 11:50:54,419 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:50:54,419 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 11:50:54,419 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:50:54,420 DEBUG {conn-10005, pstmt-20004} executed. 0.764916 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:50:54,420 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 11:50:54,420 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:50:54,420 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 11:50:54,421 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 11:50:54,421 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 11:50:54,421 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:50:54,422 DEBUG {conn-10005} pool-recycle
2019-08-04 11:50:54,422 DEBUG {conn-10005} pool-connect
2019-08-04 11:50:54,422 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:50:54,422 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:50:54,423 DEBUG {conn-10005, pstmt-20003} executed. 0.5742 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:50:54,423 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 11:50:54,423 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 11:50:54,423 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 11:50:54,423 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 11:50:54,423 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:50:54,423 DEBUG {conn-10005} pool-recycle
2019-08-04 11:50:54,426 DEBUG {conn-10005} pool-connect
2019-08-04 11:50:54,426 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:50:54,426 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:50:54,427 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:50:54,427 DEBUG {conn-10005, pstmt-20005} executed. 0.732016 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:50:54,427 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 11:50:54,427 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:50:54,428 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:50:54,428 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:50:54,428 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:50:54,428 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:50:54,429 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:50:54,429 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:50:54,429 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:50:54,429 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:50:54,430 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:50:54,430 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:50:54,430 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:50:54,430 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:50:54,431 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 11:50:54,431 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:50:54,431 DEBUG {conn-10005} pool-recycle
2019-08-04 11:51:09,795 DEBUG {conn-10005} pool-connect
2019-08-04 11:51:09,795 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 11:51:09,795 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:51:09,796 DEBUG {conn-10005, pstmt-20000} executed. 0.706828 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:51:09,796 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-04 11:51:09,796 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:51:09,796 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 94, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 11:51:09,796 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-04 11:51:09,796 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:51:09,797 DEBUG {conn-10005} pool-recycle
2019-08-04 11:51:09,797 DEBUG {conn-10005} pool-connect
2019-08-04 11:51:09,797 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 95, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 11:51:09,797 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:51:09,799 DEBUG {conn-10005, pstmt-20001} executed. 1.953413 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:51:09,799 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:51:09,799 DEBUG {conn-10005} pool-recycle
2019-08-04 11:51:09,803 DEBUG {conn-10005} pool-connect
2019-08-04 11:51:09,803 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 11:51:09,803 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:51:09,804 DEBUG {conn-10005, pstmt-20002} executed. 0.586024 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:51:09,804 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-04 11:51:09,804 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:51:09,804 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:51:09,805 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-04 11:51:09,805 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:51:09,805 DEBUG {conn-10005} pool-recycle
2019-08-04 11:51:09,805 DEBUG {conn-10005} pool-connect
2019-08-04 11:51:09,805 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:51:09,805 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:51:09,806 DEBUG {conn-10005, pstmt-20003} executed. 0.564433 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:51:09,806 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-04 11:51:09,806 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-04 11:51:09,806 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [2]
2019-08-04 11:51:09,806 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-04 11:51:09,806 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:51:09,806 DEBUG {conn-10005} pool-recycle
2019-08-04 11:51:09,806 DEBUG {conn-10005} pool-connect
2019-08-04 11:51:09,806 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 11:51:09,806 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:51:09,807 DEBUG {conn-10005, pstmt-20004} executed. 0.442603 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:51:09,807 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-04 11:51:09,807 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:51:09,807 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 11:51:09,807 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 11:51:09,808 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-04 11:51:09,808 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:51:09,808 DEBUG {conn-10005} pool-recycle
2019-08-04 11:51:09,808 DEBUG {conn-10005} pool-connect
2019-08-04 11:51:09,808 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:51:09,808 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:51:09,808 DEBUG {conn-10005, pstmt-20003} executed. 0.377831 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:51:09,808 DEBUG {conn-10005, pstmt-20003, rs-50010} open
2019-08-04 11:51:09,808 DEBUG {conn-10005, pstmt-20003, rs-50010} Header: [count(*)]
2019-08-04 11:51:09,808 DEBUG {conn-10005, pstmt-20003, rs-50010} Result: [2]
2019-08-04 11:51:09,809 DEBUG {conn-10005, pstmt-20003, rs-50010} closed
2019-08-04 11:51:09,809 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:51:09,809 DEBUG {conn-10005} pool-recycle
2019-08-04 11:51:09,809 DEBUG {conn-10005} pool-connect
2019-08-04 11:51:09,809 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:51:09,809 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:51:09,809 DEBUG {conn-10005, pstmt-20005} executed. 0.440546 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:51:09,809 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-04 11:51:09,810 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:51:09,810 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:51:09,810 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:51:09,810 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:51:09,810 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:51:09,811 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:51:09,811 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:51:09,811 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:51:09,811 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:51:09,812 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:51:09,812 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:51:09,812 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:51:09,812 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:51:09,812 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-04 11:51:09,812 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:51:09,812 DEBUG {conn-10005} pool-recycle
2019-08-04 11:59:38,459 DEBUG {conn-10001,procId-350} connected
2019-08-04 11:59:38,466 DEBUG {conn-10002,procId-351} connected
2019-08-04 11:59:38,472 DEBUG {conn-10003,procId-352} connected
2019-08-04 11:59:38,477 DEBUG {conn-10004,procId-353} connected
2019-08-04 11:59:38,481 DEBUG {conn-10005,procId-354} connected
2019-08-04 11:59:38,487 DEBUG {conn-10005} pool-connect
2019-08-04 11:59:38,489 DEBUG {conn-10005} pool-recycle
2019-08-04 11:59:38,498 DEBUG {conn-10005} pool-connect
2019-08-04 11:59:38,501 DEBUG {conn-10005} pool-recycle
2019-08-04 11:59:38,849 DEBUG {conn-10005} pool-connect
2019-08-04 11:59:38,886 DEBUG {conn-10005} pool-recycle
2019-08-04 11:59:39,475 INFO [Hack] modules [], plugins [], sites []
2019-08-04 11:59:39,486 DEBUG [Hack] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 11:59:39,493 DEBUG [Hack] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 11:59:39,502 DEBUG [Hack] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 11:59:39,503 DEBUG [Hack] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 11:59:39,503 DEBUG [Hack] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 11:59:39,503 DEBUG [Hack] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:59:39,504 DEBUG [Hack] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 11:59:39,504 DEBUG [Hack] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 11:59:39,504 DEBUG [Hack] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:59:39,504 DEBUG [Hack] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 11:59:39,504 DEBUG [Hack] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:59:39,504 DEBUG [Hack] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 11:59:39,504 DEBUG [Hack] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 11:59:39,504 DEBUG [Hack] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 11:59:39,504 DEBUG [Hack] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 11:59:39,504 DEBUG [Hack] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 11:59:40,914 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 11:59:40,931 DEBUG using gathering [true]
2019-08-04 11:59:40,955 DEBUG [Hack] node_sampler_interval[5s]
2019-08-04 11:59:40,967 DEBUG Using select timeout of 500
2019-08-04 11:59:40,967 DEBUG Epoll-bug workaround enabled = false
2019-08-04 11:59:41,008 DEBUG [Hack] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:59:41,033 DEBUG [Hack] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:59:41,069 DEBUG [Hack] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 11:59:41,781 DEBUG {conn-10005} pool-connect
2019-08-04 11:59:41,781 DEBUG {conn-10005} pool-recycle
2019-08-04 11:59:51,756 DEBUG {conn-10005} pool-connect
2019-08-04 11:59:51,833 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:59:51,838 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 11:59:51,838 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 11:59:51,841 DEBUG {conn-10005, pstmt-20000} executed. 4.958585 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 11:59:51,844 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 11:59:51,845 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 11:59:51,849 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 95, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 11:59:51,851 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 11:59:51,851 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 11:59:51,852 DEBUG {conn-10005} pool-recycle
2019-08-04 11:59:51,852 DEBUG {conn-10005} pool-connect
2019-08-04 11:59:51,855 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:59:51,858 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 96, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 11:59:51,858 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 11:59:51,866 DEBUG {conn-10005, pstmt-20001} executed. 8.407901 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 11:59:51,866 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 11:59:51,866 DEBUG {conn-10005} pool-recycle
2019-08-04 11:59:51,898 DEBUG {conn-10005} pool-connect
2019-08-04 11:59:51,898 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:59:51,898 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 11:59:51,898 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 11:59:51,899 DEBUG {conn-10005, pstmt-20002} executed. 0.611213 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 11:59:51,899 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 11:59:51,899 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 11:59:51,899 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 11:59:51,900 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 11:59:51,900 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 11:59:51,900 DEBUG {conn-10005} pool-recycle
2019-08-04 11:59:51,911 DEBUG {conn-10005} pool-connect
2019-08-04 11:59:51,912 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:59:51,913 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:59:51,913 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:59:51,913 DEBUG {conn-10005, pstmt-20003} executed. 0.671358 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:59:51,913 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 11:59:51,913 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 11:59:51,914 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 11:59:51,915 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 11:59:51,915 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:59:51,915 DEBUG {conn-10005} pool-recycle
2019-08-04 11:59:51,916 DEBUG {conn-10005} pool-connect
2019-08-04 11:59:51,918 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:59:51,919 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 11:59:51,919 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 11:59:51,919 DEBUG {conn-10005, pstmt-20004} executed. 0.595277 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 11:59:51,919 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 11:59:51,919 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 11:59:51,920 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 11:59:51,920 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 11:59:51,920 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 11:59:51,920 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 11:59:51,920 DEBUG {conn-10005} pool-recycle
2019-08-04 11:59:51,920 DEBUG {conn-10005} pool-connect
2019-08-04 11:59:51,921 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 11:59:51,921 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 11:59:51,921 DEBUG {conn-10005, pstmt-20003} executed. 0.412788 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 11:59:51,921 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 11:59:51,921 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 11:59:51,921 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 11:59:51,921 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 11:59:51,921 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 11:59:51,921 DEBUG {conn-10005} pool-recycle
2019-08-04 11:59:51,924 DEBUG {conn-10005} pool-connect
2019-08-04 11:59:51,924 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:59:51,924 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 11:59:51,924 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 11:59:51,925 DEBUG {conn-10005, pstmt-20005} executed. 0.586538 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 11:59:51,925 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 11:59:51,925 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 11:59:51,925 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 11:59:51,925 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 11:59:51,925 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 11:59:51,926 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 11:59:51,926 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 11:59:51,926 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 11:59:51,926 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 11:59:51,926 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 11:59:51,927 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 11:59:51,927 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 11:59:51,927 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 11:59:51,927 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 11:59:51,927 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 11:59:51,927 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 11:59:51,927 DEBUG {conn-10005} pool-recycle
2019-08-04 12:21:32,739 DEBUG {conn-10001,procId-355} connected
2019-08-04 12:21:32,748 DEBUG {conn-10002,procId-356} connected
2019-08-04 12:21:32,753 DEBUG {conn-10003,procId-357} connected
2019-08-04 12:21:32,759 DEBUG {conn-10004,procId-358} connected
2019-08-04 12:21:32,764 DEBUG {conn-10005,procId-359} connected
2019-08-04 12:21:32,770 DEBUG {conn-10005} pool-connect
2019-08-04 12:21:32,773 DEBUG {conn-10005} pool-recycle
2019-08-04 12:21:32,782 DEBUG {conn-10005} pool-connect
2019-08-04 12:21:32,785 DEBUG {conn-10005} pool-recycle
2019-08-04 12:21:33,166 DEBUG {conn-10005} pool-connect
2019-08-04 12:21:33,205 DEBUG {conn-10005} pool-recycle
2019-08-04 12:21:33,810 INFO [Anubis] modules [], plugins [], sites []
2019-08-04 12:21:33,819 DEBUG [Anubis] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 12:21:33,829 DEBUG [Anubis] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 12:21:33,838 DEBUG [Anubis] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 12:21:33,839 DEBUG [Anubis] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 12:21:33,839 DEBUG [Anubis] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 12:21:33,839 DEBUG [Anubis] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 12:21:33,839 DEBUG [Anubis] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 12:21:33,839 DEBUG [Anubis] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 12:21:33,840 DEBUG [Anubis] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 12:21:33,840 DEBUG [Anubis] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 12:21:33,840 DEBUG [Anubis] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 12:21:33,840 DEBUG [Anubis] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 12:21:33,840 DEBUG [Anubis] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 12:21:33,840 DEBUG [Anubis] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 12:21:33,840 DEBUG [Anubis] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 12:21:33,840 DEBUG [Anubis] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 12:21:35,077 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 12:21:35,094 DEBUG using gathering [true]
2019-08-04 12:21:35,113 DEBUG [Anubis] node_sampler_interval[5s]
2019-08-04 12:21:35,124 DEBUG Using select timeout of 500
2019-08-04 12:21:35,124 DEBUG Epoll-bug workaround enabled = false
2019-08-04 12:21:35,161 DEBUG [Anubis] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 12:21:35,183 DEBUG [Anubis] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 12:21:35,210 DEBUG [Anubis] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 12:21:35,867 DEBUG {conn-10005} pool-connect
2019-08-04 12:21:35,867 DEBUG {conn-10005} pool-recycle
2019-08-04 12:21:42,676 DEBUG {conn-10005} pool-connect
2019-08-04 12:21:42,789 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 12:21:42,797 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 12:21:42,797 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 12:21:42,801 DEBUG {conn-10005, pstmt-20000} executed. 6.768577 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 12:21:42,806 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 12:21:42,808 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 12:21:42,817 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 96, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 12:21:42,821 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 12:21:42,821 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 12:21:42,822 DEBUG {conn-10005} pool-recycle
2019-08-04 12:21:42,822 DEBUG {conn-10005} pool-connect
2019-08-04 12:21:42,827 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 12:21:42,834 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 97, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 12:21:42,834 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 12:21:42,838 DEBUG {conn-10005, pstmt-20001} executed. 4.894328 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 12:21:42,839 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 12:21:42,839 DEBUG {conn-10005} pool-recycle
2019-08-04 12:21:42,892 DEBUG {conn-10005} pool-connect
2019-08-04 12:21:42,893 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 12:21:42,894 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 12:21:42,894 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 12:21:42,895 DEBUG {conn-10005, pstmt-20002} executed. 0.844594 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 12:21:42,895 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 12:21:42,895 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 12:21:42,895 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 12:21:42,895 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 12:21:42,896 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 12:21:42,896 DEBUG {conn-10005} pool-recycle
2019-08-04 12:21:42,912 DEBUG {conn-10005} pool-connect
2019-08-04 12:21:42,914 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 12:21:42,914 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 12:21:42,914 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 12:21:42,915 DEBUG {conn-10005, pstmt-20003} executed. 0.835341 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 12:21:42,915 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 12:21:42,915 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 12:21:42,915 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 12:21:42,917 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 12:21:42,917 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 12:21:42,917 DEBUG {conn-10005} pool-recycle
2019-08-04 12:21:42,919 DEBUG {conn-10005} pool-connect
2019-08-04 12:21:42,921 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 12:21:42,922 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 12:21:42,922 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 12:21:42,923 DEBUG {conn-10005, pstmt-20004} executed. 0.70837 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 12:21:42,923 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 12:21:42,923 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 12:21:42,923 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 12:21:42,923 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 12:21:42,924 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 12:21:42,924 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 12:21:42,924 DEBUG {conn-10005} pool-recycle
2019-08-04 12:21:42,924 DEBUG {conn-10005} pool-connect
2019-08-04 12:21:42,924 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 12:21:42,924 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 12:21:42,925 DEBUG {conn-10005, pstmt-20003} executed. 0.520739 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 12:21:42,925 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 12:21:42,925 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 12:21:42,925 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 12:21:42,925 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 12:21:42,925 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 12:21:42,925 DEBUG {conn-10005} pool-recycle
2019-08-04 12:21:42,928 DEBUG {conn-10005} pool-connect
2019-08-04 12:21:42,929 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 12:21:42,929 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 12:21:42,929 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 12:21:42,930 DEBUG {conn-10005, pstmt-20005} executed. 0.744867 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 12:21:42,930 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 12:21:42,930 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 12:21:42,930 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 12:21:42,930 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 12:21:42,931 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 12:21:42,931 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 12:21:42,931 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 12:21:42,931 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 12:21:42,932 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 12:21:42,932 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 12:21:42,932 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 12:21:42,933 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 12:21:42,933 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 12:21:42,933 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 12:21:42,934 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 12:21:42,934 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 12:21:42,934 DEBUG {conn-10005} pool-recycle
2019-08-04 12:23:01,137 DEBUG {conn-10005} pool-connect
2019-08-04 12:23:01,138 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 12:23:01,138 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 12:23:01,138 DEBUG {conn-10005, pstmt-20000} executed. 0.833285 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 12:23:01,138 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-04 12:23:01,139 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 12:23:01,139 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 97, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 12:23:01,140 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-04 12:23:01,140 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 12:23:01,140 DEBUG {conn-10005} pool-recycle
2019-08-04 12:23:01,140 DEBUG {conn-10005} pool-connect
2019-08-04 12:23:01,141 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 98, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 12:23:01,141 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 12:23:01,148 DEBUG {conn-10005, pstmt-20001} executed. 8.481412 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 12:23:01,148 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 12:23:01,148 DEBUG {conn-10005} pool-recycle
2019-08-04 12:23:01,152 DEBUG {conn-10005} pool-connect
2019-08-04 12:23:01,152 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 12:23:01,152 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 12:23:01,153 DEBUG {conn-10005, pstmt-20002} executed. 1.24453 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 12:23:01,154 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-04 12:23:01,154 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 12:23:01,154 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 12:23:01,154 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-04 12:23:01,154 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 12:23:01,154 DEBUG {conn-10005} pool-recycle
2019-08-04 12:23:01,155 DEBUG {conn-10005} pool-connect
2019-08-04 12:23:01,155 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 12:23:01,155 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 12:23:01,155 DEBUG {conn-10005, pstmt-20003} executed. 0.53102 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 12:23:01,155 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-04 12:23:01,155 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-04 12:23:01,156 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [2]
2019-08-04 12:23:01,156 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-04 12:23:01,156 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 12:23:01,156 DEBUG {conn-10005} pool-recycle
2019-08-04 12:23:01,156 DEBUG {conn-10005} pool-connect
2019-08-04 12:23:01,156 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 12:23:01,156 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 12:23:01,157 DEBUG {conn-10005, pstmt-20004} executed. 0.450313 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 12:23:01,157 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-04 12:23:01,157 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 12:23:01,157 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 12:23:01,157 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 12:23:01,158 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-04 12:23:01,158 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 12:23:01,158 DEBUG {conn-10005} pool-recycle
2019-08-04 12:23:01,158 DEBUG {conn-10005} pool-connect
2019-08-04 12:23:01,158 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 12:23:01,158 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 12:23:01,158 DEBUG {conn-10005, pstmt-20003} executed. 0.403534 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 12:23:01,158 DEBUG {conn-10005, pstmt-20003, rs-50010} open
2019-08-04 12:23:01,159 DEBUG {conn-10005, pstmt-20003, rs-50010} Header: [count(*)]
2019-08-04 12:23:01,159 DEBUG {conn-10005, pstmt-20003, rs-50010} Result: [2]
2019-08-04 12:23:01,159 DEBUG {conn-10005, pstmt-20003, rs-50010} closed
2019-08-04 12:23:01,159 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 12:23:01,159 DEBUG {conn-10005} pool-recycle
2019-08-04 12:23:01,159 DEBUG {conn-10005} pool-connect
2019-08-04 12:23:01,159 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 12:23:01,159 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 12:23:01,159 DEBUG {conn-10005, pstmt-20005} executed. 0.365494 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 12:23:01,159 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-04 12:23:01,159 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-04 12:23:01,160 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 12:23:01,160 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 12:23:01,160 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 12:23:01,160 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 12:23:01,161 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 12:23:01,161 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 12:23:01,161 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 12:23:01,161 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 12:23:01,161 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 12:23:01,161 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 12:23:01,162 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 12:23:01,162 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 12:23:01,162 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-04 12:23:01,162 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 12:23:01,162 DEBUG {conn-10005} pool-recycle
2019-08-04 12:29:32,670 DEBUG {conn-10005} pool-connect
2019-08-04 12:29:32,671 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 12:29:32,671 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 12:29:32,672 DEBUG {conn-10005, pstmt-20000} executed. 0.802956 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 12:29:32,672 DEBUG {conn-10005, pstmt-20000, rs-50012} open
2019-08-04 12:29:32,672 DEBUG {conn-10005, pstmt-20000, rs-50012} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 12:29:32,672 DEBUG {conn-10005, pstmt-20000, rs-50012} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 98, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 12:29:32,672 DEBUG {conn-10005, pstmt-20000, rs-50012} closed
2019-08-04 12:29:32,672 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 12:29:32,672 DEBUG {conn-10005} pool-recycle
2019-08-04 12:29:32,672 DEBUG {conn-10005} pool-connect
2019-08-04 12:29:32,673 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 99, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 12:29:32,673 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 12:29:32,681 DEBUG {conn-10005, pstmt-20001} executed. 8.266536 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 12:29:32,681 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 12:29:32,681 DEBUG {conn-10005} pool-recycle
2019-08-04 12:29:32,685 DEBUG {conn-10005} pool-connect
2019-08-04 12:29:32,685 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 12:29:32,685 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 12:29:32,685 DEBUG {conn-10005, pstmt-20002} executed. 0.512 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 12:29:32,685 DEBUG {conn-10005, pstmt-20002, rs-50013} open
2019-08-04 12:29:32,685 DEBUG {conn-10005, pstmt-20002, rs-50013} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 12:29:32,686 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 12:29:32,686 DEBUG {conn-10005, pstmt-20002, rs-50013} closed
2019-08-04 12:29:32,686 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 12:29:32,686 DEBUG {conn-10005} pool-recycle
2019-08-04 12:29:32,686 DEBUG {conn-10005} pool-connect
2019-08-04 12:29:32,686 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 12:29:32,686 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 12:29:32,687 DEBUG {conn-10005, pstmt-20003} executed. 0.407647 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 12:29:32,687 DEBUG {conn-10005, pstmt-20003, rs-50014} open
2019-08-04 12:29:32,687 DEBUG {conn-10005, pstmt-20003, rs-50014} Header: [count(*)]
2019-08-04 12:29:32,687 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [2]
2019-08-04 12:29:32,687 DEBUG {conn-10005, pstmt-20003, rs-50014} closed
2019-08-04 12:29:32,687 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 12:29:32,687 DEBUG {conn-10005} pool-recycle
2019-08-04 12:29:32,687 DEBUG {conn-10005} pool-connect
2019-08-04 12:29:32,688 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 12:29:32,688 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 12:29:32,688 DEBUG {conn-10005, pstmt-20004} executed. 0.508916 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 12:29:32,688 DEBUG {conn-10005, pstmt-20004, rs-50015} open
2019-08-04 12:29:32,688 DEBUG {conn-10005, pstmt-20004, rs-50015} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 12:29:32,689 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 12:29:32,689 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 12:29:32,689 DEBUG {conn-10005, pstmt-20004, rs-50015} closed
2019-08-04 12:29:32,689 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 12:29:32,689 DEBUG {conn-10005} pool-recycle
2019-08-04 12:29:32,690 DEBUG {conn-10005} pool-connect
2019-08-04 12:29:32,690 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 12:29:32,690 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 12:29:32,690 DEBUG {conn-10005, pstmt-20003} executed. 0.478586 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 12:29:32,690 DEBUG {conn-10005, pstmt-20003, rs-50016} open
2019-08-04 12:29:32,690 DEBUG {conn-10005, pstmt-20003, rs-50016} Header: [count(*)]
2019-08-04 12:29:32,690 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [2]
2019-08-04 12:29:32,691 DEBUG {conn-10005, pstmt-20003, rs-50016} closed
2019-08-04 12:29:32,691 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 12:29:32,691 DEBUG {conn-10005} pool-recycle
2019-08-04 12:29:32,691 DEBUG {conn-10005} pool-connect
2019-08-04 12:29:32,691 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 12:29:32,691 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 12:29:32,692 DEBUG {conn-10005, pstmt-20005} executed. 0.503261 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 12:29:32,692 DEBUG {conn-10005, pstmt-20005, rs-50017} open
2019-08-04 12:29:32,692 DEBUG {conn-10005, pstmt-20005, rs-50017} Header: [config_name, config_value, create_time, update_time]
2019-08-04 12:29:32,692 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 12:29:32,692 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 12:29:32,692 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 12:29:32,692 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 12:29:32,693 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 12:29:32,693 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 12:29:32,693 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 12:29:32,693 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 12:29:32,693 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 12:29:32,694 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 12:29:32,694 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 12:29:32,694 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 12:29:32,694 DEBUG {conn-10005, pstmt-20005, rs-50017} closed
2019-08-04 12:29:32,694 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 12:29:32,694 DEBUG {conn-10005} pool-recycle
2019-08-04 13:34:02,148 DEBUG {conn-10001,procId-360} connected
2019-08-04 13:34:02,176 DEBUG {conn-10002,procId-361} connected
2019-08-04 13:34:02,193 DEBUG {conn-10003,procId-362} connected
2019-08-04 13:34:02,210 DEBUG {conn-10004,procId-363} connected
2019-08-04 13:34:02,225 DEBUG {conn-10005,procId-364} connected
2019-08-04 13:34:02,241 DEBUG {conn-10005} pool-connect
2019-08-04 13:34:02,248 DEBUG {conn-10005} pool-recycle
2019-08-04 13:34:02,273 DEBUG {conn-10005} pool-connect
2019-08-04 13:34:02,279 DEBUG {conn-10005} pool-recycle
2019-08-04 13:34:03,472 DEBUG {conn-10005} pool-connect
2019-08-04 13:34:03,586 DEBUG {conn-10005} pool-recycle
2019-08-04 13:34:05,575 INFO [Gargouille] modules [], plugins [], sites []
2019-08-04 13:34:05,597 DEBUG [Gargouille] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 13:34:05,616 DEBUG [Gargouille] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 13:34:05,634 DEBUG [Gargouille] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:34:05,635 DEBUG [Gargouille] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 13:34:05,635 DEBUG [Gargouille] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 13:34:05,636 DEBUG [Gargouille] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:34:05,636 DEBUG [Gargouille] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 13:34:05,636 DEBUG [Gargouille] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 13:34:05,636 DEBUG [Gargouille] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:34:05,636 DEBUG [Gargouille] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 13:34:05,637 DEBUG [Gargouille] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:34:05,637 DEBUG [Gargouille] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:34:05,637 DEBUG [Gargouille] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 13:34:05,637 DEBUG [Gargouille] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 13:34:05,637 DEBUG [Gargouille] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 13:34:05,637 DEBUG [Gargouille] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:34:08,408 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 13:34:08,429 DEBUG using gathering [true]
2019-08-04 13:34:08,452 DEBUG [Gargouille] node_sampler_interval[5s]
2019-08-04 13:34:08,470 DEBUG Using select timeout of 500
2019-08-04 13:34:08,470 DEBUG Epoll-bug workaround enabled = false
2019-08-04 13:34:08,518 DEBUG [Gargouille] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:34:08,543 DEBUG [Gargouille] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:34:08,578 DEBUG [Gargouille] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:34:09,747 DEBUG {conn-10005} pool-connect
2019-08-04 13:34:09,747 DEBUG {conn-10005} pool-recycle
2019-08-04 13:34:17,570 DEBUG {conn-10005} pool-connect
2019-08-04 13:34:17,733 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:34:17,743 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:34:17,743 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:34:17,748 DEBUG {conn-10005, pstmt-20000} executed. 6.592769 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:34:17,754 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 13:34:17,755 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:34:17,764 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 99, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:34:17,768 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 13:34:17,769 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:34:17,770 DEBUG {conn-10005} pool-recycle
2019-08-04 13:34:17,770 DEBUG {conn-10005} pool-connect
2019-08-04 13:34:17,776 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:34:17,783 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 100, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:34:17,783 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:34:17,794 DEBUG {conn-10005, pstmt-20001} executed. 9.956753 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:34:17,794 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:34:17,794 DEBUG {conn-10005} pool-recycle
2019-08-04 13:34:17,867 DEBUG {conn-10005} pool-connect
2019-08-04 13:34:17,870 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:34:17,871 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 13:34:17,871 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 13:34:17,872 DEBUG {conn-10005, pstmt-20002} executed. 1.06204 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:34:17,872 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 13:34:17,872 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:34:17,872 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:34:17,873 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 13:34:17,873 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:34:17,873 DEBUG {conn-10005} pool-recycle
2019-08-04 13:34:17,898 DEBUG {conn-10005} pool-connect
2019-08-04 13:34:17,901 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:34:17,901 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:34:17,901 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:34:17,903 DEBUG {conn-10005, pstmt-20003} executed. 1.255325 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:34:17,903 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 13:34:17,903 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 13:34:17,903 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 13:34:17,906 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 13:34:17,906 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:34:17,906 DEBUG {conn-10005} pool-recycle
2019-08-04 13:34:17,909 DEBUG {conn-10005} pool-connect
2019-08-04 13:34:17,914 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:34:17,914 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 13:34:17,914 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:34:17,915 DEBUG {conn-10005, pstmt-20004} executed. 1.049703 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:34:17,915 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 13:34:17,915 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:34:17,916 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:34:17,917 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:34:17,918 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 13:34:17,918 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:34:17,918 DEBUG {conn-10005} pool-recycle
2019-08-04 13:34:17,919 DEBUG {conn-10005} pool-connect
2019-08-04 13:34:17,919 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:34:17,919 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:34:17,920 DEBUG {conn-10005, pstmt-20003} executed. 0.918104 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:34:17,920 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 13:34:17,920 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 13:34:17,920 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 13:34:17,921 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 13:34:17,921 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:34:17,921 DEBUG {conn-10005} pool-recycle
2019-08-04 13:34:17,927 DEBUG {conn-10005} pool-connect
2019-08-04 13:34:17,928 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:34:17,928 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:34:17,928 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:34:17,929 DEBUG {conn-10005, pstmt-20005} executed. 1.211116 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:34:17,929 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 13:34:17,929 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:34:17,929 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:34:17,930 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:34:17,930 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:34:17,931 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:34:17,932 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:34:17,932 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:34:17,933 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:34:17,933 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:34:17,933 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:34:17,934 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:34:17,934 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:34:17,934 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:34:17,934 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 13:34:17,934 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:34:17,934 DEBUG {conn-10005} pool-recycle
2019-08-04 13:35:50,567 DEBUG {conn-10001,procId-365} connected
2019-08-04 13:35:50,578 DEBUG {conn-10002,procId-366} connected
2019-08-04 13:35:50,586 DEBUG {conn-10003,procId-367} connected
2019-08-04 13:35:50,594 DEBUG {conn-10004,procId-368} connected
2019-08-04 13:35:50,600 DEBUG {conn-10005,procId-369} connected
2019-08-04 13:35:50,610 DEBUG {conn-10005} pool-connect
2019-08-04 13:35:50,611 DEBUG {conn-10005} pool-recycle
2019-08-04 13:35:50,625 DEBUG {conn-10005} pool-connect
2019-08-04 13:35:50,628 DEBUG {conn-10005} pool-recycle
2019-08-04 13:35:51,539 DEBUG {conn-10005} pool-connect
2019-08-04 13:35:51,626 DEBUG {conn-10005} pool-recycle
2019-08-04 13:35:53,375 INFO [Brother Nature] modules [], plugins [], sites []
2019-08-04 13:35:53,424 DEBUG [Brother Nature] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 13:35:53,469 DEBUG [Brother Nature] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 13:35:53,522 DEBUG [Brother Nature] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:35:53,528 DEBUG [Brother Nature] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 13:35:53,528 DEBUG [Brother Nature] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 13:35:53,528 DEBUG [Brother Nature] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:35:53,532 DEBUG [Brother Nature] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 13:35:53,533 DEBUG [Brother Nature] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 13:35:53,534 DEBUG [Brother Nature] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:35:53,535 DEBUG [Brother Nature] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 13:35:53,537 DEBUG [Brother Nature] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:35:53,537 DEBUG [Brother Nature] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:35:53,538 DEBUG [Brother Nature] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 13:35:53,538 DEBUG [Brother Nature] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 13:35:53,538 DEBUG [Brother Nature] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 13:35:53,538 DEBUG [Brother Nature] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:35:57,567 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 13:35:57,588 DEBUG using gathering [true]
2019-08-04 13:35:57,615 DEBUG [Brother Nature] node_sampler_interval[5s]
2019-08-04 13:35:57,627 DEBUG Using select timeout of 500
2019-08-04 13:35:57,627 DEBUG Epoll-bug workaround enabled = false
2019-08-04 13:35:57,679 DEBUG [Brother Nature] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:35:57,710 DEBUG [Brother Nature] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:35:57,749 DEBUG [Brother Nature] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:35:58,584 DEBUG {conn-10005} pool-connect
2019-08-04 13:35:58,584 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:05,750 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:05,911 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:36:05,926 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:36:05,926 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:36:05,927 DEBUG {conn-10005, pstmt-20000} executed. 10.125363 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:36:05,936 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 13:36:05,937 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:36:05,945 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 100, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:36:05,950 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 13:36:05,951 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:36:05,952 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:05,952 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:05,957 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:36:05,963 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 101, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:36:05,963 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:36:05,972 DEBUG {conn-10005, pstmt-20001} executed. 9.184126 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:36:05,972 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:36:05,972 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:06,022 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:06,023 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:36:06,023 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 13:36:06,023 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 13:36:06,024 DEBUG {conn-10005, pstmt-20002} executed. 0.708883 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:36:06,024 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 13:36:06,024 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:36:06,024 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:36:06,024 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 13:36:06,024 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:36:06,025 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:06,043 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:06,046 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:36:06,046 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:36:06,046 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:36:06,047 DEBUG {conn-10005, pstmt-20003} executed. 0.842538 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:36:06,047 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 13:36:06,047 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 13:36:06,047 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 13:36:06,049 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 13:36:06,049 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:36:06,050 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:06,050 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:06,054 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:36:06,055 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 13:36:06,055 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:36:06,056 DEBUG {conn-10005, pstmt-20004} executed. 0.847678 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:36:06,056 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 13:36:06,056 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:36:06,056 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:36:06,057 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:36:06,057 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 13:36:06,057 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:36:06,057 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:06,058 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:06,058 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:36:06,058 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:36:06,059 DEBUG {conn-10005, pstmt-20003} executed. 0.707341 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:36:06,059 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 13:36:06,059 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 13:36:06,059 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 13:36:06,059 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 13:36:06,059 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:36:06,060 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:06,065 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:06,066 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:36:06,066 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:36:06,066 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:36:06,067 DEBUG {conn-10005, pstmt-20005} executed. 1.224996 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:36:06,067 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 13:36:06,067 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:36:06,067 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:36:06,068 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:36:06,068 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:36:06,069 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:36:06,070 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:36:06,070 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:36:06,070 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:36:06,070 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:36:06,071 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:36:06,071 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:36:06,071 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:36:06,072 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:36:06,072 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 13:36:06,072 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:36:06,072 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:47,280 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:47,280 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:36:47,281 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:36:47,282 DEBUG {conn-10005, pstmt-20000} executed. 1.134008 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:36:47,282 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-04 13:36:47,282 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:36:47,282 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 101, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:36:47,284 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-04 13:36:47,284 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:36:47,284 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:47,284 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:47,285 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 102, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:36:47,285 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:36:47,293 DEBUG {conn-10005, pstmt-20001} executed. 8.603756 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:36:47,294 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:36:47,294 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:47,302 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:47,302 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 13:36:47,302 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 13:36:47,303 DEBUG {conn-10005, pstmt-20002} executed. 1.020915 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:36:47,303 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-04 13:36:47,303 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:36:47,304 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:47,304 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20003} executed. 0.82249 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [2]
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:36:47,304 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:47,304 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 13:36:47,304 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:36:47,308 DEBUG {conn-10005, pstmt-20004} executed. 0.927357 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:36:47,308 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-04 13:36:47,308 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:36:47,309 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:36:47,310 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:36:47,310 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-04 13:36:47,310 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:36:47,310 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:47,311 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:47,311 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:36:47,311 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:36:47,312 DEBUG {conn-10005, pstmt-20003} executed. 0.908337 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:36:47,312 DEBUG {conn-10005, pstmt-20003, rs-50010} open
2019-08-04 13:36:47,312 DEBUG {conn-10005, pstmt-20003, rs-50010} Header: [count(*)]
2019-08-04 13:36:47,312 DEBUG {conn-10005, pstmt-20003, rs-50010} Result: [2]
2019-08-04 13:36:47,313 DEBUG {conn-10005, pstmt-20003, rs-50010} closed
2019-08-04 13:36:47,313 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:36:47,313 DEBUG {conn-10005} pool-recycle
2019-08-04 13:36:47,313 DEBUG {conn-10005} pool-connect
2019-08-04 13:36:47,313 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:36:47,313 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:36:47,315 DEBUG {conn-10005, pstmt-20005} executed. 0.779309 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:36:47,315 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-04 13:36:47,315 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:36:47,315 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:36:47,315 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:36:47,315 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:36:47,315 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:36:47,317 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:36:47,317 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:36:47,318 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:36:47,318 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:36:47,319 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:36:47,319 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:36:47,319 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:36:47,320 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:36:47,320 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-04 13:36:47,320 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:36:47,320 DEBUG {conn-10005} pool-recycle
2019-08-04 13:39:43,059 DEBUG {conn-10001,procId-370} connected
2019-08-04 13:39:43,068 DEBUG {conn-10002,procId-371} connected
2019-08-04 13:39:43,073 DEBUG {conn-10003,procId-372} connected
2019-08-04 13:39:43,079 DEBUG {conn-10004,procId-373} connected
2019-08-04 13:39:43,084 DEBUG {conn-10005,procId-374} connected
2019-08-04 13:39:43,091 DEBUG {conn-10005} pool-connect
2019-08-04 13:39:43,092 DEBUG {conn-10005} pool-recycle
2019-08-04 13:39:43,100 DEBUG {conn-10005} pool-connect
2019-08-04 13:39:43,102 DEBUG {conn-10005} pool-recycle
2019-08-04 13:39:43,730 DEBUG {conn-10005} pool-connect
2019-08-04 13:39:43,783 DEBUG {conn-10005} pool-recycle
2019-08-04 13:39:45,205 INFO [Ultragirl] modules [], plugins [], sites []
2019-08-04 13:39:45,243 DEBUG [Ultragirl] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 13:39:45,288 DEBUG [Ultragirl] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 13:39:45,330 DEBUG [Ultragirl] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:39:45,334 DEBUG [Ultragirl] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 13:39:45,335 DEBUG [Ultragirl] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 13:39:45,335 DEBUG [Ultragirl] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:39:45,336 DEBUG [Ultragirl] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 13:39:45,337 DEBUG [Ultragirl] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 13:39:45,337 DEBUG [Ultragirl] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:39:45,338 DEBUG [Ultragirl] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 13:39:45,338 DEBUG [Ultragirl] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:39:45,339 DEBUG [Ultragirl] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:39:45,339 DEBUG [Ultragirl] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 13:39:45,340 DEBUG [Ultragirl] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 13:39:45,340 DEBUG [Ultragirl] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 13:39:45,341 DEBUG [Ultragirl] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:39:48,361 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 13:39:48,379 DEBUG using gathering [true]
2019-08-04 13:39:48,407 DEBUG [Ultragirl] node_sampler_interval[5s]
2019-08-04 13:39:48,417 DEBUG Using select timeout of 500
2019-08-04 13:39:48,417 DEBUG Epoll-bug workaround enabled = false
2019-08-04 13:39:48,559 DEBUG [Ultragirl] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:39:48,614 DEBUG [Ultragirl] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:39:48,676 DEBUG [Ultragirl] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:39:49,702 DEBUG {conn-10005} pool-connect
2019-08-04 13:39:49,702 DEBUG {conn-10005} pool-recycle
2019-08-04 13:39:56,817 DEBUG {conn-10005} pool-connect
2019-08-04 13:39:56,923 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:39:56,931 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:39:56,931 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:39:56,934 DEBUG {conn-10005, pstmt-20000} executed. 6.209797 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:39:56,939 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 13:39:56,940 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:39:56,945 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 102, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:39:56,948 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 13:39:56,948 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:39:56,949 DEBUG {conn-10005} pool-recycle
2019-08-04 13:39:56,949 DEBUG {conn-10005} pool-connect
2019-08-04 13:39:56,953 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:39:56,956 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 103, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:39:56,956 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:39:56,959 DEBUG {conn-10005, pstmt-20001} executed. 2.978441 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:39:56,960 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:39:56,960 DEBUG {conn-10005} pool-recycle
2019-08-04 13:39:57,005 DEBUG {conn-10005} pool-connect
2019-08-04 13:39:57,006 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:39:57,006 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 13:39:57,006 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 13:39:57,006 DEBUG {conn-10005, pstmt-20002} executed. 0.68318 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:39:57,007 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 13:39:57,007 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:39:57,007 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:39:57,007 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 13:39:57,007 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:39:57,007 DEBUG {conn-10005} pool-recycle
2019-08-04 13:39:57,025 DEBUG {conn-10005} pool-connect
2019-08-04 13:39:57,027 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:39:57,027 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:39:57,027 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:39:57,028 DEBUG {conn-10005, pstmt-20003} executed. 0.765944 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:39:57,028 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 13:39:57,028 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 13:39:57,028 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 13:39:57,029 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 13:39:57,030 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:39:57,030 DEBUG {conn-10005} pool-recycle
2019-08-04 13:39:57,031 DEBUG {conn-10005} pool-connect
2019-08-04 13:39:57,034 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:39:57,034 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 13:39:57,034 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:39:57,035 DEBUG {conn-10005, pstmt-20004} executed. 0.825574 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:39:57,035 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 13:39:57,035 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:39:57,036 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:39:57,036 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:39:57,037 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 13:39:57,037 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:39:57,037 DEBUG {conn-10005} pool-recycle
2019-08-04 13:39:57,037 DEBUG {conn-10005} pool-connect
2019-08-04 13:39:57,038 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:39:57,038 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:39:57,038 DEBUG {conn-10005, pstmt-20003} executed. 0.56906 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:39:57,038 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 13:39:57,038 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 13:39:57,038 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 13:39:57,039 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 13:39:57,039 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:39:57,039 DEBUG {conn-10005} pool-recycle
2019-08-04 13:39:57,042 DEBUG {conn-10005} pool-connect
2019-08-04 13:39:57,043 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:39:57,043 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:39:57,043 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:39:57,044 DEBUG {conn-10005, pstmt-20005} executed. 1.064096 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:39:57,044 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 13:39:57,044 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:39:57,045 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:39:57,045 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:39:57,045 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:39:57,046 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:39:57,046 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:39:57,046 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:39:57,047 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:39:57,047 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:39:57,047 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:39:57,048 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:39:57,048 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:39:57,048 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:39:57,049 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 13:39:57,049 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:39:57,049 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:35,868 DEBUG {conn-10001,procId-375} connected
2019-08-04 13:41:35,880 DEBUG {conn-10002,procId-376} connected
2019-08-04 13:41:35,888 DEBUG {conn-10003,procId-377} connected
2019-08-04 13:41:35,894 DEBUG {conn-10004,procId-378} connected
2019-08-04 13:41:35,902 DEBUG {conn-10005,procId-379} connected
2019-08-04 13:41:35,912 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:35,914 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:35,925 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:35,927 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:36,497 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:36,555 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:37,482 INFO [Kilmer] modules [], plugins [], sites []
2019-08-04 13:41:37,497 DEBUG [Kilmer] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 13:41:37,510 DEBUG [Kilmer] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 13:41:37,524 DEBUG [Kilmer] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:41:37,525 DEBUG [Kilmer] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 13:41:37,525 DEBUG [Kilmer] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 13:41:37,526 DEBUG [Kilmer] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:41:37,526 DEBUG [Kilmer] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 13:41:37,526 DEBUG [Kilmer] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 13:41:37,526 DEBUG [Kilmer] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:41:37,526 DEBUG [Kilmer] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 13:41:37,526 DEBUG [Kilmer] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:41:37,527 DEBUG [Kilmer] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:41:37,527 DEBUG [Kilmer] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 13:41:37,527 DEBUG [Kilmer] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 13:41:37,527 DEBUG [Kilmer] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 13:41:37,527 DEBUG [Kilmer] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:41:39,174 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 13:41:39,193 DEBUG using gathering [true]
2019-08-04 13:41:39,215 DEBUG [Kilmer] node_sampler_interval[5s]
2019-08-04 13:41:39,228 DEBUG Using select timeout of 500
2019-08-04 13:41:39,228 DEBUG Epoll-bug workaround enabled = false
2019-08-04 13:41:39,274 DEBUG [Kilmer] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:41:39,302 DEBUG [Kilmer] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:41:39,355 DEBUG [Kilmer] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:41:40,160 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:40,161 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:45,469 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:45,578 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:41:45,585 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:41:45,585 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:41:45,588 DEBUG {conn-10005, pstmt-20000} executed. 6.023195 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:41:45,592 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 13:41:45,593 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:41:45,595 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 103, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:41:45,600 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 13:41:45,600 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:41:45,601 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:45,601 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:45,605 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:41:45,607 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 104, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:41:45,608 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:41:45,616 DEBUG {conn-10005, pstmt-20001} executed. 8.486552 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:41:45,616 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:41:45,616 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:45,660 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:45,661 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:41:45,661 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 13:41:45,661 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 13:41:45,662 DEBUG {conn-10005, pstmt-20002} executed. 0.728418 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:41:45,662 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 13:41:45,662 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:41:45,662 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:41:45,662 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 13:41:45,663 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:41:45,663 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:45,678 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:45,679 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:41:45,679 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:41:45,679 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:41:45,680 DEBUG {conn-10005, pstmt-20003} executed. 0.712482 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:41:45,680 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 13:41:45,680 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 13:41:45,680 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 13:41:45,681 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 13:41:45,681 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:41:45,681 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:45,683 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:45,685 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:41:45,686 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 13:41:45,686 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:41:45,687 DEBUG {conn-10005, pstmt-20004} executed. 0.920161 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:41:45,687 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 13:41:45,687 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:41:45,687 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:41:45,688 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:41:45,689 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 13:41:45,689 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:41:45,689 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:45,689 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:45,689 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:41:45,690 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:41:45,690 DEBUG {conn-10005, pstmt-20003} executed. 0.719679 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:41:45,690 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 13:41:45,690 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 13:41:45,690 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 13:41:45,691 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 13:41:45,691 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:41:45,691 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:45,693 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:45,694 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:41:45,694 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:41:45,694 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:41:45,695 DEBUG {conn-10005, pstmt-20005} executed. 0.732016 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:41:45,695 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 13:41:45,695 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:41:45,695 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:41:45,695 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:41:45,696 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:41:45,696 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:41:45,696 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:41:45,696 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:41:45,697 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:41:45,697 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:41:45,697 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:41:45,698 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:41:45,698 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:41:45,698 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:41:45,698 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 13:41:45,698 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:41:45,698 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:55,250 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:55,250 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:41:55,250 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:41:55,251 DEBUG {conn-10005, pstmt-20000} executed. 1.054843 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:41:55,251 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-04 13:41:55,251 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:41:55,251 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 104, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:41:55,251 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-04 13:41:55,251 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:41:55,251 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:55,251 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:55,251 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 105, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:41:55,251 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:41:55,261 DEBUG {conn-10005, pstmt-20001} executed. 8.056287 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:41:55,261 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:41:55,262 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:55,267 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20002} executed. 0.755662 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:41:55,267 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:55,267 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20003} executed. 0.559807 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [2]
2019-08-04 13:41:55,267 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:41:55,271 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:55,271 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20004} executed. 0.626121 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:41:55,271 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:55,271 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20003} executed. 0.491437 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20003, rs-50010} open
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20003, rs-50010} Header: [count(*)]
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20003, rs-50010} Result: [2]
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20003, rs-50010} closed
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:41:55,271 DEBUG {conn-10005} pool-recycle
2019-08-04 13:41:55,271 DEBUG {conn-10005} pool-connect
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:41:55,271 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:41:55,276 DEBUG {conn-10005, pstmt-20005} executed. 0.646682 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:41:55,276 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-04 13:41:55,276 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:41:55,276 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:41:55,276 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:41:55,277 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:41:55,277 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:41:55,278 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:41:55,278 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:41:55,278 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:41:55,279 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:41:55,279 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:41:55,279 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:41:55,280 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:41:55,280 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:41:55,280 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-04 13:41:55,281 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:41:55,281 DEBUG {conn-10005} pool-recycle
2019-08-04 13:43:29,566 DEBUG {conn-10005} pool-connect
2019-08-04 13:43:29,568 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:43:29,568 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:43:29,577 DEBUG {conn-10005, pstmt-20000} executed. 1.659373 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:43:29,577 DEBUG {conn-10005, pstmt-20000, rs-50012} open
2019-08-04 13:43:29,577 DEBUG {conn-10005, pstmt-20000, rs-50012} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:43:29,579 DEBUG {conn-10005, pstmt-20000, rs-50012} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 105, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:43:29,581 DEBUG {conn-10005, pstmt-20000, rs-50012} closed
2019-08-04 13:43:29,581 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:43:29,581 DEBUG {conn-10005} pool-recycle
2019-08-04 13:43:29,582 DEBUG {conn-10005} pool-connect
2019-08-04 13:43:29,582 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 106, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:43:29,582 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:43:29,592 DEBUG {conn-10005, pstmt-20001} executed. 9.856511 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:43:29,592 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:43:29,592 DEBUG {conn-10005} pool-recycle
2019-08-04 13:43:29,598 DEBUG {conn-10005} pool-connect
2019-08-04 13:43:29,598 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 13:43:29,602 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 13:43:29,603 DEBUG {conn-10005, pstmt-20002} executed. 0.908851 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:43:29,603 DEBUG {conn-10005, pstmt-20002, rs-50013} open
2019-08-04 13:43:29,603 DEBUG {conn-10005, pstmt-20002, rs-50013} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:43:29,604 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:43:29,604 DEBUG {conn-10005, pstmt-20002, rs-50013} closed
2019-08-04 13:43:29,604 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:43:29,604 DEBUG {conn-10005} pool-recycle
2019-08-04 13:43:29,605 DEBUG {conn-10005} pool-connect
2019-08-04 13:43:29,605 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:43:29,605 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:43:29,606 DEBUG {conn-10005, pstmt-20003} executed. 0.828658 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:43:29,606 DEBUG {conn-10005, pstmt-20003, rs-50014} open
2019-08-04 13:43:29,606 DEBUG {conn-10005, pstmt-20003, rs-50014} Header: [count(*)]
2019-08-04 13:43:29,606 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [2]
2019-08-04 13:43:29,606 DEBUG {conn-10005, pstmt-20003, rs-50014} closed
2019-08-04 13:43:29,606 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:43:29,607 DEBUG {conn-10005} pool-recycle
2019-08-04 13:43:29,607 DEBUG {conn-10005} pool-connect
2019-08-04 13:43:29,607 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 13:43:29,607 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:43:29,608 DEBUG {conn-10005, pstmt-20004} executed. 1.056385 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:43:29,608 DEBUG {conn-10005, pstmt-20004, rs-50015} open
2019-08-04 13:43:29,608 DEBUG {conn-10005, pstmt-20004, rs-50015} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:43:29,609 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:43:29,609 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20004, rs-50015} closed
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:43:29,610 DEBUG {conn-10005} pool-recycle
2019-08-04 13:43:29,610 DEBUG {conn-10005} pool-connect
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20003} executed. 0.821461 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20003, rs-50016} open
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20003, rs-50016} Header: [count(*)]
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [2]
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20003, rs-50016} closed
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:43:29,610 DEBUG {conn-10005} pool-recycle
2019-08-04 13:43:29,610 DEBUG {conn-10005} pool-connect
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:43:29,610 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:43:29,614 DEBUG {conn-10005, pstmt-20005} executed. 0.921189 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:43:29,614 DEBUG {conn-10005, pstmt-20005, rs-50017} open
2019-08-04 13:43:29,614 DEBUG {conn-10005, pstmt-20005, rs-50017} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:43:29,614 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:29,615 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:29,615 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:29,615 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:29,615 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:29,616 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:29,616 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:29,616 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:29,616 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:29,616 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:43:29,616 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:43:29,616 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:43:29,616 DEBUG {conn-10005, pstmt-20005, rs-50017} closed
2019-08-04 13:43:29,616 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:43:29,616 DEBUG {conn-10005} pool-recycle
2019-08-04 13:43:30,879 DEBUG {conn-10005} pool-connect
2019-08-04 13:43:30,879 DEBUG {conn-10005, pstmt-20000} Parameters : [5]
2019-08-04 13:43:30,879 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:43:30,879 DEBUG {conn-10005, pstmt-20000} executed. 0.74898 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:43:30,879 DEBUG {conn-10005, pstmt-20000, rs-50018} open
2019-08-04 13:43:30,879 DEBUG {conn-10005, pstmt-20000, rs-50018} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:43:30,879 DEBUG {conn-10005, pstmt-20000, rs-50018} closed
2019-08-04 13:43:30,879 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:43:30,879 DEBUG {conn-10005} pool-recycle
2019-08-04 13:43:30,879 DEBUG {conn-10005} pool-connect
2019-08-04 13:43:30,879 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:43:30,879 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:43:30,883 DEBUG {conn-10005, pstmt-20005} executed. 0.845623 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:43:30,883 DEBUG {conn-10005, pstmt-20005, rs-50019} open
2019-08-04 13:43:30,883 DEBUG {conn-10005, pstmt-20005, rs-50019} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:43:30,883 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:30,884 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:30,884 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:30,884 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:30,884 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:30,884 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:30,885 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:30,885 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:30,885 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:30,885 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:43:30,885 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:43:30,885 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:43:30,885 DEBUG {conn-10005, pstmt-20005, rs-50019} closed
2019-08-04 13:43:30,885 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:43:30,885 DEBUG {conn-10005} pool-recycle
2019-08-04 13:43:40,162 DEBUG {conn-10005} pool-connect
2019-08-04 13:43:40,162 DEBUG {conn-10005, pstmt-20000} Parameters : [5]
2019-08-04 13:43:40,162 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:43:40,163 DEBUG {conn-10005, pstmt-20000} executed. 0.69449 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:43:40,163 DEBUG {conn-10005, pstmt-20000, rs-50020} open
2019-08-04 13:43:40,163 DEBUG {conn-10005, pstmt-20000, rs-50020} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:43:40,163 DEBUG {conn-10005, pstmt-20000, rs-50020} closed
2019-08-04 13:43:40,163 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:43:40,163 DEBUG {conn-10005} pool-recycle
2019-08-04 13:43:40,163 DEBUG {conn-10005} pool-connect
2019-08-04 13:43:40,164 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:43:40,164 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:43:40,164 DEBUG {conn-10005, pstmt-20005} executed. 0.625092 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:43:40,164 DEBUG {conn-10005, pstmt-20005, rs-50021} open
2019-08-04 13:43:40,164 DEBUG {conn-10005, pstmt-20005, rs-50021} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:43:40,164 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005, rs-50021} closed
2019-08-04 13:43:40,165 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:43:40,165 DEBUG {conn-10005} pool-recycle
2019-08-04 13:44:24,717 DEBUG {conn-10005} pool-connect
2019-08-04 13:44:24,717 DEBUG {conn-10005, pstmt-20000} Parameters : [5]
2019-08-04 13:44:24,717 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:44:24,718 DEBUG {conn-10005, pstmt-20000} executed. 0.871839 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:44:24,718 DEBUG {conn-10005, pstmt-20000, rs-50022} open
2019-08-04 13:44:24,718 DEBUG {conn-10005, pstmt-20000, rs-50022} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:44:24,718 DEBUG {conn-10005, pstmt-20000, rs-50022} closed
2019-08-04 13:44:24,719 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:44:24,719 DEBUG {conn-10005} pool-recycle
2019-08-04 13:44:24,719 DEBUG {conn-10005} pool-connect
2019-08-04 13:44:24,719 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:44:24,719 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:44:24,720 DEBUG {conn-10005, pstmt-20005} executed. 0.776738 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:44:24,720 DEBUG {conn-10005, pstmt-20005, rs-50023} open
2019-08-04 13:44:24,720 DEBUG {conn-10005, pstmt-20005, rs-50023} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:44:24,720 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:44:24,721 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:44:24,721 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:44:24,721 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:44:24,722 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:44:24,722 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:44:24,722 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:44:24,722 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:44:24,723 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:44:24,723 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:44:24,723 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:44:24,723 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:44:24,724 DEBUG {conn-10005, pstmt-20005, rs-50023} closed
2019-08-04 13:44:24,724 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:44:24,724 DEBUG {conn-10005} pool-recycle
2019-08-04 13:45:33,559 DEBUG {conn-10001,procId-380} connected
2019-08-04 13:45:33,567 DEBUG {conn-10002,procId-381} connected
2019-08-04 13:45:33,573 DEBUG {conn-10003,procId-382} connected
2019-08-04 13:45:33,579 DEBUG {conn-10004,procId-383} connected
2019-08-04 13:45:33,586 DEBUG {conn-10005,procId-384} connected
2019-08-04 13:45:33,596 DEBUG {conn-10005} pool-connect
2019-08-04 13:45:33,598 DEBUG {conn-10005} pool-recycle
2019-08-04 13:45:33,611 DEBUG {conn-10005} pool-connect
2019-08-04 13:45:33,614 DEBUG {conn-10005} pool-recycle
2019-08-04 13:45:34,006 DEBUG {conn-10005} pool-connect
2019-08-04 13:45:34,052 DEBUG {conn-10005} pool-recycle
2019-08-04 13:45:34,800 INFO [Vulture] modules [], plugins [], sites []
2019-08-04 13:45:34,812 DEBUG [Vulture] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 13:45:34,819 DEBUG [Vulture] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 13:45:34,839 DEBUG [Vulture] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:45:34,840 DEBUG [Vulture] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 13:45:34,840 DEBUG [Vulture] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 13:45:34,840 DEBUG [Vulture] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:45:34,840 DEBUG [Vulture] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 13:45:34,840 DEBUG [Vulture] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 13:45:34,840 DEBUG [Vulture] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:45:34,840 DEBUG [Vulture] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 13:45:34,840 DEBUG [Vulture] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:45:34,841 DEBUG [Vulture] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:45:34,841 DEBUG [Vulture] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 13:45:34,841 DEBUG [Vulture] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 13:45:34,841 DEBUG [Vulture] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 13:45:34,841 DEBUG [Vulture] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:45:36,517 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 13:45:36,538 DEBUG using gathering [true]
2019-08-04 13:45:36,559 DEBUG [Vulture] node_sampler_interval[5s]
2019-08-04 13:45:36,570 DEBUG Using select timeout of 500
2019-08-04 13:45:36,572 DEBUG Epoll-bug workaround enabled = false
2019-08-04 13:45:36,621 DEBUG [Vulture] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:45:36,648 DEBUG [Vulture] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:45:36,684 DEBUG [Vulture] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:45:37,494 DEBUG {conn-10005} pool-connect
2019-08-04 13:45:37,494 DEBUG {conn-10005} pool-recycle
2019-08-04 13:45:48,050 DEBUG {conn-10005} pool-connect
2019-08-04 13:45:48,172 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:45:48,182 DEBUG {conn-10005, pstmt-20000} Parameters : [5]
2019-08-04 13:45:48,182 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:45:48,184 DEBUG {conn-10005, pstmt-20000} executed. 5.923469 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:45:48,190 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 13:45:48,191 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:45:48,193 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 13:45:48,193 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:45:48,193 DEBUG {conn-10005} pool-recycle
2019-08-04 13:45:48,199 DEBUG {conn-10005} pool-connect
2019-08-04 13:45:48,199 DEBUG {conn-10005, pstmt-20001} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:45:48,199 DEBUG {conn-10005, pstmt-20001} Parameters : []
2019-08-04 13:45:48,199 DEBUG {conn-10005, pstmt-20001} Types : []
2019-08-04 13:45:48,200 DEBUG {conn-10005, pstmt-20001} executed. 0.761832 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:45:48,200 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-04 13:45:48,200 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:45:48,202 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:45:48,204 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:45:48,204 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:45:48,205 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:45:48,205 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:45:48,205 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:45:48,205 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:45:48,205 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:45:48,205 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:45:48,206 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:45:48,206 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:45:48,206 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:45:48,206 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-04 13:45:48,207 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:45:48,207 DEBUG {conn-10005} pool-recycle
2019-08-04 13:46:41,858 DEBUG {conn-10005} pool-connect
2019-08-04 13:46:41,858 DEBUG {conn-10005, pstmt-20000} Parameters : [5]
2019-08-04 13:46:41,858 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:46:41,860 DEBUG {conn-10005, pstmt-20000} executed. 1.140177 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:46:41,860 DEBUG {conn-10005, pstmt-20000, rs-50002} open
2019-08-04 13:46:41,860 DEBUG {conn-10005, pstmt-20000, rs-50002} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:46:41,861 DEBUG {conn-10005, pstmt-20000, rs-50002} closed
2019-08-04 13:46:41,861 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:46:41,861 DEBUG {conn-10005} pool-recycle
2019-08-04 13:46:41,861 DEBUG {conn-10005} pool-connect
2019-08-04 13:46:41,861 DEBUG {conn-10005, pstmt-20001} Parameters : []
2019-08-04 13:46:41,861 DEBUG {conn-10005, pstmt-20001} Types : []
2019-08-04 13:46:41,862 DEBUG {conn-10005, pstmt-20001} executed. 0.69192 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:46:41,862 DEBUG {conn-10005, pstmt-20001, rs-50003} open
2019-08-04 13:46:41,862 DEBUG {conn-10005, pstmt-20001, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:46:41,862 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:46:41,862 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:46:41,862 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:46:41,862 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:46:41,862 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:46:41,862 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:46:41,867 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:46:41,867 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:46:41,868 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:46:41,868 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:46:41,868 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:46:41,870 DEBUG {conn-10005, pstmt-20001, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:46:41,870 DEBUG {conn-10005, pstmt-20001, rs-50003} closed
2019-08-04 13:46:41,870 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:46:41,870 DEBUG {conn-10005} pool-recycle
2019-08-04 13:46:52,037 DEBUG {conn-10005} pool-connect
2019-08-04 13:46:52,037 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:46:52,037 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:46:52,040 DEBUG {conn-10005, pstmt-20000} executed. 2.571308 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:46:52,040 DEBUG {conn-10005, pstmt-20000, rs-50004} open
2019-08-04 13:46:52,040 DEBUG {conn-10005, pstmt-20000, rs-50004} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:46:52,040 DEBUG {conn-10005, pstmt-20000, rs-50004} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 106, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:46:52,041 DEBUG {conn-10005, pstmt-20000, rs-50004} closed
2019-08-04 13:46:52,041 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:46:52,042 DEBUG {conn-10005} pool-recycle
2019-08-04 13:46:52,042 DEBUG {conn-10005} pool-connect
2019-08-04 13:46:52,042 DEBUG {conn-10005, pstmt-20002} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:46:52,051 DEBUG {conn-10005, pstmt-20002} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 107, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:46:52,051 DEBUG {conn-10005, pstmt-20002} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:46:52,054 DEBUG {conn-10005, pstmt-20002} executed. 3.088963 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:46:52,054 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:46:52,054 DEBUG {conn-10005} pool-recycle
2019-08-04 13:46:52,105 DEBUG {conn-10005} pool-connect
2019-08-04 13:46:52,106 DEBUG {conn-10005, pstmt-20003} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:46:52,106 DEBUG {conn-10005, pstmt-20003} Parameters : [24]
2019-08-04 13:46:52,106 DEBUG {conn-10005, pstmt-20003} Types : [INTEGER]
2019-08-04 13:46:52,107 DEBUG {conn-10005, pstmt-20003} executed. 0.927357 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:46:52,107 DEBUG {conn-10005, pstmt-20003, rs-50005} open
2019-08-04 13:46:52,107 DEBUG {conn-10005, pstmt-20003, rs-50005} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:46:52,108 DEBUG {conn-10005, pstmt-20003, rs-50005} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:46:52,109 DEBUG {conn-10005, pstmt-20003, rs-50005} closed
2019-08-04 13:46:52,109 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:46:52,109 DEBUG {conn-10005} pool-recycle
2019-08-04 13:46:52,132 DEBUG {conn-10005} pool-connect
2019-08-04 13:46:52,133 DEBUG {conn-10005, pstmt-20004} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:46:52,133 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1]
2019-08-04 13:46:52,133 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER]
2019-08-04 13:46:52,134 DEBUG {conn-10005, pstmt-20004} executed. 0.807582 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:46:52,134 DEBUG {conn-10005, pstmt-20004, rs-50006} open
2019-08-04 13:46:52,134 DEBUG {conn-10005, pstmt-20004, rs-50006} Header: [count(*)]
2019-08-04 13:46:52,134 DEBUG {conn-10005, pstmt-20004, rs-50006} Result: [2]
2019-08-04 13:46:52,136 DEBUG {conn-10005, pstmt-20004, rs-50006} closed
2019-08-04 13:46:52,136 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:46:52,136 DEBUG {conn-10005} pool-recycle
2019-08-04 13:46:52,138 DEBUG {conn-10005} pool-connect
2019-08-04 13:46:52,140 DEBUG {conn-10005, pstmt-20005} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:46:52,140 DEBUG {conn-10005, pstmt-20005} Parameters : [4, 1, 0, 8]
2019-08-04 13:46:52,140 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:46:52,142 DEBUG {conn-10005, pstmt-20005} executed. 0.696546 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:46:52,142 DEBUG {conn-10005, pstmt-20005, rs-50007} open
2019-08-04 13:46:52,142 DEBUG {conn-10005, pstmt-20005, rs-50007} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:46:52,142 DEBUG {conn-10005, pstmt-20005, rs-50007} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:46:52,142 DEBUG {conn-10005, pstmt-20005, rs-50007} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:46:52,143 DEBUG {conn-10005, pstmt-20005, rs-50007} closed
2019-08-04 13:46:52,143 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:46:52,143 DEBUG {conn-10005} pool-recycle
2019-08-04 13:46:52,143 DEBUG {conn-10005} pool-connect
2019-08-04 13:46:52,143 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1]
2019-08-04 13:46:52,143 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER]
2019-08-04 13:46:52,144 DEBUG {conn-10005, pstmt-20004} executed. 0.541815 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:46:52,144 DEBUG {conn-10005, pstmt-20004, rs-50008} open
2019-08-04 13:46:52,144 DEBUG {conn-10005, pstmt-20004, rs-50008} Header: [count(*)]
2019-08-04 13:46:52,144 DEBUG {conn-10005, pstmt-20004, rs-50008} Result: [2]
2019-08-04 13:46:52,144 DEBUG {conn-10005, pstmt-20004, rs-50008} closed
2019-08-04 13:46:52,144 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:46:52,144 DEBUG {conn-10005} pool-recycle
2019-08-04 13:46:52,145 DEBUG {conn-10005} pool-connect
2019-08-04 13:46:52,145 DEBUG {conn-10005, pstmt-20001} Parameters : []
2019-08-04 13:46:52,145 DEBUG {conn-10005, pstmt-20001} Types : []
2019-08-04 13:46:52,145 DEBUG {conn-10005, pstmt-20001} executed. 0.708884 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:46:52,146 DEBUG {conn-10005, pstmt-20001, rs-50009} open
2019-08-04 13:46:52,146 DEBUG {conn-10005, pstmt-20001, rs-50009} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:46:52,146 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:46:52,146 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:46:52,146 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:46:52,147 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:46:52,147 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:46:52,147 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:46:52,147 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:46:52,148 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:46:52,148 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:46:52,148 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:46:52,148 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:46:52,149 DEBUG {conn-10005, pstmt-20001, rs-50009} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:46:52,149 DEBUG {conn-10005, pstmt-20001, rs-50009} closed
2019-08-04 13:46:52,149 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:46:52,149 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:01,180 DEBUG {conn-10001,procId-385} connected
2019-08-04 13:56:01,193 DEBUG {conn-10002,procId-386} connected
2019-08-04 13:56:01,203 DEBUG {conn-10003,procId-387} connected
2019-08-04 13:56:01,212 DEBUG {conn-10004,procId-388} connected
2019-08-04 13:56:01,222 DEBUG {conn-10005,procId-389} connected
2019-08-04 13:56:01,234 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:01,237 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:01,252 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:01,253 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:02,142 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:02,223 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:03,123 INFO [Susan Storm] modules [], plugins [], sites []
2019-08-04 13:56:03,145 DEBUG [Susan Storm] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 13:56:03,157 DEBUG [Susan Storm] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 13:56:03,172 DEBUG [Susan Storm] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:56:03,174 DEBUG [Susan Storm] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 13:56:03,174 DEBUG [Susan Storm] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 13:56:03,174 DEBUG [Susan Storm] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:56:03,174 DEBUG [Susan Storm] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 13:56:03,175 DEBUG [Susan Storm] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 13:56:03,175 DEBUG [Susan Storm] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:56:03,175 DEBUG [Susan Storm] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 13:56:03,175 DEBUG [Susan Storm] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:56:03,175 DEBUG [Susan Storm] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 13:56:03,175 DEBUG [Susan Storm] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 13:56:03,176 DEBUG [Susan Storm] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 13:56:03,176 DEBUG [Susan Storm] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 13:56:03,176 DEBUG [Susan Storm] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 13:56:06,596 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 13:56:06,645 DEBUG using gathering [true]
2019-08-04 13:56:06,695 DEBUG [Susan Storm] node_sampler_interval[5s]
2019-08-04 13:56:06,721 DEBUG Using select timeout of 500
2019-08-04 13:56:06,721 DEBUG Epoll-bug workaround enabled = false
2019-08-04 13:56:06,813 DEBUG [Susan Storm] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:56:06,864 DEBUG [Susan Storm] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:56:06,934 DEBUG [Susan Storm] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 13:56:08,833 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:08,833 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:19,736 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:19,995 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:56:20,025 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:56:20,025 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:56:20,035 DEBUG {conn-10005, pstmt-20000} executed. 21.43871 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:56:20,048 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 13:56:20,053 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:56:20,072 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 107, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:56:20,077 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 13:56:20,078 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:56:20,080 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:20,080 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:20,089 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:56:20,097 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 108, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:56:20,097 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:56:20,107 DEBUG {conn-10005, pstmt-20001} executed. 10.22766 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:56:20,107 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:56:20,107 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:20,220 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:20,222 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:56:20,222 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 13:56:20,223 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 13:56:20,224 DEBUG {conn-10005, pstmt-20002} executed. 1.293365 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:56:20,224 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 13:56:20,224 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:56:20,224 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:56:20,225 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 13:56:20,225 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:56:20,225 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:20,264 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:20,270 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:56:20,271 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:56:20,271 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:56:20,274 DEBUG {conn-10005, pstmt-20003} executed. 2.462843 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:56:20,274 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 13:56:20,274 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 13:56:20,275 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 13:56:20,279 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 13:56:20,280 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:56:20,280 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:20,284 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:20,295 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:56:20,297 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 13:56:20,297 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:56:20,299 DEBUG {conn-10005, pstmt-20004} executed. 2.424802 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:56:20,300 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 13:56:20,300 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:56:20,302 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:56:20,304 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:56:20,305 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 13:56:20,305 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:56:20,306 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:20,306 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:20,307 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:56:20,307 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:56:20,309 DEBUG {conn-10005, pstmt-20003} executed. 1.923084 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:56:20,309 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 13:56:20,309 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 13:56:20,310 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 13:56:20,310 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 13:56:20,311 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:56:20,311 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:20,323 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:20,324 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:56:20,324 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:56:20,325 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:56:20,328 DEBUG {conn-10005, pstmt-20005} executed. 2.943485 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:56:20,328 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 13:56:20,328 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:56:20,328 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:20,330 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:20,331 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:20,332 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:20,333 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:20,335 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:20,337 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:20,339 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:20,340 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:20,341 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:56:20,342 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:56:20,344 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:56:20,345 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 13:56:20,345 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:56:20,345 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:22,538 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:22,539 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:56:22,539 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:56:22,540 DEBUG {conn-10005, pstmt-20000} executed. 1.26355 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:56:22,540 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-04 13:56:22,540 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:56:22,541 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 108, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:56:22,542 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-04 13:56:22,542 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:56:22,542 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:22,542 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:22,542 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 109, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:56:22,542 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:56:22,550 DEBUG {conn-10005, pstmt-20001} executed. 8.750777 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:56:22,551 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:56:22,551 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:22,558 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:22,558 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 13:56:22,558 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 13:56:22,559 DEBUG {conn-10005, pstmt-20002} executed. 0.799357 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:56:22,559 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-04 13:56:22,559 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:56:22,559 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:56:22,560 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-04 13:56:22,560 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:56:22,560 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:22,560 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:22,560 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:56:22,560 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:56:22,561 DEBUG {conn-10005, pstmt-20003} executed. 0.629718 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:56:22,561 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-04 13:56:22,561 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-04 13:56:22,562 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [2]
2019-08-04 13:56:22,562 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-04 13:56:22,562 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:56:22,562 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:22,562 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:22,563 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 13:56:22,563 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:56:22,563 DEBUG {conn-10005, pstmt-20004} executed. 0.685237 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:56:22,563 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-04 13:56:22,563 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:56:22,563 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:56:22,564 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:56:22,564 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-04 13:56:22,564 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:56:22,564 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:22,565 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:22,565 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:56:22,565 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:56:22,566 DEBUG {conn-10005, pstmt-20003} executed. 0.926329 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:56:22,566 DEBUG {conn-10005, pstmt-20003, rs-50010} open
2019-08-04 13:56:22,566 DEBUG {conn-10005, pstmt-20003, rs-50010} Header: [count(*)]
2019-08-04 13:56:22,567 DEBUG {conn-10005, pstmt-20003, rs-50010} Result: [2]
2019-08-04 13:56:22,567 DEBUG {conn-10005, pstmt-20003, rs-50010} closed
2019-08-04 13:56:22,567 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:56:22,568 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:22,568 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:22,568 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:56:22,568 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:56:22,569 DEBUG {conn-10005, pstmt-20005} executed. 0.888289 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:56:22,569 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-04 13:56:22,569 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:56:22,569 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:22,570 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:22,570 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:22,570 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:22,572 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:22,572 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:22,572 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:22,572 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:22,573 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:22,573 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:56:22,573 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:56:22,573 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:56:22,574 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-04 13:56:22,574 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:56:22,574 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:42,730 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:42,730 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:56:42,730 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:56:42,731 DEBUG {conn-10005, pstmt-20000} executed. 0.781366 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:56:42,731 DEBUG {conn-10005, pstmt-20000, rs-50012} open
2019-08-04 13:56:42,731 DEBUG {conn-10005, pstmt-20000, rs-50012} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:56:42,731 DEBUG {conn-10005, pstmt-20000, rs-50012} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 109, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:56:42,731 DEBUG {conn-10005, pstmt-20000, rs-50012} closed
2019-08-04 13:56:42,731 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:56:42,731 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:42,731 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:42,731 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 110, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:56:42,731 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:56:42,740 DEBUG {conn-10005, pstmt-20001} executed. 7.890761 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:56:42,741 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:56:42,741 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:42,741 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:42,741 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 13:56:42,741 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 13:56:42,746 DEBUG {conn-10005, pstmt-20002} executed. 0.748979 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:56:42,746 DEBUG {conn-10005, pstmt-20002, rs-50013} open
2019-08-04 13:56:42,746 DEBUG {conn-10005, pstmt-20002, rs-50013} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:56:42,746 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:56:42,747 DEBUG {conn-10005, pstmt-20002, rs-50013} closed
2019-08-04 13:56:42,747 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:56:42,747 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:42,748 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:42,748 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:56:42,748 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:56:42,748 DEBUG {conn-10005, pstmt-20003} executed. 0.616353 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:56:42,748 DEBUG {conn-10005, pstmt-20003, rs-50014} open
2019-08-04 13:56:42,748 DEBUG {conn-10005, pstmt-20003, rs-50014} Header: [count(*)]
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [2]
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20003, rs-50014} closed
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:56:42,749 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:42,749 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20004} executed. 0.594249 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20004, rs-50015} open
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20004, rs-50015} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20004, rs-50015} closed
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:56:42,749 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:42,749 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20003} executed. 0.510458 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20003, rs-50016} open
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20003, rs-50016} Header: [count(*)]
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [2]
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20003, rs-50016} closed
2019-08-04 13:56:42,749 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:56:42,749 DEBUG {conn-10005} pool-recycle
2019-08-04 13:56:42,753 DEBUG {conn-10005} pool-connect
2019-08-04 13:56:42,753 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:56:42,753 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005} executed. 0.891887 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} open
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005, rs-50017} closed
2019-08-04 13:56:42,754 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:56:42,754 DEBUG {conn-10005} pool-recycle
2019-08-04 13:57:09,453 DEBUG {conn-10005} pool-connect
2019-08-04 13:57:09,453 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 13:57:09,453 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:57:09,455 DEBUG {conn-10005, pstmt-20000} executed. 0.837397 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:57:09,455 DEBUG {conn-10005, pstmt-20000, rs-50018} open
2019-08-04 13:57:09,455 DEBUG {conn-10005, pstmt-20000, rs-50018} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:57:09,455 DEBUG {conn-10005, pstmt-20000, rs-50018} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 110, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 13:57:09,455 DEBUG {conn-10005, pstmt-20000, rs-50018} closed
2019-08-04 13:57:09,455 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:57:09,455 DEBUG {conn-10005} pool-recycle
2019-08-04 13:57:09,455 DEBUG {conn-10005} pool-connect
2019-08-04 13:57:09,455 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 111, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 13:57:09,455 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 13:57:09,465 DEBUG {conn-10005, pstmt-20001} executed. 8.220271 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 13:57:09,465 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 13:57:09,465 DEBUG {conn-10005} pool-recycle
2019-08-04 13:57:09,466 DEBUG {conn-10005} pool-connect
2019-08-04 13:57:09,466 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 13:57:09,466 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 13:57:09,466 DEBUG {conn-10005, pstmt-20002} executed. 0.630747 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 13:57:09,466 DEBUG {conn-10005, pstmt-20002, rs-50019} open
2019-08-04 13:57:09,466 DEBUG {conn-10005, pstmt-20002, rs-50019} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 13:57:09,466 DEBUG {conn-10005, pstmt-20002, rs-50019} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 13:57:09,470 DEBUG {conn-10005, pstmt-20002, rs-50019} closed
2019-08-04 13:57:09,470 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 13:57:09,470 DEBUG {conn-10005} pool-recycle
2019-08-04 13:57:09,470 DEBUG {conn-10005} pool-connect
2019-08-04 13:57:09,470 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:57:09,470 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:57:09,471 DEBUG {conn-10005, pstmt-20003} executed. 0.778795 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:57:09,471 DEBUG {conn-10005, pstmt-20003, rs-50020} open
2019-08-04 13:57:09,471 DEBUG {conn-10005, pstmt-20003, rs-50020} Header: [count(*)]
2019-08-04 13:57:09,471 DEBUG {conn-10005, pstmt-20003, rs-50020} Result: [2]
2019-08-04 13:57:09,472 DEBUG {conn-10005, pstmt-20003, rs-50020} closed
2019-08-04 13:57:09,472 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:57:09,472 DEBUG {conn-10005} pool-recycle
2019-08-04 13:57:09,472 DEBUG {conn-10005} pool-connect
2019-08-04 13:57:09,472 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 13:57:09,472 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20004} executed. 0.619437 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20004, rs-50021} open
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20004, rs-50021} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20004, rs-50021} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20004, rs-50021} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20004, rs-50021} closed
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 13:57:09,473 DEBUG {conn-10005} pool-recycle
2019-08-04 13:57:09,473 DEBUG {conn-10005} pool-connect
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20003} executed. 0.501204 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20003, rs-50022} open
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20003, rs-50022} Header: [count(*)]
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20003, rs-50022} Result: [2]
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20003, rs-50022} closed
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 13:57:09,473 DEBUG {conn-10005} pool-recycle
2019-08-04 13:57:09,473 DEBUG {conn-10005} pool-connect
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:57:09,473 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005} executed. 0.526907 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} open
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005, rs-50023} closed
2019-08-04 13:57:09,477 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:57:09,477 DEBUG {conn-10005} pool-recycle
2019-08-04 13:57:32,698 DEBUG {conn-10005} pool-connect
2019-08-04 13:57:32,699 DEBUG {conn-10005, pstmt-20000} Parameters : [5]
2019-08-04 13:57:32,699 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 13:57:32,699 DEBUG {conn-10005, pstmt-20000} executed. 0.799872 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 13:57:32,699 DEBUG {conn-10005, pstmt-20000, rs-50024} open
2019-08-04 13:57:32,699 DEBUG {conn-10005, pstmt-20000, rs-50024} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 13:57:32,699 DEBUG {conn-10005, pstmt-20000, rs-50024} closed
2019-08-04 13:57:32,699 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 13:57:32,699 DEBUG {conn-10005} pool-recycle
2019-08-04 13:57:32,700 DEBUG {conn-10005} pool-connect
2019-08-04 13:57:32,700 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 13:57:32,700 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 13:57:32,701 DEBUG {conn-10005, pstmt-20005} executed. 0.764915 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 13:57:32,701 DEBUG {conn-10005, pstmt-20005, rs-50025} open
2019-08-04 13:57:32,701 DEBUG {conn-10005, pstmt-20005, rs-50025} Header: [config_name, config_value, create_time, update_time]
2019-08-04 13:57:32,701 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 13:57:32,701 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 13:57:32,701 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 13:57:32,701 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 13:57:32,702 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 13:57:32,702 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 13:57:32,702 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 13:57:32,702 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 13:57:32,702 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 13:57:32,702 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 13:57:32,702 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 13:57:32,702 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 13:57:32,702 DEBUG {conn-10005, pstmt-20005, rs-50025} closed
2019-08-04 13:57:32,702 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 13:57:32,702 DEBUG {conn-10005} pool-recycle
2019-08-04 14:02:55,143 DEBUG {conn-10001,procId-390} connected
2019-08-04 14:02:55,154 DEBUG {conn-10002,procId-391} connected
2019-08-04 14:02:55,163 DEBUG {conn-10003,procId-392} connected
2019-08-04 14:02:55,171 DEBUG {conn-10004,procId-393} connected
2019-08-04 14:02:55,178 DEBUG {conn-10005,procId-394} connected
2019-08-04 14:02:55,187 DEBUG {conn-10005} pool-connect
2019-08-04 14:02:55,188 DEBUG {conn-10005} pool-recycle
2019-08-04 14:02:55,198 DEBUG {conn-10005} pool-connect
2019-08-04 14:02:55,204 DEBUG {conn-10005} pool-recycle
2019-08-04 14:02:55,936 DEBUG {conn-10005} pool-connect
2019-08-04 14:02:56,049 DEBUG {conn-10005} pool-recycle
2019-08-04 14:02:57,924 INFO [Jaeger] modules [], plugins [], sites []
2019-08-04 14:02:57,974 DEBUG [Jaeger] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 14:02:58,017 DEBUG [Jaeger] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 14:02:58,064 DEBUG [Jaeger] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:02:58,069 DEBUG [Jaeger] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 14:02:58,069 DEBUG [Jaeger] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 14:02:58,070 DEBUG [Jaeger] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:02:58,071 DEBUG [Jaeger] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 14:02:58,071 DEBUG [Jaeger] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 14:02:58,072 DEBUG [Jaeger] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:02:58,072 DEBUG [Jaeger] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 14:02:58,073 DEBUG [Jaeger] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:02:58,074 DEBUG [Jaeger] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:02:58,075 DEBUG [Jaeger] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 14:02:58,075 DEBUG [Jaeger] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 14:02:58,076 DEBUG [Jaeger] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 14:02:58,076 DEBUG [Jaeger] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:03:02,742 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 14:03:02,797 DEBUG using gathering [true]
2019-08-04 14:03:02,891 DEBUG [Jaeger] node_sampler_interval[5s]
2019-08-04 14:03:02,974 DEBUG Using select timeout of 500
2019-08-04 14:03:02,975 DEBUG Epoll-bug workaround enabled = false
2019-08-04 14:03:03,071 DEBUG [Jaeger] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:03:03,122 DEBUG [Jaeger] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:03:03,204 DEBUG [Jaeger] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:03:05,264 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:05,264 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:20,293 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:20,399 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 14:03:20,411 DEBUG {conn-10005, pstmt-20000} Parameters : [1, 0, 8]
2019-08-04 14:03:20,411 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 14:03:20,413 DEBUG {conn-10005, pstmt-20000} executed. 6.275083 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 14:03:20,415 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 14:03:20,415 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 14:03:20,421 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 111, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 14:03:20,424 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 124, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 14:03:20,425 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 14:03:20,425 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 14:03:20,426 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 14:03:20,426 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:03:20,427 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:20,430 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:20,430 DEBUG {conn-10005, pstmt-20001} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 14:03:20,431 DEBUG {conn-10005, pstmt-20001} Parameters : [24, 22, 24, 20]
2019-08-04 14:03:20,431 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER, INTEGER, INTEGER, INTEGER]
2019-08-04 14:03:20,431 DEBUG {conn-10005, pstmt-20001} executed. 0.851791 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 14:03:20,432 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-04 14:03:20,432 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:03:20,432 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 14:03:20,432 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 14:03:20,433 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:03:20,433 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-04 14:03:20,433 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:03:20,433 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:20,438 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:20,440 DEBUG {conn-10005, pstmt-20002} created. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 14:03:20,441 DEBUG {conn-10005, pstmt-20002} Parameters : [1]
2019-08-04 14:03:20,441 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:03:20,442 DEBUG {conn-10005, pstmt-20002} executed. 0.644627 millis. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 14:03:20,442 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-04 14:03:20,442 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [count(*)]
2019-08-04 14:03:20,442 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [4]
2019-08-04 14:03:20,443 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-04 14:03:20,443 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:03:20,444 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:20,444 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:20,446 DEBUG {conn-10005, pstmt-20003} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 14:03:20,446 DEBUG {conn-10005, pstmt-20003} Parameters : [9]
2019-08-04 14:03:20,446 DEBUG {conn-10005, pstmt-20003} Types : [INTEGER]
2019-08-04 14:03:20,447 DEBUG {conn-10005, pstmt-20003} executed. 0.794217 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 14:03:20,447 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-04 14:03:20,447 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 14:03:20,447 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 111, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 14:03:20,447 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 124, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 14:03:20,449 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 14:03:20,449 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 14:03:20,449 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-04 14:03:20,449 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:03:20,450 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:20,450 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:20,450 DEBUG {conn-10005, pstmt-20004} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 14:03:20,450 DEBUG {conn-10005, pstmt-20004} Parameters : [9]
2019-08-04 14:03:20,450 DEBUG {conn-10005, pstmt-20004} Types : [INTEGER]
2019-08-04 14:03:20,451 DEBUG {conn-10005, pstmt-20004} executed. 0.86824 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 14:03:20,451 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-04 14:03:20,451 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 14:03:20,452 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 14:03:20,452 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 124, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 14:03:20,452 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 111, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 14:03:20,453 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 14:03:20,453 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-04 14:03:20,453 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:03:20,453 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:20,454 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:20,459 DEBUG {conn-10005, pstmt-20005} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 14:03:20,459 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:03:20,459 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:03:20,461 DEBUG {conn-10005, pstmt-20005} executed. 1.905092 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 14:03:20,461 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 14:03:20,461 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [tag_id, tag_count, tag_name]
2019-08-04 14:03:20,462 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 14:03:20,462 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 14:03:20,462 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [66, 1, Spring]
2019-08-04 14:03:20,462 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [67, 1, SpringMVC]
2019-08-04 14:03:20,462 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [68, 1, MyBatis]
2019-08-04 14:03:20,462 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [69, 1, easyUI]
2019-08-04 14:03:20,462 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [127, 1, 目录]
2019-08-04 14:03:20,463 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [128, 1, AdminLte3]
2019-08-04 14:03:20,463 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [130, 1, SpringBoot]
2019-08-04 14:03:20,463 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [131, 1, 入门教程]
2019-08-04 14:03:20,463 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [132, 1, 实战教程]
2019-08-04 14:03:20,463 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [133, 1, spring-boot企业级开发]
2019-08-04 14:03:20,463 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 14:03:20,463 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:03:20,464 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:20,467 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:20,467 DEBUG {conn-10005, pstmt-20006} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:03:20,467 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-04 14:03:20,467 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-04 14:03:20,468 DEBUG {conn-10005, pstmt-20006} executed. 0.718137 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:03:20,468 DEBUG {conn-10005, pstmt-20006, rs-50006} open
2019-08-04 14:03:20,468 DEBUG {conn-10005, pstmt-20006, rs-50006} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:03:20,468 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:03:20,469 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:03:20,469 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:03:20,469 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:03:20,470 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:03:20,470 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:03:20,470 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:03:20,471 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:03:20,471 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:03:20,471 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:03:20,471 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:03:20,471 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:03:20,472 DEBUG {conn-10005, pstmt-20006, rs-50006} closed
2019-08-04 14:03:20,472 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 14:03:20,472 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:22,224 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:22,225 DEBUG {conn-10005, pstmt-20007} created. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 14:03:22,230 DEBUG {conn-10005, pstmt-20007} Parameters : [anonymousUser]
2019-08-04 14:03:22,230 DEBUG {conn-10005, pstmt-20007} Types : [VARCHAR]
2019-08-04 14:03:22,232 DEBUG {conn-10005, pstmt-20007, rs-50007} query executed. 1.661944 millis. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 14:03:22,232 DEBUG {conn-10005, pstmt-20007, rs-50007} open
2019-08-04 14:03:22,232 DEBUG {conn-10005, pstmt-20007, rs-50007} Header: [userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime]
2019-08-04 14:03:22,233 DEBUG {conn-10005, pstmt-20007, rs-50007} closed
2019-08-04 14:03:22,233 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-04 14:03:22,234 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:23,546 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:23,546 DEBUG {conn-10005, pstmt-20008} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:03:23,546 DEBUG {conn-10005, pstmt-20008} Parameters : [4]
2019-08-04 14:03:23,546 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT]
2019-08-04 14:03:23,550 DEBUG {conn-10005, pstmt-20008} executed. 2.288577 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:03:23,550 DEBUG {conn-10005, pstmt-20008, rs-50008} open
2019-08-04 14:03:23,550 DEBUG {conn-10005, pstmt-20008, rs-50008} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:03:23,551 DEBUG {conn-10005, pstmt-20008, rs-50008} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 111, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:03:23,551 DEBUG {conn-10005, pstmt-20008, rs-50008} closed
2019-08-04 14:03:23,551 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-04 14:03:23,551 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:23,551 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:23,555 DEBUG {conn-10005, pstmt-20009} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:03:23,558 DEBUG {conn-10005, pstmt-20009} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 112, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:03:23,558 DEBUG {conn-10005, pstmt-20009} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:03:23,568 DEBUG {conn-10005, pstmt-20009} executed. 9.052014 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:03:23,568 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 14:03:23,568 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:23,624 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:23,625 DEBUG {conn-10005, pstmt-20010} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:03:23,626 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-04 14:03:23,626 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 14:03:23,626 DEBUG {conn-10005, pstmt-20010} executed. 0.790105 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:03:23,626 DEBUG {conn-10005, pstmt-20010, rs-50009} open
2019-08-04 14:03:23,626 DEBUG {conn-10005, pstmt-20010, rs-50009} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:03:23,627 DEBUG {conn-10005, pstmt-20010, rs-50009} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:03:23,627 DEBUG {conn-10005, pstmt-20010, rs-50009} closed
2019-08-04 14:03:23,627 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 14:03:23,627 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:23,628 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:23,629 DEBUG {conn-10005, pstmt-20011} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:03:23,629 DEBUG {conn-10005, pstmt-20011} Parameters : [4, 1]
2019-08-04 14:03:23,629 DEBUG {conn-10005, pstmt-20011} Types : [BIGINT, INTEGER]
2019-08-04 14:03:23,630 DEBUG {conn-10005, pstmt-20011} executed. 0.655936 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:03:23,630 DEBUG {conn-10005, pstmt-20011, rs-50010} open
2019-08-04 14:03:23,630 DEBUG {conn-10005, pstmt-20011, rs-50010} Header: [count(*)]
2019-08-04 14:03:23,630 DEBUG {conn-10005, pstmt-20011, rs-50010} Result: [2]
2019-08-04 14:03:23,631 DEBUG {conn-10005, pstmt-20011, rs-50010} closed
2019-08-04 14:03:23,631 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 14:03:23,631 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:23,631 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:23,632 DEBUG {conn-10005, pstmt-20012} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:03:23,632 DEBUG {conn-10005, pstmt-20012} Parameters : [4, 1, 0, 8]
2019-08-04 14:03:23,632 DEBUG {conn-10005, pstmt-20012} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:03:23,633 DEBUG {conn-10005, pstmt-20012} executed. 0.625606 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:03:23,633 DEBUG {conn-10005, pstmt-20012, rs-50011} open
2019-08-04 14:03:23,633 DEBUG {conn-10005, pstmt-20012, rs-50011} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:03:23,633 DEBUG {conn-10005, pstmt-20012, rs-50011} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:03:23,633 DEBUG {conn-10005, pstmt-20012, rs-50011} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:03:23,633 DEBUG {conn-10005, pstmt-20012, rs-50011} closed
2019-08-04 14:03:23,633 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-04 14:03:23,633 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:23,635 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:23,635 DEBUG {conn-10005, pstmt-20011} Parameters : [4, 1]
2019-08-04 14:03:23,635 DEBUG {conn-10005, pstmt-20011} Types : [BIGINT, INTEGER]
2019-08-04 14:03:23,635 DEBUG {conn-10005, pstmt-20011} executed. 0.562891 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:03:23,635 DEBUG {conn-10005, pstmt-20011, rs-50012} open
2019-08-04 14:03:23,635 DEBUG {conn-10005, pstmt-20011, rs-50012} Header: [count(*)]
2019-08-04 14:03:23,636 DEBUG {conn-10005, pstmt-20011, rs-50012} Result: [2]
2019-08-04 14:03:23,636 DEBUG {conn-10005, pstmt-20011, rs-50012} closed
2019-08-04 14:03:23,636 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 14:03:23,636 DEBUG {conn-10005} pool-recycle
2019-08-04 14:03:23,636 DEBUG {conn-10005} pool-connect
2019-08-04 14:03:23,636 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-04 14:03:23,636 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-04 14:03:23,637 DEBUG {conn-10005, pstmt-20006} executed. 0.512514 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:03:23,637 DEBUG {conn-10005, pstmt-20006, rs-50013} open
2019-08-04 14:03:23,637 DEBUG {conn-10005, pstmt-20006, rs-50013} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:03:23,637 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:03:23,637 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:03:23,637 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:03:23,638 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:03:23,639 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:03:23,639 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:03:23,639 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:03:23,639 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:03:23,639 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:03:23,641 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:03:23,641 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:03:23,641 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:03:23,642 DEBUG {conn-10005, pstmt-20006, rs-50013} closed
2019-08-04 14:03:23,642 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 14:03:23,642 DEBUG {conn-10005} pool-recycle
2019-08-04 14:04:35,124 DEBUG {conn-10001,procId-395} connected
2019-08-04 14:04:35,150 DEBUG {conn-10002,procId-396} connected
2019-08-04 14:04:35,168 DEBUG {conn-10003,procId-397} connected
2019-08-04 14:04:35,186 DEBUG {conn-10004,procId-398} connected
2019-08-04 14:04:35,202 DEBUG {conn-10005,procId-399} connected
2019-08-04 14:04:35,222 DEBUG {conn-10005} pool-connect
2019-08-04 14:04:35,225 DEBUG {conn-10005} pool-recycle
2019-08-04 14:04:35,255 DEBUG {conn-10005} pool-connect
2019-08-04 14:04:35,260 DEBUG {conn-10005} pool-recycle
2019-08-04 14:04:35,800 DEBUG {conn-10005} pool-connect
2019-08-04 14:04:35,842 DEBUG {conn-10005} pool-recycle
2019-08-04 14:04:36,513 INFO [Amazon] modules [], plugins [], sites []
2019-08-04 14:04:36,524 DEBUG [Amazon] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 14:04:36,534 DEBUG [Amazon] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 14:04:36,550 DEBUG [Amazon] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:04:36,552 DEBUG [Amazon] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 14:04:36,553 DEBUG [Amazon] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 14:04:36,553 DEBUG [Amazon] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:04:36,553 DEBUG [Amazon] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 14:04:36,553 DEBUG [Amazon] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 14:04:36,554 DEBUG [Amazon] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:04:36,554 DEBUG [Amazon] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 14:04:36,554 DEBUG [Amazon] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:04:36,554 DEBUG [Amazon] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:04:36,555 DEBUG [Amazon] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 14:04:36,555 DEBUG [Amazon] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 14:04:36,555 DEBUG [Amazon] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 14:04:36,555 DEBUG [Amazon] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:04:38,280 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 14:04:38,298 DEBUG using gathering [true]
2019-08-04 14:04:38,324 DEBUG [Amazon] node_sampler_interval[5s]
2019-08-04 14:04:38,341 DEBUG Using select timeout of 500
2019-08-04 14:04:38,341 DEBUG Epoll-bug workaround enabled = false
2019-08-04 14:04:38,392 DEBUG [Amazon] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:04:38,416 DEBUG [Amazon] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:04:38,450 DEBUG [Amazon] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:04:39,398 DEBUG {conn-10005} pool-connect
2019-08-04 14:04:39,398 DEBUG {conn-10005} pool-recycle
2019-08-04 14:05:08,854 DEBUG {conn-10005} pool-connect
2019-08-04 14:05:08,956 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:05:08,963 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:05:08,963 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:05:08,967 DEBUG {conn-10005, pstmt-20000} executed. 5.932722 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:05:08,972 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 14:05:08,974 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:05:08,979 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 112, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:05:08,982 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 14:05:08,982 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:05:08,983 DEBUG {conn-10005} pool-recycle
2019-08-04 14:05:08,983 DEBUG {conn-10005} pool-connect
2019-08-04 14:05:08,987 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:05:08,990 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 113, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:05:08,990 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:05:08,998 DEBUG {conn-10005, pstmt-20001} executed. 8.520993 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:05:08,998 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:05:08,998 DEBUG {conn-10005} pool-recycle
2019-08-04 14:05:09,038 DEBUG {conn-10005} pool-connect
2019-08-04 14:05:09,039 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:05:09,039 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:05:09,039 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:05:09,040 DEBUG {conn-10005, pstmt-20002} executed. 0.650795 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:05:09,040 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 14:05:09,040 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:05:09,040 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:05:09,041 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 14:05:09,041 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:05:09,041 DEBUG {conn-10005} pool-recycle
2019-08-04 14:05:09,058 DEBUG {conn-10005} pool-connect
2019-08-04 14:05:09,059 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:05:09,060 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:05:09,060 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:05:09,061 DEBUG {conn-10005, pstmt-20003} executed. 0.830714 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:05:09,061 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 14:05:09,061 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 14:05:09,061 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 14:05:09,063 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 14:05:09,063 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:05:09,063 DEBUG {conn-10005} pool-recycle
2019-08-04 14:05:09,064 DEBUG {conn-10005} pool-connect
2019-08-04 14:05:09,068 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:05:09,068 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:05:09,068 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:05:09,069 DEBUG {conn-10005, pstmt-20004} executed. 0.837397 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:05:09,069 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 14:05:09,069 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:05:09,069 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:05:09,070 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:05:09,070 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 14:05:09,070 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:05:09,071 DEBUG {conn-10005} pool-recycle
2019-08-04 14:05:09,071 DEBUG {conn-10005} pool-connect
2019-08-04 14:05:09,071 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:05:09,071 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:05:09,072 DEBUG {conn-10005, pstmt-20003} executed. 0.65388 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:05:09,072 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 14:05:09,072 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 14:05:09,072 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 14:05:09,072 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 14:05:09,072 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:05:09,072 DEBUG {conn-10005} pool-recycle
2019-08-04 14:05:09,075 DEBUG {conn-10005} pool-connect
2019-08-04 14:05:09,075 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:05:09,076 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:05:09,076 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:05:09,076 DEBUG {conn-10005, pstmt-20005} executed. 0.794217 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:05:09,076 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 14:05:09,076 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:05:09,077 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:05:09,077 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:05:09,077 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:05:09,078 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:05:09,078 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:05:09,078 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:05:09,078 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:05:09,079 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:05:09,079 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:05:09,079 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:05:09,079 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:05:09,079 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:05:09,080 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 14:05:09,080 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:05:09,080 DEBUG {conn-10005} pool-recycle
2019-08-04 14:06:13,749 DEBUG {conn-10001,procId-400} connected
2019-08-04 14:06:13,758 DEBUG {conn-10002,procId-401} connected
2019-08-04 14:06:13,763 DEBUG {conn-10003,procId-402} connected
2019-08-04 14:06:13,770 DEBUG {conn-10004,procId-403} connected
2019-08-04 14:06:13,775 DEBUG {conn-10005,procId-404} connected
2019-08-04 14:06:13,780 DEBUG {conn-10005} pool-connect
2019-08-04 14:06:13,781 DEBUG {conn-10005} pool-recycle
2019-08-04 14:06:13,789 DEBUG {conn-10005} pool-connect
2019-08-04 14:06:13,789 DEBUG {conn-10005} pool-recycle
2019-08-04 14:06:14,581 DEBUG {conn-10005} pool-connect
2019-08-04 14:06:14,640 DEBUG {conn-10005} pool-recycle
2019-08-04 14:06:15,537 INFO [Tempus] modules [], plugins [], sites []
2019-08-04 14:06:15,553 DEBUG [Tempus] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 14:06:15,561 DEBUG [Tempus] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 14:06:15,578 DEBUG [Tempus] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:06:15,579 DEBUG [Tempus] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 14:06:15,579 DEBUG [Tempus] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 14:06:15,580 DEBUG [Tempus] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:06:15,580 DEBUG [Tempus] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 14:06:15,580 DEBUG [Tempus] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 14:06:15,580 DEBUG [Tempus] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:06:15,580 DEBUG [Tempus] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 14:06:15,581 DEBUG [Tempus] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:06:15,581 DEBUG [Tempus] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:06:15,581 DEBUG [Tempus] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 14:06:15,581 DEBUG [Tempus] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 14:06:15,581 DEBUG [Tempus] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 14:06:15,581 DEBUG [Tempus] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:06:19,001 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 14:06:19,020 DEBUG using gathering [true]
2019-08-04 14:06:19,041 DEBUG [Tempus] node_sampler_interval[5s]
2019-08-04 14:06:19,054 DEBUG Using select timeout of 500
2019-08-04 14:06:19,055 DEBUG Epoll-bug workaround enabled = false
2019-08-04 14:06:19,101 DEBUG [Tempus] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:06:19,131 DEBUG [Tempus] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:06:19,180 DEBUG [Tempus] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:06:19,938 DEBUG {conn-10005} pool-connect
2019-08-04 14:06:19,938 DEBUG {conn-10005} pool-recycle
2019-08-04 14:08:04,849 DEBUG {conn-10001,procId-405} connected
2019-08-04 14:08:04,860 DEBUG {conn-10002,procId-406} connected
2019-08-04 14:08:04,865 DEBUG {conn-10003,procId-407} connected
2019-08-04 14:08:04,870 DEBUG {conn-10004,procId-408} connected
2019-08-04 14:08:04,875 DEBUG {conn-10005,procId-409} connected
2019-08-04 14:08:04,881 DEBUG {conn-10005} pool-connect
2019-08-04 14:08:04,883 DEBUG {conn-10005} pool-recycle
2019-08-04 14:08:04,889 DEBUG {conn-10005} pool-connect
2019-08-04 14:08:04,892 DEBUG {conn-10005} pool-recycle
2019-08-04 14:08:05,906 DEBUG {conn-10005} pool-connect
2019-08-04 14:08:06,004 DEBUG {conn-10005} pool-recycle
2019-08-04 14:08:07,847 INFO [Sputnik] modules [], plugins [], sites []
2019-08-04 14:08:07,885 DEBUG [Sputnik] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 14:08:07,919 DEBUG [Sputnik] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 14:08:07,957 DEBUG [Sputnik] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:08:07,960 DEBUG [Sputnik] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 14:08:07,960 DEBUG [Sputnik] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 14:08:07,961 DEBUG [Sputnik] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:08:07,961 DEBUG [Sputnik] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 14:08:07,961 DEBUG [Sputnik] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 14:08:07,962 DEBUG [Sputnik] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:08:07,962 DEBUG [Sputnik] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 14:08:07,963 DEBUG [Sputnik] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:08:07,963 DEBUG [Sputnik] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:08:07,963 DEBUG [Sputnik] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 14:08:07,964 DEBUG [Sputnik] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 14:08:07,964 DEBUG [Sputnik] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 14:08:07,964 DEBUG [Sputnik] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:08:12,887 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 14:08:12,954 DEBUG using gathering [true]
2019-08-04 14:08:13,026 DEBUG [Sputnik] node_sampler_interval[5s]
2019-08-04 14:08:13,067 DEBUG Using select timeout of 500
2019-08-04 14:08:13,069 DEBUG Epoll-bug workaround enabled = false
2019-08-04 14:08:13,216 DEBUG [Sputnik] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:08:13,299 DEBUG [Sputnik] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:08:13,405 DEBUG [Sputnik] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:08:15,365 DEBUG {conn-10005} pool-connect
2019-08-04 14:08:15,369 DEBUG {conn-10005} pool-recycle
2019-08-04 14:09:31,333 DEBUG {conn-10005} pool-connect
2019-08-04 14:09:31,437 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:09:31,444 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:09:31,444 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:09:31,449 DEBUG {conn-10005, pstmt-20000} executed. 6.0453 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:09:31,452 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 14:09:31,452 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:09:31,457 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 113, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:09:31,462 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 14:09:31,463 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:09:31,463 DEBUG {conn-10005} pool-recycle
2019-08-04 14:09:31,464 DEBUG {conn-10005} pool-connect
2019-08-04 14:09:31,467 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:09:31,470 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 114, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:09:31,471 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:09:31,481 DEBUG {conn-10005, pstmt-20001} executed. 10.749941 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:09:31,482 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:09:31,482 DEBUG {conn-10005} pool-recycle
2019-08-04 14:09:31,593 DEBUG {conn-10005} pool-connect
2019-08-04 14:09:31,594 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:09:31,595 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:09:31,595 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:09:31,597 DEBUG {conn-10005, pstmt-20002} executed. 1.865509 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:09:31,597 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 14:09:31,597 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:09:31,598 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:09:31,599 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 14:09:31,599 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:09:31,600 DEBUG {conn-10005} pool-recycle
2019-08-04 14:09:31,644 DEBUG {conn-10005} pool-connect
2019-08-04 14:09:31,648 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:09:31,649 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:09:31,649 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:09:31,651 DEBUG {conn-10005, pstmt-20003} executed. 2.202731 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:09:31,651 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 14:09:31,651 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 14:09:31,652 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 14:09:31,657 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 14:09:31,657 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:09:31,657 DEBUG {conn-10005} pool-recycle
2019-08-04 14:09:31,662 DEBUG {conn-10005} pool-connect
2019-08-04 14:09:31,673 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:09:31,674 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:09:31,674 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:09:31,677 DEBUG {conn-10005, pstmt-20004} executed. 2.561028 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:09:31,677 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 14:09:31,677 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:09:31,678 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:09:31,680 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:09:31,681 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 14:09:31,682 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:09:31,682 DEBUG {conn-10005} pool-recycle
2019-08-04 14:09:31,684 DEBUG {conn-10005} pool-connect
2019-08-04 14:09:31,685 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:09:31,685 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:09:31,687 DEBUG {conn-10005, pstmt-20003} executed. 1.973976 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:09:31,687 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 14:09:31,687 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 14:09:31,688 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 14:09:31,688 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 14:09:31,688 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:09:31,689 DEBUG {conn-10005} pool-recycle
2019-08-04 14:09:31,699 DEBUG {conn-10005} pool-connect
2019-08-04 14:09:31,701 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:09:31,702 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:09:31,702 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:09:31,704 DEBUG {conn-10005, pstmt-20005} executed. 2.519903 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:09:31,705 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 14:09:31,705 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:09:31,706 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:09:31,707 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:09:31,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:09:31,709 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:09:31,710 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:09:31,712 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:09:31,713 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:09:31,714 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:09:31,715 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:09:31,717 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:09:31,718 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:09:31,719 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:09:31,720 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 14:09:31,720 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:09:31,721 DEBUG {conn-10005} pool-recycle
2019-08-04 14:16:18,034 DEBUG {conn-10001,procId-410} connected
2019-08-04 14:16:18,059 DEBUG {conn-10002,procId-411} connected
2019-08-04 14:16:18,077 DEBUG {conn-10003,procId-412} connected
2019-08-04 14:16:18,094 DEBUG {conn-10004,procId-413} connected
2019-08-04 14:16:18,113 DEBUG {conn-10005,procId-414} connected
2019-08-04 14:16:18,135 DEBUG {conn-10005} pool-connect
2019-08-04 14:16:18,142 DEBUG {conn-10005} pool-recycle
2019-08-04 14:16:18,171 DEBUG {conn-10005} pool-connect
2019-08-04 14:16:18,178 DEBUG {conn-10005} pool-recycle
2019-08-04 14:16:18,952 DEBUG {conn-10005} pool-connect
2019-08-04 14:16:19,042 DEBUG {conn-10005} pool-recycle
2019-08-04 14:16:19,928 INFO [Punchout] modules [], plugins [], sites []
2019-08-04 14:16:19,940 DEBUG [Punchout] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 14:16:19,950 DEBUG [Punchout] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 14:16:19,967 DEBUG [Punchout] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 14:16:19,968 DEBUG [Punchout] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:16:23,487 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 14:16:23,530 DEBUG using gathering [true]
2019-08-04 14:16:23,577 DEBUG [Punchout] node_sampler_interval[5s]
2019-08-04 14:16:23,606 DEBUG Using select timeout of 500
2019-08-04 14:16:23,606 DEBUG Epoll-bug workaround enabled = false
2019-08-04 14:16:23,693 DEBUG [Punchout] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:16:23,744 DEBUG [Punchout] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:16:23,805 DEBUG [Punchout] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:16:25,765 DEBUG {conn-10005} pool-connect
2019-08-04 14:16:25,765 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:27,007 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:27,331 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:18:27,356 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:18:27,357 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:18:27,366 DEBUG {conn-10005, pstmt-20000} executed. 20.922083 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:18:27,381 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 14:18:27,384 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:18:27,403 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 114, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:18:27,412 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 14:18:27,413 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:18:27,416 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:27,417 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:27,429 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:18:27,441 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 115, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:18:27,441 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:18:27,446 DEBUG {conn-10005, pstmt-20001} executed. 6.060721 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:18:27,446 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:18:27,447 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:27,580 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:27,581 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:18:27,582 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:18:27,582 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:18:27,583 DEBUG {conn-10005, pstmt-20002} executed. 1.699469 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:18:27,584 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 14:18:27,584 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:18:27,585 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:18:27,586 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 14:18:27,586 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:18:27,586 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:27,620 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:27,623 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:18:27,624 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:18:27,624 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:18:27,625 DEBUG {conn-10005, pstmt-20003} executed. 1.283598 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:18:27,626 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 14:18:27,626 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 14:18:27,626 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 14:18:27,630 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 14:18:27,630 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:18:27,630 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:27,634 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:27,639 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:18:27,640 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:18:27,640 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:18:27,642 DEBUG {conn-10005, pstmt-20004} executed. 1.476883 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:18:27,642 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 14:18:27,642 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:18:27,643 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:18:27,644 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:18:27,645 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 14:18:27,645 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:18:27,645 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:27,645 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:27,646 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:18:27,646 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:18:27,647 DEBUG {conn-10005, pstmt-20003} executed. 1.018346 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:18:27,647 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 14:18:27,647 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 14:18:27,647 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 14:18:27,648 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 14:18:27,648 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:18:27,648 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:27,654 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:27,655 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:18:27,655 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:18:27,656 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:18:27,657 DEBUG {conn-10005, pstmt-20005} executed. 1.530345 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:18:27,657 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 14:18:27,657 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:18:27,658 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:27,658 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:27,659 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:27,659 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:27,660 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:27,661 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:27,661 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:27,662 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:27,662 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:27,663 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:18:27,663 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:18:27,664 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:18:27,664 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 14:18:27,665 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:18:27,665 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:37,894 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:37,894 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:18:37,894 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:18:37,894 DEBUG {conn-10005, pstmt-20000} executed. 0.9582 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:18:37,894 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-04 14:18:37,894 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:18:37,894 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 115, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:18:37,899 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-04 14:18:37,899 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:18:37,899 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:37,899 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:37,899 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 116, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:18:37,899 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:18:37,907 DEBUG {conn-10005, pstmt-20001} executed. 8.138022 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:18:37,908 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:18:37,908 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:37,913 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:37,913 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:18:37,913 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:18:37,914 DEBUG {conn-10005, pstmt-20002} executed. 0.710425 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:18:37,914 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-04 14:18:37,914 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:18:37,914 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:18:37,915 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-04 14:18:37,915 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:18:37,915 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:37,916 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:37,916 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:18:37,916 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:18:37,916 DEBUG {conn-10005, pstmt-20003} executed. 0.562892 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:18:37,916 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-04 14:18:37,916 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-04 14:18:37,917 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [2]
2019-08-04 14:18:37,917 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-04 14:18:37,917 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:18:37,917 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:37,917 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:37,918 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:18:37,918 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:18:37,918 DEBUG {conn-10005, pstmt-20004} executed. 0.896514 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:18:37,919 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-04 14:18:37,919 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:18:37,919 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:18:37,920 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:18:37,920 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-04 14:18:37,920 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:18:37,920 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:37,920 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:37,920 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:18:37,920 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:18:37,922 DEBUG {conn-10005, pstmt-20003} executed. 0.679582 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:18:37,922 DEBUG {conn-10005, pstmt-20003, rs-50010} open
2019-08-04 14:18:37,922 DEBUG {conn-10005, pstmt-20003, rs-50010} Header: [count(*)]
2019-08-04 14:18:37,922 DEBUG {conn-10005, pstmt-20003, rs-50010} Result: [2]
2019-08-04 14:18:37,922 DEBUG {conn-10005, pstmt-20003, rs-50010} closed
2019-08-04 14:18:37,922 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:18:37,922 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:37,922 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:37,922 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005} executed. 0.524851 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-04 14:18:37,923 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:18:37,923 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:39,532 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:39,533 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:18:39,533 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:18:39,534 DEBUG {conn-10005, pstmt-20000} executed. 1.092883 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:18:39,534 DEBUG {conn-10005, pstmt-20000, rs-50012} open
2019-08-04 14:18:39,534 DEBUG {conn-10005, pstmt-20000, rs-50012} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:18:39,535 DEBUG {conn-10005, pstmt-20000, rs-50012} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 116, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:18:39,535 DEBUG {conn-10005, pstmt-20000, rs-50012} closed
2019-08-04 14:18:39,535 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:18:39,535 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:39,535 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:39,535 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 117, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:18:39,535 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:18:39,546 DEBUG {conn-10005, pstmt-20001} executed. 8.639741 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:18:39,546 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:18:39,546 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:39,551 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:39,551 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:18:39,551 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:18:39,552 DEBUG {conn-10005, pstmt-20002} executed. 0.908337 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:18:39,552 DEBUG {conn-10005, pstmt-20002, rs-50013} open
2019-08-04 14:18:39,552 DEBUG {conn-10005, pstmt-20002, rs-50013} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:18:39,552 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:18:39,553 DEBUG {conn-10005, pstmt-20002, rs-50013} closed
2019-08-04 14:18:39,553 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:18:39,553 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:39,553 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:39,553 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:18:39,553 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:18:39,554 DEBUG {conn-10005, pstmt-20003} executed. 0.643084 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:18:39,554 DEBUG {conn-10005, pstmt-20003, rs-50014} open
2019-08-04 14:18:39,554 DEBUG {conn-10005, pstmt-20003, rs-50014} Header: [count(*)]
2019-08-04 14:18:39,554 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [2]
2019-08-04 14:18:39,554 DEBUG {conn-10005, pstmt-20003, rs-50014} closed
2019-08-04 14:18:39,554 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:18:39,554 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:39,555 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:39,555 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:18:39,555 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:18:39,556 DEBUG {conn-10005, pstmt-20004} executed. 0.711968 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:18:39,556 DEBUG {conn-10005, pstmt-20004, rs-50015} open
2019-08-04 14:18:39,556 DEBUG {conn-10005, pstmt-20004, rs-50015} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:18:39,556 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:18:39,557 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:18:39,558 DEBUG {conn-10005, pstmt-20004, rs-50015} closed
2019-08-04 14:18:39,558 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:18:39,558 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:39,559 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:39,559 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:18:39,559 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:18:39,560 DEBUG {conn-10005, pstmt-20003} executed. 0.846651 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:18:39,560 DEBUG {conn-10005, pstmt-20003, rs-50016} open
2019-08-04 14:18:39,560 DEBUG {conn-10005, pstmt-20003, rs-50016} Header: [count(*)]
2019-08-04 14:18:39,560 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [2]
2019-08-04 14:18:39,561 DEBUG {conn-10005, pstmt-20003, rs-50016} closed
2019-08-04 14:18:39,561 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:18:39,561 DEBUG {conn-10005} pool-recycle
2019-08-04 14:18:39,562 DEBUG {conn-10005} pool-connect
2019-08-04 14:18:39,562 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:18:39,562 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:18:39,563 DEBUG {conn-10005, pstmt-20005} executed. 1.040964 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:18:39,563 DEBUG {conn-10005, pstmt-20005, rs-50017} open
2019-08-04 14:18:39,563 DEBUG {conn-10005, pstmt-20005, rs-50017} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:18:39,563 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:39,564 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:39,564 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:39,564 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:39,565 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:18:39,565 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:39,565 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:39,566 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:39,566 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:18:39,566 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:18:39,567 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:18:39,567 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:18:39,568 DEBUG {conn-10005, pstmt-20005, rs-50017} closed
2019-08-04 14:18:39,568 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:18:39,568 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:01,350 DEBUG {conn-10001,procId-415} connected
2019-08-04 14:21:01,365 DEBUG {conn-10002,procId-416} connected
2019-08-04 14:21:01,376 DEBUG {conn-10003,procId-417} connected
2019-08-04 14:21:01,388 DEBUG {conn-10004,procId-418} connected
2019-08-04 14:21:01,399 DEBUG {conn-10005,procId-419} connected
2019-08-04 14:21:01,413 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:01,416 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:01,436 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:01,442 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:02,319 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:02,450 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:04,446 INFO [Gorgilla] modules [], plugins [], sites []
2019-08-04 14:21:04,487 DEBUG [Gorgilla] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 14:21:04,519 DEBUG [Gorgilla] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 14:21:04,546 DEBUG [Gorgilla] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:21:04,548 DEBUG [Gorgilla] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 14:21:04,548 DEBUG [Gorgilla] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 14:21:04,548 DEBUG [Gorgilla] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:21:04,549 DEBUG [Gorgilla] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 14:21:04,549 DEBUG [Gorgilla] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 14:21:04,549 DEBUG [Gorgilla] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:21:04,549 DEBUG [Gorgilla] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 14:21:04,549 DEBUG [Gorgilla] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:21:04,550 DEBUG [Gorgilla] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:21:04,550 DEBUG [Gorgilla] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 14:21:04,550 DEBUG [Gorgilla] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 14:21:04,550 DEBUG [Gorgilla] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 14:21:04,551 DEBUG [Gorgilla] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:21:08,964 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 14:21:08,999 DEBUG using gathering [true]
2019-08-04 14:21:09,024 DEBUG [Gorgilla] node_sampler_interval[5s]
2019-08-04 14:21:09,037 DEBUG Using select timeout of 500
2019-08-04 14:21:09,037 DEBUG Epoll-bug workaround enabled = false
2019-08-04 14:21:09,082 DEBUG [Gorgilla] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:21:09,130 DEBUG [Gorgilla] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:21:09,229 DEBUG [Gorgilla] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:21:10,687 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:10,687 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:15,965 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:16,180 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:21:16,195 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:21:16,195 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:21:16,201 DEBUG {conn-10005, pstmt-20000} executed. 12.390294 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:21:16,210 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 14:21:16,211 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:21:16,223 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 117, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:21:16,228 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 14:21:16,228 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:21:16,229 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:16,229 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:16,238 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:21:16,244 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 118, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:21:16,244 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:21:16,253 DEBUG {conn-10005, pstmt-20001} executed. 9.590745 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:21:16,253 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:21:16,254 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:16,318 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:16,318 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:21:16,318 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:21:16,318 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:21:16,319 DEBUG {conn-10005, pstmt-20002} executed. 0.717108 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:21:16,319 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 14:21:16,319 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:21:16,320 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:21:16,320 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 14:21:16,320 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:21:16,320 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:16,335 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:16,337 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:21:16,337 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:21:16,337 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:21:16,338 DEBUG {conn-10005, pstmt-20003} executed. 0.699117 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:21:16,338 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 14:21:16,338 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 14:21:16,338 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 14:21:16,340 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 14:21:16,340 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:21:16,340 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:16,340 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:16,344 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:21:16,344 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:21:16,344 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:21:16,345 DEBUG {conn-10005, pstmt-20004} executed. 0.755149 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:21:16,345 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 14:21:16,345 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:21:16,345 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:21:16,345 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:21:16,346 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 14:21:16,346 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:21:16,346 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:16,346 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:16,346 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:21:16,346 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:21:16,347 DEBUG {conn-10005, pstmt-20003} executed. 0.60453 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:21:16,347 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 14:21:16,347 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 14:21:16,347 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 14:21:16,347 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 14:21:16,347 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:21:16,347 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:16,353 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:16,354 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:21:16,354 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:21:16,354 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:21:16,356 DEBUG {conn-10005, pstmt-20005} executed. 1.568385 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:21:16,356 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 14:21:16,356 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:21:16,357 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:16,357 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:16,358 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:16,359 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:16,359 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:16,360 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:16,361 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:16,362 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:16,362 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:16,363 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:21:16,363 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:21:16,364 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:21:16,364 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 14:21:16,364 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:21:16,364 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:29,583 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:29,585 DEBUG {conn-10005, pstmt-20006} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 14:21:29,585 DEBUG {conn-10005, pstmt-20006} Parameters : [1, 0, 8]
2019-08-04 14:21:29,585 DEBUG {conn-10005, pstmt-20006} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 14:21:29,586 DEBUG {conn-10005, pstmt-20006} executed. 0.817863 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 14:21:29,586 DEBUG {conn-10005, pstmt-20006, rs-50006} open
2019-08-04 14:21:29,586 DEBUG {conn-10005, pstmt-20006, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 14:21:29,586 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 118, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 14:21:29,586 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 124, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 14:21:29,586 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 14:21:29,586 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 14:21:29,586 DEBUG {conn-10005, pstmt-20006, rs-50006} closed
2019-08-04 14:21:29,586 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 14:21:29,586 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:29,593 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:29,594 DEBUG {conn-10005, pstmt-20007} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 14:21:29,595 DEBUG {conn-10005, pstmt-20007} Parameters : [24, 22, 24, 20]
2019-08-04 14:21:29,595 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER, INTEGER]
2019-08-04 14:21:29,596 DEBUG {conn-10005, pstmt-20007} executed. 0.862072 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 14:21:29,596 DEBUG {conn-10005, pstmt-20007, rs-50007} open
2019-08-04 14:21:29,596 DEBUG {conn-10005, pstmt-20007, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:21:29,596 DEBUG {conn-10005, pstmt-20007, rs-50007} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 14:21:29,597 DEBUG {conn-10005, pstmt-20007, rs-50007} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 14:21:29,597 DEBUG {conn-10005, pstmt-20007, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:21:29,597 DEBUG {conn-10005, pstmt-20007, rs-50007} closed
2019-08-04 14:21:29,597 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-04 14:21:29,597 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:29,602 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:29,603 DEBUG {conn-10005, pstmt-20008} created. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 14:21:29,603 DEBUG {conn-10005, pstmt-20008} Parameters : [1]
2019-08-04 14:21:29,603 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER]
2019-08-04 14:21:29,603 DEBUG {conn-10005, pstmt-20008} executed. 0.740755 millis. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 14:21:29,603 DEBUG {conn-10005, pstmt-20008, rs-50008} open
2019-08-04 14:21:29,603 DEBUG {conn-10005, pstmt-20008, rs-50008} Header: [count(*)]
2019-08-04 14:21:29,603 DEBUG {conn-10005, pstmt-20008, rs-50008} Result: [4]
2019-08-04 14:21:29,603 DEBUG {conn-10005, pstmt-20008, rs-50008} closed
2019-08-04 14:21:29,603 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-04 14:21:29,603 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:29,608 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:29,609 DEBUG {conn-10005, pstmt-20009} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 14:21:29,609 DEBUG {conn-10005, pstmt-20009} Parameters : [9]
2019-08-04 14:21:29,609 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 14:21:29,610 DEBUG {conn-10005, pstmt-20009} executed. 1.045076 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 14:21:29,610 DEBUG {conn-10005, pstmt-20009, rs-50009} open
2019-08-04 14:21:29,610 DEBUG {conn-10005, pstmt-20009, rs-50009} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 14:21:29,611 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 118, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 14:21:29,612 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 124, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 14:21:29,612 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 14:21:29,613 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 14:21:29,613 DEBUG {conn-10005, pstmt-20009, rs-50009} closed
2019-08-04 14:21:29,614 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 14:21:29,614 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:29,614 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:29,614 DEBUG {conn-10005, pstmt-20010} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 14:21:29,614 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 14:21:29,614 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 14:21:29,614 DEBUG {conn-10005, pstmt-20010} executed. 1.180273 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 14:21:29,614 DEBUG {conn-10005, pstmt-20010, rs-50010} open
2019-08-04 14:21:29,614 DEBUG {conn-10005, pstmt-20010, rs-50010} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 14:21:29,614 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 14:21:29,618 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 124, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 14:21:29,618 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 118, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 14:21:29,619 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 14:21:29,619 DEBUG {conn-10005, pstmt-20010, rs-50010} closed
2019-08-04 14:21:29,619 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 14:21:29,619 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:29,619 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:29,624 DEBUG {conn-10005, pstmt-20011} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 14:21:29,624 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-04 14:21:29,624 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-04 14:21:29,624 DEBUG {conn-10005, pstmt-20011} executed. 1.565301 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 14:21:29,624 DEBUG {conn-10005, pstmt-20011, rs-50011} open
2019-08-04 14:21:29,624 DEBUG {conn-10005, pstmt-20011, rs-50011} Header: [tag_id, tag_count, tag_name]
2019-08-04 14:21:29,628 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 14:21:29,628 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 14:21:29,628 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [66, 1, Spring]
2019-08-04 14:21:29,628 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [67, 1, SpringMVC]
2019-08-04 14:21:29,628 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [68, 1, MyBatis]
2019-08-04 14:21:29,629 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [69, 1, easyUI]
2019-08-04 14:21:29,629 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [127, 1, 目录]
2019-08-04 14:21:29,629 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [128, 1, AdminLte3]
2019-08-04 14:21:29,629 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [130, 1, SpringBoot]
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [131, 1, 入门教程]
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [132, 1, 实战教程]
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [133, 1, spring-boot企业级开发]
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20011, rs-50011} closed
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 14:21:29,630 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:29,630 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20005} executed. 0.833285 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20005, rs-50012} open
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20005, rs-50012} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:29,630 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:29,635 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:29,635 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:29,635 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:29,635 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:29,635 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:29,635 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:21:29,635 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:21:29,635 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:21:29,635 DEBUG {conn-10005, pstmt-20005, rs-50012} closed
2019-08-04 14:21:29,635 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:21:29,635 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:30,133 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:30,133 DEBUG {conn-10005, pstmt-20012} created. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 14:21:30,140 DEBUG {conn-10005, pstmt-20012} Parameters : [anonymousUser]
2019-08-04 14:21:30,140 DEBUG {conn-10005, pstmt-20012} Types : [VARCHAR]
2019-08-04 14:21:30,141 DEBUG {conn-10005, pstmt-20012, rs-50013} query executed. 1.258923 millis. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 14:21:30,141 DEBUG {conn-10005, pstmt-20012, rs-50013} open
2019-08-04 14:21:30,141 DEBUG {conn-10005, pstmt-20012, rs-50013} Header: [userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime]
2019-08-04 14:21:30,142 DEBUG {conn-10005, pstmt-20012, rs-50013} closed
2019-08-04 14:21:30,142 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-04 14:21:30,143 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:32,097 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:32,098 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:21:32,098 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:21:32,098 DEBUG {conn-10005, pstmt-20000} executed. 0.849221 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:21:32,099 DEBUG {conn-10005, pstmt-20000, rs-50014} open
2019-08-04 14:21:32,099 DEBUG {conn-10005, pstmt-20000, rs-50014} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:21:32,099 DEBUG {conn-10005, pstmt-20000, rs-50014} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 118, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:21:32,100 DEBUG {conn-10005, pstmt-20000, rs-50014} closed
2019-08-04 14:21:32,101 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:21:32,101 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:32,101 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:32,101 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 119, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:21:32,101 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:21:32,103 DEBUG {conn-10005, pstmt-20001} executed. 2.947084 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:21:32,104 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:21:32,104 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:32,104 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:32,109 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:21:32,109 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:21:32,110 DEBUG {conn-10005, pstmt-20002} executed. 1.082088 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:21:32,110 DEBUG {conn-10005, pstmt-20002, rs-50015} open
2019-08-04 14:21:32,110 DEBUG {conn-10005, pstmt-20002, rs-50015} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:21:32,111 DEBUG {conn-10005, pstmt-20002, rs-50015} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:21:32,111 DEBUG {conn-10005, pstmt-20002, rs-50015} closed
2019-08-04 14:21:32,111 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:21:32,111 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:32,112 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:32,112 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:21:32,112 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:21:32,113 DEBUG {conn-10005, pstmt-20003} executed. 0.765944 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:21:32,113 DEBUG {conn-10005, pstmt-20003, rs-50016} open
2019-08-04 14:21:32,113 DEBUG {conn-10005, pstmt-20003, rs-50016} Header: [count(*)]
2019-08-04 14:21:32,113 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [2]
2019-08-04 14:21:32,113 DEBUG {conn-10005, pstmt-20003, rs-50016} closed
2019-08-04 14:21:32,113 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:21:32,113 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:32,114 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:32,114 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:21:32,114 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:21:32,115 DEBUG {conn-10005, pstmt-20004} executed. 0.831743 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:21:32,115 DEBUG {conn-10005, pstmt-20004, rs-50017} open
2019-08-04 14:21:32,115 DEBUG {conn-10005, pstmt-20004, rs-50017} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:21:32,115 DEBUG {conn-10005, pstmt-20004, rs-50017} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:21:32,115 DEBUG {conn-10005, pstmt-20004, rs-50017} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:21:32,117 DEBUG {conn-10005, pstmt-20004, rs-50017} closed
2019-08-04 14:21:32,117 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:21:32,117 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:32,117 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:32,117 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:21:32,118 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:21:32,118 DEBUG {conn-10005, pstmt-20003} executed. 0.814779 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:21:32,118 DEBUG {conn-10005, pstmt-20003, rs-50018} open
2019-08-04 14:21:32,119 DEBUG {conn-10005, pstmt-20003, rs-50018} Header: [count(*)]
2019-08-04 14:21:32,119 DEBUG {conn-10005, pstmt-20003, rs-50018} Result: [2]
2019-08-04 14:21:32,119 DEBUG {conn-10005, pstmt-20003, rs-50018} closed
2019-08-04 14:21:32,119 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:21:32,119 DEBUG {conn-10005} pool-recycle
2019-08-04 14:21:32,119 DEBUG {conn-10005} pool-connect
2019-08-04 14:21:32,119 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:21:32,120 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:21:32,120 DEBUG {conn-10005, pstmt-20005} executed. 0.752064 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:21:32,120 DEBUG {conn-10005, pstmt-20005, rs-50019} open
2019-08-04 14:21:32,120 DEBUG {conn-10005, pstmt-20005, rs-50019} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:21:32,121 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:32,121 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:32,122 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:32,122 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:32,122 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:21:32,122 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:32,123 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:32,123 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:32,123 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:21:32,123 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:21:32,123 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:21:32,124 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:21:32,124 DEBUG {conn-10005, pstmt-20005, rs-50019} closed
2019-08-04 14:21:32,124 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:21:32,124 DEBUG {conn-10005} pool-recycle
2019-08-04 14:22:31,591 DEBUG {conn-10001,procId-420} connected
2019-08-04 14:22:31,599 DEBUG {conn-10002,procId-421} connected
2019-08-04 14:22:31,605 DEBUG {conn-10003,procId-422} connected
2019-08-04 14:22:31,614 DEBUG {conn-10004,procId-423} connected
2019-08-04 14:22:31,620 DEBUG {conn-10005,procId-424} connected
2019-08-04 14:22:31,629 DEBUG {conn-10005} pool-connect
2019-08-04 14:22:31,632 DEBUG {conn-10005} pool-recycle
2019-08-04 14:22:31,647 DEBUG {conn-10005} pool-connect
2019-08-04 14:22:31,650 DEBUG {conn-10005} pool-recycle
2019-08-04 14:22:32,060 DEBUG {conn-10005} pool-connect
2019-08-04 14:22:32,180 DEBUG {conn-10005} pool-recycle
2019-08-04 14:22:33,743 INFO [Bandit] modules [], plugins [], sites []
2019-08-04 14:22:33,762 DEBUG [Bandit] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 14:22:33,781 DEBUG [Bandit] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 14:22:33,801 DEBUG [Bandit] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:22:33,802 DEBUG [Bandit] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 14:22:33,802 DEBUG [Bandit] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 14:22:33,803 DEBUG [Bandit] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:22:33,803 DEBUG [Bandit] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 14:22:33,803 DEBUG [Bandit] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 14:22:33,803 DEBUG [Bandit] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:22:33,803 DEBUG [Bandit] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 14:22:33,804 DEBUG [Bandit] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:22:33,804 DEBUG [Bandit] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:22:33,804 DEBUG [Bandit] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 14:22:33,805 DEBUG [Bandit] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 14:22:33,805 DEBUG [Bandit] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 14:22:33,805 DEBUG [Bandit] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:22:36,992 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 14:22:37,021 DEBUG using gathering [true]
2019-08-04 14:22:37,061 DEBUG [Bandit] node_sampler_interval[5s]
2019-08-04 14:22:37,099 DEBUG Using select timeout of 500
2019-08-04 14:22:37,099 DEBUG Epoll-bug workaround enabled = false
2019-08-04 14:22:37,226 DEBUG [Bandit] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:22:37,293 DEBUG [Bandit] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:22:37,386 DEBUG [Bandit] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:22:39,087 DEBUG {conn-10005} pool-connect
2019-08-04 14:22:39,087 DEBUG {conn-10005} pool-recycle
2019-08-04 14:22:48,353 DEBUG {conn-10005} pool-connect
2019-08-04 14:22:48,591 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:22:48,614 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:22:48,614 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:22:48,619 DEBUG {conn-10005, pstmt-20000} executed. 16.526389 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:22:48,632 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 14:22:48,633 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:22:48,651 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 119, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:22:48,658 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 14:22:48,660 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:22:48,661 DEBUG {conn-10005} pool-recycle
2019-08-04 14:22:48,662 DEBUG {conn-10005} pool-connect
2019-08-04 14:22:48,673 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:22:48,684 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 120, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:22:48,684 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:22:48,694 DEBUG {conn-10005, pstmt-20001} executed. 11.045009 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:22:48,694 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:22:48,694 DEBUG {conn-10005} pool-recycle
2019-08-04 14:22:48,835 DEBUG {conn-10005} pool-connect
2019-08-04 14:22:48,837 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:22:48,838 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:22:48,838 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:22:48,839 DEBUG {conn-10005, pstmt-20002} executed. 1.697927 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:22:48,840 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 14:22:48,840 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:22:48,841 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:22:48,842 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 14:22:48,842 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:22:48,842 DEBUG {conn-10005} pool-recycle
2019-08-04 14:22:48,897 DEBUG {conn-10005} pool-connect
2019-08-04 14:22:48,902 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:22:48,903 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:22:48,903 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:22:48,905 DEBUG {conn-10005, pstmt-20003} executed. 1.957011 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:22:48,906 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 14:22:48,906 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 14:22:48,906 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 14:22:48,911 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 14:22:48,911 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:22:48,911 DEBUG {conn-10005} pool-recycle
2019-08-04 14:22:48,917 DEBUG {conn-10005} pool-connect
2019-08-04 14:22:48,926 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:22:48,927 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:22:48,927 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:22:48,929 DEBUG {conn-10005, pstmt-20004} executed. 1.984256 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:22:48,929 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 14:22:48,929 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:22:48,931 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:22:48,933 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:22:48,934 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 14:22:48,935 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:22:48,935 DEBUG {conn-10005} pool-recycle
2019-08-04 14:22:48,936 DEBUG {conn-10005} pool-connect
2019-08-04 14:22:48,936 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:22:48,936 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:22:48,938 DEBUG {conn-10005, pstmt-20003} executed. 1.424963 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:22:48,938 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 14:22:48,938 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 14:22:48,938 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 14:22:48,939 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 14:22:48,939 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:22:48,939 DEBUG {conn-10005} pool-recycle
2019-08-04 14:22:48,950 DEBUG {conn-10005} pool-connect
2019-08-04 14:22:48,951 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:22:48,952 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:22:48,952 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:22:48,954 DEBUG {conn-10005, pstmt-20005} executed. 2.551775 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:22:48,955 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 14:22:48,955 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:22:48,955 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:22:48,957 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:22:48,958 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:22:48,958 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:22:48,959 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:22:48,960 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:22:48,961 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:22:48,962 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:22:48,963 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:22:48,963 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:22:48,965 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:22:48,966 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:22:48,967 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 14:22:48,967 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:22:48,967 DEBUG {conn-10005} pool-recycle
2019-08-04 14:23:58,723 DEBUG {conn-10001,procId-425} connected
2019-08-04 14:23:58,739 DEBUG {conn-10002,procId-426} connected
2019-08-04 14:23:58,751 DEBUG {conn-10003,procId-427} connected
2019-08-04 14:23:58,761 DEBUG {conn-10004,procId-428} connected
2019-08-04 14:23:58,773 DEBUG {conn-10005,procId-429} connected
2019-08-04 14:23:58,786 DEBUG {conn-10005} pool-connect
2019-08-04 14:23:58,788 DEBUG {conn-10005} pool-recycle
2019-08-04 14:23:58,805 DEBUG {conn-10005} pool-connect
2019-08-04 14:23:58,812 DEBUG {conn-10005} pool-recycle
2019-08-04 14:24:00,087 DEBUG {conn-10005} pool-connect
2019-08-04 14:24:00,127 DEBUG {conn-10005} pool-recycle
2019-08-04 14:24:02,211 INFO [Timeshadow] modules [], plugins [], sites []
2019-08-04 14:24:02,235 DEBUG [Timeshadow] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 14:24:02,254 DEBUG [Timeshadow] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 14:24:02,277 DEBUG [Timeshadow] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:24:02,280 DEBUG [Timeshadow] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 14:24:02,280 DEBUG [Timeshadow] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 14:24:02,280 DEBUG [Timeshadow] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:24:02,281 DEBUG [Timeshadow] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 14:24:02,281 DEBUG [Timeshadow] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 14:24:02,282 DEBUG [Timeshadow] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:24:02,282 DEBUG [Timeshadow] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 14:24:02,283 DEBUG [Timeshadow] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:24:02,283 DEBUG [Timeshadow] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:24:02,283 DEBUG [Timeshadow] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 14:24:02,283 DEBUG [Timeshadow] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 14:24:02,283 DEBUG [Timeshadow] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 14:24:02,283 DEBUG [Timeshadow] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:24:06,297 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 14:24:06,318 DEBUG using gathering [true]
2019-08-04 14:24:06,342 DEBUG [Timeshadow] node_sampler_interval[5s]
2019-08-04 14:24:06,355 DEBUG Using select timeout of 500
2019-08-04 14:24:06,355 DEBUG Epoll-bug workaround enabled = false
2019-08-04 14:24:06,404 DEBUG [Timeshadow] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:24:06,428 DEBUG [Timeshadow] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:24:06,464 DEBUG [Timeshadow] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:24:07,683 DEBUG {conn-10005} pool-connect
2019-08-04 14:24:07,683 DEBUG {conn-10005} pool-recycle
2019-08-04 14:24:16,348 DEBUG {conn-10005} pool-connect
2019-08-04 14:24:16,494 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:24:16,511 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:24:16,511 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:24:16,516 DEBUG {conn-10005, pstmt-20000} executed. 12.328093 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:24:16,524 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 14:24:16,527 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:24:16,539 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 120, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:24:16,544 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 14:24:16,545 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:24:16,546 DEBUG {conn-10005} pool-recycle
2019-08-04 14:24:16,546 DEBUG {conn-10005} pool-connect
2019-08-04 14:24:16,555 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:24:16,562 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 121, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:24:16,562 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:24:16,571 DEBUG {conn-10005, pstmt-20001} executed. 9.783515 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:24:16,571 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:24:16,572 DEBUG {conn-10005} pool-recycle
2019-08-04 14:24:16,629 DEBUG {conn-10005} pool-connect
2019-08-04 14:24:16,632 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:24:16,632 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:24:16,632 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:24:16,633 DEBUG {conn-10005, pstmt-20002} executed. 0.730987 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:24:16,633 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 14:24:16,633 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:24:16,633 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:24:16,633 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 14:24:16,633 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:24:16,633 DEBUG {conn-10005} pool-recycle
2019-08-04 14:24:16,648 DEBUG {conn-10005} pool-connect
2019-08-04 14:24:16,650 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:24:16,650 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:24:16,650 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:24:16,651 DEBUG {conn-10005, pstmt-20003} executed. 1.0862 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:24:16,652 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 14:24:16,652 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 14:24:16,652 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 14:24:16,654 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 14:24:16,654 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:24:16,654 DEBUG {conn-10005} pool-recycle
2019-08-04 14:24:16,654 DEBUG {conn-10005} pool-connect
2019-08-04 14:24:16,665 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:24:16,666 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:24:16,666 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:24:16,668 DEBUG {conn-10005, pstmt-20004} executed. 1.972948 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:24:16,668 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 14:24:16,669 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:24:16,670 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:24:16,672 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:24:16,672 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 14:24:16,673 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:24:16,673 DEBUG {conn-10005} pool-recycle
2019-08-04 14:24:16,673 DEBUG {conn-10005} pool-connect
2019-08-04 14:24:16,673 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:24:16,674 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:24:16,675 DEBUG {conn-10005, pstmt-20003} executed. 1.191582 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:24:16,675 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 14:24:16,675 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 14:24:16,675 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 14:24:16,675 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 14:24:16,676 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:24:16,676 DEBUG {conn-10005} pool-recycle
2019-08-04 14:24:16,685 DEBUG {conn-10005} pool-connect
2019-08-04 14:24:16,686 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:24:16,686 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:24:16,686 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:24:16,688 DEBUG {conn-10005, pstmt-20005} executed. 1.317526 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:24:16,688 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 14:24:16,688 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:24:16,689 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:24:16,689 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:24:16,690 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:24:16,690 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:24:16,691 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:24:16,692 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:24:16,693 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:24:16,694 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:24:16,695 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:24:16,697 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:24:16,697 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:24:16,698 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:24:16,699 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 14:24:16,699 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:24:16,699 DEBUG {conn-10005} pool-recycle
2019-08-04 14:25:17,257 DEBUG {conn-10001,procId-430} connected
2019-08-04 14:25:17,272 DEBUG {conn-10002,procId-431} connected
2019-08-04 14:25:17,283 DEBUG {conn-10003,procId-432} connected
2019-08-04 14:25:17,293 DEBUG {conn-10004,procId-433} connected
2019-08-04 14:25:17,302 DEBUG {conn-10005,procId-434} connected
2019-08-04 14:25:17,315 DEBUG {conn-10005} pool-connect
2019-08-04 14:25:17,318 DEBUG {conn-10005} pool-recycle
2019-08-04 14:25:17,331 DEBUG {conn-10005} pool-connect
2019-08-04 14:25:17,339 DEBUG {conn-10005} pool-recycle
2019-08-04 14:25:17,935 DEBUG {conn-10005} pool-connect
2019-08-04 14:25:17,974 DEBUG {conn-10005} pool-recycle
2019-08-04 14:25:19,889 INFO [John Jameson] modules [], plugins [], sites []
2019-08-04 14:25:19,929 DEBUG [John Jameson] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 14:25:19,963 DEBUG [John Jameson] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 14:25:19,999 DEBUG [John Jameson] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:25:20,002 DEBUG [John Jameson] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 14:25:20,003 DEBUG [John Jameson] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 14:25:20,003 DEBUG [John Jameson] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:25:20,004 DEBUG [John Jameson] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 14:25:20,004 DEBUG [John Jameson] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 14:25:20,005 DEBUG [John Jameson] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:25:20,005 DEBUG [John Jameson] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 14:25:20,006 DEBUG [John Jameson] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:25:20,006 DEBUG [John Jameson] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:25:20,007 DEBUG [John Jameson] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 14:25:20,007 DEBUG [John Jameson] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 14:25:20,008 DEBUG [John Jameson] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 14:25:20,009 DEBUG [John Jameson] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:25:24,568 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 14:25:24,591 DEBUG using gathering [true]
2019-08-04 14:25:24,615 DEBUG [John Jameson] node_sampler_interval[5s]
2019-08-04 14:25:24,628 DEBUG Using select timeout of 500
2019-08-04 14:25:24,628 DEBUG Epoll-bug workaround enabled = false
2019-08-04 14:25:24,767 DEBUG [John Jameson] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:25:24,853 DEBUG [John Jameson] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:25:24,985 DEBUG [John Jameson] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:25:27,442 DEBUG {conn-10005} pool-connect
2019-08-04 14:25:27,442 DEBUG {conn-10005} pool-recycle
2019-08-04 14:35:00,266 DEBUG {conn-10005} pool-connect
2019-08-04 14:35:00,367 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:35:00,375 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:35:00,375 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:35:00,378 DEBUG {conn-10005, pstmt-20000} executed. 6.25709 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:35:00,379 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 14:35:00,383 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:35:00,389 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 121, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:35:00,392 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 14:35:00,392 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:35:00,393 DEBUG {conn-10005} pool-recycle
2019-08-04 14:35:00,393 DEBUG {conn-10005} pool-connect
2019-08-04 14:35:00,398 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:35:00,400 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 122, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:35:00,402 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:35:00,406 DEBUG {conn-10005, pstmt-20001} executed. 4.253301 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:35:00,406 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:35:00,406 DEBUG {conn-10005} pool-recycle
2019-08-04 14:35:00,461 DEBUG {conn-10005} pool-connect
2019-08-04 14:35:00,462 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:35:00,462 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:35:00,463 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:35:00,463 DEBUG {conn-10005, pstmt-20002} executed. 0.84151 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:35:00,463 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 14:35:00,464 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:35:00,464 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:35:00,464 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 14:35:00,464 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:35:00,464 DEBUG {conn-10005} pool-recycle
2019-08-04 14:35:00,481 DEBUG {conn-10005} pool-connect
2019-08-04 14:35:00,483 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:35:00,484 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:35:00,484 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:35:00,484 DEBUG {conn-10005, pstmt-20003} executed. 0.73253 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:35:00,484 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 14:35:00,484 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 14:35:00,485 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 14:35:00,486 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 14:35:00,486 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:35:00,486 DEBUG {conn-10005} pool-recycle
2019-08-04 14:35:00,486 DEBUG {conn-10005} pool-connect
2019-08-04 14:35:00,490 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:35:00,491 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:35:00,491 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:35:00,491 DEBUG {conn-10005, pstmt-20004} executed. 0.772626 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:35:00,491 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 14:35:00,492 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:35:00,492 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:35:00,492 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:35:00,493 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 14:35:00,493 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:35:00,493 DEBUG {conn-10005} pool-recycle
2019-08-04 14:35:00,493 DEBUG {conn-10005} pool-connect
2019-08-04 14:35:00,493 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:35:00,493 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:35:00,494 DEBUG {conn-10005, pstmt-20003} executed. 0.516112 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:35:00,494 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 14:35:00,494 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 14:35:00,494 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 14:35:00,494 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 14:35:00,494 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:35:00,494 DEBUG {conn-10005} pool-recycle
2019-08-04 14:35:00,498 DEBUG {conn-10005} pool-connect
2019-08-04 14:35:00,498 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:35:00,498 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:35:00,498 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:35:00,499 DEBUG {conn-10005, pstmt-20005} executed. 0.796787 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:35:00,499 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 14:35:00,499 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:35:00,499 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:35:00,500 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:35:00,500 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:35:00,501 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:35:00,501 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:35:00,501 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:35:00,502 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:35:00,502 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:35:00,502 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:35:00,502 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:35:00,503 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:35:00,503 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:35:00,503 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 14:35:00,503 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:35:00,503 DEBUG {conn-10005} pool-recycle
2019-08-04 14:38:25,385 DEBUG {conn-10001,procId-435} connected
2019-08-04 14:38:25,397 DEBUG {conn-10002,procId-436} connected
2019-08-04 14:38:25,404 DEBUG {conn-10003,procId-437} connected
2019-08-04 14:38:25,413 DEBUG {conn-10004,procId-438} connected
2019-08-04 14:38:25,420 DEBUG {conn-10005,procId-439} connected
2019-08-04 14:38:25,429 DEBUG {conn-10005} pool-connect
2019-08-04 14:38:25,431 DEBUG {conn-10005} pool-recycle
2019-08-04 14:38:25,445 DEBUG {conn-10005} pool-connect
2019-08-04 14:38:25,448 DEBUG {conn-10005} pool-recycle
2019-08-04 14:38:26,115 DEBUG {conn-10005} pool-connect
2019-08-04 14:38:26,237 DEBUG {conn-10005} pool-recycle
2019-08-04 14:38:27,369 INFO [Urthona] modules [], plugins [], sites []
2019-08-04 14:38:27,387 DEBUG [Urthona] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 14:38:27,401 DEBUG [Urthona] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 14:38:27,413 DEBUG [Urthona] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 14:38:27,417 DEBUG [Urthona] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 14:38:27,421 DEBUG [Urthona] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:38:30,773 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 14:38:30,840 DEBUG using gathering [true]
2019-08-04 14:38:30,916 DEBUG [Urthona] node_sampler_interval[5s]
2019-08-04 14:38:30,941 DEBUG Using select timeout of 500
2019-08-04 14:38:30,941 DEBUG Epoll-bug workaround enabled = false
2019-08-04 14:38:31,031 DEBUG [Urthona] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:38:31,081 DEBUG [Urthona] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:38:31,158 DEBUG [Urthona] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:38:32,684 DEBUG {conn-10005} pool-connect
2019-08-04 14:38:32,684 DEBUG {conn-10005} pool-recycle
2019-08-04 14:38:37,348 DEBUG {conn-10005} pool-connect
2019-08-04 14:38:37,517 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:38:37,529 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:38:37,529 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:38:37,534 DEBUG {conn-10005, pstmt-20000} executed. 10.137186 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:38:37,540 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 14:38:37,543 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:38:37,552 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 122, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:38:37,557 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 14:38:37,557 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:38:37,558 DEBUG {conn-10005} pool-recycle
2019-08-04 14:38:37,559 DEBUG {conn-10005} pool-connect
2019-08-04 14:38:37,565 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:38:37,573 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 123, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:38:37,573 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:38:37,583 DEBUG {conn-10005, pstmt-20001} executed. 9.897636 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:38:37,584 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:38:37,584 DEBUG {conn-10005} pool-recycle
2019-08-04 14:38:37,671 DEBUG {conn-10005} pool-connect
2019-08-04 14:38:37,672 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:38:37,672 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:38:37,672 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:38:37,674 DEBUG {conn-10005, pstmt-20002} executed. 1.116015 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:38:37,674 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 14:38:37,674 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:38:37,674 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:38:37,675 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 14:38:37,675 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:38:37,675 DEBUG {conn-10005} pool-recycle
2019-08-04 14:38:37,718 DEBUG {conn-10005} pool-connect
2019-08-04 14:38:37,720 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:38:37,720 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:38:37,720 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:38:37,724 DEBUG {conn-10005, pstmt-20003} executed. 1.845461 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:38:37,724 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 14:38:37,724 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 14:38:37,724 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 14:38:37,727 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 14:38:37,727 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:38:37,728 DEBUG {conn-10005} pool-recycle
2019-08-04 14:38:37,729 DEBUG {conn-10005} pool-connect
2019-08-04 14:38:37,734 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:38:37,734 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:38:37,734 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:38:37,735 DEBUG {conn-10005, pstmt-20004} executed. 1.156112 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:38:37,735 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 14:38:37,735 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:38:37,736 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:38:37,737 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:38:37,737 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 14:38:37,737 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:38:37,739 DEBUG {conn-10005} pool-recycle
2019-08-04 14:38:37,739 DEBUG {conn-10005} pool-connect
2019-08-04 14:38:37,739 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:38:37,739 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:38:37,740 DEBUG {conn-10005, pstmt-20003} executed. 0.871325 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:38:37,740 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 14:38:37,740 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 14:38:37,740 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 14:38:37,741 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 14:38:37,741 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:38:37,741 DEBUG {conn-10005} pool-recycle
2019-08-04 14:38:37,745 DEBUG {conn-10005} pool-connect
2019-08-04 14:38:37,747 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:38:37,747 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:38:37,747 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:38:37,748 DEBUG {conn-10005, pstmt-20005} executed. 1.04559 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:38:37,749 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 14:38:37,749 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:38:37,750 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:38:37,750 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:38:37,750 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:38:37,751 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:38:37,751 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:38:37,752 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:38:37,752 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:38:37,753 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:38:37,753 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:38:37,754 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:38:37,755 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:38:37,755 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:38:37,756 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 14:38:37,756 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:38:37,756 DEBUG {conn-10005} pool-recycle
2019-08-04 14:41:40,981 DEBUG {conn-10001,procId-440} connected
2019-08-04 14:41:41,004 DEBUG {conn-10002,procId-441} connected
2019-08-04 14:41:41,016 DEBUG {conn-10003,procId-442} connected
2019-08-04 14:41:41,026 DEBUG {conn-10004,procId-443} connected
2019-08-04 14:41:41,034 DEBUG {conn-10005,procId-444} connected
2019-08-04 14:41:41,042 DEBUG {conn-10005} pool-connect
2019-08-04 14:41:41,044 DEBUG {conn-10005} pool-recycle
2019-08-04 14:41:41,055 DEBUG {conn-10005} pool-connect
2019-08-04 14:41:41,056 DEBUG {conn-10005} pool-recycle
2019-08-04 14:41:41,860 DEBUG {conn-10005} pool-connect
2019-08-04 14:41:41,962 DEBUG {conn-10005} pool-recycle
2019-08-04 14:41:43,110 INFO [Clive] modules [], plugins [], sites []
2019-08-04 14:41:43,123 DEBUG [Clive] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 14:41:43,143 DEBUG [Clive] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 14:41:43,157 DEBUG [Clive] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:41:43,158 DEBUG [Clive] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 14:41:43,158 DEBUG [Clive] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 14:41:43,159 DEBUG [Clive] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:41:43,159 DEBUG [Clive] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 14:41:43,159 DEBUG [Clive] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 14:41:43,159 DEBUG [Clive] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:41:43,159 DEBUG [Clive] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 14:41:43,159 DEBUG [Clive] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:41:43,159 DEBUG [Clive] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 14:41:43,159 DEBUG [Clive] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 14:41:43,160 DEBUG [Clive] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 14:41:43,160 DEBUG [Clive] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 14:41:43,161 DEBUG [Clive] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 14:41:45,422 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 14:41:45,448 DEBUG using gathering [true]
2019-08-04 14:41:45,472 DEBUG [Clive] node_sampler_interval[5s]
2019-08-04 14:41:45,485 DEBUG Using select timeout of 500
2019-08-04 14:41:45,485 DEBUG Epoll-bug workaround enabled = false
2019-08-04 14:41:45,545 DEBUG [Clive] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:41:45,573 DEBUG [Clive] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:41:45,607 DEBUG [Clive] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 14:41:47,192 DEBUG {conn-10005} pool-connect
2019-08-04 14:41:47,192 DEBUG {conn-10005} pool-recycle
2019-08-04 14:41:53,817 DEBUG {conn-10005} pool-connect
2019-08-04 14:41:53,924 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:41:53,931 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 14:41:53,931 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 14:41:53,936 DEBUG {conn-10005, pstmt-20000} executed. 6.039645 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 14:41:53,940 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 14:41:53,941 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 14:41:53,945 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 123, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 14:41:53,950 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 14:41:53,950 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 14:41:53,951 DEBUG {conn-10005} pool-recycle
2019-08-04 14:41:53,951 DEBUG {conn-10005} pool-connect
2019-08-04 14:41:53,955 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:41:53,960 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 124, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 14:41:53,960 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 14:41:53,973 DEBUG {conn-10005, pstmt-20001} executed. 16.482695 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 14:41:53,976 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 14:41:53,976 DEBUG {conn-10005} pool-recycle
2019-08-04 14:41:54,024 DEBUG {conn-10005} pool-connect
2019-08-04 14:41:54,025 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:41:54,026 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 14:41:54,026 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 14:41:54,026 DEBUG {conn-10005, pstmt-20002} executed. 0.705799 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 14:41:54,026 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 14:41:54,026 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 14:41:54,027 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 14:41:54,027 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 14:41:54,027 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 14:41:54,027 DEBUG {conn-10005} pool-recycle
2019-08-04 14:41:54,043 DEBUG {conn-10005} pool-connect
2019-08-04 14:41:54,046 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:41:54,046 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:41:54,046 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:41:54,047 DEBUG {conn-10005, pstmt-20003} executed. 0.927357 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:41:54,047 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 14:41:54,047 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 14:41:54,047 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 14:41:54,049 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 14:41:54,049 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:41:54,049 DEBUG {conn-10005} pool-recycle
2019-08-04 14:41:54,050 DEBUG {conn-10005} pool-connect
2019-08-04 14:41:54,052 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:41:54,052 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 14:41:54,052 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 14:41:54,054 DEBUG {conn-10005, pstmt-20004} executed. 0.831743 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 14:41:54,054 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 14:41:54,054 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 14:41:54,054 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 14:41:54,055 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 14:41:54,055 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 14:41:54,055 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 14:41:54,055 DEBUG {conn-10005} pool-recycle
2019-08-04 14:41:54,055 DEBUG {conn-10005} pool-connect
2019-08-04 14:41:54,055 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 14:41:54,055 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 14:41:54,056 DEBUG {conn-10005, pstmt-20003} executed. 0.551068 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 14:41:54,056 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 14:41:54,056 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 14:41:54,056 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 14:41:54,056 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 14:41:54,056 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 14:41:54,056 DEBUG {conn-10005} pool-recycle
2019-08-04 14:41:54,057 DEBUG {conn-10005} pool-connect
2019-08-04 14:41:54,057 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:41:54,057 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 14:41:54,057 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 14:41:54,061 DEBUG {conn-10005, pstmt-20005} executed. 0.825574 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 14:41:54,061 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 14:41:54,061 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 14:41:54,061 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 14:41:54,062 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 14:41:54,062 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 14:41:54,062 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 14:41:54,063 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 14:41:54,063 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 14:41:54,063 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 14:41:54,063 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 14:41:54,064 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 14:41:54,064 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 14:41:54,064 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 14:41:54,064 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 14:41:54,065 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 14:41:54,065 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 14:41:54,065 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:24,653 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:24,653 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 16:20:24,653 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:20:24,657 DEBUG {conn-10005, pstmt-20000} executed. 1.638811 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:20:24,657 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-04 16:20:24,657 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:20:24,657 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 124, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 16:20:24,657 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-04 16:20:24,657 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:20:24,657 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:24,657 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:24,657 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 125, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 16:20:24,657 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:20:24,669 DEBUG {conn-10005, pstmt-20001} executed. 9.157909 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:20:24,669 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:20:24,669 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:24,673 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:24,673 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 16:20:24,673 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:20:24,673 DEBUG {conn-10005, pstmt-20002} executed. 0.709397 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:20:24,673 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-04 16:20:24,673 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:20:24,673 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 16:20:24,673 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-04 16:20:24,673 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:20:24,677 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:24,677 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20003} executed. 0.559808 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [2]
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:20:24,677 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:24,677 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20004} executed. 0.613783 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 16:20:24,677 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:20:24,681 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:24,681 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20003} executed. 0.681125 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20003, rs-50010} open
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20003, rs-50010} Header: [count(*)]
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20003, rs-50010} Result: [2]
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20003, rs-50010} closed
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:20:24,681 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:24,681 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20005} executed. 0.8009 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:20:24,681 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-04 16:20:24,685 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:20:24,689 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:43,947 DEBUG {conn-10001,procId-445} connected
2019-08-04 16:20:43,955 DEBUG {conn-10002,procId-446} connected
2019-08-04 16:20:43,963 DEBUG {conn-10003,procId-447} connected
2019-08-04 16:20:43,971 DEBUG {conn-10004,procId-448} connected
2019-08-04 16:20:43,979 DEBUG {conn-10005,procId-449} connected
2019-08-04 16:20:43,987 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:43,987 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:43,999 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:44,003 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:44,454 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:44,494 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:45,101 INFO [Steel Raven] modules [], plugins [], sites []
2019-08-04 16:20:45,113 DEBUG [Steel Raven] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 16:20:45,125 DEBUG [Steel Raven] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 16:20:45,133 DEBUG [Steel Raven] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 16:20:45,137 DEBUG [Steel Raven] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:20:46,741 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 16:20:46,773 DEBUG using gathering [true]
2019-08-04 16:20:46,805 DEBUG [Steel Raven] node_sampler_interval[5s]
2019-08-04 16:20:46,825 DEBUG Using select timeout of 500
2019-08-04 16:20:46,825 DEBUG Epoll-bug workaround enabled = false
2019-08-04 16:20:46,893 DEBUG [Steel Raven] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:20:46,933 DEBUG [Steel Raven] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:20:46,977 DEBUG [Steel Raven] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:20:47,736 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:47,736 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:55,668 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:55,767 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:20:55,775 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 16:20:55,775 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:20:55,779 DEBUG {conn-10005, pstmt-20000} executed. 6.105444 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:20:55,783 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 16:20:55,783 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:20:55,787 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 125, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 16:20:55,791 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 16:20:55,791 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:20:55,791 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:55,791 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:55,795 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:20:55,799 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 126, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 16:20:55,799 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:20:55,808 DEBUG {conn-10005, pstmt-20001} executed. 9.452977 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:20:55,808 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:20:55,808 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:55,851 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:55,851 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:20:55,851 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 16:20:55,851 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:20:55,851 DEBUG {conn-10005, pstmt-20002} executed. 0.693976 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:20:55,851 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 16:20:55,851 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:20:55,851 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 16:20:55,851 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 16:20:55,851 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:20:55,851 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:55,867 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:55,867 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:20:55,871 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:20:55,871 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:20:55,871 DEBUG {conn-10005, pstmt-20003} executed. 0.772627 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:20:55,871 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 16:20:55,871 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 16:20:55,871 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 16:20:55,871 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 16:20:55,871 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:20:55,871 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:55,871 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:55,875 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:20:55,875 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 16:20:55,875 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:20:55,875 DEBUG {conn-10005, pstmt-20004} executed. 0.707855 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:20:55,875 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 16:20:55,875 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:20:55,879 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:55,879 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20003} executed. 0.608128 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 16:20:55,879 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:20:55,879 DEBUG {conn-10005} pool-recycle
2019-08-04 16:20:55,883 DEBUG {conn-10005} pool-connect
2019-08-04 16:20:55,883 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:20:55,883 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:20:55,883 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:20:55,883 DEBUG {conn-10005, pstmt-20005} executed. 0.709911 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:20:55,883 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 16:20:55,883 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:20:55,883 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:20:55,883 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:20:55,883 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:20:55,883 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:20:55,887 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:20:55,887 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:20:55,887 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:20:55,887 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:20:55,887 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:20:55,887 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:20:55,887 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:20:55,887 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:20:55,887 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 16:20:55,887 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:20:55,887 DEBUG {conn-10005} pool-recycle
2019-08-04 16:26:39,393 DEBUG {conn-10005} pool-connect
2019-08-04 16:26:39,393 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 16:26:39,393 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:26:39,393 DEBUG {conn-10005, pstmt-20000} executed. 1.26612 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:26:39,393 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-04 16:26:39,393 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:26:39,393 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 126, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 16:26:39,393 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-04 16:26:39,398 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:26:39,398 DEBUG {conn-10005} pool-recycle
2019-08-04 16:26:39,398 DEBUG {conn-10005} pool-connect
2019-08-04 16:26:39,398 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 127, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 16:26:39,398 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:26:39,407 DEBUG {conn-10005, pstmt-20001} executed. 8.839194 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:26:39,407 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:26:39,407 DEBUG {conn-10005} pool-recycle
2019-08-04 16:26:39,411 DEBUG {conn-10005} pool-connect
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20002} executed. 0.659534 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:26:39,411 DEBUG {conn-10005} pool-recycle
2019-08-04 16:26:39,411 DEBUG {conn-10005} pool-connect
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20003} executed. 0.53616 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:26:39,411 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-04 16:26:39,416 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-04 16:26:39,416 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [2]
2019-08-04 16:26:39,416 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-04 16:26:39,416 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:26:39,416 DEBUG {conn-10005} pool-recycle
2019-08-04 16:26:39,416 DEBUG {conn-10005} pool-connect
2019-08-04 16:26:39,416 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 16:26:39,416 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20004} executed. 0.649253 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:26:39,417 DEBUG {conn-10005} pool-recycle
2019-08-04 16:26:39,417 DEBUG {conn-10005} pool-connect
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20003} executed. 0.584996 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20003, rs-50010} open
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20003, rs-50010} Header: [count(*)]
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20003, rs-50010} Result: [2]
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20003, rs-50010} closed
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:26:39,417 DEBUG {conn-10005} pool-recycle
2019-08-04 16:26:39,417 DEBUG {conn-10005} pool-connect
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:26:39,417 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:26:39,421 DEBUG {conn-10005, pstmt-20005} executed. 0.575229 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:26:39,421 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-04 16:26:39,421 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:26:39,421 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:26:39,422 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:26:39,422 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:26:39,422 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:26:39,424 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:26:39,424 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:26:39,424 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:26:39,424 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:26:39,425 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:26:39,425 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:26:39,425 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:26:39,425 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:26:39,426 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-04 16:26:39,426 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:26:39,426 DEBUG {conn-10005} pool-recycle
2019-08-04 16:27:35,980 DEBUG {conn-10001,procId-450} connected
2019-08-04 16:27:35,994 DEBUG {conn-10002,procId-451} connected
2019-08-04 16:27:36,004 DEBUG {conn-10003,procId-452} connected
2019-08-04 16:27:36,015 DEBUG {conn-10004,procId-453} connected
2019-08-04 16:27:36,028 DEBUG {conn-10005,procId-454} connected
2019-08-04 16:27:36,040 DEBUG {conn-10005} pool-connect
2019-08-04 16:27:36,042 DEBUG {conn-10005} pool-recycle
2019-08-04 16:27:36,055 DEBUG {conn-10005} pool-connect
2019-08-04 16:27:36,062 DEBUG {conn-10005} pool-recycle
2019-08-04 16:27:36,721 DEBUG {conn-10005} pool-connect
2019-08-04 16:27:36,845 DEBUG {conn-10005} pool-recycle
2019-08-04 16:27:38,999 INFO [Nighthawk] modules [], plugins [], sites []
2019-08-04 16:27:39,044 DEBUG [Nighthawk] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 16:27:39,077 DEBUG [Nighthawk] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 16:27:39,114 DEBUG [Nighthawk] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:27:39,117 DEBUG [Nighthawk] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 16:27:39,117 DEBUG [Nighthawk] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 16:27:39,119 DEBUG [Nighthawk] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:27:39,119 DEBUG [Nighthawk] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 16:27:39,120 DEBUG [Nighthawk] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 16:27:39,120 DEBUG [Nighthawk] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:27:39,121 DEBUG [Nighthawk] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 16:27:39,121 DEBUG [Nighthawk] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:27:39,122 DEBUG [Nighthawk] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:27:39,122 DEBUG [Nighthawk] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 16:27:39,123 DEBUG [Nighthawk] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 16:27:39,123 DEBUG [Nighthawk] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 16:27:39,123 DEBUG [Nighthawk] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:27:41,059 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 16:27:41,073 DEBUG using gathering [true]
2019-08-04 16:27:41,134 DEBUG [Nighthawk] node_sampler_interval[5s]
2019-08-04 16:27:41,156 DEBUG Using select timeout of 500
2019-08-04 16:27:41,156 DEBUG Epoll-bug workaround enabled = false
2019-08-04 16:27:41,282 DEBUG [Nighthawk] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:27:41,357 DEBUG [Nighthawk] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:27:41,418 DEBUG [Nighthawk] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:27:43,141 DEBUG {conn-10005} pool-connect
2019-08-04 16:27:43,145 DEBUG {conn-10005} pool-recycle
2019-08-04 16:27:49,111 DEBUG {conn-10005} pool-connect
2019-08-04 16:27:49,250 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:27:49,263 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 16:27:49,263 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:27:49,267 DEBUG {conn-10005, pstmt-20000} executed. 8.219243 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:27:49,269 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 16:27:49,273 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:27:49,279 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 127, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 16:27:49,284 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 16:27:49,285 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:27:49,286 DEBUG {conn-10005} pool-recycle
2019-08-04 16:27:49,286 DEBUG {conn-10005} pool-connect
2019-08-04 16:27:49,292 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:27:49,297 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 128, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 16:27:49,297 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:27:49,301 DEBUG {conn-10005, pstmt-20001} executed. 3.620497 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:27:49,301 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:27:49,302 DEBUG {conn-10005} pool-recycle
2019-08-04 16:27:49,356 DEBUG {conn-10005} pool-connect
2019-08-04 16:27:49,357 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:27:49,357 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 16:27:49,357 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:27:49,358 DEBUG {conn-10005, pstmt-20002} executed. 1.111903 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:27:49,359 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 16:27:49,359 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:27:49,359 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 16:27:49,359 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 16:27:49,359 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:27:49,360 DEBUG {conn-10005} pool-recycle
2019-08-04 16:27:49,379 DEBUG {conn-10005} pool-connect
2019-08-04 16:27:49,381 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:27:49,381 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:27:49,381 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:27:49,383 DEBUG {conn-10005, pstmt-20003} executed. 0.863101 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:27:49,383 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 16:27:49,383 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 16:27:49,383 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 16:27:49,385 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 16:27:49,385 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:27:49,385 DEBUG {conn-10005} pool-recycle
2019-08-04 16:27:49,386 DEBUG {conn-10005} pool-connect
2019-08-04 16:27:49,390 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:27:49,390 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 16:27:49,390 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:27:49,391 DEBUG {conn-10005, pstmt-20004} executed. 0.859502 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:27:49,391 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 16:27:49,391 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:27:49,392 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 16:27:49,393 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 16:27:49,393 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 16:27:49,393 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:27:49,393 DEBUG {conn-10005} pool-recycle
2019-08-04 16:27:49,393 DEBUG {conn-10005} pool-connect
2019-08-04 16:27:49,394 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:27:49,394 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:27:49,394 DEBUG {conn-10005, pstmt-20003} executed. 0.733558 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:27:49,395 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 16:27:49,395 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 16:27:49,395 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 16:27:49,395 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 16:27:49,395 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:27:49,395 DEBUG {conn-10005} pool-recycle
2019-08-04 16:27:49,398 DEBUG {conn-10005} pool-connect
2019-08-04 16:27:49,399 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:27:49,399 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:27:49,399 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:27:49,400 DEBUG {conn-10005, pstmt-20005} executed. 0.90988 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:27:49,400 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 16:27:49,400 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:27:49,400 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:27:49,400 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:27:49,402 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:27:49,402 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:27:49,402 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:27:49,402 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:27:49,403 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:27:49,403 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:27:49,403 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:27:49,404 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:27:49,404 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:27:49,404 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:27:49,405 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 16:27:49,405 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:27:49,405 DEBUG {conn-10005} pool-recycle
2019-08-04 16:29:04,858 DEBUG {conn-10001,procId-455} connected
2019-08-04 16:29:04,869 DEBUG {conn-10002,procId-456} connected
2019-08-04 16:29:04,878 DEBUG {conn-10003,procId-457} connected
2019-08-04 16:29:04,887 DEBUG {conn-10004,procId-458} connected
2019-08-04 16:29:04,897 DEBUG {conn-10005,procId-459} connected
2019-08-04 16:29:04,908 DEBUG {conn-10005} pool-connect
2019-08-04 16:29:04,913 DEBUG {conn-10005} pool-recycle
2019-08-04 16:29:04,939 DEBUG {conn-10005} pool-connect
2019-08-04 16:29:04,943 DEBUG {conn-10005} pool-recycle
2019-08-04 16:29:05,516 DEBUG {conn-10005} pool-connect
2019-08-04 16:29:05,576 DEBUG {conn-10005} pool-recycle
2019-08-04 16:29:07,623 INFO [Surge] modules [], plugins [], sites []
2019-08-04 16:29:07,669 DEBUG [Surge] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 16:29:07,702 DEBUG [Surge] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 16:29:07,739 DEBUG [Surge] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:29:07,742 DEBUG [Surge] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 16:29:07,743 DEBUG [Surge] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 16:29:07,743 DEBUG [Surge] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:29:07,743 DEBUG [Surge] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 16:29:07,743 DEBUG [Surge] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 16:29:07,743 DEBUG [Surge] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:29:07,743 DEBUG [Surge] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 16:29:07,743 DEBUG [Surge] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:29:07,743 DEBUG [Surge] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:29:07,743 DEBUG [Surge] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 16:29:07,748 DEBUG [Surge] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 16:29:07,748 DEBUG [Surge] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 16:29:07,749 DEBUG [Surge] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:29:10,521 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 16:29:10,544 DEBUG using gathering [true]
2019-08-04 16:29:10,567 DEBUG [Surge] node_sampler_interval[5s]
2019-08-04 16:29:10,581 DEBUG Using select timeout of 500
2019-08-04 16:29:10,581 DEBUG Epoll-bug workaround enabled = false
2019-08-04 16:29:10,626 DEBUG [Surge] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:29:10,652 DEBUG [Surge] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:29:10,691 DEBUG [Surge] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:29:11,558 DEBUG {conn-10005} pool-connect
2019-08-04 16:29:11,559 DEBUG {conn-10005} pool-recycle
2019-08-04 16:30:12,839 DEBUG {conn-10005} pool-connect
2019-08-04 16:30:13,063 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:30:13,076 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 16:30:13,076 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:30:13,081 DEBUG {conn-10005, pstmt-20000} executed. 10.828078 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:30:13,088 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 16:30:13,088 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:30:13,098 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 128, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 16:30:13,104 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 16:30:13,104 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:30:13,106 DEBUG {conn-10005} pool-recycle
2019-08-04 16:30:13,107 DEBUG {conn-10005} pool-connect
2019-08-04 16:30:13,113 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:30:13,125 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 129, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 16:30:13,125 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:30:13,138 DEBUG {conn-10005, pstmt-20001} executed. 13.274985 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:30:13,139 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:30:13,139 DEBUG {conn-10005} pool-recycle
2019-08-04 16:30:13,316 DEBUG {conn-10005} pool-connect
2019-08-04 16:30:13,318 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:30:13,319 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 16:30:13,319 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:30:13,322 DEBUG {conn-10005, pstmt-20002} executed. 2.66024 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:30:13,323 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 16:30:13,323 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:30:13,324 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 16:30:13,326 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 16:30:13,326 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:30:13,327 DEBUG {conn-10005} pool-recycle
2019-08-04 16:30:13,387 DEBUG {conn-10005} pool-connect
2019-08-04 16:30:13,394 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:30:13,395 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:30:13,396 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:30:13,398 DEBUG {conn-10005, pstmt-20003} executed. 2.902874 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:30:13,398 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 16:30:13,398 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 16:30:13,399 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 16:30:13,402 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 16:30:13,402 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:30:13,402 DEBUG {conn-10005} pool-recycle
2019-08-04 16:30:13,409 DEBUG {conn-10005} pool-connect
2019-08-04 16:30:13,420 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:30:13,422 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 16:30:13,422 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:30:13,425 DEBUG {conn-10005, pstmt-20004} executed. 3.064803 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:30:13,425 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 16:30:13,425 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:30:13,426 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 16:30:13,428 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 16:30:13,430 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 16:30:13,430 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:30:13,431 DEBUG {conn-10005} pool-recycle
2019-08-04 16:30:13,433 DEBUG {conn-10005} pool-connect
2019-08-04 16:30:13,433 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:30:13,434 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:30:13,436 DEBUG {conn-10005, pstmt-20003} executed. 2.458216 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:30:13,436 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 16:30:13,436 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 16:30:13,437 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 16:30:13,438 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 16:30:13,438 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:30:13,439 DEBUG {conn-10005} pool-recycle
2019-08-04 16:30:13,451 DEBUG {conn-10005} pool-connect
2019-08-04 16:30:13,452 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:30:13,453 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:30:13,454 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:30:13,456 DEBUG {conn-10005, pstmt-20005} executed. 2.863292 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:30:13,456 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 16:30:13,456 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:30:13,458 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:30:13,459 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:30:13,460 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:30:13,461 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:30:13,463 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:30:13,464 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:30:13,466 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:30:13,467 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:30:13,468 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:30:13,470 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:30:13,471 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:30:13,472 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:30:13,474 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 16:30:13,474 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:30:13,475 DEBUG {conn-10005} pool-recycle
2019-08-04 16:32:14,631 DEBUG {conn-10001,procId-460} connected
2019-08-04 16:32:14,647 DEBUG {conn-10002,procId-461} connected
2019-08-04 16:32:14,658 DEBUG {conn-10003,procId-462} connected
2019-08-04 16:32:14,671 DEBUG {conn-10004,procId-463} connected
2019-08-04 16:32:14,682 DEBUG {conn-10005,procId-464} connected
2019-08-04 16:32:14,696 DEBUG {conn-10005} pool-connect
2019-08-04 16:32:14,699 DEBUG {conn-10005} pool-recycle
2019-08-04 16:32:14,718 DEBUG {conn-10005} pool-connect
2019-08-04 16:32:14,719 DEBUG {conn-10005} pool-recycle
2019-08-04 16:32:15,527 DEBUG {conn-10005} pool-connect
2019-08-04 16:32:15,624 DEBUG {conn-10005} pool-recycle
2019-08-04 16:32:16,798 INFO [Kingpin] modules [], plugins [], sites []
2019-08-04 16:32:16,839 DEBUG [Kingpin] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 16:32:16,870 DEBUG [Kingpin] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 16:32:16,904 DEBUG [Kingpin] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:32:16,907 DEBUG [Kingpin] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 16:32:16,908 DEBUG [Kingpin] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 16:32:16,908 DEBUG [Kingpin] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:32:16,909 DEBUG [Kingpin] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 16:32:16,909 DEBUG [Kingpin] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 16:32:16,909 DEBUG [Kingpin] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:32:16,910 DEBUG [Kingpin] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 16:32:16,910 DEBUG [Kingpin] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:32:16,910 DEBUG [Kingpin] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:32:16,911 DEBUG [Kingpin] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 16:32:16,911 DEBUG [Kingpin] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 16:32:16,911 DEBUG [Kingpin] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 16:32:16,913 DEBUG [Kingpin] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:32:20,495 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 16:32:20,551 DEBUG using gathering [true]
2019-08-04 16:32:20,617 DEBUG [Kingpin] node_sampler_interval[5s]
2019-08-04 16:32:20,661 DEBUG Using select timeout of 500
2019-08-04 16:32:20,662 DEBUG Epoll-bug workaround enabled = false
2019-08-04 16:32:20,790 DEBUG [Kingpin] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:32:20,871 DEBUG [Kingpin] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:32:20,980 DEBUG [Kingpin] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:32:22,906 DEBUG {conn-10005} pool-connect
2019-08-04 16:32:22,906 DEBUG {conn-10005} pool-recycle
2019-08-04 16:32:32,039 DEBUG {conn-10005} pool-connect
2019-08-04 16:32:32,156 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:32:32,165 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 16:32:32,165 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:32:32,171 DEBUG {conn-10005, pstmt-20000} executed. 7.651211 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:32:32,175 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 16:32:32,175 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:32:32,178 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 129, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 16:32:32,184 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 16:32:32,184 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:32:32,185 DEBUG {conn-10005} pool-recycle
2019-08-04 16:32:32,185 DEBUG {conn-10005} pool-connect
2019-08-04 16:32:32,188 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:32:32,192 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 130, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 16:32:32,192 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:32:32,195 DEBUG {conn-10005, pstmt-20001} executed. 3.194345 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:32:32,196 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:32:32,196 DEBUG {conn-10005} pool-recycle
2019-08-04 16:32:32,237 DEBUG {conn-10005} pool-connect
2019-08-04 16:32:32,237 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:32:32,238 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 16:32:32,238 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:32:32,238 DEBUG {conn-10005, pstmt-20002} executed. 0.682152 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:32:32,238 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 16:32:32,238 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:32:32,239 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 16:32:32,239 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 16:32:32,239 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:32:32,239 DEBUG {conn-10005} pool-recycle
2019-08-04 16:32:32,255 DEBUG {conn-10005} pool-connect
2019-08-04 16:32:32,257 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:32:32,257 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:32:32,257 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:32:32,259 DEBUG {conn-10005, pstmt-20003} executed. 0.975165 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:32:32,259 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 16:32:32,259 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 16:32:32,259 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 16:32:32,260 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 16:32:32,260 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:32:32,261 DEBUG {conn-10005} pool-recycle
2019-08-04 16:32:32,262 DEBUG {conn-10005} pool-connect
2019-08-04 16:32:32,264 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:32:32,264 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 16:32:32,264 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:32:32,265 DEBUG {conn-10005, pstmt-20004} executed. 0.740241 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:32:32,265 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 16:32:32,265 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:32:32,266 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 16:32:32,266 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 16:32:32,266 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 16:32:32,267 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:32:32,267 DEBUG {conn-10005} pool-recycle
2019-08-04 16:32:32,267 DEBUG {conn-10005} pool-connect
2019-08-04 16:32:32,267 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:32:32,267 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:32:32,268 DEBUG {conn-10005, pstmt-20003} executed. 0.618923 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:32:32,268 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 16:32:32,268 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 16:32:32,268 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 16:32:32,268 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 16:32:32,268 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:32:32,268 DEBUG {conn-10005} pool-recycle
2019-08-04 16:32:32,272 DEBUG {conn-10005} pool-connect
2019-08-04 16:32:32,273 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:32:32,273 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:32:32,273 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:32:32,273 DEBUG {conn-10005, pstmt-20005} executed. 0.706313 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:32:32,274 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 16:32:32,274 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:32:32,274 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:32:32,274 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:32:32,274 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:32:32,275 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:32:32,275 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:32:32,275 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:32:32,275 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:32:32,276 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:32:32,276 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:32:32,276 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:32:32,276 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:32:32,276 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:32:32,277 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 16:32:32,277 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:32:32,277 DEBUG {conn-10005} pool-recycle
2019-08-04 16:33:19,184 DEBUG {conn-10005} pool-connect
2019-08-04 16:33:19,184 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 16:33:19,184 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:33:19,186 DEBUG {conn-10005, pstmt-20000} executed. 1.281542 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:33:19,186 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-04 16:33:19,186 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:33:19,187 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 130, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 16:33:19,187 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-04 16:33:19,187 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:33:19,187 DEBUG {conn-10005} pool-recycle
2019-08-04 16:33:19,187 DEBUG {conn-10005} pool-connect
2019-08-04 16:33:19,187 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 131, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 16:33:19,187 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:33:19,198 DEBUG {conn-10005, pstmt-20001} executed. 8.73844 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:33:19,198 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:33:19,198 DEBUG {conn-10005} pool-recycle
2019-08-04 16:33:19,199 DEBUG {conn-10005} pool-connect
2019-08-04 16:33:19,199 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 16:33:19,199 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:33:19,204 DEBUG {conn-10005, pstmt-20002} executed. 0.839967 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:33:19,204 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-04 16:33:19,204 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:33:19,204 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 16:33:19,206 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-04 16:33:19,206 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:33:19,206 DEBUG {conn-10005} pool-recycle
2019-08-04 16:33:19,206 DEBUG {conn-10005} pool-connect
2019-08-04 16:33:19,206 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:33:19,206 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:33:19,207 DEBUG {conn-10005, pstmt-20003} executed. 0.602988 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:33:19,207 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-04 16:33:19,207 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-04 16:33:19,207 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [2]
2019-08-04 16:33:19,207 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-04 16:33:19,207 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:33:19,208 DEBUG {conn-10005} pool-recycle
2019-08-04 16:33:19,208 DEBUG {conn-10005} pool-connect
2019-08-04 16:33:19,208 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 16:33:19,208 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:33:19,209 DEBUG {conn-10005, pstmt-20004} executed. 0.654908 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:33:19,209 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-04 16:33:19,209 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:33:19,209 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 16:33:19,209 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 16:33:19,210 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-04 16:33:19,210 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:33:19,210 DEBUG {conn-10005} pool-recycle
2019-08-04 16:33:19,210 DEBUG {conn-10005} pool-connect
2019-08-04 16:33:19,210 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:33:19,210 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:33:19,211 DEBUG {conn-10005, pstmt-20003} executed. 0.690891 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:33:19,211 DEBUG {conn-10005, pstmt-20003, rs-50010} open
2019-08-04 16:33:19,211 DEBUG {conn-10005, pstmt-20003, rs-50010} Header: [count(*)]
2019-08-04 16:33:19,211 DEBUG {conn-10005, pstmt-20003, rs-50010} Result: [2]
2019-08-04 16:33:19,212 DEBUG {conn-10005, pstmt-20003, rs-50010} closed
2019-08-04 16:33:19,212 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:33:19,212 DEBUG {conn-10005} pool-recycle
2019-08-04 16:33:19,212 DEBUG {conn-10005} pool-connect
2019-08-04 16:33:19,212 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:33:19,212 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:33:19,213 DEBUG {conn-10005, pstmt-20005} executed. 0.805526 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:33:19,213 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-04 16:33:19,213 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:33:19,214 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:33:19,214 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:33:19,214 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:33:19,215 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:33:19,216 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:33:19,216 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:33:19,217 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:33:19,217 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:33:19,218 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:33:19,218 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:33:19,218 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:33:19,219 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:33:19,219 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-04 16:33:19,219 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:33:19,219 DEBUG {conn-10005} pool-recycle
2019-08-04 16:35:16,702 DEBUG {conn-10005} pool-connect
2019-08-04 16:35:16,702 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 16:35:16,702 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:35:16,702 DEBUG {conn-10005, pstmt-20000} executed. 0.830715 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:35:16,702 DEBUG {conn-10005, pstmt-20000, rs-50012} open
2019-08-04 16:35:16,702 DEBUG {conn-10005, pstmt-20000, rs-50012} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:35:16,702 DEBUG {conn-10005, pstmt-20000, rs-50012} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 131, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 16:35:16,704 DEBUG {conn-10005, pstmt-20000, rs-50012} closed
2019-08-04 16:35:16,704 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:35:16,704 DEBUG {conn-10005} pool-recycle
2019-08-04 16:35:16,704 DEBUG {conn-10005} pool-connect
2019-08-04 16:35:16,705 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 132, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 16:35:16,705 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:35:16,715 DEBUG {conn-10005, pstmt-20001} executed. 8.832511 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:35:16,715 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:35:16,715 DEBUG {conn-10005} pool-recycle
2019-08-04 16:35:16,715 DEBUG {conn-10005} pool-connect
2019-08-04 16:35:16,715 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 16:35:16,715 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:35:16,715 DEBUG {conn-10005, pstmt-20002} executed. 0.550554 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:35:16,715 DEBUG {conn-10005, pstmt-20002, rs-50013} open
2019-08-04 16:35:16,715 DEBUG {conn-10005, pstmt-20002, rs-50013} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:35:16,715 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 16:35:16,720 DEBUG {conn-10005, pstmt-20002, rs-50013} closed
2019-08-04 16:35:16,720 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:35:16,720 DEBUG {conn-10005} pool-recycle
2019-08-04 16:35:16,720 DEBUG {conn-10005} pool-connect
2019-08-04 16:35:16,720 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:35:16,720 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:35:16,721 DEBUG {conn-10005, pstmt-20003} executed. 0.553639 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:35:16,721 DEBUG {conn-10005, pstmt-20003, rs-50014} open
2019-08-04 16:35:16,721 DEBUG {conn-10005, pstmt-20003, rs-50014} Header: [count(*)]
2019-08-04 16:35:16,721 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [2]
2019-08-04 16:35:16,721 DEBUG {conn-10005, pstmt-20003, rs-50014} closed
2019-08-04 16:35:16,721 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:35:16,721 DEBUG {conn-10005} pool-recycle
2019-08-04 16:35:16,722 DEBUG {conn-10005} pool-connect
2019-08-04 16:35:16,722 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 16:35:16,722 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:35:16,722 DEBUG {conn-10005, pstmt-20004} executed. 0.592192 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:35:16,723 DEBUG {conn-10005, pstmt-20004, rs-50015} open
2019-08-04 16:35:16,723 DEBUG {conn-10005, pstmt-20004, rs-50015} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:35:16,723 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 16:35:16,723 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 16:35:16,723 DEBUG {conn-10005, pstmt-20004, rs-50015} closed
2019-08-04 16:35:16,723 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:35:16,723 DEBUG {conn-10005} pool-recycle
2019-08-04 16:35:16,724 DEBUG {conn-10005} pool-connect
2019-08-04 16:35:16,724 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 16:35:16,724 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:35:16,724 DEBUG {conn-10005, pstmt-20003} executed. 0.575743 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:35:16,725 DEBUG {conn-10005, pstmt-20003, rs-50016} open
2019-08-04 16:35:16,725 DEBUG {conn-10005, pstmt-20003, rs-50016} Header: [count(*)]
2019-08-04 16:35:16,725 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [2]
2019-08-04 16:35:16,725 DEBUG {conn-10005, pstmt-20003, rs-50016} closed
2019-08-04 16:35:16,725 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:35:16,725 DEBUG {conn-10005} pool-recycle
2019-08-04 16:35:16,725 DEBUG {conn-10005} pool-connect
2019-08-04 16:35:16,725 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:35:16,725 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005} executed. 0.444144 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} open
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005, rs-50017} closed
2019-08-04 16:35:16,726 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:35:16,726 DEBUG {conn-10005} pool-recycle
2019-08-04 16:37:55,535 DEBUG {conn-10005} pool-connect
2019-08-04 16:37:55,535 DEBUG {conn-10005, pstmt-20000} Parameters : [5]
2019-08-04 16:37:55,535 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:37:55,539 DEBUG {conn-10005, pstmt-20000} executed. 0.921188 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:37:55,540 DEBUG {conn-10005, pstmt-20000, rs-50018} open
2019-08-04 16:37:55,540 DEBUG {conn-10005, pstmt-20000, rs-50018} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:37:55,540 DEBUG {conn-10005, pstmt-20000, rs-50018} closed
2019-08-04 16:37:55,540 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:37:55,541 DEBUG {conn-10005} pool-recycle
2019-08-04 16:37:55,541 DEBUG {conn-10005} pool-connect
2019-08-04 16:37:55,541 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:37:55,541 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:37:55,542 DEBUG {conn-10005, pstmt-20005} executed. 0.806554 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:37:55,542 DEBUG {conn-10005, pstmt-20005, rs-50019} open
2019-08-04 16:37:55,542 DEBUG {conn-10005, pstmt-20005, rs-50019} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:37:55,542 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:37:55,543 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:37:55,543 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:37:55,543 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:37:55,543 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:37:55,544 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:37:55,544 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:37:55,544 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:37:55,544 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:37:55,545 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:37:55,545 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:37:55,545 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:37:55,546 DEBUG {conn-10005, pstmt-20005, rs-50019} closed
2019-08-04 16:37:55,546 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:37:55,546 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:03,806 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:03,806 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 16:38:03,806 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:38:03,806 DEBUG {conn-10005, pstmt-20000} executed. 0.899598 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:38:03,806 DEBUG {conn-10005, pstmt-20000, rs-50020} open
2019-08-04 16:38:03,806 DEBUG {conn-10005, pstmt-20000, rs-50020} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:38:03,806 DEBUG {conn-10005, pstmt-20000, rs-50020} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 124, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 16:38:03,810 DEBUG {conn-10005, pstmt-20000, rs-50020} closed
2019-08-04 16:38:03,810 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:38:03,810 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:03,810 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:03,811 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 125, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 16:38:03,811 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:38:03,814 DEBUG {conn-10005, pstmt-20001} executed. 2.744032 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:38:03,814 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:38:03,814 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:03,820 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:03,820 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 16:38:03,820 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:38:03,825 DEBUG {conn-10005, pstmt-20002} executed. 0.795759 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:38:03,825 DEBUG {conn-10005, pstmt-20002, rs-50021} open
2019-08-04 16:38:03,825 DEBUG {conn-10005, pstmt-20002, rs-50021} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:38:03,825 DEBUG {conn-10005, pstmt-20002, rs-50021} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 16:38:03,825 DEBUG {conn-10005, pstmt-20002, rs-50021} closed
2019-08-04 16:38:03,826 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:38:03,826 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:03,826 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:03,826 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 16:38:03,826 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:38:03,827 DEBUG {conn-10005, pstmt-20003} executed. 0.553124 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:38:03,827 DEBUG {conn-10005, pstmt-20003, rs-50022} open
2019-08-04 16:38:03,827 DEBUG {conn-10005, pstmt-20003, rs-50022} Header: [count(*)]
2019-08-04 16:38:03,827 DEBUG {conn-10005, pstmt-20003, rs-50022} Result: [0]
2019-08-04 16:38:03,827 DEBUG {conn-10005, pstmt-20003, rs-50022} closed
2019-08-04 16:38:03,827 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:38:03,827 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:03,827 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:03,827 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 16:38:03,827 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:38:03,834 DEBUG {conn-10005, pstmt-20004} executed. 0.700659 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:38:03,834 DEBUG {conn-10005, pstmt-20004, rs-50023} open
2019-08-04 16:38:03,834 DEBUG {conn-10005, pstmt-20004, rs-50023} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:38:03,834 DEBUG {conn-10005, pstmt-20004, rs-50023} closed
2019-08-04 16:38:03,834 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:38:03,834 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:03,834 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:03,834 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:38:03,834 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:38:03,834 DEBUG {conn-10005, pstmt-20005} executed. 0.705284 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:38:03,834 DEBUG {conn-10005, pstmt-20005, rs-50024} open
2019-08-04 16:38:03,836 DEBUG {conn-10005, pstmt-20005, rs-50024} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:38:03,836 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:38:03,836 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:38:03,836 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:38:03,837 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:38:03,837 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:38:03,837 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:38:03,837 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:38:03,837 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:38:03,838 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:38:03,838 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:38:03,838 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:38:03,838 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:38:03,838 DEBUG {conn-10005, pstmt-20005, rs-50024} closed
2019-08-04 16:38:03,838 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:38:03,838 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:16,481 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:16,482 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 16:38:16,482 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:38:16,482 DEBUG {conn-10005, pstmt-20000} executed. 0.982361 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:38:16,483 DEBUG {conn-10005, pstmt-20000, rs-50025} open
2019-08-04 16:38:16,483 DEBUG {conn-10005, pstmt-20000, rs-50025} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:38:16,483 DEBUG {conn-10005, pstmt-20000, rs-50025} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 125, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 16:38:16,484 DEBUG {conn-10005, pstmt-20000, rs-50025} closed
2019-08-04 16:38:16,484 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:38:16,484 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:16,484 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:16,485 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 126, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 16:38:16,485 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:38:16,492 DEBUG {conn-10005, pstmt-20001} executed. 8.062455 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:38:16,493 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:38:16,493 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:16,499 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:16,499 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 16:38:16,499 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:38:16,502 DEBUG {conn-10005, pstmt-20002} executed. 0.721735 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:38:16,502 DEBUG {conn-10005, pstmt-20002, rs-50026} open
2019-08-04 16:38:16,502 DEBUG {conn-10005, pstmt-20002, rs-50026} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:38:16,502 DEBUG {conn-10005, pstmt-20002, rs-50026} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 16:38:16,502 DEBUG {conn-10005, pstmt-20002, rs-50026} closed
2019-08-04 16:38:16,502 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:38:16,502 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:16,502 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:16,502 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 16:38:16,502 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:38:16,504 DEBUG {conn-10005, pstmt-20003} executed. 0.604016 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:38:16,504 DEBUG {conn-10005, pstmt-20003, rs-50027} open
2019-08-04 16:38:16,504 DEBUG {conn-10005, pstmt-20003, rs-50027} Header: [count(*)]
2019-08-04 16:38:16,504 DEBUG {conn-10005, pstmt-20003, rs-50027} Result: [0]
2019-08-04 16:38:16,504 DEBUG {conn-10005, pstmt-20003, rs-50027} closed
2019-08-04 16:38:16,504 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:38:16,504 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:16,504 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:16,504 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 16:38:16,504 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20004} executed. 0.56135 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20004, rs-50028} open
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20004, rs-50028} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20004, rs-50028} closed
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:38:16,505 DEBUG {conn-10005} pool-recycle
2019-08-04 16:38:16,505 DEBUG {conn-10005} pool-connect
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005} executed. 0.472418 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} open
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005, rs-50029} closed
2019-08-04 16:38:16,505 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:38:16,505 DEBUG {conn-10005} pool-recycle
2019-08-04 16:42:12,901 DEBUG {conn-10001,procId-465} connected
2019-08-04 16:42:12,924 DEBUG {conn-10002,procId-466} connected
2019-08-04 16:42:12,944 DEBUG {conn-10003,procId-467} connected
2019-08-04 16:42:12,961 DEBUG {conn-10004,procId-468} connected
2019-08-04 16:42:12,979 DEBUG {conn-10005,procId-469} connected
2019-08-04 16:42:12,998 DEBUG {conn-10005} pool-connect
2019-08-04 16:42:13,005 DEBUG {conn-10005} pool-recycle
2019-08-04 16:42:13,032 DEBUG {conn-10005} pool-connect
2019-08-04 16:42:13,040 DEBUG {conn-10005} pool-recycle
2019-08-04 16:42:14,229 DEBUG {conn-10005} pool-connect
2019-08-04 16:42:14,359 DEBUG {conn-10005} pool-recycle
2019-08-04 16:42:16,396 INFO [Kormok] modules [], plugins [], sites []
2019-08-04 16:42:16,415 DEBUG [Kormok] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 16:42:16,451 DEBUG [Kormok] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 16:42:16,489 DEBUG [Kormok] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:42:16,491 DEBUG [Kormok] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 16:42:16,491 DEBUG [Kormok] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 16:42:16,491 DEBUG [Kormok] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:42:16,491 DEBUG [Kormok] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 16:42:16,491 DEBUG [Kormok] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 16:42:16,491 DEBUG [Kormok] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:42:16,491 DEBUG [Kormok] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 16:42:16,495 DEBUG [Kormok] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:42:16,496 DEBUG [Kormok] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:42:16,496 DEBUG [Kormok] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 16:42:16,496 DEBUG [Kormok] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 16:42:16,497 DEBUG [Kormok] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 16:42:16,497 DEBUG [Kormok] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:42:20,706 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 16:42:20,724 DEBUG using gathering [true]
2019-08-04 16:42:20,746 DEBUG [Kormok] node_sampler_interval[5s]
2019-08-04 16:42:20,760 DEBUG Using select timeout of 500
2019-08-04 16:42:20,760 DEBUG Epoll-bug workaround enabled = false
2019-08-04 16:42:20,803 DEBUG [Kormok] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:42:20,828 DEBUG [Kormok] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:42:20,864 DEBUG [Kormok] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:42:21,757 DEBUG {conn-10005} pool-connect
2019-08-04 16:42:21,757 DEBUG {conn-10005} pool-recycle
2019-08-04 16:42:42,342 DEBUG {conn-10005} pool-connect
2019-08-04 16:42:42,507 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:42:42,520 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 16:42:42,520 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:42:42,524 DEBUG {conn-10005, pstmt-20000} executed. 7.349974 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:42:42,530 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 16:42:42,531 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:42:42,536 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 126, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 16:42:42,541 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 16:42:42,541 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:42:42,542 DEBUG {conn-10005} pool-recycle
2019-08-04 16:42:42,542 DEBUG {conn-10005} pool-connect
2019-08-04 16:42:42,549 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:42:42,552 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 127, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 16:42:42,552 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:42:42,563 DEBUG {conn-10005, pstmt-20001} executed. 9.043789 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:42:42,564 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:42:42,564 DEBUG {conn-10005} pool-recycle
2019-08-04 16:42:42,634 DEBUG {conn-10005} pool-connect
2019-08-04 16:42:42,634 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:42:42,634 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 16:42:42,634 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:42:42,634 DEBUG {conn-10005, pstmt-20002} executed. 1.224995 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:42:42,638 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 16:42:42,638 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:42:42,638 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 16:42:42,639 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 16:42:42,639 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:42:42,639 DEBUG {conn-10005} pool-recycle
2019-08-04 16:42:42,663 DEBUG {conn-10005} pool-connect
2019-08-04 16:42:42,665 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:42:42,665 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 16:42:42,665 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:42:42,668 DEBUG {conn-10005, pstmt-20003} executed. 0.951004 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:42:42,668 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 16:42:42,668 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 16:42:42,668 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-04 16:42:42,670 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 16:42:42,670 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:42:42,670 DEBUG {conn-10005} pool-recycle
2019-08-04 16:42:42,671 DEBUG {conn-10005} pool-connect
2019-08-04 16:42:42,674 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:42:42,674 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 16:42:42,674 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:42:42,674 DEBUG {conn-10005, pstmt-20004} executed. 1.257381 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:42:42,674 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 16:42:42,678 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:42:42,678 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 16:42:42,678 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:42:42,678 DEBUG {conn-10005} pool-recycle
2019-08-04 16:42:42,683 DEBUG {conn-10005} pool-connect
2019-08-04 16:42:42,683 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:42:42,684 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:42:42,684 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:42:42,685 DEBUG {conn-10005, pstmt-20005} executed. 1.072321 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:42:42,685 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-04 16:42:42,685 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:42:42,685 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:42:42,686 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:42:42,686 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:42:42,686 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:42:42,686 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:42:42,686 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:42:42,686 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:42:42,686 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:42:42,686 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:42:42,690 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:42:42,691 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:42:42,691 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:42:42,691 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-04 16:42:42,692 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:42:42,692 DEBUG {conn-10005} pool-recycle
2019-08-04 16:45:01,921 DEBUG {conn-10001,procId-470} connected
2019-08-04 16:45:01,945 DEBUG {conn-10002,procId-471} connected
2019-08-04 16:45:01,962 DEBUG {conn-10003,procId-472} connected
2019-08-04 16:45:01,978 DEBUG {conn-10004,procId-473} connected
2019-08-04 16:45:01,996 DEBUG {conn-10005,procId-474} connected
2019-08-04 16:45:02,015 DEBUG {conn-10005} pool-connect
2019-08-04 16:45:02,019 DEBUG {conn-10005} pool-recycle
2019-08-04 16:45:02,047 DEBUG {conn-10005} pool-connect
2019-08-04 16:45:02,053 DEBUG {conn-10005} pool-recycle
2019-08-04 16:45:03,225 DEBUG {conn-10005} pool-connect
2019-08-04 16:45:03,361 DEBUG {conn-10005} pool-recycle
2019-08-04 16:45:05,246 INFO [Blackbird] modules [], plugins [], sites []
2019-08-04 16:45:05,278 DEBUG [Blackbird] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 16:45:05,310 DEBUG [Blackbird] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 16:45:05,346 DEBUG [Blackbird] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:45:05,349 DEBUG [Blackbird] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 16:45:05,349 DEBUG [Blackbird] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 16:45:05,350 DEBUG [Blackbird] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:45:05,350 DEBUG [Blackbird] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 16:45:05,350 DEBUG [Blackbird] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 16:45:05,351 DEBUG [Blackbird] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:45:05,351 DEBUG [Blackbird] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 16:45:05,352 DEBUG [Blackbird] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:45:05,352 DEBUG [Blackbird] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:45:05,352 DEBUG [Blackbird] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 16:45:05,353 DEBUG [Blackbird] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 16:45:05,353 DEBUG [Blackbird] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 16:45:05,353 DEBUG [Blackbird] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:45:08,720 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 16:45:08,738 DEBUG using gathering [true]
2019-08-04 16:45:08,759 DEBUG [Blackbird] node_sampler_interval[5s]
2019-08-04 16:45:08,773 DEBUG Using select timeout of 500
2019-08-04 16:45:08,773 DEBUG Epoll-bug workaround enabled = false
2019-08-04 16:45:08,819 DEBUG [Blackbird] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:45:08,842 DEBUG [Blackbird] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:45:08,877 DEBUG [Blackbird] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:45:10,299 DEBUG {conn-10005} pool-connect
2019-08-04 16:45:10,299 DEBUG {conn-10005} pool-recycle
2019-08-04 16:45:17,128 DEBUG {conn-10005} pool-connect
2019-08-04 16:45:17,252 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:45:17,278 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 16:45:17,278 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:45:17,284 DEBUG {conn-10005, pstmt-20000} executed. 19.287385 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:45:17,299 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 16:45:17,301 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:45:17,318 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 127, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 16:45:17,331 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 16:45:17,332 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:45:17,334 DEBUG {conn-10005} pool-recycle
2019-08-04 16:45:17,335 DEBUG {conn-10005} pool-connect
2019-08-04 16:45:17,348 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:45:17,359 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 128, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 16:45:17,360 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:45:17,371 DEBUG {conn-10005, pstmt-20001} executed. 12.268462 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:45:17,372 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:45:17,372 DEBUG {conn-10005} pool-recycle
2019-08-04 16:45:17,520 DEBUG {conn-10005} pool-connect
2019-08-04 16:45:17,521 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:45:17,522 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 16:45:17,522 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:45:17,523 DEBUG {conn-10005, pstmt-20002} executed. 1.484594 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:45:17,523 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 16:45:17,523 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:45:17,523 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 16:45:17,525 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 16:45:17,525 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:45:17,525 DEBUG {conn-10005} pool-recycle
2019-08-04 16:45:17,556 DEBUG {conn-10005} pool-connect
2019-08-04 16:45:17,557 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:45:17,557 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 16:45:17,557 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:45:17,558 DEBUG {conn-10005, pstmt-20003} executed. 0.771598 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:45:17,558 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 16:45:17,558 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 16:45:17,558 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-04 16:45:17,560 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 16:45:17,560 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:45:17,561 DEBUG {conn-10005} pool-recycle
2019-08-04 16:45:17,562 DEBUG {conn-10005} pool-connect
2019-08-04 16:45:17,564 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:45:17,564 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 16:45:17,564 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:45:17,566 DEBUG {conn-10005, pstmt-20004} executed. 0.726362 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:45:17,566 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 16:45:17,566 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:45:17,566 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 16:45:17,566 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:45:17,566 DEBUG {conn-10005} pool-recycle
2019-08-04 16:45:17,568 DEBUG {conn-10005} pool-connect
2019-08-04 16:45:17,569 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:45:17,569 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:45:17,569 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:45:17,569 DEBUG {conn-10005, pstmt-20005} executed. 0.706827 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:45:17,570 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-04 16:45:17,570 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:45:17,570 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:45:17,570 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:45:17,570 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:45:17,571 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:45:17,571 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:45:17,571 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:45:17,571 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:45:17,572 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:45:17,572 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:45:17,572 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:45:17,572 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:45:17,572 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:45:17,573 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-04 16:45:17,573 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:45:17,573 DEBUG {conn-10005} pool-recycle
2019-08-04 16:50:14,680 DEBUG {conn-10001,procId-475} connected
2019-08-04 16:50:14,691 DEBUG {conn-10002,procId-476} connected
2019-08-04 16:50:14,699 DEBUG {conn-10003,procId-477} connected
2019-08-04 16:50:14,704 DEBUG {conn-10004,procId-478} connected
2019-08-04 16:50:14,710 DEBUG {conn-10005,procId-479} connected
2019-08-04 16:50:14,717 DEBUG {conn-10005} pool-connect
2019-08-04 16:50:14,719 DEBUG {conn-10005} pool-recycle
2019-08-04 16:50:14,725 DEBUG {conn-10005} pool-connect
2019-08-04 16:50:14,731 DEBUG {conn-10005} pool-recycle
2019-08-04 16:50:15,328 DEBUG {conn-10005} pool-connect
2019-08-04 16:50:15,431 DEBUG {conn-10005} pool-recycle
2019-08-04 16:50:16,171 INFO [Golden Archer] modules [], plugins [], sites []
2019-08-04 16:50:16,182 DEBUG [Golden Archer] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 16:50:16,191 DEBUG [Golden Archer] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 16:50:16,202 DEBUG [Golden Archer] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:50:16,203 DEBUG [Golden Archer] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 16:50:16,203 DEBUG [Golden Archer] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 16:50:16,203 DEBUG [Golden Archer] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:50:16,203 DEBUG [Golden Archer] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 16:50:16,203 DEBUG [Golden Archer] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 16:50:16,204 DEBUG [Golden Archer] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:50:16,204 DEBUG [Golden Archer] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 16:50:16,204 DEBUG [Golden Archer] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:50:16,204 DEBUG [Golden Archer] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 16:50:16,204 DEBUG [Golden Archer] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 16:50:16,204 DEBUG [Golden Archer] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 16:50:16,204 DEBUG [Golden Archer] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 16:50:16,204 DEBUG [Golden Archer] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 16:50:19,787 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 16:50:19,852 DEBUG using gathering [true]
2019-08-04 16:50:19,927 DEBUG [Golden Archer] node_sampler_interval[5s]
2019-08-04 16:50:19,972 DEBUG Using select timeout of 500
2019-08-04 16:50:19,972 DEBUG Epoll-bug workaround enabled = false
2019-08-04 16:50:20,122 DEBUG [Golden Archer] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:50:20,175 DEBUG [Golden Archer] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:50:20,271 DEBUG [Golden Archer] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 16:50:21,625 DEBUG {conn-10005} pool-connect
2019-08-04 16:50:21,625 DEBUG {conn-10005} pool-recycle
2019-08-04 16:50:31,542 DEBUG {conn-10005} pool-connect
2019-08-04 16:50:31,657 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:50:31,663 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 16:50:31,663 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:50:31,667 DEBUG {conn-10005, pstmt-20000} executed. 6.260689 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:50:31,669 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 16:50:31,669 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:50:31,678 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 128, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 16:50:31,680 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 16:50:31,680 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:50:31,681 DEBUG {conn-10005} pool-recycle
2019-08-04 16:50:31,681 DEBUG {conn-10005} pool-connect
2019-08-04 16:50:31,685 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:50:31,689 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 129, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 16:50:31,689 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:50:31,697 DEBUG {conn-10005, pstmt-20001} executed. 8.348271 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:50:31,697 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:50:31,697 DEBUG {conn-10005} pool-recycle
2019-08-04 16:50:31,788 DEBUG {conn-10005} pool-connect
2019-08-04 16:50:31,790 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:50:31,790 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 16:50:31,790 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:50:31,791 DEBUG {conn-10005, pstmt-20002} executed. 1.151485 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:50:31,791 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 16:50:31,791 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:50:31,792 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 16:50:31,793 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 16:50:31,793 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:50:31,793 DEBUG {conn-10005} pool-recycle
2019-08-04 16:50:31,825 DEBUG {conn-10005} pool-connect
2019-08-04 16:50:31,828 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:50:31,828 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 16:50:31,828 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:50:31,830 DEBUG {conn-10005, pstmt-20003} executed. 1.412112 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:50:31,830 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 16:50:31,830 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 16:50:31,830 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-04 16:50:31,833 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 16:50:31,833 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:50:31,833 DEBUG {conn-10005} pool-recycle
2019-08-04 16:50:31,836 DEBUG {conn-10005} pool-connect
2019-08-04 16:50:31,840 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:50:31,841 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 16:50:31,841 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:50:31,842 DEBUG {conn-10005, pstmt-20004} executed. 1.15457 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:50:31,842 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 16:50:31,842 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:50:31,843 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 16:50:31,843 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:50:31,843 DEBUG {conn-10005} pool-recycle
2019-08-04 16:50:31,847 DEBUG {conn-10005} pool-connect
2019-08-04 16:50:31,847 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:50:31,847 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:50:31,847 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:50:31,848 DEBUG {conn-10005, pstmt-20005} executed. 0.814265 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:50:31,848 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-04 16:50:31,848 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:50:31,849 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:50:31,849 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:50:31,849 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:50:31,849 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:50:31,850 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:50:31,850 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:50:31,850 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:50:31,850 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:50:31,851 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:50:31,851 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:50:31,851 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:50:31,851 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:50:31,852 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-04 16:50:31,852 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:50:31,852 DEBUG {conn-10005} pool-recycle
2019-08-04 16:52:51,261 DEBUG {conn-10005} pool-connect
2019-08-04 16:52:51,262 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 16:52:51,262 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 16:52:51,263 DEBUG {conn-10005, pstmt-20000} executed. 1.404401 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 16:52:51,263 DEBUG {conn-10005, pstmt-20000, rs-50005} open
2019-08-04 16:52:51,264 DEBUG {conn-10005, pstmt-20000, rs-50005} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 16:52:51,265 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 129, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 16:52:51,265 DEBUG {conn-10005, pstmt-20000, rs-50005} closed
2019-08-04 16:52:51,265 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 16:52:51,265 DEBUG {conn-10005} pool-recycle
2019-08-04 16:52:51,266 DEBUG {conn-10005} pool-connect
2019-08-04 16:52:51,267 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 130, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 16:52:51,267 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 16:52:51,276 DEBUG {conn-10005, pstmt-20001} executed. 9.576865 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 16:52:51,276 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 16:52:51,276 DEBUG {conn-10005} pool-recycle
2019-08-04 16:52:51,288 DEBUG {conn-10005} pool-connect
2019-08-04 16:52:51,290 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 16:52:51,290 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 16:52:51,291 DEBUG {conn-10005, pstmt-20002} executed. 0.890345 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 16:52:51,291 DEBUG {conn-10005, pstmt-20002, rs-50006} open
2019-08-04 16:52:51,291 DEBUG {conn-10005, pstmt-20002, rs-50006} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 16:52:51,291 DEBUG {conn-10005, pstmt-20002, rs-50006} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 16:52:51,292 DEBUG {conn-10005, pstmt-20002, rs-50006} closed
2019-08-04 16:52:51,292 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 16:52:51,292 DEBUG {conn-10005} pool-recycle
2019-08-04 16:52:51,292 DEBUG {conn-10005} pool-connect
2019-08-04 16:52:51,292 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 16:52:51,292 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 16:52:51,293 DEBUG {conn-10005, pstmt-20003} executed. 0.832257 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 16:52:51,293 DEBUG {conn-10005, pstmt-20003, rs-50007} open
2019-08-04 16:52:51,293 DEBUG {conn-10005, pstmt-20003, rs-50007} Header: [count(*)]
2019-08-04 16:52:51,293 DEBUG {conn-10005, pstmt-20003, rs-50007} Result: [0]
2019-08-04 16:52:51,293 DEBUG {conn-10005, pstmt-20003, rs-50007} closed
2019-08-04 16:52:51,294 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 16:52:51,294 DEBUG {conn-10005} pool-recycle
2019-08-04 16:52:51,294 DEBUG {conn-10005} pool-connect
2019-08-04 16:52:51,294 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 16:52:51,294 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 16:52:51,295 DEBUG {conn-10005, pstmt-20004} executed. 0.940209 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 16:52:51,295 DEBUG {conn-10005, pstmt-20004, rs-50008} open
2019-08-04 16:52:51,295 DEBUG {conn-10005, pstmt-20004, rs-50008} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 16:52:51,295 DEBUG {conn-10005, pstmt-20004, rs-50008} closed
2019-08-04 16:52:51,297 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 16:52:51,297 DEBUG {conn-10005} pool-recycle
2019-08-04 16:52:51,297 DEBUG {conn-10005} pool-connect
2019-08-04 16:52:51,297 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 16:52:51,297 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 16:52:51,298 DEBUG {conn-10005, pstmt-20005} executed. 0.747438 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 16:52:51,298 DEBUG {conn-10005, pstmt-20005, rs-50009} open
2019-08-04 16:52:51,298 DEBUG {conn-10005, pstmt-20005, rs-50009} Header: [config_name, config_value, create_time, update_time]
2019-08-04 16:52:51,298 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 16:52:51,298 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 16:52:51,299 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 16:52:51,299 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 16:52:51,301 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 16:52:51,302 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 16:52:51,302 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 16:52:51,303 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 16:52:51,303 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 16:52:51,304 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 16:52:51,304 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 16:52:51,305 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 16:52:51,305 DEBUG {conn-10005, pstmt-20005, rs-50009} closed
2019-08-04 16:52:51,305 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 16:52:51,305 DEBUG {conn-10005} pool-recycle
2019-08-04 17:04:21,752 DEBUG {conn-10001,procId-480} connected
2019-08-04 17:04:21,765 DEBUG {conn-10002,procId-481} connected
2019-08-04 17:04:21,773 DEBUG {conn-10003,procId-482} connected
2019-08-04 17:04:21,780 DEBUG {conn-10004,procId-483} connected
2019-08-04 17:04:21,788 DEBUG {conn-10005,procId-484} connected
2019-08-04 17:04:21,797 DEBUG {conn-10005} pool-connect
2019-08-04 17:04:21,799 DEBUG {conn-10005} pool-recycle
2019-08-04 17:04:21,810 DEBUG {conn-10005} pool-connect
2019-08-04 17:04:21,816 DEBUG {conn-10005} pool-recycle
2019-08-04 17:04:22,640 DEBUG {conn-10005} pool-connect
2019-08-04 17:04:22,693 DEBUG {conn-10005} pool-recycle
2019-08-04 17:04:23,366 INFO [Ebon Seeker] modules [], plugins [], sites []
2019-08-04 17:04:23,379 DEBUG [Ebon Seeker] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 17:04:23,388 DEBUG [Ebon Seeker] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 17:04:23,398 DEBUG [Ebon Seeker] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:04:23,400 DEBUG [Ebon Seeker] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 17:04:23,400 DEBUG [Ebon Seeker] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 17:04:23,400 DEBUG [Ebon Seeker] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:04:23,400 DEBUG [Ebon Seeker] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 17:04:23,400 DEBUG [Ebon Seeker] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 17:04:23,400 DEBUG [Ebon Seeker] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:04:23,400 DEBUG [Ebon Seeker] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 17:04:23,400 DEBUG [Ebon Seeker] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:04:23,400 DEBUG [Ebon Seeker] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:04:23,401 DEBUG [Ebon Seeker] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 17:04:23,401 DEBUG [Ebon Seeker] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 17:04:23,401 DEBUG [Ebon Seeker] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 17:04:23,401 DEBUG [Ebon Seeker] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:04:27,004 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 17:04:27,081 DEBUG using gathering [true]
2019-08-04 17:04:27,158 DEBUG [Ebon Seeker] node_sampler_interval[5s]
2019-08-04 17:04:27,203 DEBUG Using select timeout of 500
2019-08-04 17:04:27,203 DEBUG Epoll-bug workaround enabled = false
2019-08-04 17:04:27,351 DEBUG [Ebon Seeker] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:04:27,429 DEBUG [Ebon Seeker] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:04:27,546 DEBUG [Ebon Seeker] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:04:30,108 DEBUG {conn-10005} pool-connect
2019-08-04 17:04:30,108 DEBUG {conn-10005} pool-recycle
2019-08-04 17:04:41,563 DEBUG {conn-10005} pool-connect
2019-08-04 17:04:41,667 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:04:41,672 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 17:04:41,672 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:04:41,679 DEBUG {conn-10005, pstmt-20000} executed. 10.488287 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:04:41,694 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 17:04:41,696 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:04:41,721 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 130, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 17:04:41,731 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 17:04:41,732 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:04:41,737 DEBUG {conn-10005} pool-recycle
2019-08-04 17:04:41,738 DEBUG {conn-10005} pool-connect
2019-08-04 17:04:41,753 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:04:41,767 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 131, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 17:04:41,767 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:04:41,773 DEBUG {conn-10005, pstmt-20001} executed. 6.700722 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:04:41,774 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:04:41,774 DEBUG {conn-10005} pool-recycle
2019-08-04 17:04:41,912 DEBUG {conn-10005} pool-connect
2019-08-04 17:04:41,916 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:04:41,916 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 17:04:41,916 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:04:41,917 DEBUG {conn-10005, pstmt-20002} executed. 1.301076 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:04:41,917 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 17:04:41,917 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:04:41,918 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:04:41,918 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 17:04:41,918 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:04:41,920 DEBUG {conn-10005} pool-recycle
2019-08-04 17:04:41,958 DEBUG {conn-10005} pool-connect
2019-08-04 17:04:41,961 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:04:41,962 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 17:04:41,962 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:04:41,964 DEBUG {conn-10005, pstmt-20003} executed. 1.440385 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:04:41,964 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 17:04:41,964 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 17:04:41,964 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-04 17:04:41,967 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 17:04:41,967 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:04:41,967 DEBUG {conn-10005} pool-recycle
2019-08-04 17:04:41,967 DEBUG {conn-10005} pool-connect
2019-08-04 17:04:41,976 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:04:41,977 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 17:04:41,977 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:04:41,979 DEBUG {conn-10005, pstmt-20004} executed. 1.554506 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:04:41,979 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 17:04:41,979 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:04:41,980 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 17:04:41,980 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:04:41,980 DEBUG {conn-10005} pool-recycle
2019-08-04 17:04:41,987 DEBUG {conn-10005} pool-connect
2019-08-04 17:04:41,988 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:04:41,988 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:04:41,988 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:04:41,990 DEBUG {conn-10005, pstmt-20005} executed. 1.660401 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:04:41,990 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-04 17:04:41,990 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:04:41,991 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:04:41,992 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:04:41,993 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:04:41,994 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:04:41,995 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:04:41,995 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:04:41,996 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:04:41,996 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:04:41,996 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:04:41,996 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:04:41,997 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:04:41,997 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:04:41,997 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-04 17:04:41,997 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:04:41,997 DEBUG {conn-10005} pool-recycle
2019-08-04 17:12:25,483 DEBUG {conn-10001,procId-485} connected
2019-08-04 17:12:25,502 DEBUG {conn-10002,procId-486} connected
2019-08-04 17:12:25,518 DEBUG {conn-10003,procId-487} connected
2019-08-04 17:12:25,531 DEBUG {conn-10004,procId-488} connected
2019-08-04 17:12:25,546 DEBUG {conn-10005,procId-489} connected
2019-08-04 17:12:25,560 DEBUG {conn-10005} pool-connect
2019-08-04 17:12:25,565 DEBUG {conn-10005} pool-recycle
2019-08-04 17:12:25,589 DEBUG {conn-10005} pool-connect
2019-08-04 17:12:25,596 DEBUG {conn-10005} pool-recycle
2019-08-04 17:12:26,449 DEBUG {conn-10005} pool-connect
2019-08-04 17:12:26,589 DEBUG {conn-10005} pool-recycle
2019-08-04 17:12:28,649 INFO [Y'Garon] modules [], plugins [], sites []
2019-08-04 17:12:28,686 DEBUG [Y'Garon] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 17:12:28,719 DEBUG [Y'Garon] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 17:12:28,753 DEBUG [Y'Garon] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:12:28,756 DEBUG [Y'Garon] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 17:12:28,756 DEBUG [Y'Garon] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 17:12:28,757 DEBUG [Y'Garon] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:12:28,757 DEBUG [Y'Garon] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 17:12:28,757 DEBUG [Y'Garon] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 17:12:28,758 DEBUG [Y'Garon] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:12:28,759 DEBUG [Y'Garon] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 17:12:28,760 DEBUG [Y'Garon] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:12:28,760 DEBUG [Y'Garon] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:12:28,760 DEBUG [Y'Garon] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 17:12:28,761 DEBUG [Y'Garon] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 17:12:28,761 DEBUG [Y'Garon] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 17:12:28,761 DEBUG [Y'Garon] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:12:32,799 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 17:12:32,863 DEBUG using gathering [true]
2019-08-04 17:12:32,935 DEBUG [Y'Garon] node_sampler_interval[5s]
2019-08-04 17:12:32,976 DEBUG Using select timeout of 500
2019-08-04 17:12:32,976 DEBUG Epoll-bug workaround enabled = false
2019-08-04 17:12:33,123 DEBUG [Y'Garon] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:12:33,204 DEBUG [Y'Garon] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:12:33,312 DEBUG [Y'Garon] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:12:35,654 DEBUG {conn-10005} pool-connect
2019-08-04 17:12:35,654 DEBUG {conn-10005} pool-recycle
2019-08-04 17:13:17,819 DEBUG {conn-10005} pool-connect
2019-08-04 17:13:17,912 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:13:17,923 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 17:13:17,923 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:13:17,926 DEBUG {conn-10005, pstmt-20000} executed. 6.636464 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:13:17,929 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 17:13:17,929 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:13:17,933 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 131, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 17:13:17,939 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 17:13:17,939 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:13:17,940 DEBUG {conn-10005} pool-recycle
2019-08-04 17:13:17,940 DEBUG {conn-10005} pool-connect
2019-08-04 17:13:17,943 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:13:17,947 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 132, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 17:13:17,947 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:13:17,954 DEBUG {conn-10005, pstmt-20001} executed. 8.232094 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:13:17,954 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:13:17,954 DEBUG {conn-10005} pool-recycle
2019-08-04 17:13:17,997 DEBUG {conn-10005} pool-connect
2019-08-04 17:13:17,998 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:13:17,998 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 17:13:17,998 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:13:17,999 DEBUG {conn-10005, pstmt-20002} executed. 0.758747 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:13:17,999 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 17:13:17,999 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:13:17,999 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:13:18,000 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 17:13:18,000 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:13:18,000 DEBUG {conn-10005} pool-recycle
2019-08-04 17:13:18,015 DEBUG {conn-10005} pool-connect
2019-08-04 17:13:18,016 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:13:18,017 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 17:13:18,017 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:13:18,017 DEBUG {conn-10005, pstmt-20003} executed. 0.700658 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:13:18,017 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 17:13:18,018 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 17:13:18,018 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-04 17:13:18,019 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 17:13:18,019 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:13:18,019 DEBUG {conn-10005} pool-recycle
2019-08-04 17:13:18,020 DEBUG {conn-10005} pool-connect
2019-08-04 17:13:18,023 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:13:18,024 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 17:13:18,024 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:13:18,024 DEBUG {conn-10005, pstmt-20004} executed. 0.747438 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:13:18,024 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 17:13:18,024 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:13:18,025 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 17:13:18,025 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:13:18,025 DEBUG {conn-10005} pool-recycle
2019-08-04 17:13:18,028 DEBUG {conn-10005} pool-connect
2019-08-04 17:13:18,028 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:13:18,028 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:13:18,029 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:13:18,029 DEBUG {conn-10005, pstmt-20005} executed. 0.766458 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:13:18,029 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-04 17:13:18,029 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:13:18,029 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:13:18,029 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:13:18,030 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:13:18,030 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:13:18,030 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:13:18,030 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:13:18,031 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:13:18,031 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:13:18,031 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:13:18,031 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:13:18,031 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:13:18,032 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:13:18,032 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-04 17:13:18,032 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:13:18,032 DEBUG {conn-10005} pool-recycle
2019-08-04 17:14:54,175 DEBUG {conn-10001,procId-490} connected
2019-08-04 17:14:54,186 DEBUG {conn-10002,procId-491} connected
2019-08-04 17:14:54,193 DEBUG {conn-10003,procId-492} connected
2019-08-04 17:14:54,199 DEBUG {conn-10004,procId-493} connected
2019-08-04 17:14:54,205 DEBUG {conn-10005,procId-494} connected
2019-08-04 17:14:54,212 DEBUG {conn-10005} pool-connect
2019-08-04 17:14:54,213 DEBUG {conn-10005} pool-recycle
2019-08-04 17:14:54,225 DEBUG {conn-10005} pool-connect
2019-08-04 17:14:54,227 DEBUG {conn-10005} pool-recycle
2019-08-04 17:14:54,709 DEBUG {conn-10005} pool-connect
2019-08-04 17:14:54,765 DEBUG {conn-10005} pool-recycle
2019-08-04 17:14:56,391 INFO [Forge] modules [], plugins [], sites []
2019-08-04 17:14:56,433 DEBUG [Forge] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 17:14:56,470 DEBUG [Forge] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 17:14:56,505 DEBUG [Forge] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:14:56,506 DEBUG [Forge] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 17:14:56,506 DEBUG [Forge] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 17:14:56,506 DEBUG [Forge] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:14:56,510 DEBUG [Forge] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 17:14:56,510 DEBUG [Forge] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 17:14:56,510 DEBUG [Forge] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:14:56,511 DEBUG [Forge] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 17:14:56,511 DEBUG [Forge] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:14:56,511 DEBUG [Forge] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:14:56,511 DEBUG [Forge] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 17:14:56,511 DEBUG [Forge] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 17:14:56,511 DEBUG [Forge] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 17:14:56,511 DEBUG [Forge] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:15:00,780 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 17:15:00,850 DEBUG using gathering [true]
2019-08-04 17:15:00,930 DEBUG [Forge] node_sampler_interval[5s]
2019-08-04 17:15:00,976 DEBUG Using select timeout of 500
2019-08-04 17:15:00,977 DEBUG Epoll-bug workaround enabled = false
2019-08-04 17:15:01,127 DEBUG [Forge] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:15:01,208 DEBUG [Forge] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:15:01,317 DEBUG [Forge] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:15:02,958 DEBUG {conn-10005} pool-connect
2019-08-04 17:15:02,958 DEBUG {conn-10005} pool-recycle
2019-08-04 17:15:10,138 DEBUG {conn-10005} pool-connect
2019-08-04 17:15:10,553 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:15:10,583 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 17:15:10,583 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:15:10,594 DEBUG {conn-10005, pstmt-20000} executed. 23.157199 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:15:10,610 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 17:15:10,615 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:15:10,640 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 132, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 17:15:10,652 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 17:15:10,653 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:15:10,656 DEBUG {conn-10005} pool-recycle
2019-08-04 17:15:10,657 DEBUG {conn-10005} pool-connect
2019-08-04 17:15:10,671 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:15:10,684 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 133, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 17:15:10,685 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:15:10,696 DEBUG {conn-10005, pstmt-20001} executed. 12.175419 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:15:10,697 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:15:10,697 DEBUG {conn-10005} pool-recycle
2019-08-04 17:15:10,891 DEBUG {conn-10005} pool-connect
2019-08-04 17:15:10,893 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:15:10,894 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 17:15:10,894 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:15:10,895 DEBUG {conn-10005, pstmt-20002} executed. 1.910232 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:15:10,895 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 17:15:10,895 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:15:10,895 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:15:10,895 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 17:15:10,895 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:15:10,899 DEBUG {conn-10005} pool-recycle
2019-08-04 17:15:10,961 DEBUG {conn-10005} pool-connect
2019-08-04 17:15:10,967 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:15:10,969 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 17:15:10,969 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:15:10,971 DEBUG {conn-10005, pstmt-20003} executed. 2.93783 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:15:10,972 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 17:15:10,972 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 17:15:10,973 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-04 17:15:10,979 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 17:15:10,979 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:15:10,980 DEBUG {conn-10005} pool-recycle
2019-08-04 17:15:10,985 DEBUG {conn-10005} pool-connect
2019-08-04 17:15:10,997 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:15:10,999 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 17:15:11,000 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:15:11,002 DEBUG {conn-10005, pstmt-20004} executed. 3.088963 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:15:11,002 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 17:15:11,003 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:15:11,004 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 17:15:11,004 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:15:11,005 DEBUG {conn-10005} pool-recycle
2019-08-04 17:15:11,021 DEBUG {conn-10005} pool-connect
2019-08-04 17:15:11,023 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:15:11,023 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:15:11,024 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:15:11,026 DEBUG {conn-10005, pstmt-20005} executed. 2.974843 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:15:11,027 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-04 17:15:11,027 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:15:11,028 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:15:11,030 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:15:11,031 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:15:11,032 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:15:11,033 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:15:11,034 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:15:11,035 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:15:11,036 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:15:11,038 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:15:11,039 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:15:11,040 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:15:11,041 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:15:11,042 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-04 17:15:11,042 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:15:11,042 DEBUG {conn-10005} pool-recycle
2019-08-04 17:22:15,014 DEBUG {conn-10001,procId-495} connected
2019-08-04 17:22:15,022 DEBUG {conn-10002,procId-496} connected
2019-08-04 17:22:15,028 DEBUG {conn-10003,procId-497} connected
2019-08-04 17:22:15,035 DEBUG {conn-10004,procId-498} connected
2019-08-04 17:22:15,042 DEBUG {conn-10005,procId-499} connected
2019-08-04 17:22:15,049 DEBUG {conn-10005} pool-connect
2019-08-04 17:22:15,051 DEBUG {conn-10005} pool-recycle
2019-08-04 17:22:15,065 DEBUG {conn-10005} pool-connect
2019-08-04 17:22:15,069 DEBUG {conn-10005} pool-recycle
2019-08-04 17:22:15,544 DEBUG {conn-10005} pool-connect
2019-08-04 17:22:15,635 DEBUG {conn-10005} pool-recycle
2019-08-04 17:22:17,176 INFO [Chief Examiner] modules [], plugins [], sites []
2019-08-04 17:22:17,188 DEBUG [Chief Examiner] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 17:22:17,207 DEBUG [Chief Examiner] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 17:22:17,236 DEBUG [Chief Examiner] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:22:17,239 DEBUG [Chief Examiner] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 17:22:17,239 DEBUG [Chief Examiner] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 17:22:17,240 DEBUG [Chief Examiner] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:22:17,241 DEBUG [Chief Examiner] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 17:22:17,241 DEBUG [Chief Examiner] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 17:22:17,241 DEBUG [Chief Examiner] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:22:17,242 DEBUG [Chief Examiner] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 17:22:17,242 DEBUG [Chief Examiner] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:22:17,242 DEBUG [Chief Examiner] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:22:17,243 DEBUG [Chief Examiner] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 17:22:17,243 DEBUG [Chief Examiner] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 17:22:17,243 DEBUG [Chief Examiner] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 17:22:17,243 DEBUG [Chief Examiner] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:22:20,982 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 17:22:21,029 DEBUG using gathering [true]
2019-08-04 17:22:21,107 DEBUG [Chief Examiner] node_sampler_interval[5s]
2019-08-04 17:22:21,150 DEBUG Using select timeout of 500
2019-08-04 17:22:21,150 DEBUG Epoll-bug workaround enabled = false
2019-08-04 17:22:21,303 DEBUG [Chief Examiner] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:22:21,388 DEBUG [Chief Examiner] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:22:21,511 DEBUG [Chief Examiner] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:22:23,206 DEBUG {conn-10005} pool-connect
2019-08-04 17:22:23,206 DEBUG {conn-10005} pool-recycle
2019-08-04 17:22:31,768 DEBUG {conn-10005} pool-connect
2019-08-04 17:22:31,880 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:22:31,889 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 17:22:31,889 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:22:31,892 DEBUG {conn-10005, pstmt-20000} executed. 6.035019 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:22:31,895 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 17:22:31,895 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:22:31,900 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 133, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 17:22:31,905 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 17:22:31,905 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:22:31,905 DEBUG {conn-10005} pool-recycle
2019-08-04 17:22:31,906 DEBUG {conn-10005} pool-connect
2019-08-04 17:22:31,910 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:22:31,913 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 134, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 17:22:31,913 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:22:31,921 DEBUG {conn-10005, pstmt-20001} executed. 8.256255 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:22:31,921 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:22:31,922 DEBUG {conn-10005} pool-recycle
2019-08-04 17:22:31,963 DEBUG {conn-10005} pool-connect
2019-08-04 17:22:31,964 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:22:31,964 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 17:22:31,964 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:22:31,965 DEBUG {conn-10005, pstmt-20002} executed. 0.682153 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:22:31,965 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 17:22:31,965 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:22:31,965 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:22:31,966 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 17:22:31,966 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:22:31,966 DEBUG {conn-10005} pool-recycle
2019-08-04 17:22:31,980 DEBUG {conn-10005} pool-connect
2019-08-04 17:22:31,982 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:22:31,982 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 17:22:31,982 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:22:31,983 DEBUG {conn-10005, pstmt-20003} executed. 0.659019 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:22:31,983 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 17:22:31,983 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 17:22:31,983 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-04 17:22:31,985 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 17:22:31,985 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:22:31,985 DEBUG {conn-10005} pool-recycle
2019-08-04 17:22:31,986 DEBUG {conn-10005} pool-connect
2019-08-04 17:22:31,990 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:22:31,990 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 17:22:31,990 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:22:31,991 DEBUG {conn-10005, pstmt-20004} executed. 0.746409 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:22:31,991 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 17:22:31,991 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:22:31,991 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 17:22:31,991 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:22:31,991 DEBUG {conn-10005} pool-recycle
2019-08-04 17:22:31,994 DEBUG {conn-10005} pool-connect
2019-08-04 17:22:31,995 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:22:31,995 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:22:31,995 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:22:31,996 DEBUG {conn-10005, pstmt-20005} executed. 0.731502 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:22:31,996 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-04 17:22:31,996 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:22:31,996 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:22:31,996 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:22:31,997 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:22:31,997 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:22:31,997 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:22:31,997 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:22:31,997 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:22:31,997 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:22:31,998 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:22:31,998 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:22:31,998 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:22:31,998 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:22:31,999 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-04 17:22:31,999 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:22:31,999 DEBUG {conn-10005} pool-recycle
2019-08-04 17:24:15,012 DEBUG {conn-10001,procId-500} connected
2019-08-04 17:24:15,043 DEBUG {conn-10002,procId-501} connected
2019-08-04 17:24:15,064 DEBUG {conn-10003,procId-502} connected
2019-08-04 17:24:15,084 DEBUG {conn-10004,procId-503} connected
2019-08-04 17:24:15,097 DEBUG {conn-10005,procId-504} connected
2019-08-04 17:24:15,111 DEBUG {conn-10005} pool-connect
2019-08-04 17:24:15,112 DEBUG {conn-10005} pool-recycle
2019-08-04 17:24:15,130 DEBUG {conn-10005} pool-connect
2019-08-04 17:24:15,136 DEBUG {conn-10005} pool-recycle
2019-08-04 17:24:15,962 DEBUG {conn-10005} pool-connect
2019-08-04 17:24:16,094 DEBUG {conn-10005} pool-recycle
2019-08-04 17:24:17,432 INFO [Warhawk] modules [], plugins [], sites []
2019-08-04 17:24:17,445 DEBUG [Warhawk] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 17:24:17,454 DEBUG [Warhawk] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 17:24:17,468 DEBUG [Warhawk] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:24:17,470 DEBUG [Warhawk] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 17:24:17,471 DEBUG [Warhawk] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 17:24:17,471 DEBUG [Warhawk] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:24:17,471 DEBUG [Warhawk] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 17:24:17,472 DEBUG [Warhawk] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 17:24:17,472 DEBUG [Warhawk] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:24:17,472 DEBUG [Warhawk] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 17:24:17,472 DEBUG [Warhawk] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:24:17,473 DEBUG [Warhawk] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:24:17,473 DEBUG [Warhawk] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 17:24:17,473 DEBUG [Warhawk] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 17:24:17,473 DEBUG [Warhawk] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 17:24:17,473 DEBUG [Warhawk] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:24:20,830 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 17:24:20,848 DEBUG using gathering [true]
2019-08-04 17:24:20,891 DEBUG [Warhawk] node_sampler_interval[5s]
2019-08-04 17:24:20,917 DEBUG Using select timeout of 500
2019-08-04 17:24:20,918 DEBUG Epoll-bug workaround enabled = false
2019-08-04 17:24:21,018 DEBUG [Warhawk] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:24:21,080 DEBUG [Warhawk] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:24:21,148 DEBUG [Warhawk] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:24:22,526 DEBUG {conn-10005} pool-connect
2019-08-04 17:24:22,526 DEBUG {conn-10005} pool-recycle
2019-08-04 17:24:29,275 DEBUG {conn-10005} pool-connect
2019-08-04 17:24:29,454 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:24:29,478 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 17:24:29,479 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:24:29,487 DEBUG {conn-10005, pstmt-20000} executed. 18.114823 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:24:29,495 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 17:24:29,502 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:24:29,519 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 134, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 17:24:29,528 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 17:24:29,529 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:24:29,531 DEBUG {conn-10005} pool-recycle
2019-08-04 17:24:29,532 DEBUG {conn-10005} pool-connect
2019-08-04 17:24:29,543 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:24:29,553 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 135, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 17:24:29,553 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:24:29,564 DEBUG {conn-10005, pstmt-20001} executed. 11.890632 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:24:29,566 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:24:29,566 DEBUG {conn-10005} pool-recycle
2019-08-04 17:24:29,696 DEBUG {conn-10005} pool-connect
2019-08-04 17:24:29,698 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:24:29,700 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 17:24:29,700 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:24:29,702 DEBUG {conn-10005, pstmt-20002} executed. 2.388304 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:24:29,702 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 17:24:29,703 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:24:29,704 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:24:29,705 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 17:24:29,705 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:24:29,706 DEBUG {conn-10005} pool-recycle
2019-08-04 17:24:29,758 DEBUG {conn-10005} pool-connect
2019-08-04 17:24:29,762 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:24:29,763 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 17:24:29,763 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:24:29,764 DEBUG {conn-10005, pstmt-20003} executed. 1.529317 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:24:29,764 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 17:24:29,764 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 17:24:29,766 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-04 17:24:29,768 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 17:24:29,768 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:24:29,768 DEBUG {conn-10005} pool-recycle
2019-08-04 17:24:29,771 DEBUG {conn-10005} pool-connect
2019-08-04 17:24:29,777 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:24:29,778 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 17:24:29,778 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:24:29,779 DEBUG {conn-10005, pstmt-20004} executed. 1.428562 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:24:29,779 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 17:24:29,779 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:24:29,780 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 17:24:29,780 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:24:29,780 DEBUG {conn-10005} pool-recycle
2019-08-04 17:24:29,789 DEBUG {conn-10005} pool-connect
2019-08-04 17:24:29,790 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:24:29,790 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:24:29,790 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:24:29,792 DEBUG {conn-10005, pstmt-20005} executed. 1.729799 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:24:29,792 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-04 17:24:29,792 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:24:29,793 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:24:29,793 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:24:29,794 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:24:29,794 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:24:29,794 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:24:29,795 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:24:29,796 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:24:29,796 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:24:29,797 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:24:29,797 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:24:29,798 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:24:29,798 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:24:29,799 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-04 17:24:29,799 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:24:29,799 DEBUG {conn-10005} pool-recycle
2019-08-04 17:25:36,760 DEBUG {conn-10001,procId-505} connected
2019-08-04 17:25:36,769 DEBUG {conn-10002,procId-506} connected
2019-08-04 17:25:36,775 DEBUG {conn-10003,procId-507} connected
2019-08-04 17:25:36,781 DEBUG {conn-10004,procId-508} connected
2019-08-04 17:25:36,785 DEBUG {conn-10005,procId-509} connected
2019-08-04 17:25:36,791 DEBUG {conn-10005} pool-connect
2019-08-04 17:25:36,792 DEBUG {conn-10005} pool-recycle
2019-08-04 17:25:36,800 DEBUG {conn-10005} pool-connect
2019-08-04 17:25:36,800 DEBUG {conn-10005} pool-recycle
2019-08-04 17:25:37,810 DEBUG {conn-10005} pool-connect
2019-08-04 17:25:37,950 DEBUG {conn-10005} pool-recycle
2019-08-04 17:25:39,693 INFO [Fusion] modules [], plugins [], sites []
2019-08-04 17:25:39,735 DEBUG [Fusion] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 17:25:39,765 DEBUG [Fusion] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 17:25:39,802 DEBUG [Fusion] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:25:39,803 DEBUG [Fusion] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 17:25:39,803 DEBUG [Fusion] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 17:25:39,803 DEBUG [Fusion] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:25:39,806 DEBUG [Fusion] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 17:25:39,806 DEBUG [Fusion] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 17:25:39,807 DEBUG [Fusion] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:25:39,807 DEBUG [Fusion] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 17:25:39,807 DEBUG [Fusion] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:25:39,808 DEBUG [Fusion] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:25:39,808 DEBUG [Fusion] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 17:25:39,808 DEBUG [Fusion] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 17:25:39,808 DEBUG [Fusion] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 17:25:39,810 DEBUG [Fusion] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:25:43,367 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 17:25:43,417 DEBUG using gathering [true]
2019-08-04 17:25:43,488 DEBUG [Fusion] node_sampler_interval[5s]
2019-08-04 17:25:43,529 DEBUG Using select timeout of 500
2019-08-04 17:25:43,529 DEBUG Epoll-bug workaround enabled = false
2019-08-04 17:25:43,665 DEBUG [Fusion] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:25:43,742 DEBUG [Fusion] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:25:43,837 DEBUG [Fusion] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:25:45,987 DEBUG {conn-10005} pool-connect
2019-08-04 17:25:45,987 DEBUG {conn-10005} pool-recycle
2019-08-04 17:25:53,717 DEBUG {conn-10005} pool-connect
2019-08-04 17:25:53,994 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:25:54,011 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 17:25:54,011 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:25:54,020 DEBUG {conn-10005, pstmt-20000} executed. 18.054678 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:25:54,034 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 17:25:54,035 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:25:54,058 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 135, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 17:25:54,068 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 17:25:54,069 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:25:54,072 DEBUG {conn-10005} pool-recycle
2019-08-04 17:25:54,073 DEBUG {conn-10005} pool-connect
2019-08-04 17:25:54,086 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:25:54,097 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 136, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 17:25:54,097 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:25:54,109 DEBUG {conn-10005, pstmt-20001} executed. 11.807355 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:25:54,110 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:25:54,110 DEBUG {conn-10005} pool-recycle
2019-08-04 17:25:54,222 DEBUG {conn-10005} pool-connect
2019-08-04 17:25:54,224 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:25:54,225 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 17:25:54,225 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:25:54,226 DEBUG {conn-10005, pstmt-20002} executed. 1.694329 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:25:54,226 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 17:25:54,226 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:25:54,227 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:25:54,228 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 17:25:54,228 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:25:54,228 DEBUG {conn-10005} pool-recycle
2019-08-04 17:25:54,266 DEBUG {conn-10005} pool-connect
2019-08-04 17:25:54,272 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:25:54,273 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 17:25:54,273 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:25:54,274 DEBUG {conn-10005, pstmt-20003} executed. 1.406972 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:25:54,274 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 17:25:54,274 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 17:25:54,275 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-04 17:25:54,278 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 17:25:54,279 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:25:54,279 DEBUG {conn-10005} pool-recycle
2019-08-04 17:25:54,282 DEBUG {conn-10005} pool-connect
2019-08-04 17:25:54,284 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:25:54,289 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 17:25:54,289 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:25:54,291 DEBUG {conn-10005, pstmt-20004} executed. 1.436272 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:25:54,291 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 17:25:54,291 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:25:54,292 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 17:25:54,292 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:25:54,292 DEBUG {conn-10005} pool-recycle
2019-08-04 17:25:54,298 DEBUG {conn-10005} pool-connect
2019-08-04 17:25:54,299 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:25:54,300 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:25:54,300 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:25:54,302 DEBUG {conn-10005, pstmt-20005} executed. 2.130763 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:25:54,302 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-04 17:25:54,302 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:25:54,303 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:25:54,304 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:25:54,304 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:25:54,305 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:25:54,305 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:25:54,306 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:25:54,306 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:25:54,306 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:25:54,306 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:25:54,307 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:25:54,307 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:25:54,307 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:25:54,308 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-04 17:25:54,308 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:25:54,308 DEBUG {conn-10005} pool-recycle
2019-08-04 17:28:46,846 DEBUG {conn-10001,procId-510} connected
2019-08-04 17:28:46,856 DEBUG {conn-10002,procId-511} connected
2019-08-04 17:28:46,864 DEBUG {conn-10003,procId-512} connected
2019-08-04 17:28:46,869 DEBUG {conn-10004,procId-513} connected
2019-08-04 17:28:46,874 DEBUG {conn-10005,procId-514} connected
2019-08-04 17:28:46,879 DEBUG {conn-10005} pool-connect
2019-08-04 17:28:46,881 DEBUG {conn-10005} pool-recycle
2019-08-04 17:28:46,890 DEBUG {conn-10005} pool-connect
2019-08-04 17:28:46,892 DEBUG {conn-10005} pool-recycle
2019-08-04 17:28:47,311 DEBUG {conn-10005} pool-connect
2019-08-04 17:28:47,356 DEBUG {conn-10005} pool-recycle
2019-08-04 17:28:48,110 INFO [Echo] modules [], plugins [], sites []
2019-08-04 17:28:48,121 DEBUG [Echo] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 17:28:48,131 DEBUG [Echo] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 17:28:48,140 DEBUG [Echo] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:28:48,141 DEBUG [Echo] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 17:28:48,142 DEBUG [Echo] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 17:28:48,142 DEBUG [Echo] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:28:48,142 DEBUG [Echo] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 17:28:48,142 DEBUG [Echo] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 17:28:48,142 DEBUG [Echo] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:28:48,142 DEBUG [Echo] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 17:28:48,142 DEBUG [Echo] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:28:48,142 DEBUG [Echo] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:28:48,142 DEBUG [Echo] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 17:28:48,143 DEBUG [Echo] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 17:28:48,143 DEBUG [Echo] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 17:28:48,143 DEBUG [Echo] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:28:51,391 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 17:28:51,411 DEBUG using gathering [true]
2019-08-04 17:28:51,444 DEBUG [Echo] node_sampler_interval[5s]
2019-08-04 17:28:51,459 DEBUG Using select timeout of 500
2019-08-04 17:28:51,463 DEBUG Epoll-bug workaround enabled = false
2019-08-04 17:28:51,559 DEBUG [Echo] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:28:51,636 DEBUG [Echo] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:28:51,700 DEBUG [Echo] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:28:53,484 DEBUG {conn-10005} pool-connect
2019-08-04 17:28:53,485 DEBUG {conn-10005} pool-recycle
2019-08-04 17:29:00,313 DEBUG {conn-10005} pool-connect
2019-08-04 17:29:00,468 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:29:00,477 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 17:29:00,477 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:29:00,480 DEBUG {conn-10005, pstmt-20000} executed. 6.094649 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:29:00,481 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 17:29:00,481 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:29:00,497 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 136, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 17:29:00,504 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 17:29:00,504 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:29:00,507 DEBUG {conn-10005} pool-recycle
2019-08-04 17:29:00,507 DEBUG {conn-10005} pool-connect
2019-08-04 17:29:00,517 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:29:00,526 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 17:29:00,526 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:29:00,537 DEBUG {conn-10005, pstmt-20001} executed. 10.826535 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:29:00,537 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:29:00,538 DEBUG {conn-10005} pool-recycle
2019-08-04 17:29:00,696 DEBUG {conn-10005} pool-connect
2019-08-04 17:29:00,699 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:29:00,701 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 17:29:00,701 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:29:00,704 DEBUG {conn-10005, pstmt-20002} executed. 2.920867 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:29:00,704 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 17:29:00,704 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:29:00,705 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:29:00,706 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 17:29:00,707 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:29:00,707 DEBUG {conn-10005} pool-recycle
2019-08-04 17:29:00,764 DEBUG {conn-10005} pool-connect
2019-08-04 17:29:00,770 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:29:00,771 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 17:29:00,771 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:29:00,774 DEBUG {conn-10005, pstmt-20003} executed. 2.212497 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:29:00,774 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 17:29:00,774 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 17:29:00,775 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-04 17:29:00,777 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 17:29:00,780 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:29:00,780 DEBUG {conn-10005} pool-recycle
2019-08-04 17:29:00,785 DEBUG {conn-10005} pool-connect
2019-08-04 17:29:00,796 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:29:00,797 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 17:29:00,797 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:29:00,799 DEBUG {conn-10005, pstmt-20004} executed. 2.602666 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:29:00,799 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 17:29:00,800 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:29:00,800 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 17:29:00,801 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:29:00,801 DEBUG {conn-10005} pool-recycle
2019-08-04 17:29:00,811 DEBUG {conn-10005} pool-connect
2019-08-04 17:29:00,813 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:29:00,814 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:29:00,814 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:29:00,816 DEBUG {conn-10005, pstmt-20005} executed. 2.599068 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:29:00,817 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-04 17:29:00,817 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:29:00,818 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:29:00,820 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:29:00,821 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:29:00,822 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:29:00,823 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:29:00,824 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:29:00,825 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:29:00,827 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:29:00,828 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:29:00,829 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:29:00,830 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:29:00,830 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:29:00,830 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-04 17:29:00,830 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:29:00,830 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:30,862 DEBUG {conn-10001,procId-515} connected
2019-08-04 17:31:30,876 DEBUG {conn-10002,procId-516} connected
2019-08-04 17:31:30,885 DEBUG {conn-10003,procId-517} connected
2019-08-04 17:31:30,893 DEBUG {conn-10004,procId-518} connected
2019-08-04 17:31:30,902 DEBUG {conn-10005,procId-519} connected
2019-08-04 17:31:30,912 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:30,913 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:30,930 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:30,933 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:31,745 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:31,867 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:33,937 INFO [Order] modules [], plugins [], sites []
2019-08-04 17:31:33,960 DEBUG [Order] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 17:31:33,988 DEBUG [Order] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 17:31:34,010 DEBUG [Order] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:31:34,010 DEBUG [Order] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 17:31:34,015 DEBUG [Order] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 17:31:34,015 DEBUG [Order] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:31:34,015 DEBUG [Order] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 17:31:34,015 DEBUG [Order] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 17:31:34,016 DEBUG [Order] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:31:34,016 DEBUG [Order] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 17:31:34,016 DEBUG [Order] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:31:34,016 DEBUG [Order] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:31:34,016 DEBUG [Order] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 17:31:34,016 DEBUG [Order] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 17:31:34,017 DEBUG [Order] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 17:31:34,017 DEBUG [Order] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:31:38,059 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 17:31:38,085 DEBUG using gathering [true]
2019-08-04 17:31:38,111 DEBUG [Order] node_sampler_interval[5s]
2019-08-04 17:31:38,125 DEBUG Using select timeout of 500
2019-08-04 17:31:38,125 DEBUG Epoll-bug workaround enabled = false
2019-08-04 17:31:38,170 DEBUG [Order] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:31:38,196 DEBUG [Order] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:31:38,230 DEBUG [Order] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:31:38,967 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:38,967 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:48,556 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:48,668 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:31:48,679 DEBUG {conn-10005, pstmt-20000} Parameters : [1, 0, 8]
2019-08-04 17:31:48,679 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 17:31:48,680 DEBUG {conn-10005, pstmt-20000} executed. 4.991999 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:31:48,685 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 17:31:48,686 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:31:48,691 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 132, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:31:48,691 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:31:48,695 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:31:48,695 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:31:48,695 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 17:31:48,696 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:31:48,696 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:48,699 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:48,701 DEBUG {conn-10005, pstmt-20001} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 17:31:48,701 DEBUG {conn-10005, pstmt-20001} Parameters : [24, 22, 24, 20]
2019-08-04 17:31:48,701 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER, INTEGER, INTEGER, INTEGER]
2019-08-04 17:31:48,702 DEBUG {conn-10005, pstmt-20001} executed. 1.141205 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 17:31:48,702 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-04 17:31:48,702 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:31:48,702 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 17:31:48,702 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:31:48,703 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:31:48,703 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-04 17:31:48,703 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:31:48,703 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:48,710 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:48,710 DEBUG {conn-10005, pstmt-20002} created. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 17:31:48,711 DEBUG {conn-10005, pstmt-20002} Parameters : [1]
2019-08-04 17:31:48,711 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:31:48,711 DEBUG {conn-10005, pstmt-20002} executed. 0.806554 millis. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 17:31:48,712 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-04 17:31:48,712 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [count(*)]
2019-08-04 17:31:48,712 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [4]
2019-08-04 17:31:48,713 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-04 17:31:48,713 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:31:48,713 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:48,716 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:48,718 DEBUG {conn-10005, pstmt-20003} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:31:48,718 DEBUG {conn-10005, pstmt-20003} Parameters : [9]
2019-08-04 17:31:48,718 DEBUG {conn-10005, pstmt-20003} Types : [INTEGER]
2019-08-04 17:31:48,719 DEBUG {conn-10005, pstmt-20003} executed. 0.862586 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:31:48,719 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-04 17:31:48,719 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:31:48,719 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 132, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:31:48,720 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:31:48,720 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:31:48,721 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:31:48,721 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-04 17:31:48,721 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:31:48,721 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:48,721 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:48,721 DEBUG {conn-10005, pstmt-20004} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:31:48,721 DEBUG {conn-10005, pstmt-20004} Parameters : [9]
2019-08-04 17:31:48,721 DEBUG {conn-10005, pstmt-20004} Types : [INTEGER]
2019-08-04 17:31:48,726 DEBUG {conn-10005, pstmt-20004} executed. 1.192096 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:31:48,726 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-04 17:31:48,726 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:31:48,726 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:31:48,726 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:31:48,727 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 132, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:31:48,727 DEBUG {conn-10005, pstmt-20004, rs-50004} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:31:48,727 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-04 17:31:48,727 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:31:48,727 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:48,727 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:48,735 DEBUG {conn-10005, pstmt-20005} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:31:48,736 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:31:48,736 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:31:48,737 DEBUG {conn-10005, pstmt-20005} executed. 2.165205 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:31:48,737 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 17:31:48,737 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [tag_id, tag_count, tag_name]
2019-08-04 17:31:48,737 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 17:31:48,737 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 17:31:48,737 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [66, 1, Spring]
2019-08-04 17:31:48,737 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [67, 1, SpringMVC]
2019-08-04 17:31:48,737 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [68, 1, MyBatis]
2019-08-04 17:31:48,737 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [69, 1, easyUI]
2019-08-04 17:31:48,737 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [127, 1, 目录]
2019-08-04 17:31:48,737 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [128, 1, AdminLte3]
2019-08-04 17:31:48,741 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [130, 1, SpringBoot]
2019-08-04 17:31:48,741 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [131, 1, 入门教程]
2019-08-04 17:31:48,741 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [132, 1, 实战教程]
2019-08-04 17:31:48,741 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [133, 1, spring-boot企业级开发]
2019-08-04 17:31:48,742 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 17:31:48,742 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:31:48,742 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:48,747 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:48,748 DEBUG {conn-10005, pstmt-20006} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:31:48,748 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-04 17:31:48,748 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-04 17:31:48,749 DEBUG {conn-10005, pstmt-20006} executed. 1.293365 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:31:48,749 DEBUG {conn-10005, pstmt-20006, rs-50006} open
2019-08-04 17:31:48,750 DEBUG {conn-10005, pstmt-20006, rs-50006} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:31:48,750 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:31:48,750 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:31:48,751 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:31:48,751 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:31:48,751 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:31:48,751 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:31:48,751 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:31:48,751 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:31:48,751 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:31:48,751 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:31:48,751 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:31:48,751 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:31:48,756 DEBUG {conn-10005, pstmt-20006, rs-50006} closed
2019-08-04 17:31:48,756 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 17:31:48,756 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:49,857 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:49,858 DEBUG {conn-10005, pstmt-20007} created. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 17:31:49,863 DEBUG {conn-10005, pstmt-20007} Parameters : [anonymousUser]
2019-08-04 17:31:49,863 DEBUG {conn-10005, pstmt-20007} Types : [VARCHAR]
2019-08-04 17:31:49,864 DEBUG {conn-10005, pstmt-20007, rs-50007} query executed. 1.761671 millis. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 17:31:49,864 DEBUG {conn-10005, pstmt-20007, rs-50007} open
2019-08-04 17:31:49,865 DEBUG {conn-10005, pstmt-20007, rs-50007} Header: [userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime]
2019-08-04 17:31:49,865 DEBUG {conn-10005, pstmt-20007, rs-50007} closed
2019-08-04 17:31:49,866 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-04 17:31:49,866 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:51,032 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:51,032 DEBUG {conn-10005, pstmt-20008} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:31:51,032 DEBUG {conn-10005, pstmt-20008} Parameters : [4]
2019-08-04 17:31:51,032 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT]
2019-08-04 17:31:51,032 DEBUG {conn-10005, pstmt-20008} executed. 2.394473 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:31:51,036 DEBUG {conn-10005, pstmt-20008, rs-50008} open
2019-08-04 17:31:51,036 DEBUG {conn-10005, pstmt-20008, rs-50008} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:31:51,036 DEBUG {conn-10005, pstmt-20008, rs-50008} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 132, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:31:51,037 DEBUG {conn-10005, pstmt-20008, rs-50008} closed
2019-08-04 17:31:51,037 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-04 17:31:51,037 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:51,038 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:51,039 DEBUG {conn-10005, pstmt-20009} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:31:51,044 DEBUG {conn-10005, pstmt-20009} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 133, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:31:51,044 DEBUG {conn-10005, pstmt-20009} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:31:51,053 DEBUG {conn-10005, pstmt-20009} executed. 8.640255 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:31:51,053 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 17:31:51,053 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:51,104 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:51,106 DEBUG {conn-10005, pstmt-20010} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:31:51,106 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-04 17:31:51,106 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 17:31:51,107 DEBUG {conn-10005, pstmt-20010} executed. 0.703229 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:31:51,107 DEBUG {conn-10005, pstmt-20010, rs-50009} open
2019-08-04 17:31:51,107 DEBUG {conn-10005, pstmt-20010, rs-50009} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:31:51,107 DEBUG {conn-10005, pstmt-20010, rs-50009} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:31:51,108 DEBUG {conn-10005, pstmt-20010, rs-50009} closed
2019-08-04 17:31:51,108 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 17:31:51,108 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:51,108 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:51,111 DEBUG {conn-10005, pstmt-20011} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:31:51,111 DEBUG {conn-10005, pstmt-20011} Parameters : [4, 1]
2019-08-04 17:31:51,111 DEBUG {conn-10005, pstmt-20011} Types : [BIGINT, INTEGER]
2019-08-04 17:31:51,112 DEBUG {conn-10005, pstmt-20011} executed. 1.016803 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:31:51,112 DEBUG {conn-10005, pstmt-20011, rs-50010} open
2019-08-04 17:31:51,112 DEBUG {conn-10005, pstmt-20011, rs-50010} Header: [count(*)]
2019-08-04 17:31:51,112 DEBUG {conn-10005, pstmt-20011, rs-50010} Result: [2]
2019-08-04 17:31:51,112 DEBUG {conn-10005, pstmt-20011, rs-50010} closed
2019-08-04 17:31:51,113 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 17:31:51,113 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:51,113 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:51,114 DEBUG {conn-10005, pstmt-20012} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:31:51,115 DEBUG {conn-10005, pstmt-20012} Parameters : [4, 1, 0, 8]
2019-08-04 17:31:51,115 DEBUG {conn-10005, pstmt-20012} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:31:51,117 DEBUG {conn-10005, pstmt-20012} executed. 1.573012 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:31:51,117 DEBUG {conn-10005, pstmt-20012, rs-50011} open
2019-08-04 17:31:51,117 DEBUG {conn-10005, pstmt-20012, rs-50011} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:31:51,117 DEBUG {conn-10005, pstmt-20012, rs-50011} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:31:51,118 DEBUG {conn-10005, pstmt-20012, rs-50011} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:31:51,118 DEBUG {conn-10005, pstmt-20012, rs-50011} closed
2019-08-04 17:31:51,118 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-04 17:31:51,118 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:51,118 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:51,118 DEBUG {conn-10005, pstmt-20011} Parameters : [4, 1]
2019-08-04 17:31:51,118 DEBUG {conn-10005, pstmt-20011} Types : [BIGINT, INTEGER]
2019-08-04 17:31:51,120 DEBUG {conn-10005, pstmt-20011} executed. 0.982362 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:31:51,120 DEBUG {conn-10005, pstmt-20011, rs-50012} open
2019-08-04 17:31:51,120 DEBUG {conn-10005, pstmt-20011, rs-50012} Header: [count(*)]
2019-08-04 17:31:51,120 DEBUG {conn-10005, pstmt-20011, rs-50012} Result: [2]
2019-08-04 17:31:51,120 DEBUG {conn-10005, pstmt-20011, rs-50012} closed
2019-08-04 17:31:51,120 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 17:31:51,120 DEBUG {conn-10005} pool-recycle
2019-08-04 17:31:51,121 DEBUG {conn-10005} pool-connect
2019-08-04 17:31:51,121 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-04 17:31:51,121 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-04 17:31:51,121 DEBUG {conn-10005, pstmt-20006} executed. 0.712481 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:31:51,121 DEBUG {conn-10005, pstmt-20006, rs-50013} open
2019-08-04 17:31:51,121 DEBUG {conn-10005, pstmt-20006, rs-50013} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:31:51,121 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:31:51,122 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:31:51,122 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:31:51,123 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:31:51,124 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:31:51,124 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:31:51,124 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:31:51,125 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:31:51,125 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:31:51,125 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:31:51,125 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:31:51,125 DEBUG {conn-10005, pstmt-20006, rs-50013} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:31:51,126 DEBUG {conn-10005, pstmt-20006, rs-50013} closed
2019-08-04 17:31:51,126 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 17:31:51,126 DEBUG {conn-10005} pool-recycle
2019-08-04 17:33:48,414 DEBUG {conn-10001,procId-520} connected
2019-08-04 17:33:48,422 DEBUG {conn-10002,procId-521} connected
2019-08-04 17:33:48,429 DEBUG {conn-10003,procId-522} connected
2019-08-04 17:33:48,435 DEBUG {conn-10004,procId-523} connected
2019-08-04 17:33:48,441 DEBUG {conn-10005,procId-524} connected
2019-08-04 17:33:48,449 DEBUG {conn-10005} pool-connect
2019-08-04 17:33:48,451 DEBUG {conn-10005} pool-recycle
2019-08-04 17:33:48,459 DEBUG {conn-10005} pool-connect
2019-08-04 17:33:48,462 DEBUG {conn-10005} pool-recycle
2019-08-04 17:33:49,243 DEBUG {conn-10005} pool-connect
2019-08-04 17:33:49,383 DEBUG {conn-10005} pool-recycle
2019-08-04 17:33:51,001 INFO [Hellrazor] modules [], plugins [], sites []
2019-08-04 17:33:51,039 DEBUG [Hellrazor] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 17:33:51,077 DEBUG [Hellrazor] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 17:33:51,113 DEBUG [Hellrazor] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:33:51,114 DEBUG [Hellrazor] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 17:33:51,114 DEBUG [Hellrazor] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 17:33:51,114 DEBUG [Hellrazor] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:33:51,117 DEBUG [Hellrazor] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 17:33:51,117 DEBUG [Hellrazor] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 17:33:51,118 DEBUG [Hellrazor] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:33:51,118 DEBUG [Hellrazor] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 17:33:51,118 DEBUG [Hellrazor] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:33:51,120 DEBUG [Hellrazor] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:33:51,120 DEBUG [Hellrazor] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 17:33:51,120 DEBUG [Hellrazor] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 17:33:51,120 DEBUG [Hellrazor] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 17:33:51,120 DEBUG [Hellrazor] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:33:55,112 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 17:33:55,143 DEBUG using gathering [true]
2019-08-04 17:33:55,208 DEBUG [Hellrazor] node_sampler_interval[5s]
2019-08-04 17:33:55,245 DEBUG Using select timeout of 500
2019-08-04 17:33:55,247 DEBUG Epoll-bug workaround enabled = false
2019-08-04 17:33:55,364 DEBUG [Hellrazor] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:33:55,438 DEBUG [Hellrazor] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:33:55,551 DEBUG [Hellrazor] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:33:56,989 DEBUG {conn-10005} pool-connect
2019-08-04 17:33:56,989 DEBUG {conn-10005} pool-recycle
2019-08-04 17:34:04,188 DEBUG {conn-10005} pool-connect
2019-08-04 17:34:04,290 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:34:04,311 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:34:04,311 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:34:04,322 DEBUG {conn-10005, pstmt-20000} executed. 17.100076 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:34:04,330 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 17:34:04,336 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:34:04,351 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 133, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:34:04,357 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 17:34:04,358 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:34:04,360 DEBUG {conn-10005} pool-recycle
2019-08-04 17:34:04,361 DEBUG {conn-10005} pool-connect
2019-08-04 17:34:04,371 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:34:04,382 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 134, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:34:04,382 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:34:04,387 DEBUG {conn-10005, pstmt-20001} executed. 5.864352 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:34:04,387 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:34:04,388 DEBUG {conn-10005} pool-recycle
2019-08-04 17:34:04,546 DEBUG {conn-10005} pool-connect
2019-08-04 17:34:04,549 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:34:04,551 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:34:04,551 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:34:04,553 DEBUG {conn-10005, pstmt-20002} executed. 2.353863 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:34:04,553 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 17:34:04,554 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:34:04,554 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:34:04,556 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 17:34:04,556 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:34:04,556 DEBUG {conn-10005} pool-recycle
2019-08-04 17:34:04,616 DEBUG {conn-10005} pool-connect
2019-08-04 17:34:04,622 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:34:04,623 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:34:04,623 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:34:04,626 DEBUG {conn-10005, pstmt-20003} executed. 2.893622 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:34:04,626 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 17:34:04,627 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 17:34:04,627 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 17:34:04,633 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 17:34:04,634 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:34:04,634 DEBUG {conn-10005} pool-recycle
2019-08-04 17:34:04,639 DEBUG {conn-10005} pool-connect
2019-08-04 17:34:04,652 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:34:04,654 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:34:04,655 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:34:04,657 DEBUG {conn-10005, pstmt-20004} executed. 2.456674 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:34:04,657 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 17:34:04,658 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:34:04,659 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:34:04,661 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:34:04,663 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 17:34:04,664 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:34:04,664 DEBUG {conn-10005} pool-recycle
2019-08-04 17:34:04,665 DEBUG {conn-10005} pool-connect
2019-08-04 17:34:04,667 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:34:04,667 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:34:04,670 DEBUG {conn-10005, pstmt-20003} executed. 2.101461 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:34:04,670 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 17:34:04,670 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 17:34:04,671 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 17:34:04,672 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 17:34:04,672 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:34:04,673 DEBUG {conn-10005} pool-recycle
2019-08-04 17:34:04,687 DEBUG {conn-10005} pool-connect
2019-08-04 17:34:04,689 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:34:04,689 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:34:04,690 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:34:04,692 DEBUG {conn-10005, pstmt-20005} executed. 2.839132 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:34:04,693 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 17:34:04,693 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:34:04,695 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:34:04,696 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:34:04,699 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:34:04,701 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:34:04,703 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:34:04,705 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:34:04,707 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:34:04,708 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:34:04,709 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:34:04,711 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:34:04,713 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:34:04,714 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:34:04,715 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 17:34:04,715 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:34:04,716 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:04,203 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:04,203 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:35:04,203 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:35:04,203 DEBUG {conn-10005, pstmt-20000} executed. 0.994184 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:35:04,203 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-04 17:35:04,203 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:35:04,203 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 134, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:35:04,203 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-04 17:35:04,203 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:35:04,208 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:04,209 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:04,209 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 135, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:35:04,209 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:35:04,216 DEBUG {conn-10005, pstmt-20001} executed. 8.02236 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:35:04,217 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:35:04,217 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:04,222 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:04,222 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:35:04,222 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:35:04,223 DEBUG {conn-10005, pstmt-20002} executed. 0.621494 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:35:04,223 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-04 17:35:04,223 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:35:04,223 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:35:04,224 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-04 17:35:04,224 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:35:04,224 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:04,224 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:04,225 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:35:04,225 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:35:04,225 DEBUG {conn-10005, pstmt-20003} executed. 0.564433 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:35:04,225 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-04 17:35:04,225 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-04 17:35:04,225 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [2]
2019-08-04 17:35:04,225 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-04 17:35:04,225 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:35:04,225 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:04,225 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:04,225 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:35:04,225 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:35:04,227 DEBUG {conn-10005, pstmt-20004} executed. 0.625606 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:35:04,227 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-04 17:35:04,227 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:35:04,227 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:35:04,227 DEBUG {conn-10005, pstmt-20004, rs-50009} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:35:04,227 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-04 17:35:04,227 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:35:04,227 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:04,227 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:04,227 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:35:04,227 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:35:04,229 DEBUG {conn-10005, pstmt-20003} executed. 0.452883 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:35:04,229 DEBUG {conn-10005, pstmt-20003, rs-50010} open
2019-08-04 17:35:04,229 DEBUG {conn-10005, pstmt-20003, rs-50010} Header: [count(*)]
2019-08-04 17:35:04,229 DEBUG {conn-10005, pstmt-20003, rs-50010} Result: [2]
2019-08-04 17:35:04,229 DEBUG {conn-10005, pstmt-20003, rs-50010} closed
2019-08-04 17:35:04,229 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:35:04,229 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:04,229 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:04,229 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:35:04,229 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:35:04,230 DEBUG {conn-10005, pstmt-20005} executed. 0.553124 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:35:04,230 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-04 17:35:04,230 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:35:04,230 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:04,230 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:04,231 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:04,231 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:04,232 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:04,232 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:04,232 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:04,232 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:04,232 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:04,234 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:35:04,234 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:35:04,234 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:35:04,234 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-04 17:35:04,235 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:35:04,235 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:22,100 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:22,101 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:35:22,101 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:35:22,102 DEBUG {conn-10005, pstmt-20000} executed. 0.82763 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:35:22,102 DEBUG {conn-10005, pstmt-20000, rs-50012} open
2019-08-04 17:35:22,102 DEBUG {conn-10005, pstmt-20000, rs-50012} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:35:22,103 DEBUG {conn-10005, pstmt-20000, rs-50012} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 135, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:35:22,104 DEBUG {conn-10005, pstmt-20000, rs-50012} closed
2019-08-04 17:35:22,104 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:35:22,104 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:22,104 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:22,104 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 136, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:35:22,104 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:35:22,112 DEBUG {conn-10005, pstmt-20001} executed. 8.077878 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:35:22,112 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:35:22,112 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:22,117 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:22,117 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:35:22,117 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:35:22,118 DEBUG {conn-10005, pstmt-20002} executed. 0.709911 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:35:22,118 DEBUG {conn-10005, pstmt-20002, rs-50013} open
2019-08-04 17:35:22,118 DEBUG {conn-10005, pstmt-20002, rs-50013} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:35:22,118 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:35:22,119 DEBUG {conn-10005, pstmt-20002, rs-50013} closed
2019-08-04 17:35:22,119 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:35:22,119 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:22,119 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:22,119 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:35:22,119 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:35:22,120 DEBUG {conn-10005, pstmt-20003} executed. 0.574715 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:35:22,120 DEBUG {conn-10005, pstmt-20003, rs-50014} open
2019-08-04 17:35:22,120 DEBUG {conn-10005, pstmt-20003, rs-50014} Header: [count(*)]
2019-08-04 17:35:22,120 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [2]
2019-08-04 17:35:22,120 DEBUG {conn-10005, pstmt-20003, rs-50014} closed
2019-08-04 17:35:22,120 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:35:22,120 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:22,120 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:22,120 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:35:22,120 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:35:22,122 DEBUG {conn-10005, pstmt-20004} executed. 0.667245 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:35:22,122 DEBUG {conn-10005, pstmt-20004, rs-50015} open
2019-08-04 17:35:22,122 DEBUG {conn-10005, pstmt-20004, rs-50015} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:35:22,122 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:35:22,123 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:35:22,123 DEBUG {conn-10005, pstmt-20004, rs-50015} closed
2019-08-04 17:35:22,123 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:35:22,123 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:22,123 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:22,123 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:35:22,123 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:35:22,124 DEBUG {conn-10005, pstmt-20003} executed. 0.699631 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:35:22,124 DEBUG {conn-10005, pstmt-20003, rs-50016} open
2019-08-04 17:35:22,124 DEBUG {conn-10005, pstmt-20003, rs-50016} Header: [count(*)]
2019-08-04 17:35:22,124 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [2]
2019-08-04 17:35:22,125 DEBUG {conn-10005, pstmt-20003, rs-50016} closed
2019-08-04 17:35:22,125 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:35:22,125 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:22,125 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:22,126 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:35:22,126 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:35:22,126 DEBUG {conn-10005, pstmt-20005} executed. 0.867213 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:35:22,127 DEBUG {conn-10005, pstmt-20005, rs-50017} open
2019-08-04 17:35:22,127 DEBUG {conn-10005, pstmt-20005, rs-50017} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:35:22,127 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:22,128 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:22,128 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:22,128 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:22,129 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:22,129 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:22,129 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:22,130 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:22,130 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:22,130 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:35:22,131 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:35:22,131 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:35:22,131 DEBUG {conn-10005, pstmt-20005, rs-50017} closed
2019-08-04 17:35:22,131 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:35:22,131 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:27,327 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:27,327 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:35:27,327 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:35:27,328 DEBUG {conn-10005, pstmt-20000} executed. 0.845622 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:35:27,328 DEBUG {conn-10005, pstmt-20000, rs-50018} open
2019-08-04 17:35:27,328 DEBUG {conn-10005, pstmt-20000, rs-50018} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:35:27,329 DEBUG {conn-10005, pstmt-20000, rs-50018} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 136, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:35:27,329 DEBUG {conn-10005, pstmt-20000, rs-50018} closed
2019-08-04 17:35:27,329 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:35:27,329 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:27,329 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:27,330 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 137, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:35:27,330 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:35:27,339 DEBUG {conn-10005, pstmt-20001} executed. 8.756431 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:35:27,339 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:35:27,339 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:27,340 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:27,340 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:35:27,340 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:35:27,340 DEBUG {conn-10005, pstmt-20002} executed. 0.577285 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:35:27,340 DEBUG {conn-10005, pstmt-20002, rs-50019} open
2019-08-04 17:35:27,340 DEBUG {conn-10005, pstmt-20002, rs-50019} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:35:27,340 DEBUG {conn-10005, pstmt-20002, rs-50019} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:35:27,340 DEBUG {conn-10005, pstmt-20002, rs-50019} closed
2019-08-04 17:35:27,340 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:35:27,340 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:27,340 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:27,345 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:35:27,345 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:35:27,345 DEBUG {conn-10005, pstmt-20003} executed. 0.537703 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:35:27,345 DEBUG {conn-10005, pstmt-20003, rs-50020} open
2019-08-04 17:35:27,345 DEBUG {conn-10005, pstmt-20003, rs-50020} Header: [count(*)]
2019-08-04 17:35:27,345 DEBUG {conn-10005, pstmt-20003, rs-50020} Result: [2]
2019-08-04 17:35:27,346 DEBUG {conn-10005, pstmt-20003, rs-50020} closed
2019-08-04 17:35:27,346 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:35:27,346 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:27,346 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:27,346 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:35:27,346 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:35:27,350 DEBUG {conn-10005, pstmt-20004} executed. 0.489381 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:35:27,350 DEBUG {conn-10005, pstmt-20004, rs-50021} open
2019-08-04 17:35:27,350 DEBUG {conn-10005, pstmt-20004, rs-50021} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:35:27,351 DEBUG {conn-10005, pstmt-20004, rs-50021} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:35:27,351 DEBUG {conn-10005, pstmt-20004, rs-50021} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:35:27,352 DEBUG {conn-10005, pstmt-20004, rs-50021} closed
2019-08-04 17:35:27,352 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:35:27,352 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:27,352 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:27,352 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:35:27,352 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:35:27,353 DEBUG {conn-10005, pstmt-20003} executed. 0.579855 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:35:27,353 DEBUG {conn-10005, pstmt-20003, rs-50022} open
2019-08-04 17:35:27,353 DEBUG {conn-10005, pstmt-20003, rs-50022} Header: [count(*)]
2019-08-04 17:35:27,353 DEBUG {conn-10005, pstmt-20003, rs-50022} Result: [2]
2019-08-04 17:35:27,354 DEBUG {conn-10005, pstmt-20003, rs-50022} closed
2019-08-04 17:35:27,354 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:35:27,354 DEBUG {conn-10005} pool-recycle
2019-08-04 17:35:27,354 DEBUG {conn-10005} pool-connect
2019-08-04 17:35:27,354 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:35:27,354 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005} executed. 0.44106 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} open
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005, rs-50023} closed
2019-08-04 17:35:27,355 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:35:27,355 DEBUG {conn-10005} pool-recycle
2019-08-04 17:36:10,215 DEBUG {conn-10005} pool-connect
2019-08-04 17:36:10,216 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:36:10,216 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:36:10,217 DEBUG {conn-10005, pstmt-20000} executed. 0.738185 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:36:10,217 DEBUG {conn-10005, pstmt-20000, rs-50024} open
2019-08-04 17:36:10,217 DEBUG {conn-10005, pstmt-20000, rs-50024} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:36:10,217 DEBUG {conn-10005, pstmt-20000, rs-50024} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 137, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:36:10,217 DEBUG {conn-10005, pstmt-20000, rs-50024} closed
2019-08-04 17:36:10,217 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:36:10,217 DEBUG {conn-10005} pool-recycle
2019-08-04 17:36:10,217 DEBUG {conn-10005} pool-connect
2019-08-04 17:36:10,217 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 138, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:36:10,217 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:36:10,221 DEBUG {conn-10005, pstmt-20001} executed. 1.90612 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:36:10,221 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:36:10,221 DEBUG {conn-10005} pool-recycle
2019-08-04 17:36:10,224 DEBUG {conn-10005} pool-connect
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20002} executed. 0.659019 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20002, rs-50025} open
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20002, rs-50025} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20002, rs-50025} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20002, rs-50025} closed
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:36:10,224 DEBUG {conn-10005} pool-recycle
2019-08-04 17:36:10,224 DEBUG {conn-10005} pool-connect
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20003} executed. 0.488867 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:36:10,224 DEBUG {conn-10005, pstmt-20003, rs-50026} open
2019-08-04 17:36:10,228 DEBUG {conn-10005, pstmt-20003, rs-50026} Header: [count(*)]
2019-08-04 17:36:10,228 DEBUG {conn-10005, pstmt-20003, rs-50026} Result: [2]
2019-08-04 17:36:10,228 DEBUG {conn-10005, pstmt-20003, rs-50026} closed
2019-08-04 17:36:10,228 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:36:10,228 DEBUG {conn-10005} pool-recycle
2019-08-04 17:36:10,228 DEBUG {conn-10005} pool-connect
2019-08-04 17:36:10,228 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:36:10,228 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:36:10,229 DEBUG {conn-10005, pstmt-20004} executed. 0.64257 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:36:10,229 DEBUG {conn-10005, pstmt-20004, rs-50027} open
2019-08-04 17:36:10,229 DEBUG {conn-10005, pstmt-20004, rs-50027} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:36:10,229 DEBUG {conn-10005, pstmt-20004, rs-50027} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:36:10,230 DEBUG {conn-10005, pstmt-20004, rs-50027} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:36:10,230 DEBUG {conn-10005, pstmt-20004, rs-50027} closed
2019-08-04 17:36:10,230 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:36:10,230 DEBUG {conn-10005} pool-recycle
2019-08-04 17:36:10,230 DEBUG {conn-10005} pool-connect
2019-08-04 17:36:10,230 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:36:10,230 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:36:10,231 DEBUG {conn-10005, pstmt-20003} executed. 0.522795 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:36:10,231 DEBUG {conn-10005, pstmt-20003, rs-50028} open
2019-08-04 17:36:10,231 DEBUG {conn-10005, pstmt-20003, rs-50028} Header: [count(*)]
2019-08-04 17:36:10,231 DEBUG {conn-10005, pstmt-20003, rs-50028} Result: [2]
2019-08-04 17:36:10,231 DEBUG {conn-10005, pstmt-20003, rs-50028} closed
2019-08-04 17:36:10,231 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:36:10,231 DEBUG {conn-10005} pool-recycle
2019-08-04 17:36:10,232 DEBUG {conn-10005} pool-connect
2019-08-04 17:36:10,232 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:36:10,232 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:36:10,232 DEBUG {conn-10005, pstmt-20005} executed. 0.478586 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:36:10,232 DEBUG {conn-10005, pstmt-20005, rs-50029} open
2019-08-04 17:36:10,232 DEBUG {conn-10005, pstmt-20005, rs-50029} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:36:10,232 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:36:10,232 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:36:10,232 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:36:10,233 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:36:10,233 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:36:10,233 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:36:10,233 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:36:10,233 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:36:10,233 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:36:10,233 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:36:10,234 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:36:10,234 DEBUG {conn-10005, pstmt-20005, rs-50029} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:36:10,234 DEBUG {conn-10005, pstmt-20005, rs-50029} closed
2019-08-04 17:36:10,234 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:36:10,234 DEBUG {conn-10005} pool-recycle
2019-08-04 17:37:39,502 DEBUG {conn-10001,procId-525} connected
2019-08-04 17:37:39,519 DEBUG {conn-10002,procId-526} connected
2019-08-04 17:37:39,531 DEBUG {conn-10003,procId-527} connected
2019-08-04 17:37:39,544 DEBUG {conn-10004,procId-528} connected
2019-08-04 17:37:39,556 DEBUG {conn-10005,procId-529} connected
2019-08-04 17:37:39,571 DEBUG {conn-10005} pool-connect
2019-08-04 17:37:39,575 DEBUG {conn-10005} pool-recycle
2019-08-04 17:37:39,594 DEBUG {conn-10005} pool-connect
2019-08-04 17:37:39,600 DEBUG {conn-10005} pool-recycle
2019-08-04 17:37:40,361 DEBUG {conn-10005} pool-connect
2019-08-04 17:37:40,503 DEBUG {conn-10005} pool-recycle
2019-08-04 17:37:41,902 INFO [Madame Web] modules [], plugins [], sites []
2019-08-04 17:37:41,931 DEBUG [Madame Web] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 17:37:41,948 DEBUG [Madame Web] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 17:37:41,960 DEBUG [Madame Web] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:37:41,961 DEBUG [Madame Web] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 17:37:41,961 DEBUG [Madame Web] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 17:37:41,961 DEBUG [Madame Web] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:37:41,961 DEBUG [Madame Web] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 17:37:41,961 DEBUG [Madame Web] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 17:37:41,961 DEBUG [Madame Web] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:37:41,961 DEBUG [Madame Web] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 17:37:41,961 DEBUG [Madame Web] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:37:41,961 DEBUG [Madame Web] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:37:41,962 DEBUG [Madame Web] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 17:37:41,962 DEBUG [Madame Web] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 17:37:41,962 DEBUG [Madame Web] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 17:37:41,962 DEBUG [Madame Web] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:37:45,843 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 17:37:45,860 DEBUG using gathering [true]
2019-08-04 17:37:45,880 DEBUG [Madame Web] node_sampler_interval[5s]
2019-08-04 17:37:45,892 DEBUG Using select timeout of 500
2019-08-04 17:37:45,892 DEBUG Epoll-bug workaround enabled = false
2019-08-04 17:37:45,939 DEBUG [Madame Web] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:37:46,002 DEBUG [Madame Web] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:37:46,100 DEBUG [Madame Web] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:37:47,762 DEBUG {conn-10005} pool-connect
2019-08-04 17:37:47,762 DEBUG {conn-10005} pool-recycle
2019-08-04 17:37:56,815 DEBUG {conn-10005} pool-connect
2019-08-04 17:37:56,962 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:37:56,986 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:37:56,986 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:37:56,993 DEBUG {conn-10005, pstmt-20000} executed. 16.46059 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:37:57,003 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 17:37:57,007 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:37:57,022 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 138, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:37:57,029 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 17:37:57,029 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:37:57,032 DEBUG {conn-10005} pool-recycle
2019-08-04 17:37:57,033 DEBUG {conn-10005} pool-connect
2019-08-04 17:37:57,041 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:37:57,050 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 139, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:37:57,051 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:37:57,061 DEBUG {conn-10005, pstmt-20001} executed. 10.913925 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:37:57,061 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:37:57,062 DEBUG {conn-10005} pool-recycle
2019-08-04 17:37:57,168 DEBUG {conn-10005} pool-connect
2019-08-04 17:37:57,169 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:37:57,170 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:37:57,170 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:37:57,171 DEBUG {conn-10005, pstmt-20002} executed. 1.198779 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:37:57,171 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 17:37:57,171 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:37:57,172 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:37:57,173 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 17:37:57,173 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:37:57,173 DEBUG {conn-10005} pool-recycle
2019-08-04 17:37:57,203 DEBUG {conn-10005} pool-connect
2019-08-04 17:37:57,205 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:37:57,206 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:37:57,206 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:37:57,207 DEBUG {conn-10005, pstmt-20003} executed. 1.212659 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:37:57,207 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 17:37:57,207 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 17:37:57,207 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 17:37:57,210 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 17:37:57,210 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:37:57,210 DEBUG {conn-10005} pool-recycle
2019-08-04 17:37:57,210 DEBUG {conn-10005} pool-connect
2019-08-04 17:37:57,216 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:37:57,217 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:37:57,217 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:37:57,219 DEBUG {conn-10005, pstmt-20004} executed. 1.373043 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:37:57,219 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 17:37:57,219 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:37:57,220 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:37:57,221 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:37:57,221 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 17:37:57,222 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:37:57,222 DEBUG {conn-10005} pool-recycle
2019-08-04 17:37:57,222 DEBUG {conn-10005} pool-connect
2019-08-04 17:37:57,222 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:37:57,223 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:37:57,223 DEBUG {conn-10005, pstmt-20003} executed. 0.86053 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:37:57,223 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 17:37:57,224 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 17:37:57,224 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 17:37:57,224 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 17:37:57,224 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:37:57,224 DEBUG {conn-10005} pool-recycle
2019-08-04 17:37:57,229 DEBUG {conn-10005} pool-connect
2019-08-04 17:37:57,230 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:37:57,230 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:37:57,230 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:37:57,231 DEBUG {conn-10005, pstmt-20005} executed. 1.230137 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:37:57,231 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 17:37:57,231 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:37:57,232 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:37:57,232 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:37:57,233 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:37:57,233 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:37:57,234 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:37:57,234 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:37:57,235 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:37:57,235 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:37:57,236 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:37:57,236 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:37:57,237 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:37:57,237 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:37:57,237 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 17:37:57,238 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:37:57,238 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:30,367 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:30,369 DEBUG {conn-10005, pstmt-20006} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:41:30,370 DEBUG {conn-10005, pstmt-20006} Parameters : [1, 0, 8]
2019-08-04 17:41:30,371 DEBUG {conn-10005, pstmt-20006} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 17:41:30,372 DEBUG {conn-10005, pstmt-20006} executed. 1.333976 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:41:30,372 DEBUG {conn-10005, pstmt-20006, rs-50006} open
2019-08-04 17:41:30,372 DEBUG {conn-10005, pstmt-20006, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:41:30,373 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 139, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:41:30,375 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:41:30,376 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:41:30,377 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:41:30,378 DEBUG {conn-10005, pstmt-20006, rs-50006} closed
2019-08-04 17:41:30,378 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 17:41:30,379 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:30,383 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:30,385 DEBUG {conn-10005, pstmt-20007} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 17:41:30,385 DEBUG {conn-10005, pstmt-20007} Parameters : [24, 22, 24, 20]
2019-08-04 17:41:30,385 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER, INTEGER]
2019-08-04 17:41:30,386 DEBUG {conn-10005, pstmt-20007} executed. 0.974136 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 17:41:30,386 DEBUG {conn-10005, pstmt-20007, rs-50007} open
2019-08-04 17:41:30,387 DEBUG {conn-10005, pstmt-20007, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:41:30,387 DEBUG {conn-10005, pstmt-20007, rs-50007} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 17:41:30,387 DEBUG {conn-10005, pstmt-20007, rs-50007} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:41:30,388 DEBUG {conn-10005, pstmt-20007, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:41:30,388 DEBUG {conn-10005, pstmt-20007, rs-50007} closed
2019-08-04 17:41:30,388 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-04 17:41:30,388 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:30,390 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:30,395 DEBUG {conn-10005, pstmt-20008} created. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 17:41:30,396 DEBUG {conn-10005, pstmt-20008} Parameters : [1]
2019-08-04 17:41:30,396 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER]
2019-08-04 17:41:30,396 DEBUG {conn-10005, pstmt-20008} executed. 0.846651 millis. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 17:41:30,397 DEBUG {conn-10005, pstmt-20008, rs-50008} open
2019-08-04 17:41:30,397 DEBUG {conn-10005, pstmt-20008, rs-50008} Header: [count(*)]
2019-08-04 17:41:30,397 DEBUG {conn-10005, pstmt-20008, rs-50008} Result: [4]
2019-08-04 17:41:30,397 DEBUG {conn-10005, pstmt-20008, rs-50008} closed
2019-08-04 17:41:30,397 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-04 17:41:30,397 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:30,400 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:30,401 DEBUG {conn-10005, pstmt-20009} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:41:30,401 DEBUG {conn-10005, pstmt-20009} Parameters : [9]
2019-08-04 17:41:30,401 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 17:41:30,402 DEBUG {conn-10005, pstmt-20009} executed. 1.04302 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:41:30,402 DEBUG {conn-10005, pstmt-20009, rs-50009} open
2019-08-04 17:41:30,402 DEBUG {conn-10005, pstmt-20009, rs-50009} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:41:30,402 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 139, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:41:30,403 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:41:30,404 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:41:30,405 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:41:30,405 DEBUG {conn-10005, pstmt-20009, rs-50009} closed
2019-08-04 17:41:30,405 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 17:41:30,405 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:30,406 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:30,407 DEBUG {conn-10005, pstmt-20010} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:41:30,408 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 17:41:30,408 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 17:41:30,409 DEBUG {conn-10005, pstmt-20010} executed. 1.141718 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:41:30,409 DEBUG {conn-10005, pstmt-20010, rs-50010} open
2019-08-04 17:41:30,409 DEBUG {conn-10005, pstmt-20010, rs-50010} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:41:30,409 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:41:30,410 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 139, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:41:30,410 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:41:30,411 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:41:30,411 DEBUG {conn-10005, pstmt-20010, rs-50010} closed
2019-08-04 17:41:30,411 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 17:41:30,412 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:30,413 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:30,418 DEBUG {conn-10005, pstmt-20011} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:41:30,418 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-04 17:41:30,419 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-04 17:41:30,421 DEBUG {conn-10005, pstmt-20011} executed. 1.83518 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:41:30,421 DEBUG {conn-10005, pstmt-20011, rs-50011} open
2019-08-04 17:41:30,421 DEBUG {conn-10005, pstmt-20011, rs-50011} Header: [tag_id, tag_count, tag_name]
2019-08-04 17:41:30,421 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 17:41:30,422 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 17:41:30,422 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [66, 1, Spring]
2019-08-04 17:41:30,422 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [67, 1, SpringMVC]
2019-08-04 17:41:30,422 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [68, 1, MyBatis]
2019-08-04 17:41:30,422 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [69, 1, easyUI]
2019-08-04 17:41:30,422 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [127, 1, 目录]
2019-08-04 17:41:30,422 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [128, 1, AdminLte3]
2019-08-04 17:41:30,423 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [130, 1, SpringBoot]
2019-08-04 17:41:30,423 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [131, 1, 入门教程]
2019-08-04 17:41:30,423 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [132, 1, 实战教程]
2019-08-04 17:41:30,423 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [133, 1, spring-boot企业级开发]
2019-08-04 17:41:30,424 DEBUG {conn-10005, pstmt-20011, rs-50011} closed
2019-08-04 17:41:30,424 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 17:41:30,424 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:30,424 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:30,424 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:41:30,424 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:41:30,425 DEBUG {conn-10005, pstmt-20005} executed. 0.998297 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:41:30,425 DEBUG {conn-10005, pstmt-20005, rs-50012} open
2019-08-04 17:41:30,425 DEBUG {conn-10005, pstmt-20005, rs-50012} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:41:30,426 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:41:30,426 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:41:30,426 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:41:30,426 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:41:30,428 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:41:30,428 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:41:30,428 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:41:30,429 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:41:30,429 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:41:30,429 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:41:30,430 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:41:30,430 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:41:30,431 DEBUG {conn-10005, pstmt-20005, rs-50012} closed
2019-08-04 17:41:30,431 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:41:30,431 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:31,065 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:31,066 DEBUG {conn-10005, pstmt-20012} created. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 17:41:31,067 DEBUG {conn-10005, pstmt-20012} Parameters : [anonymousUser]
2019-08-04 17:41:31,067 DEBUG {conn-10005, pstmt-20012} Types : [VARCHAR]
2019-08-04 17:41:31,070 DEBUG {conn-10005, pstmt-20012, rs-50013} query executed. 1.051759 millis. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 17:41:31,070 DEBUG {conn-10005, pstmt-20012, rs-50013} open
2019-08-04 17:41:31,070 DEBUG {conn-10005, pstmt-20012, rs-50013} Header: [userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime]
2019-08-04 17:41:31,070 DEBUG {conn-10005, pstmt-20012, rs-50013} closed
2019-08-04 17:41:31,071 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-04 17:41:31,071 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:32,448 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:32,449 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:41:32,449 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:41:32,449 DEBUG {conn-10005, pstmt-20000} executed. 0.756177 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:41:32,449 DEBUG {conn-10005, pstmt-20000, rs-50014} open
2019-08-04 17:41:32,449 DEBUG {conn-10005, pstmt-20000, rs-50014} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:41:32,450 DEBUG {conn-10005, pstmt-20000, rs-50014} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 139, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:41:32,450 DEBUG {conn-10005, pstmt-20000, rs-50014} closed
2019-08-04 17:41:32,450 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:41:32,451 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:32,451 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:32,451 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 140, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:41:32,451 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:41:32,459 DEBUG {conn-10005, pstmt-20001} executed. 8.951773 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:41:32,460 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:41:32,460 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:32,468 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:32,468 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:41:32,468 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:41:32,468 DEBUG {conn-10005, pstmt-20002} executed. 0.647196 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:41:32,469 DEBUG {conn-10005, pstmt-20002, rs-50015} open
2019-08-04 17:41:32,469 DEBUG {conn-10005, pstmt-20002, rs-50015} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:41:32,469 DEBUG {conn-10005, pstmt-20002, rs-50015} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:41:32,469 DEBUG {conn-10005, pstmt-20002, rs-50015} closed
2019-08-04 17:41:32,469 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:41:32,469 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:32,470 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:32,470 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:41:32,470 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:41:32,470 DEBUG {conn-10005, pstmt-20003} executed. 0.740754 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:41:32,470 DEBUG {conn-10005, pstmt-20003, rs-50016} open
2019-08-04 17:41:32,470 DEBUG {conn-10005, pstmt-20003, rs-50016} Header: [count(*)]
2019-08-04 17:41:32,471 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [2]
2019-08-04 17:41:32,471 DEBUG {conn-10005, pstmt-20003, rs-50016} closed
2019-08-04 17:41:32,471 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:41:32,471 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:32,471 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:32,471 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:41:32,471 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:41:32,472 DEBUG {conn-10005, pstmt-20004} executed. 0.698088 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:41:32,472 DEBUG {conn-10005, pstmt-20004, rs-50017} open
2019-08-04 17:41:32,473 DEBUG {conn-10005, pstmt-20004, rs-50017} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:41:32,473 DEBUG {conn-10005, pstmt-20004, rs-50017} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:41:32,473 DEBUG {conn-10005, pstmt-20004, rs-50017} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:41:32,473 DEBUG {conn-10005, pstmt-20004, rs-50017} closed
2019-08-04 17:41:32,473 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:41:32,474 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:32,474 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:32,474 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:41:32,474 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:41:32,475 DEBUG {conn-10005, pstmt-20003} executed. 0.603502 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:41:32,475 DEBUG {conn-10005, pstmt-20003, rs-50018} open
2019-08-04 17:41:32,475 DEBUG {conn-10005, pstmt-20003, rs-50018} Header: [count(*)]
2019-08-04 17:41:32,475 DEBUG {conn-10005, pstmt-20003, rs-50018} Result: [2]
2019-08-04 17:41:32,475 DEBUG {conn-10005, pstmt-20003, rs-50018} closed
2019-08-04 17:41:32,475 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:41:32,475 DEBUG {conn-10005} pool-recycle
2019-08-04 17:41:32,476 DEBUG {conn-10005} pool-connect
2019-08-04 17:41:32,476 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:41:32,476 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:41:32,476 DEBUG {conn-10005, pstmt-20005} executed. 0.549011 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:41:32,476 DEBUG {conn-10005, pstmt-20005, rs-50019} open
2019-08-04 17:41:32,476 DEBUG {conn-10005, pstmt-20005, rs-50019} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:41:32,477 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:41:32,477 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:41:32,477 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:41:32,478 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:41:32,478 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:41:32,478 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:41:32,479 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:41:32,479 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:41:32,479 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:41:32,479 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:41:32,479 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:41:32,480 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:41:32,480 DEBUG {conn-10005, pstmt-20005, rs-50019} closed
2019-08-04 17:41:32,480 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:41:32,480 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:13,921 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:13,921 DEBUG {conn-10005, pstmt-20013} created. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-04 17:42:13,921 DEBUG {conn-10005, pstmt-20013} Parameters : [SpringBoot]
2019-08-04 17:42:13,921 DEBUG {conn-10005, pstmt-20013} Types : [VARCHAR]
2019-08-04 17:42:13,923 DEBUG {conn-10005, pstmt-20013} executed. 0.66159 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-04 17:42:13,923 DEBUG {conn-10005, pstmt-20013, rs-50020} open
2019-08-04 17:42:13,923 DEBUG {conn-10005, pstmt-20013, rs-50020} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-04 17:42:13,923 DEBUG {conn-10005, pstmt-20013, rs-50020} Result: [130, SpringBoot, 0, 2019-05-13 17:58:54.0]
2019-08-04 17:42:13,923 DEBUG {conn-10005, pstmt-20013, rs-50020} closed
2019-08-04 17:42:13,923 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-04 17:42:13,923 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:13,923 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:13,933 DEBUG {conn-10005, pstmt-20014} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
    AND blog_status =1 AND is_deleted=0
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:42:13,933 DEBUG {conn-10005, pstmt-20014} Parameters : [130, 0, 9]
2019-08-04 17:42:13,933 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 17:42:13,937 DEBUG {conn-10005, pstmt-20014} executed. 3.740272 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
    AND blog_status =1 AND is_deleted=0
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:42:13,937 DEBUG {conn-10005, pstmt-20014, rs-50021} open
2019-08-04 17:42:13,937 DEBUG {conn-10005, pstmt-20014, rs-50021} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:42:13,938 DEBUG {conn-10005, pstmt-20014, rs-50021} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 140, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:42:13,938 DEBUG {conn-10005, pstmt-20014, rs-50021} closed
2019-08-04 17:42:13,938 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-04 17:42:13,938 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:13,938 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:13,938 DEBUG {conn-10005, pstmt-20015} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     ) 
    AND is_deleted = 0
2019-08-04 17:42:13,938 DEBUG {conn-10005, pstmt-20015} Parameters : [24]
2019-08-04 17:42:13,938 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER]
2019-08-04 17:42:13,939 DEBUG {conn-10005, pstmt-20015} executed. 0.871839 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     ) 
    AND is_deleted = 0
2019-08-04 17:42:13,939 DEBUG {conn-10005, pstmt-20015, rs-50022} open
2019-08-04 17:42:13,939 DEBUG {conn-10005, pstmt-20015, rs-50022} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:42:13,939 DEBUG {conn-10005, pstmt-20015, rs-50022} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:42:13,941 DEBUG {conn-10005, pstmt-20015, rs-50022} closed
2019-08-04 17:42:13,941 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-04 17:42:13,941 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:13,941 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:13,942 DEBUG {conn-10005, pstmt-20016} created. select count(*)
        from tb_blog
        where  blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
        AND blog_status =1 AND is_deleted=0
2019-08-04 17:42:13,942 DEBUG {conn-10005, pstmt-20016} Parameters : [130]
2019-08-04 17:42:13,942 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER]
2019-08-04 17:42:13,942 DEBUG {conn-10005, pstmt-20016} executed. 0.582425 millis. select count(*)
        from tb_blog
        where  blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
        AND blog_status =1 AND is_deleted=0
2019-08-04 17:42:13,942 DEBUG {conn-10005, pstmt-20016, rs-50023} open
2019-08-04 17:42:13,942 DEBUG {conn-10005, pstmt-20016, rs-50023} Header: [count(*)]
2019-08-04 17:42:13,942 DEBUG {conn-10005, pstmt-20016, rs-50023} Result: [1]
2019-08-04 17:42:13,942 DEBUG {conn-10005, pstmt-20016, rs-50023} closed
2019-08-04 17:42:13,942 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-04 17:42:13,942 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:13,942 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:13,942 DEBUG {conn-10005, pstmt-20009} Parameters : [9]
2019-08-04 17:42:13,942 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 17:42:13,944 DEBUG {conn-10005, pstmt-20009} executed. 0.641542 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:42:13,944 DEBUG {conn-10005, pstmt-20009, rs-50024} open
2019-08-04 17:42:13,944 DEBUG {conn-10005, pstmt-20009, rs-50024} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:42:13,944 DEBUG {conn-10005, pstmt-20009, rs-50024} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 140, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:42:13,945 DEBUG {conn-10005, pstmt-20009, rs-50024} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:42:13,945 DEBUG {conn-10005, pstmt-20009, rs-50024} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:42:13,945 DEBUG {conn-10005, pstmt-20009, rs-50024} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:42:13,949 DEBUG {conn-10005, pstmt-20009, rs-50024} closed
2019-08-04 17:42:13,949 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 17:42:13,949 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:13,951 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20010} executed. 0.749494 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20010, rs-50025} open
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20010, rs-50025} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20010, rs-50025} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20010, rs-50025} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 140, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20010, rs-50025} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20010, rs-50025} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20010, rs-50025} closed
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 17:42:13,951 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:13,951 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-04 17:42:13,951 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-04 17:42:13,956 DEBUG {conn-10005, pstmt-20011} executed. 1.0862 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:42:13,956 DEBUG {conn-10005, pstmt-20011, rs-50026} open
2019-08-04 17:42:13,956 DEBUG {conn-10005, pstmt-20011, rs-50026} Header: [tag_id, tag_count, tag_name]
2019-08-04 17:42:13,957 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 17:42:13,957 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 17:42:13,957 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [66, 1, Spring]
2019-08-04 17:42:13,957 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [67, 1, SpringMVC]
2019-08-04 17:42:13,958 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [68, 1, MyBatis]
2019-08-04 17:42:13,958 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [69, 1, easyUI]
2019-08-04 17:42:13,958 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [127, 1, 目录]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [128, 1, AdminLte3]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [130, 1, SpringBoot]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [131, 1, 入门教程]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [132, 1, 实战教程]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [133, 1, spring-boot企业级开发]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20011, rs-50026} closed
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 17:42:13,959 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:13,959 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005} executed. 0.544386 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} open
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005, rs-50027} closed
2019-08-04 17:42:13,959 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:42:13,959 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:16,788 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:16,788 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:42:16,788 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:42:16,788 DEBUG {conn-10005, pstmt-20000} executed. 0.726361 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:42:16,788 DEBUG {conn-10005, pstmt-20000, rs-50028} open
2019-08-04 17:42:16,788 DEBUG {conn-10005, pstmt-20000, rs-50028} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:42:16,788 DEBUG {conn-10005, pstmt-20000, rs-50028} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 140, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:42:16,792 DEBUG {conn-10005, pstmt-20000, rs-50028} closed
2019-08-04 17:42:16,792 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:42:16,792 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:16,792 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:16,792 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 141, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:42:16,792 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:42:16,801 DEBUG {conn-10005, pstmt-20001} executed. 8.442344 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:42:16,801 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:42:16,801 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:16,803 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:16,803 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:42:16,803 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:42:16,803 DEBUG {conn-10005, pstmt-20002} executed. 0.598361 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:42:16,803 DEBUG {conn-10005, pstmt-20002, rs-50029} open
2019-08-04 17:42:16,803 DEBUG {conn-10005, pstmt-20002, rs-50029} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:42:16,803 DEBUG {conn-10005, pstmt-20002, rs-50029} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:42:16,803 DEBUG {conn-10005, pstmt-20002, rs-50029} closed
2019-08-04 17:42:16,803 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:42:16,803 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:16,803 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:16,807 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:42:16,807 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:42:16,807 DEBUG {conn-10005, pstmt-20003} executed. 0.513028 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:42:16,807 DEBUG {conn-10005, pstmt-20003, rs-50030} open
2019-08-04 17:42:16,807 DEBUG {conn-10005, pstmt-20003, rs-50030} Header: [count(*)]
2019-08-04 17:42:16,807 DEBUG {conn-10005, pstmt-20003, rs-50030} Result: [2]
2019-08-04 17:42:16,807 DEBUG {conn-10005, pstmt-20003, rs-50030} closed
2019-08-04 17:42:16,807 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:42:16,807 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:16,808 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:16,808 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:42:16,808 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20004} executed. 0.692434 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20004, rs-50031} open
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20004, rs-50031} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20004, rs-50031} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20004, rs-50031} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20004, rs-50031} closed
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:42:16,809 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:16,809 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20003} executed. 0.460595 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20003, rs-50032} open
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20003, rs-50032} Header: [count(*)]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20003, rs-50032} Result: [2]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20003, rs-50032} closed
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:42:16,809 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:16,809 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005} executed. 0.472417 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} open
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:16,809 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:16,814 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:16,814 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:16,814 DEBUG {conn-10005, pstmt-20005, rs-50033} closed
2019-08-04 17:42:16,814 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:42:16,814 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:19,750 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:19,750 DEBUG {conn-10005, pstmt-20013} Parameters : [实战教程]
2019-08-04 17:42:19,750 DEBUG {conn-10005, pstmt-20013} Types : [VARCHAR]
2019-08-04 17:42:19,752 DEBUG {conn-10005, pstmt-20013} executed. 0.78188 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-04 17:42:19,752 DEBUG {conn-10005, pstmt-20013, rs-50034} open
2019-08-04 17:42:19,752 DEBUG {conn-10005, pstmt-20013, rs-50034} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-04 17:42:19,752 DEBUG {conn-10005, pstmt-20013, rs-50034} Result: [132, 实战教程, 0, 2019-05-13 17:58:54.0]
2019-08-04 17:42:19,752 DEBUG {conn-10005, pstmt-20013, rs-50034} closed
2019-08-04 17:42:19,753 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-04 17:42:19,753 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:19,753 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:19,753 DEBUG {conn-10005, pstmt-20014} Parameters : [132, 0, 9]
2019-08-04 17:42:19,753 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 17:42:19,754 DEBUG {conn-10005, pstmt-20014} executed. 0.819405 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
    AND blog_status =1 AND is_deleted=0
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:42:19,754 DEBUG {conn-10005, pstmt-20014, rs-50035} open
2019-08-04 17:42:19,754 DEBUG {conn-10005, pstmt-20014, rs-50035} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:42:19,754 DEBUG {conn-10005, pstmt-20014, rs-50035} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 141, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:42:19,755 DEBUG {conn-10005, pstmt-20014, rs-50035} closed
2019-08-04 17:42:19,755 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-04 17:42:19,755 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:19,755 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:19,755 DEBUG {conn-10005, pstmt-20015} Parameters : [24]
2019-08-04 17:42:19,755 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER]
2019-08-04 17:42:19,756 DEBUG {conn-10005, pstmt-20015} executed. 0.517655 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     ) 
    AND is_deleted = 0
2019-08-04 17:42:19,756 DEBUG {conn-10005, pstmt-20015, rs-50036} open
2019-08-04 17:42:19,756 DEBUG {conn-10005, pstmt-20015, rs-50036} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:42:19,756 DEBUG {conn-10005, pstmt-20015, rs-50036} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:42:19,756 DEBUG {conn-10005, pstmt-20015, rs-50036} closed
2019-08-04 17:42:19,756 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-04 17:42:19,756 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:19,757 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:19,757 DEBUG {conn-10005, pstmt-20016} Parameters : [132]
2019-08-04 17:42:19,757 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER]
2019-08-04 17:42:19,758 DEBUG {conn-10005, pstmt-20016} executed. 0.564948 millis. select count(*)
        from tb_blog
        where  blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
        AND blog_status =1 AND is_deleted=0
2019-08-04 17:42:19,758 DEBUG {conn-10005, pstmt-20016, rs-50037} open
2019-08-04 17:42:19,758 DEBUG {conn-10005, pstmt-20016, rs-50037} Header: [count(*)]
2019-08-04 17:42:19,758 DEBUG {conn-10005, pstmt-20016, rs-50037} Result: [1]
2019-08-04 17:42:19,758 DEBUG {conn-10005, pstmt-20016, rs-50037} closed
2019-08-04 17:42:19,758 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-04 17:42:19,758 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:19,758 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:19,758 DEBUG {conn-10005, pstmt-20009} Parameters : [9]
2019-08-04 17:42:19,758 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20009} executed. 0.524852 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20009, rs-50038} open
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20009, rs-50038} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20009, rs-50038} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 141, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20009, rs-50038} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20009, rs-50038} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20009, rs-50038} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20009, rs-50038} closed
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 17:42:19,759 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:19,759 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20010} executed. 0.581397 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20010, rs-50039} open
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20010, rs-50039} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20010, rs-50039} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20010, rs-50039} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 141, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20010, rs-50039} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20010, rs-50039} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20010, rs-50039} closed
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 17:42:19,759 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:19,759 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-04 17:42:19,759 DEBUG {conn-10005, pstmt-20011} executed. 0.802956 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:42:19,764 DEBUG {conn-10005, pstmt-20011, rs-50040} open
2019-08-04 17:42:19,764 DEBUG {conn-10005, pstmt-20011, rs-50040} Header: [tag_id, tag_count, tag_name]
2019-08-04 17:42:19,764 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 17:42:19,764 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 17:42:19,764 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [66, 1, Spring]
2019-08-04 17:42:19,764 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [67, 1, SpringMVC]
2019-08-04 17:42:19,764 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [68, 1, MyBatis]
2019-08-04 17:42:19,764 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [69, 1, easyUI]
2019-08-04 17:42:19,764 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [127, 1, 目录]
2019-08-04 17:42:19,765 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [128, 1, AdminLte3]
2019-08-04 17:42:19,765 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [130, 1, SpringBoot]
2019-08-04 17:42:19,765 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [131, 1, 入门教程]
2019-08-04 17:42:19,765 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [132, 1, 实战教程]
2019-08-04 17:42:19,765 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [133, 1, spring-boot企业级开发]
2019-08-04 17:42:19,765 DEBUG {conn-10005, pstmt-20011, rs-50040} closed
2019-08-04 17:42:19,765 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 17:42:19,765 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:19,766 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:19,766 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:42:19,766 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:42:19,766 DEBUG {conn-10005, pstmt-20005} executed. 0.733558 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:42:19,767 DEBUG {conn-10005, pstmt-20005, rs-50041} open
2019-08-04 17:42:19,767 DEBUG {conn-10005, pstmt-20005, rs-50041} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:42:19,767 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:19,767 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:19,767 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:19,768 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:19,768 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:19,768 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:19,768 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:19,768 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:19,768 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:19,768 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:19,768 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:19,768 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:19,769 DEBUG {conn-10005, pstmt-20005, rs-50041} closed
2019-08-04 17:42:19,769 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:42:19,769 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:23,468 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:23,468 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:42:23,468 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:42:23,468 DEBUG {conn-10005, pstmt-20000} executed. 0.754634 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:42:23,468 DEBUG {conn-10005, pstmt-20000, rs-50042} open
2019-08-04 17:42:23,468 DEBUG {conn-10005, pstmt-20000, rs-50042} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:42:23,468 DEBUG {conn-10005, pstmt-20000, rs-50042} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 141, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:42:23,468 DEBUG {conn-10005, pstmt-20000, rs-50042} closed
2019-08-04 17:42:23,468 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:42:23,468 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:23,468 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:23,468 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 142, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:42:23,468 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:42:23,479 DEBUG {conn-10005, pstmt-20001} executed. 8.515853 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:42:23,479 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:42:23,479 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:23,479 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:23,479 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:42:23,479 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:42:23,484 DEBUG {conn-10005, pstmt-20002} executed. 0.543871 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:42:23,484 DEBUG {conn-10005, pstmt-20002, rs-50043} open
2019-08-04 17:42:23,484 DEBUG {conn-10005, pstmt-20002, rs-50043} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:42:23,484 DEBUG {conn-10005, pstmt-20002, rs-50043} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:42:23,484 DEBUG {conn-10005, pstmt-20002, rs-50043} closed
2019-08-04 17:42:23,484 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:42:23,484 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:23,484 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:23,485 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:42:23,485 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:42:23,485 DEBUG {conn-10005, pstmt-20003} executed. 0.584482 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:42:23,485 DEBUG {conn-10005, pstmt-20003, rs-50044} open
2019-08-04 17:42:23,485 DEBUG {conn-10005, pstmt-20003, rs-50044} Header: [count(*)]
2019-08-04 17:42:23,485 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [2]
2019-08-04 17:42:23,486 DEBUG {conn-10005, pstmt-20003, rs-50044} closed
2019-08-04 17:42:23,486 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:42:23,486 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:23,486 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:23,486 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:42:23,486 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:42:23,487 DEBUG {conn-10005, pstmt-20004} executed. 0.59065 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:42:23,487 DEBUG {conn-10005, pstmt-20004, rs-50045} open
2019-08-04 17:42:23,487 DEBUG {conn-10005, pstmt-20004, rs-50045} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:42:23,487 DEBUG {conn-10005, pstmt-20004, rs-50045} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:42:23,487 DEBUG {conn-10005, pstmt-20004, rs-50045} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:42:23,487 DEBUG {conn-10005, pstmt-20004, rs-50045} closed
2019-08-04 17:42:23,487 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:42:23,487 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:23,487 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:23,487 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:42:23,487 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:42:23,488 DEBUG {conn-10005, pstmt-20003} executed. 0.415871 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:42:23,488 DEBUG {conn-10005, pstmt-20003, rs-50046} open
2019-08-04 17:42:23,488 DEBUG {conn-10005, pstmt-20003, rs-50046} Header: [count(*)]
2019-08-04 17:42:23,488 DEBUG {conn-10005, pstmt-20003, rs-50046} Result: [2]
2019-08-04 17:42:23,488 DEBUG {conn-10005, pstmt-20003, rs-50046} closed
2019-08-04 17:42:23,488 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:42:23,488 DEBUG {conn-10005} pool-recycle
2019-08-04 17:42:23,488 DEBUG {conn-10005} pool-connect
2019-08-04 17:42:23,488 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:42:23,488 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:42:23,489 DEBUG {conn-10005, pstmt-20005} executed. 0.468819 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:42:23,489 DEBUG {conn-10005, pstmt-20005, rs-50047} open
2019-08-04 17:42:23,489 DEBUG {conn-10005, pstmt-20005, rs-50047} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:42:23,489 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:23,489 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:23,489 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:23,489 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:23,489 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:42:23,490 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:23,490 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:23,490 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:23,490 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:42:23,490 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:23,490 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:23,490 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:42:23,490 DEBUG {conn-10005, pstmt-20005, rs-50047} closed
2019-08-04 17:42:23,490 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:42:23,490 DEBUG {conn-10005} pool-recycle
2019-08-04 17:43:22,644 DEBUG {conn-10001,procId-530} connected
2019-08-04 17:43:22,652 DEBUG {conn-10002,procId-531} connected
2019-08-04 17:43:22,658 DEBUG {conn-10003,procId-532} connected
2019-08-04 17:43:22,664 DEBUG {conn-10004,procId-533} connected
2019-08-04 17:43:22,669 DEBUG {conn-10005,procId-534} connected
2019-08-04 17:43:22,676 DEBUG {conn-10005} pool-connect
2019-08-04 17:43:22,677 DEBUG {conn-10005} pool-recycle
2019-08-04 17:43:22,686 DEBUG {conn-10005} pool-connect
2019-08-04 17:43:22,689 DEBUG {conn-10005} pool-recycle
2019-08-04 17:43:23,408 DEBUG {conn-10005} pool-connect
2019-08-04 17:43:23,497 DEBUG {conn-10005} pool-recycle
2019-08-04 17:43:24,976 INFO [Ricadonna] modules [], plugins [], sites []
2019-08-04 17:43:25,015 DEBUG [Ricadonna] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-04 17:43:25,047 DEBUG [Ricadonna] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-04 17:43:25,083 DEBUG [Ricadonna] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:43:25,085 DEBUG [Ricadonna] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-04 17:43:25,085 DEBUG [Ricadonna] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-04 17:43:25,085 DEBUG [Ricadonna] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:43:25,085 DEBUG [Ricadonna] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-04 17:43:25,085 DEBUG [Ricadonna] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-04 17:43:25,089 DEBUG [Ricadonna] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:43:25,089 DEBUG [Ricadonna] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-04 17:43:25,089 DEBUG [Ricadonna] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:43:25,090 DEBUG [Ricadonna] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-04 17:43:25,090 DEBUG [Ricadonna] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-04 17:43:25,090 DEBUG [Ricadonna] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-04 17:43:25,090 DEBUG [Ricadonna] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-04 17:43:25,092 DEBUG [Ricadonna] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-04 17:43:29,390 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.6 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5260:eca0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5260:eca0:19ff:3db7:e96d:9105 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-04 17:43:29,457 DEBUG using gathering [true]
2019-08-04 17:43:29,532 DEBUG [Ricadonna] node_sampler_interval[5s]
2019-08-04 17:43:29,572 DEBUG Using select timeout of 500
2019-08-04 17:43:29,572 DEBUG Epoll-bug workaround enabled = false
2019-08-04 17:43:29,717 DEBUG [Ricadonna] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:43:29,803 DEBUG [Ricadonna] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:43:29,912 DEBUG [Ricadonna] connected to node [{Kismet Deadly}{H5sUDcyCSgCC08t3Xyjs6w}{127.0.0.1}{127.0.0.1:9300}]
2019-08-04 17:43:32,371 DEBUG {conn-10005} pool-connect
2019-08-04 17:43:32,371 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:11,578 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:11,717 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:54:11,740 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:54:11,741 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:54:11,752 DEBUG {conn-10005, pstmt-20000} executed. 22.073568 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:54:11,771 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-04 17:54:11,777 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:54:11,797 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 142, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:54:11,809 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-04 17:54:11,809 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:54:11,814 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:11,815 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:11,833 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:54:11,849 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 143, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:54:11,849 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:54:11,862 DEBUG {conn-10005, pstmt-20001} executed. 13.004077 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:54:11,863 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:54:11,863 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:12,054 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:12,056 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:54:12,057 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:54:12,058 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:54:12,060 DEBUG {conn-10005, pstmt-20002} executed. 2.760482 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:54:12,061 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-04 17:54:12,061 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:54:12,062 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:54:12,064 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-04 17:54:12,064 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:54:12,065 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:12,126 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:12,129 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:54:12,130 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:54:12,130 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:54:12,131 DEBUG {conn-10005, pstmt-20003} executed. 1.452722 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:54:12,132 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-04 17:54:12,132 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-04 17:54:12,132 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [2]
2019-08-04 17:54:12,135 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-04 17:54:12,136 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:54:12,136 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:12,139 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:12,145 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:54:12,146 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:54:12,147 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:54:12,148 DEBUG {conn-10005, pstmt-20004} executed. 1.607453 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:54:12,148 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-04 17:54:12,148 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:54:12,149 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:54:12,150 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:54:12,151 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-04 17:54:12,151 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:54:12,152 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:12,152 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:12,152 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:54:12,152 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:54:12,153 DEBUG {conn-10005, pstmt-20003} executed. 1.042505 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:54:12,154 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-04 17:54:12,154 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-04 17:54:12,154 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [2]
2019-08-04 17:54:12,154 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-04 17:54:12,155 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:54:12,155 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:12,160 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:12,161 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:54:12,161 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:54:12,161 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:54:12,162 DEBUG {conn-10005, pstmt-20005} executed. 1.784289 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:54:12,163 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-04 17:54:12,163 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:54:12,164 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:12,165 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:12,165 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:12,166 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:12,167 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:12,167 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:12,168 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:12,168 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:12,169 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:12,169 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:12,170 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:12,171 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:12,171 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-04 17:54:12,171 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:54:12,171 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:41,483 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:41,483 DEBUG {conn-10005, pstmt-20006} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:54:41,483 DEBUG {conn-10005, pstmt-20006} Parameters : [1, 0, 8]
2019-08-04 17:54:41,483 DEBUG {conn-10005, pstmt-20006} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 17:54:41,483 DEBUG {conn-10005, pstmt-20006} executed. 0.979277 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:54:41,483 DEBUG {conn-10005, pstmt-20006, rs-50006} open
2019-08-04 17:54:41,483 DEBUG {conn-10005, pstmt-20006, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:54:41,483 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 143, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:54:41,487 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:54:41,487 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:54:41,488 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:54:41,488 DEBUG {conn-10005, pstmt-20006, rs-50006} closed
2019-08-04 17:54:41,488 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 17:54:41,488 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:41,493 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:41,494 DEBUG {conn-10005, pstmt-20007} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 17:54:41,494 DEBUG {conn-10005, pstmt-20007} Parameters : [24, 22, 24, 20]
2019-08-04 17:54:41,494 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER, INTEGER]
2019-08-04 17:54:41,495 DEBUG {conn-10005, pstmt-20007} executed. 0.943293 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 17:54:41,495 DEBUG {conn-10005, pstmt-20007, rs-50007} open
2019-08-04 17:54:41,495 DEBUG {conn-10005, pstmt-20007, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:54:41,496 DEBUG {conn-10005, pstmt-20007, rs-50007} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 17:54:41,496 DEBUG {conn-10005, pstmt-20007, rs-50007} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:54:41,496 DEBUG {conn-10005, pstmt-20007, rs-50007} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:54:41,496 DEBUG {conn-10005, pstmt-20007, rs-50007} closed
2019-08-04 17:54:41,496 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-04 17:54:41,496 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:41,501 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:41,502 DEBUG {conn-10005, pstmt-20008} created. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 17:54:41,502 DEBUG {conn-10005, pstmt-20008} Parameters : [1]
2019-08-04 17:54:41,502 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER]
2019-08-04 17:54:41,503 DEBUG {conn-10005, pstmt-20008} executed. 0.729445 millis. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 17:54:41,503 DEBUG {conn-10005, pstmt-20008, rs-50008} open
2019-08-04 17:54:41,503 DEBUG {conn-10005, pstmt-20008, rs-50008} Header: [count(*)]
2019-08-04 17:54:41,503 DEBUG {conn-10005, pstmt-20008, rs-50008} Result: [4]
2019-08-04 17:54:41,503 DEBUG {conn-10005, pstmt-20008, rs-50008} closed
2019-08-04 17:54:41,503 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-04 17:54:41,503 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:41,503 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:41,503 DEBUG {conn-10005, pstmt-20009} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:54:41,503 DEBUG {conn-10005, pstmt-20009} Parameters : [9]
2019-08-04 17:54:41,503 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 17:54:41,503 DEBUG {conn-10005, pstmt-20009} executed. 0.922217 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:54:41,503 DEBUG {conn-10005, pstmt-20009, rs-50009} open
2019-08-04 17:54:41,508 DEBUG {conn-10005, pstmt-20009, rs-50009} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:54:41,508 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 143, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:54:41,509 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:54:41,509 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:54:41,509 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:54:41,509 DEBUG {conn-10005, pstmt-20009, rs-50009} closed
2019-08-04 17:54:41,511 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 17:54:41,511 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:41,511 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:41,512 DEBUG {conn-10005, pstmt-20010} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:54:41,512 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 17:54:41,512 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 17:54:41,512 DEBUG {conn-10005, pstmt-20010} executed. 1.131952 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:54:41,512 DEBUG {conn-10005, pstmt-20010, rs-50010} open
2019-08-04 17:54:41,512 DEBUG {conn-10005, pstmt-20010, rs-50010} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:54:41,512 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:54:41,512 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 143, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:54:41,512 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:54:41,516 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:54:41,516 DEBUG {conn-10005, pstmt-20010, rs-50010} closed
2019-08-04 17:54:41,516 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 17:54:41,516 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:41,517 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:41,519 DEBUG {conn-10005, pstmt-20011} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:54:41,519 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-04 17:54:41,519 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-04 17:54:41,519 DEBUG {conn-10005, pstmt-20011} executed. 1.219855 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:54:41,519 DEBUG {conn-10005, pstmt-20011, rs-50011} open
2019-08-04 17:54:41,519 DEBUG {conn-10005, pstmt-20011, rs-50011} Header: [tag_id, tag_count, tag_name]
2019-08-04 17:54:41,519 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 17:54:41,524 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 17:54:41,524 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [66, 1, Spring]
2019-08-04 17:54:41,524 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [67, 1, SpringMVC]
2019-08-04 17:54:41,524 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [68, 1, MyBatis]
2019-08-04 17:54:41,524 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [69, 1, easyUI]
2019-08-04 17:54:41,525 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [127, 1, 目录]
2019-08-04 17:54:41,525 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [128, 1, AdminLte3]
2019-08-04 17:54:41,525 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [130, 1, SpringBoot]
2019-08-04 17:54:41,525 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [131, 1, 入门教程]
2019-08-04 17:54:41,525 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [132, 1, 实战教程]
2019-08-04 17:54:41,525 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [133, 1, spring-boot企业级开发]
2019-08-04 17:54:41,525 DEBUG {conn-10005, pstmt-20011, rs-50011} closed
2019-08-04 17:54:41,525 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 17:54:41,525 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:41,527 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:41,527 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:54:41,527 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:54:41,527 DEBUG {conn-10005, pstmt-20005} executed. 0.709398 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:54:41,528 DEBUG {conn-10005, pstmt-20005, rs-50012} open
2019-08-04 17:54:41,528 DEBUG {conn-10005, pstmt-20005, rs-50012} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:54:41,528 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:41,529 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:41,530 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:41,530 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:41,531 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:41,532 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:41,532 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:41,533 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:41,533 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:41,533 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:41,534 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:41,534 DEBUG {conn-10005, pstmt-20005, rs-50012} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:41,535 DEBUG {conn-10005, pstmt-20005, rs-50012} closed
2019-08-04 17:54:41,535 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:54:41,535 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:42,018 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:42,018 DEBUG {conn-10005, pstmt-20012} created. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 17:54:42,022 DEBUG {conn-10005, pstmt-20012} Parameters : [anonymousUser]
2019-08-04 17:54:42,022 DEBUG {conn-10005, pstmt-20012} Types : [VARCHAR]
2019-08-04 17:54:42,022 DEBUG {conn-10005, pstmt-20012, rs-50013} query executed. 1.088771 millis. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 17:54:42,023 DEBUG {conn-10005, pstmt-20012, rs-50013} open
2019-08-04 17:54:42,023 DEBUG {conn-10005, pstmt-20012, rs-50013} Header: [userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime]
2019-08-04 17:54:42,023 DEBUG {conn-10005, pstmt-20012, rs-50013} closed
2019-08-04 17:54:42,024 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-04 17:54:42,024 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:45,400 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:45,400 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:54:45,400 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:54:45,400 DEBUG {conn-10005, pstmt-20000} executed. 0.69963 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:54:45,400 DEBUG {conn-10005, pstmt-20000, rs-50014} open
2019-08-04 17:54:45,400 DEBUG {conn-10005, pstmt-20000, rs-50014} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:54:45,400 DEBUG {conn-10005, pstmt-20000, rs-50014} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 143, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:54:45,400 DEBUG {conn-10005, pstmt-20000, rs-50014} closed
2019-08-04 17:54:45,400 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:54:45,400 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:45,400 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:45,400 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 144, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:54:45,400 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:54:45,411 DEBUG {conn-10005, pstmt-20001} executed. 8.661845 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:54:45,411 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:54:45,411 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:45,417 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:45,417 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:54:45,417 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:54:45,418 DEBUG {conn-10005, pstmt-20002} executed. 0.58551 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:54:45,418 DEBUG {conn-10005, pstmt-20002, rs-50015} open
2019-08-04 17:54:45,418 DEBUG {conn-10005, pstmt-20002, rs-50015} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:54:45,418 DEBUG {conn-10005, pstmt-20002, rs-50015} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:54:45,418 DEBUG {conn-10005, pstmt-20002, rs-50015} closed
2019-08-04 17:54:45,418 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:54:45,418 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:45,418 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:45,418 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:54:45,418 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:54:45,419 DEBUG {conn-10005, pstmt-20003} executed. 0.696546 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:54:45,419 DEBUG {conn-10005, pstmt-20003, rs-50016} open
2019-08-04 17:54:45,419 DEBUG {conn-10005, pstmt-20003, rs-50016} Header: [count(*)]
2019-08-04 17:54:45,420 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [2]
2019-08-04 17:54:45,420 DEBUG {conn-10005, pstmt-20003, rs-50016} closed
2019-08-04 17:54:45,420 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:54:45,420 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:45,420 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:45,421 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:54:45,421 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:54:45,422 DEBUG {conn-10005, pstmt-20004} executed. 0.839454 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:54:45,422 DEBUG {conn-10005, pstmt-20004, rs-50017} open
2019-08-04 17:54:45,422 DEBUG {conn-10005, pstmt-20004, rs-50017} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:54:45,422 DEBUG {conn-10005, pstmt-20004, rs-50017} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:54:45,423 DEBUG {conn-10005, pstmt-20004, rs-50017} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:54:45,423 DEBUG {conn-10005, pstmt-20004, rs-50017} closed
2019-08-04 17:54:45,423 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:54:45,424 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:45,424 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:45,424 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:54:45,424 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20003} executed. 0.645654 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20003, rs-50018} open
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20003, rs-50018} Header: [count(*)]
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20003, rs-50018} Result: [2]
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20003, rs-50018} closed
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:54:45,426 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:45,426 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20005} executed. 0.652851 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20005, rs-50019} open
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20005, rs-50019} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:45,426 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:45,431 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:45,431 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:45,431 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:45,431 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:45,431 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:45,431 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:45,431 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:45,432 DEBUG {conn-10005, pstmt-20005, rs-50019} closed
2019-08-04 17:54:45,432 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:54:45,432 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:48,264 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:48,265 DEBUG {conn-10005, pstmt-20013} created. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-04 17:54:48,265 DEBUG {conn-10005, pstmt-20013} Parameters : [实战教程]
2019-08-04 17:54:48,265 DEBUG {conn-10005, pstmt-20013} Types : [VARCHAR]
2019-08-04 17:54:48,266 DEBUG {conn-10005, pstmt-20013} executed. 0.77314 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-04 17:54:48,266 DEBUG {conn-10005, pstmt-20013, rs-50020} open
2019-08-04 17:54:48,266 DEBUG {conn-10005, pstmt-20013, rs-50020} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-04 17:54:48,266 DEBUG {conn-10005, pstmt-20013, rs-50020} Result: [132, 实战教程, 0, 2019-05-13 17:58:54.0]
2019-08-04 17:54:48,266 DEBUG {conn-10005, pstmt-20013, rs-50020} closed
2019-08-04 17:54:48,266 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-04 17:54:48,266 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:48,267 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:48,268 DEBUG {conn-10005, pstmt-20014} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
    AND blog_status =1 AND is_deleted=0
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:54:48,269 DEBUG {conn-10005, pstmt-20014} Parameters : [132, 0, 9]
2019-08-04 17:54:48,269 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 17:54:48,270 DEBUG {conn-10005, pstmt-20014} executed. 0.965397 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
    AND blog_status =1 AND is_deleted=0
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:54:48,270 DEBUG {conn-10005, pstmt-20014, rs-50021} open
2019-08-04 17:54:48,270 DEBUG {conn-10005, pstmt-20014, rs-50021} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:54:48,270 DEBUG {conn-10005, pstmt-20014, rs-50021} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 144, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:54:48,270 DEBUG {conn-10005, pstmt-20014, rs-50021} closed
2019-08-04 17:54:48,271 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-04 17:54:48,271 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:48,272 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:48,272 DEBUG {conn-10005, pstmt-20015} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     ) 
    AND is_deleted = 0
2019-08-04 17:54:48,272 DEBUG {conn-10005, pstmt-20015} Parameters : [24]
2019-08-04 17:54:48,272 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER]
2019-08-04 17:54:48,272 DEBUG {conn-10005, pstmt-20015} executed. 0.702714 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     ) 
    AND is_deleted = 0
2019-08-04 17:54:48,272 DEBUG {conn-10005, pstmt-20015, rs-50022} open
2019-08-04 17:54:48,273 DEBUG {conn-10005, pstmt-20015, rs-50022} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:54:48,273 DEBUG {conn-10005, pstmt-20015, rs-50022} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:54:48,273 DEBUG {conn-10005, pstmt-20015, rs-50022} closed
2019-08-04 17:54:48,273 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-04 17:54:48,273 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:48,273 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:48,274 DEBUG {conn-10005, pstmt-20016} created. select count(*)
        from tb_blog
        where  blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
        AND blog_status =1 AND is_deleted=0
2019-08-04 17:54:48,274 DEBUG {conn-10005, pstmt-20016} Parameters : [132]
2019-08-04 17:54:48,274 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER]
2019-08-04 17:54:48,276 DEBUG {conn-10005, pstmt-20016} executed. 0.675469 millis. select count(*)
        from tb_blog
        where  blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
        AND blog_status =1 AND is_deleted=0
2019-08-04 17:54:48,276 DEBUG {conn-10005, pstmt-20016, rs-50023} open
2019-08-04 17:54:48,276 DEBUG {conn-10005, pstmt-20016, rs-50023} Header: [count(*)]
2019-08-04 17:54:48,276 DEBUG {conn-10005, pstmt-20016, rs-50023} Result: [1]
2019-08-04 17:54:48,276 DEBUG {conn-10005, pstmt-20016, rs-50023} closed
2019-08-04 17:54:48,276 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-04 17:54:48,276 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:48,277 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:48,277 DEBUG {conn-10005, pstmt-20009} Parameters : [9]
2019-08-04 17:54:48,277 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 17:54:48,278 DEBUG {conn-10005, pstmt-20009} executed. 0.691405 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:54:48,278 DEBUG {conn-10005, pstmt-20009, rs-50024} open
2019-08-04 17:54:48,278 DEBUG {conn-10005, pstmt-20009, rs-50024} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:54:48,278 DEBUG {conn-10005, pstmt-20009, rs-50024} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 144, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:54:48,281 DEBUG {conn-10005, pstmt-20009, rs-50024} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:54:48,281 DEBUG {conn-10005, pstmt-20009, rs-50024} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:54:48,281 DEBUG {conn-10005, pstmt-20009, rs-50024} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:54:48,281 DEBUG {conn-10005, pstmt-20009, rs-50024} closed
2019-08-04 17:54:48,281 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 17:54:48,281 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:48,281 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:48,285 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 17:54:48,285 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 17:54:48,285 DEBUG {conn-10005, pstmt-20010} executed. 0.7351 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:54:48,285 DEBUG {conn-10005, pstmt-20010, rs-50025} open
2019-08-04 17:54:48,285 DEBUG {conn-10005, pstmt-20010, rs-50025} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:54:48,286 DEBUG {conn-10005, pstmt-20010, rs-50025} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:54:48,286 DEBUG {conn-10005, pstmt-20010, rs-50025} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 144, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:54:48,286 DEBUG {conn-10005, pstmt-20010, rs-50025} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:54:48,287 DEBUG {conn-10005, pstmt-20010, rs-50025} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:54:48,287 DEBUG {conn-10005, pstmt-20010, rs-50025} closed
2019-08-04 17:54:48,287 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 17:54:48,287 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:48,287 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:48,288 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-04 17:54:48,288 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-04 17:54:48,289 DEBUG {conn-10005, pstmt-20011} executed. 0.862586 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:54:48,289 DEBUG {conn-10005, pstmt-20011, rs-50026} open
2019-08-04 17:54:48,289 DEBUG {conn-10005, pstmt-20011, rs-50026} Header: [tag_id, tag_count, tag_name]
2019-08-04 17:54:48,289 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 17:54:48,289 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 17:54:48,289 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [66, 1, Spring]
2019-08-04 17:54:48,289 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [67, 1, SpringMVC]
2019-08-04 17:54:48,290 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [68, 1, MyBatis]
2019-08-04 17:54:48,290 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [69, 1, easyUI]
2019-08-04 17:54:48,290 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [127, 1, 目录]
2019-08-04 17:54:48,291 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [128, 1, AdminLte3]
2019-08-04 17:54:48,291 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [130, 1, SpringBoot]
2019-08-04 17:54:48,291 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [131, 1, 入门教程]
2019-08-04 17:54:48,291 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [132, 1, 实战教程]
2019-08-04 17:54:48,291 DEBUG {conn-10005, pstmt-20011, rs-50026} Result: [133, 1, spring-boot企业级开发]
2019-08-04 17:54:48,291 DEBUG {conn-10005, pstmt-20011, rs-50026} closed
2019-08-04 17:54:48,291 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 17:54:48,291 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:48,291 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:48,291 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:54:48,291 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:54:48,293 DEBUG {conn-10005, pstmt-20005} executed. 0.707855 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:54:48,293 DEBUG {conn-10005, pstmt-20005, rs-50027} open
2019-08-04 17:54:48,293 DEBUG {conn-10005, pstmt-20005, rs-50027} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:54:48,293 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:48,293 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:48,293 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:48,293 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:48,293 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:48,293 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:48,293 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:48,293 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:48,294 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:48,295 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:48,295 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:48,295 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:48,295 DEBUG {conn-10005, pstmt-20005, rs-50027} closed
2019-08-04 17:54:48,295 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:54:48,295 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:49,778 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:49,778 DEBUG {conn-10005, pstmt-20000} Parameters : [4]
2019-08-04 17:54:49,778 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:54:49,778 DEBUG {conn-10005, pstmt-20000} executed. 0.825574 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:54:49,778 DEBUG {conn-10005, pstmt-20000, rs-50028} open
2019-08-04 17:54:49,778 DEBUG {conn-10005, pstmt-20000, rs-50028} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:54:49,778 DEBUG {conn-10005, pstmt-20000, rs-50028} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 144, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , <h2 id="springboot2">23 个实验带你轻松玩转 Spring Boot</h2>

- [**开篇词：《23 个实验带你轻松玩转 Spring Boot》导读**](https://www.shiyanlou.com/courses/1274)
- [第02课：Spring Boot 项目开发环境搭建](https://www.shiyanlou.com/courses/1274)
- [第03课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1274)
- [第04课：Spring Boot 基础功能开发](https://www.shiyanlou.com/courses/1274)
- [第05课：Spring Boot 项目开发之 web 项目开发讲解](https://www.shiyanlou.com/courses/1274)
- [第06课：Spring Boot 整合 JSP 开发 web 项目](https://www.shiyanlou.com/courses/1274)
- [第07课：模板引擎介绍及 Spring Boot 整合 Thymeleaf](https://www.shiyanlou.com/courses/1274)
- [第08课：Thymeleaf 语法详解](https://www.shiyanlou.com/courses/1274)
- [第09课：FreeMarker 模板引擎整合使用教程](https://www.shiyanlou.com/courses/1274)
- [第10课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1274)
- [第11课：Spring Boot 自动配置数据源及操作数据库](https://www.shiyanlou.com/courses/1274)
- [第12课：Spring Boot 整合 Druid 数据源](https://www.shiyanlou.com/courses/1274)
- [第13课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1274)
- [第14课：Spring Boot 中的事务处理](https://www.shiyanlou.com/courses/1274)
- [第15课：Spring Boot 整合 Redis 操作缓存模块](https://www.shiyanlou.com/courses/1274)
- [第16课：Spring Boot 项目开发之实现定时任务](https://www.shiyanlou.com/courses/1274)
- [第17课：Spring Boot 自定义错误页面](https://www.shiyanlou.com/courses/1274)
- [第18课：Spring Boot 集成 Swagger 生成接口文档](https://www.shiyanlou.com/courses/1274)
- [第19课：Spring Boot 项目打包部署介绍](https://www.shiyanlou.com/courses/1274)
- [第20课：Spring Boot Admin 介绍及整合使用](https://www.shiyanlou.com/courses/1274)
- [第21课：Spring Boot 资讯管理信息系统开发实战(一)](https://www.shiyanlou.com/courses/1274)
- [第22课：Spring Boot 资讯管理信息系统开发实战(二)](https://www.shiyanlou.com/courses/1274)
- [第23课：Spring Boot 资讯管理信息系统开发实战(三)](https://www.shiyanlou.com/courses/1274)
- [第24课：Spring Boot 资讯管理信息系统开发实战(四)](https://www.shiyanlou.com/courses/1274)

<h2 id="springboot1">Spring Boot 入门及前后端分离项目实践</h2>

* [开篇词：SpringBoot入门及前后端分离项目实践导读](https://www.shiyanlou.com/courses/1244)
* [第02课：快速认识 Spring Boot 技术栈](https://www.shiyanlou.com/courses/1244)
* [第03课：开发环境搭建](https://www.shiyanlou.com/courses/1244)
* [第04课：快速构建 Spring Boot 应用](https://www.shiyanlou.com/courses/1244)
* [第05课：Spring Boot 之基础 web 功能开发](https://www.shiyanlou.com/courses/1244)
* [第06课：Spring Boot 之数据库连接操作](https://www.shiyanlou.com/courses/1244)
* [第07课：Spring Boot 整合 MyBatis 操作数据库](https://www.shiyanlou.com/courses/1244)
* [第08课：Spring Boot 处理文件上传及路径回显](https://www.shiyanlou.com/courses/1244)
* [第09课：Spring Boot 项目实践之前后端分离详解](https://www.shiyanlou.com/courses/1244)
* [第10课：Spring Boot 项目实践之 API 设计](https://www.shiyanlou.com/courses/1244)
* [第11课：Spring Boot 项目实践之登录模块实现](https://www.shiyanlou.com/courses/1244)
* [第12课：Spring Boot 项目实践之分页功能实现](https://www.shiyanlou.com/courses/1244)
* [第13课：Spring Boot 项目实践之jqgrid分页整合](https://www.shiyanlou.com/courses/1244)
* [第14课：Spring Boot 项目实践之编辑功能实现](https://www.shiyanlou.com/courses/1244)
* [第15课：Spring Boot 项目实践之用户管理模块实现](https://www.shiyanlou.com/courses/1244)
* [第16课：Spring Boot 项目实践之图片管理模块](https://www.shiyanlou.com/courses/1244)
* [第17课：Spring Boot 项目实践之富文本编辑器介绍及整合](https://www.shiyanlou.com/courses/1244)
* [第18课：Spring Boot 项目实践之信息管理模块实现](https://www.shiyanlou.com/courses/1244)]
2019-08-04 17:54:49,778 DEBUG {conn-10005, pstmt-20000, rs-50028} closed
2019-08-04 17:54:49,778 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:54:49,778 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:49,778 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:49,783 DEBUG {conn-10005, pstmt-20001} Parameters : [SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 145, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, , 4]
2019-08-04 17:54:49,783 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:54:49,790 DEBUG {conn-10005, pstmt-20001} executed. 7.949363 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:54:49,790 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:54:49,791 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:49,793 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:49,793 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-04 17:54:49,793 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:54:49,793 DEBUG {conn-10005, pstmt-20002} executed. 0.616353 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:54:49,793 DEBUG {conn-10005, pstmt-20002, rs-50029} open
2019-08-04 17:54:49,793 DEBUG {conn-10005, pstmt-20002, rs-50029} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:54:49,793 DEBUG {conn-10005, pstmt-20002, rs-50029} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:54:49,793 DEBUG {conn-10005, pstmt-20002, rs-50029} closed
2019-08-04 17:54:49,793 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:54:49,793 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:49,793 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:49,793 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:54:49,793 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:54:49,797 DEBUG {conn-10005, pstmt-20003} executed. 0.482699 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:54:49,797 DEBUG {conn-10005, pstmt-20003, rs-50030} open
2019-08-04 17:54:49,797 DEBUG {conn-10005, pstmt-20003, rs-50030} Header: [count(*)]
2019-08-04 17:54:49,797 DEBUG {conn-10005, pstmt-20003, rs-50030} Result: [2]
2019-08-04 17:54:49,797 DEBUG {conn-10005, pstmt-20003, rs-50030} closed
2019-08-04 17:54:49,797 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:54:49,797 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:49,798 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:49,798 DEBUG {conn-10005, pstmt-20004} Parameters : [4, 1, 0, 8]
2019-08-04 17:54:49,798 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:54:49,799 DEBUG {conn-10005, pstmt-20004} executed. 0.557751 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:54:49,799 DEBUG {conn-10005, pstmt-20004, rs-50031} open
2019-08-04 17:54:49,799 DEBUG {conn-10005, pstmt-20004, rs-50031} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:54:49,799 DEBUG {conn-10005, pstmt-20004, rs-50031} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-04 17:54:49,800 DEBUG {conn-10005, pstmt-20004, rs-50031} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-04 17:54:49,800 DEBUG {conn-10005, pstmt-20004, rs-50031} closed
2019-08-04 17:54:49,800 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:54:49,800 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:49,800 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:49,800 DEBUG {conn-10005, pstmt-20003} Parameters : [4, 1]
2019-08-04 17:54:49,800 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:54:49,801 DEBUG {conn-10005, pstmt-20003} executed. 0.564948 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:54:49,801 DEBUG {conn-10005, pstmt-20003, rs-50032} open
2019-08-04 17:54:49,801 DEBUG {conn-10005, pstmt-20003, rs-50032} Header: [count(*)]
2019-08-04 17:54:49,801 DEBUG {conn-10005, pstmt-20003, rs-50032} Result: [2]
2019-08-04 17:54:49,801 DEBUG {conn-10005, pstmt-20003, rs-50032} closed
2019-08-04 17:54:49,801 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:54:49,801 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:49,802 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:49,802 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:54:49,802 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:54:49,802 DEBUG {conn-10005, pstmt-20005} executed. 0.558779 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:54:49,802 DEBUG {conn-10005, pstmt-20005, rs-50033} open
2019-08-04 17:54:49,802 DEBUG {conn-10005, pstmt-20005, rs-50033} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:54:49,803 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:49,803 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:49,803 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:49,803 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:49,803 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:49,803 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:49,803 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:49,803 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:49,804 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:49,804 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:49,804 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:49,804 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:49,804 DEBUG {conn-10005, pstmt-20005, rs-50033} closed
2019-08-04 17:54:49,804 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:54:49,804 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:52,052 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:52,052 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-04 17:54:52,052 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-04 17:54:52,054 DEBUG {conn-10005, pstmt-20011} executed. 1.08106 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:54:52,054 DEBUG {conn-10005, pstmt-20011, rs-50034} open
2019-08-04 17:54:52,054 DEBUG {conn-10005, pstmt-20011, rs-50034} Header: [tag_id, tag_count, tag_name]
2019-08-04 17:54:52,054 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 17:54:52,054 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 17:54:52,055 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [66, 1, Spring]
2019-08-04 17:54:52,055 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [67, 1, SpringMVC]
2019-08-04 17:54:52,055 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [68, 1, MyBatis]
2019-08-04 17:54:52,055 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [69, 1, easyUI]
2019-08-04 17:54:52,055 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [127, 1, 目录]
2019-08-04 17:54:52,055 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [128, 1, AdminLte3]
2019-08-04 17:54:52,055 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [130, 1, SpringBoot]
2019-08-04 17:54:52,055 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [131, 1, 入门教程]
2019-08-04 17:54:52,055 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [132, 1, 实战教程]
2019-08-04 17:54:52,055 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [133, 1, spring-boot企业级开发]
2019-08-04 17:54:52,055 DEBUG {conn-10005, pstmt-20011, rs-50034} closed
2019-08-04 17:54:52,056 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 17:54:52,056 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:52,056 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:52,056 DEBUG {conn-10005, pstmt-20017} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-04 17:54:52,056 DEBUG {conn-10005, pstmt-20017} Parameters : []
2019-08-04 17:54:52,056 DEBUG {conn-10005, pstmt-20017} Types : []
2019-08-04 17:54:52,058 DEBUG {conn-10005, pstmt-20017} executed. 1.563759 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-04 17:54:52,058 DEBUG {conn-10005, pstmt-20017, rs-50035} open
2019-08-04 17:54:52,058 DEBUG {conn-10005, pstmt-20017, rs-50035} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:54:52,058 DEBUG {conn-10005, pstmt-20017, rs-50035} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:54:52,058 DEBUG {conn-10005, pstmt-20017, rs-50035} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:54:52,058 DEBUG {conn-10005, pstmt-20017, rs-50035} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 17:54:52,058 DEBUG {conn-10005, pstmt-20017, rs-50035} closed
2019-08-04 17:54:52,058 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-04 17:54:52,058 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:52,058 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:52,058 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:54:52,058 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005} executed. 0.554152 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} open
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005, rs-50036} closed
2019-08-04 17:54:52,060 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:54:52,060 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:55,131 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:55,131 DEBUG {conn-10005, pstmt-20013} Parameters : [世界上有一个很可爱的人]
2019-08-04 17:54:55,131 DEBUG {conn-10005, pstmt-20013} Types : [VARCHAR]
2019-08-04 17:54:55,131 DEBUG {conn-10005, pstmt-20013} executed. 0.618924 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-04 17:54:55,131 DEBUG {conn-10005, pstmt-20013, rs-50037} open
2019-08-04 17:54:55,131 DEBUG {conn-10005, pstmt-20013, rs-50037} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-04 17:54:55,131 DEBUG {conn-10005, pstmt-20013, rs-50037} Result: [57, 世界上有一个很可爱的人, 0, 2018-11-12 08:31:15.0]
2019-08-04 17:54:55,135 DEBUG {conn-10005, pstmt-20013, rs-50037} closed
2019-08-04 17:54:55,135 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-04 17:54:55,135 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:55,135 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:55,135 DEBUG {conn-10005, pstmt-20014} Parameters : [57, 0, 9]
2019-08-04 17:54:55,135 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 17:54:55,136 DEBUG {conn-10005, pstmt-20014} executed. 0.726875 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
    AND blog_status =1 AND is_deleted=0
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:54:55,136 DEBUG {conn-10005, pstmt-20014, rs-50038} open
2019-08-04 17:54:55,136 DEBUG {conn-10005, pstmt-20014, rs-50038} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:54:55,136 DEBUG {conn-10005, pstmt-20014, rs-50038} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:54:55,136 DEBUG {conn-10005, pstmt-20014, rs-50038} closed
2019-08-04 17:54:55,137 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-04 17:54:55,137 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:55,137 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:55,137 DEBUG {conn-10005, pstmt-20015} Parameters : [20]
2019-08-04 17:54:55,137 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER]
2019-08-04 17:54:55,138 DEBUG {conn-10005, pstmt-20015} executed. 0.525365 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     ) 
    AND is_deleted = 0
2019-08-04 17:54:55,138 DEBUG {conn-10005, pstmt-20015, rs-50039} open
2019-08-04 17:54:55,138 DEBUG {conn-10005, pstmt-20015, rs-50039} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:54:55,138 DEBUG {conn-10005, pstmt-20015, rs-50039} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 17:54:55,138 DEBUG {conn-10005, pstmt-20015, rs-50039} closed
2019-08-04 17:54:55,138 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-04 17:54:55,138 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:55,138 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:55,138 DEBUG {conn-10005, pstmt-20016} Parameters : [57]
2019-08-04 17:54:55,138 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER]
2019-08-04 17:54:55,139 DEBUG {conn-10005, pstmt-20016} executed. 0.696032 millis. select count(*)
        from tb_blog
        where  blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
        AND blog_status =1 AND is_deleted=0
2019-08-04 17:54:55,139 DEBUG {conn-10005, pstmt-20016, rs-50040} open
2019-08-04 17:54:55,139 DEBUG {conn-10005, pstmt-20016, rs-50040} Header: [count(*)]
2019-08-04 17:54:55,139 DEBUG {conn-10005, pstmt-20016, rs-50040} Result: [1]
2019-08-04 17:54:55,139 DEBUG {conn-10005, pstmt-20016, rs-50040} closed
2019-08-04 17:54:55,139 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-04 17:54:55,139 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:55,140 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:55,140 DEBUG {conn-10005, pstmt-20009} Parameters : [9]
2019-08-04 17:54:55,140 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20009} executed. 0.539245 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20009, rs-50041} open
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20009, rs-50041} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20009, rs-50041} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 145, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20009, rs-50041} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20009, rs-50041} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20009, rs-50041} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20009, rs-50041} closed
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 17:54:55,141 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:55,141 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20010} executed. 0.551068 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20010, rs-50042} open
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20010, rs-50042} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20010, rs-50042} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20010, rs-50042} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 145, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20010, rs-50042} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20010, rs-50042} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20010, rs-50042} closed
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 17:54:55,141 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:55,141 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20011} executed. 0.662104 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20011, rs-50043} open
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20011, rs-50043} Header: [tag_id, tag_count, tag_name]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [66, 1, Spring]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [67, 1, SpringMVC]
2019-08-04 17:54:55,141 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [68, 1, MyBatis]
2019-08-04 17:54:55,145 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [69, 1, easyUI]
2019-08-04 17:54:55,145 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [127, 1, 目录]
2019-08-04 17:54:55,145 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [128, 1, AdminLte3]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [130, 1, SpringBoot]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [131, 1, 入门教程]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [132, 1, 实战教程]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20011, rs-50043} Result: [133, 1, spring-boot企业级开发]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20011, rs-50043} closed
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 17:54:55,146 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:55,146 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005} executed. 0.409703 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} open
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005, rs-50044} closed
2019-08-04 17:54:55,146 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:54:55,146 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:57,028 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:57,028 DEBUG {conn-10005, pstmt-20000} Parameters : [1]
2019-08-04 17:54:57,028 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:54:57,028 DEBUG {conn-10005, pstmt-20000} executed. 0.621494 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:54:57,028 DEBUG {conn-10005, pstmt-20000, rs-50045} open
2019-08-04 17:54:57,028 DEBUG {conn-10005, pstmt-20000, rs-50045} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:54:57,029 DEBUG {conn-10005, pstmt-20000, rs-50045} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 258, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, , ## About me

我是十三，一名Java开发者，技术一般，经历平平，但是也一直渴望进步，同时也努力活着，为了人生不留遗憾，也希望能够一直做着自己喜欢的事情，得闲时分享心得、分享一些浅薄的经验，等以后老得不能再老了，就说故事已经讲完了,不去奢求圆满。

相信浏览这段话的你也知道，学习是一件极其枯燥而无聊的过程，甚至有时候显得很无助，我也想告诉你，成长就是这样一件残酷的事情，任何成功都不是一蹴而就，需要坚持、需要付出、需要你的毅力，短期可能看不到收获，因为破茧成蝶所耗费的时间不是一天。

## Contact

- 我的邮箱：2449207463@qq.com
- QQ技术交流群：796794009
- 我的网站：http://13blog.site

## Quote

- Steve Jobs

> Stay hungry,Stay foolish

- Kahlil Gibran

>The FIRST TIME WHEN I saw her being meek that she might attain height.<br>
The SECOND TIME WHEN I saw her limping BEFORE the crippled.<br>
The third TIME WHEN she was given TO choose BETWEEN the hard AND the easy, AND she chose the easy.<br>
The fourth TIME WHEN she COMMITTED a wrong, AND comforted herself that others also COMMIT wrong.<br>
The fifth TIME WHEN she forbore FOR weakness, AND attributed her patience TO strength.<br>
The sixth TIME WHEN she despised the ugliness of a face, AND knew NOT that it was ONE of her own masks.<br>
AND the seventh TIME WHEN she sang a song of praise, AND deemed it a virtue.]
2019-08-04 17:54:57,029 DEBUG {conn-10005, pstmt-20000, rs-50045} closed
2019-08-04 17:54:57,029 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:54:57,030 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:57,030 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:57,030 DEBUG {conn-10005, pstmt-20001} Parameters : [我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 259, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, , 1]
2019-08-04 17:54:57,030 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:54:57,038 DEBUG {conn-10005, pstmt-20001} executed. 7.904641 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:54:57,038 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:54:57,038 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:57,038 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:57,038 DEBUG {conn-10005, pstmt-20002} Parameters : [20]
2019-08-04 17:54:57,038 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:54:57,041 DEBUG {conn-10005, pstmt-20002} executed. 0.508916 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:54:57,041 DEBUG {conn-10005, pstmt-20002, rs-50046} open
2019-08-04 17:54:57,041 DEBUG {conn-10005, pstmt-20002, rs-50046} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:54:57,041 DEBUG {conn-10005, pstmt-20002, rs-50046} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 17:54:57,041 DEBUG {conn-10005, pstmt-20002, rs-50046} closed
2019-08-04 17:54:57,041 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:54:57,041 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:57,041 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:57,041 DEBUG {conn-10005, pstmt-20003} Parameters : [1, 1]
2019-08-04 17:54:57,041 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20003} executed. 0.410216 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20003, rs-50047} open
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20003, rs-50047} Header: [count(*)]
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20003, rs-50047} Result: [0]
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20003, rs-50047} closed
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:54:57,042 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:57,042 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20004} Parameters : [1, 1, 0, 8]
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20004} executed. 0.497606 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20004, rs-50048} open
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20004, rs-50048} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20004, rs-50048} closed
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:54:57,042 DEBUG {conn-10005} pool-recycle
2019-08-04 17:54:57,042 DEBUG {conn-10005} pool-connect
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:54:57,042 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005} executed. 0.416385 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} open
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005, rs-50049} closed
2019-08-04 17:54:57,044 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:54:57,044 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:19,484 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:19,485 DEBUG {conn-10005, pstmt-20018} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_sub_url = ? and is_deleted = 0 limit 1
2019-08-04 17:55:19,486 DEBUG {conn-10005, pstmt-20018} Parameters : [about]
2019-08-04 17:55:19,486 DEBUG {conn-10005, pstmt-20018} Types : [VARCHAR]
2019-08-04 17:55:19,487 DEBUG {conn-10005, pstmt-20018} executed. 1.048161 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_sub_url = ? and is_deleted = 0 limit 1
2019-08-04 17:55:19,487 DEBUG {conn-10005, pstmt-20018, rs-50050} open
2019-08-04 17:55:19,487 DEBUG {conn-10005, pstmt-20018, rs-50050} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:55:19,488 DEBUG {conn-10005, pstmt-20018, rs-50050} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 259, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, , ## About me

我是十三，一名Java开发者，技术一般，经历平平，但是也一直渴望进步，同时也努力活着，为了人生不留遗憾，也希望能够一直做着自己喜欢的事情，得闲时分享心得、分享一些浅薄的经验，等以后老得不能再老了，就说故事已经讲完了,不去奢求圆满。

相信浏览这段话的你也知道，学习是一件极其枯燥而无聊的过程，甚至有时候显得很无助，我也想告诉你，成长就是这样一件残酷的事情，任何成功都不是一蹴而就，需要坚持、需要付出、需要你的毅力，短期可能看不到收获，因为破茧成蝶所耗费的时间不是一天。

## Contact

- 我的邮箱：2449207463@qq.com
- QQ技术交流群：796794009
- 我的网站：http://13blog.site

## Quote

- Steve Jobs

> Stay hungry,Stay foolish

- Kahlil Gibran

>The FIRST TIME WHEN I saw her being meek that she might attain height.<br>
The SECOND TIME WHEN I saw her limping BEFORE the crippled.<br>
The third TIME WHEN she was given TO choose BETWEEN the hard AND the easy, AND she chose the easy.<br>
The fourth TIME WHEN she COMMITTED a wrong, AND comforted herself that others also COMMIT wrong.<br>
The fifth TIME WHEN she forbore FOR weakness, AND attributed her patience TO strength.<br>
The sixth TIME WHEN she despised the ugliness of a face, AND knew NOT that it was ONE of her own masks.<br>
AND the seventh TIME WHEN she sang a song of praise, AND deemed it a virtue.]
2019-08-04 17:55:19,488 DEBUG {conn-10005, pstmt-20018, rs-50050} closed
2019-08-04 17:55:19,488 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-04 17:55:19,488 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:19,489 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:19,489 DEBUG {conn-10005, pstmt-20001} Parameters : [我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 260, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, , 1]
2019-08-04 17:55:19,489 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:55:19,494 DEBUG {conn-10005, pstmt-20001} executed. 5.067051 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:55:19,494 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:55:19,495 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:19,496 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:19,496 DEBUG {conn-10005, pstmt-20002} Parameters : [20]
2019-08-04 17:55:19,496 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:55:19,496 DEBUG {conn-10005, pstmt-20002} executed. 0.820947 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:55:19,496 DEBUG {conn-10005, pstmt-20002, rs-50051} open
2019-08-04 17:55:19,496 DEBUG {conn-10005, pstmt-20002, rs-50051} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:55:19,496 DEBUG {conn-10005, pstmt-20002, rs-50051} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 17:55:19,497 DEBUG {conn-10005, pstmt-20002, rs-50051} closed
2019-08-04 17:55:19,497 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:55:19,497 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:19,497 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:19,497 DEBUG {conn-10005, pstmt-20003} Parameters : [1, 1]
2019-08-04 17:55:19,497 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:55:19,499 DEBUG {conn-10005, pstmt-20003} executed. 0.631775 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:55:19,499 DEBUG {conn-10005, pstmt-20003, rs-50052} open
2019-08-04 17:55:19,499 DEBUG {conn-10005, pstmt-20003, rs-50052} Header: [count(*)]
2019-08-04 17:55:19,499 DEBUG {conn-10005, pstmt-20003, rs-50052} Result: [0]
2019-08-04 17:55:19,499 DEBUG {conn-10005, pstmt-20003, rs-50052} closed
2019-08-04 17:55:19,499 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:55:19,499 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:19,499 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:19,499 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:55:19,499 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:55:19,500 DEBUG {conn-10005, pstmt-20005} executed. 0.524337 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:55:19,500 DEBUG {conn-10005, pstmt-20005, rs-50053} open
2019-08-04 17:55:19,500 DEBUG {conn-10005, pstmt-20005, rs-50053} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:55:19,500 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:19,500 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:19,500 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:19,500 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:19,501 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:19,501 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:19,501 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:19,501 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:19,501 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:19,501 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:19,501 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:19,501 DEBUG {conn-10005, pstmt-20005, rs-50053} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:19,501 DEBUG {conn-10005, pstmt-20005, rs-50053} closed
2019-08-04 17:55:19,501 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:55:19,501 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:24,013 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:24,013 DEBUG {conn-10005, pstmt-20006} Parameters : [1, 0, 8]
2019-08-04 17:55:24,013 DEBUG {conn-10005, pstmt-20006} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 17:55:24,013 DEBUG {conn-10005, pstmt-20006} executed. 0.704257 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:55:24,013 DEBUG {conn-10005, pstmt-20006, rs-50054} open
2019-08-04 17:55:24,013 DEBUG {conn-10005, pstmt-20006, rs-50054} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:55:24,013 DEBUG {conn-10005, pstmt-20006, rs-50054} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 145, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:55:24,013 DEBUG {conn-10005, pstmt-20006, rs-50054} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:55:24,013 DEBUG {conn-10005, pstmt-20006, rs-50054} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:55:24,013 DEBUG {conn-10005, pstmt-20006, rs-50054} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 260, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:55:24,013 DEBUG {conn-10005, pstmt-20006, rs-50054} closed
2019-08-04 17:55:24,013 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 17:55:24,013 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:24,017 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:24,017 DEBUG {conn-10005, pstmt-20007} Parameters : [24, 22, 24, 20]
2019-08-04 17:55:24,017 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER, INTEGER]
2019-08-04 17:55:24,018 DEBUG {conn-10005, pstmt-20007} executed. 0.740241 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 17:55:24,018 DEBUG {conn-10005, pstmt-20007, rs-50055} open
2019-08-04 17:55:24,018 DEBUG {conn-10005, pstmt-20007, rs-50055} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:55:24,018 DEBUG {conn-10005, pstmt-20007, rs-50055} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 17:55:24,018 DEBUG {conn-10005, pstmt-20007, rs-50055} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:55:24,018 DEBUG {conn-10005, pstmt-20007, rs-50055} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20007, rs-50055} closed
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-04 17:55:24,019 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:24,019 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20008} Parameters : [1]
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER]
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20008} executed. 0.615839 millis. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20008, rs-50056} open
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20008, rs-50056} Header: [count(*)]
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20008, rs-50056} Result: [4]
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20008, rs-50056} closed
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-04 17:55:24,019 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:24,019 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20009} Parameters : [9]
2019-08-04 17:55:24,019 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 17:55:24,022 DEBUG {conn-10005, pstmt-20009} executed. 0.721735 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:55:24,022 DEBUG {conn-10005, pstmt-20009, rs-50057} open
2019-08-04 17:55:24,022 DEBUG {conn-10005, pstmt-20009, rs-50057} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:55:24,022 DEBUG {conn-10005, pstmt-20009, rs-50057} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 145, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:55:24,022 DEBUG {conn-10005, pstmt-20009, rs-50057} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:55:24,022 DEBUG {conn-10005, pstmt-20009, rs-50057} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:55:24,023 DEBUG {conn-10005, pstmt-20009, rs-50057} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 260, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:55:24,023 DEBUG {conn-10005, pstmt-20009, rs-50057} closed
2019-08-04 17:55:24,023 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 17:55:24,023 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:24,023 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:24,023 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 17:55:24,023 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 17:55:24,025 DEBUG {conn-10005, pstmt-20010} executed. 0.750522 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:55:24,025 DEBUG {conn-10005, pstmt-20010, rs-50058} open
2019-08-04 17:55:24,025 DEBUG {conn-10005, pstmt-20010, rs-50058} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:55:24,025 DEBUG {conn-10005, pstmt-20010, rs-50058} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 260, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:55:24,025 DEBUG {conn-10005, pstmt-20010, rs-50058} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 145, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:55:24,025 DEBUG {conn-10005, pstmt-20010, rs-50058} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:55:24,025 DEBUG {conn-10005, pstmt-20010, rs-50058} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:55:24,025 DEBUG {conn-10005, pstmt-20010, rs-50058} closed
2019-08-04 17:55:24,025 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 17:55:24,025 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:24,025 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:24,025 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-04 17:55:24,025 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-04 17:55:24,027 DEBUG {conn-10005, pstmt-20011} executed. 1.221912 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:55:24,027 DEBUG {conn-10005, pstmt-20011, rs-50059} open
2019-08-04 17:55:24,027 DEBUG {conn-10005, pstmt-20011, rs-50059} Header: [tag_id, tag_count, tag_name]
2019-08-04 17:55:24,027 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 17:55:24,027 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 17:55:24,027 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [66, 1, Spring]
2019-08-04 17:55:24,027 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [67, 1, SpringMVC]
2019-08-04 17:55:24,027 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [68, 1, MyBatis]
2019-08-04 17:55:24,027 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [69, 1, easyUI]
2019-08-04 17:55:24,027 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [127, 1, 目录]
2019-08-04 17:55:24,028 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [128, 1, AdminLte3]
2019-08-04 17:55:24,028 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [130, 1, SpringBoot]
2019-08-04 17:55:24,028 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [131, 1, 入门教程]
2019-08-04 17:55:24,028 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [132, 1, 实战教程]
2019-08-04 17:55:24,028 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [133, 1, spring-boot企业级开发]
2019-08-04 17:55:24,028 DEBUG {conn-10005, pstmt-20011, rs-50059} closed
2019-08-04 17:55:24,028 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 17:55:24,028 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:24,028 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:24,028 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:55:24,029 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:55:24,029 DEBUG {conn-10005, pstmt-20005} executed. 0.545414 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:55:24,029 DEBUG {conn-10005, pstmt-20005, rs-50060} open
2019-08-04 17:55:24,029 DEBUG {conn-10005, pstmt-20005, rs-50060} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:55:24,029 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:24,029 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:24,029 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:24,029 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:24,030 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:24,030 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:24,030 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:24,030 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:24,030 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:24,030 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:24,030 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:24,030 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:24,030 DEBUG {conn-10005, pstmt-20005, rs-50060} closed
2019-08-04 17:55:24,031 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:55:24,031 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:24,429 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:24,430 DEBUG {conn-10005, pstmt-20012} Parameters : [anonymousUser]
2019-08-04 17:55:24,430 DEBUG {conn-10005, pstmt-20012} Types : [VARCHAR]
2019-08-04 17:55:24,430 DEBUG {conn-10005, pstmt-20012, rs-50061} query executed. 0.704771 millis. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 17:55:24,430 DEBUG {conn-10005, pstmt-20012, rs-50061} open
2019-08-04 17:55:24,430 DEBUG {conn-10005, pstmt-20012, rs-50061} Header: [userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime]
2019-08-04 17:55:24,430 DEBUG {conn-10005, pstmt-20012, rs-50061} closed
2019-08-04 17:55:24,431 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-04 17:55:24,431 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:27,083 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:27,083 DEBUG {conn-10005, pstmt-20000} Parameters : [3]
2019-08-04 17:55:27,083 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-04 17:55:27,083 DEBUG {conn-10005, pstmt-20000} executed. 0.642056 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-04 17:55:27,084 DEBUG {conn-10005, pstmt-20000, rs-50062} open
2019-08-04 17:55:27,084 DEBUG {conn-10005, pstmt-20000, rs-50062} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-04 17:55:27,084 DEBUG {conn-10005, pstmt-20000, rs-50062} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 137, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , ## 实战篇（付费教程）

- [SSM 搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)
- [导读：自己动手实现 JavaWeb 后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db47e9bcda53d07056f5f)
- [第01课：Spring MVC+ Spring + Mybatis “三大框架”介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4db5b89bcda53d070590de)
- [第02课：前期准备工作及基础环境搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4eb8e701d18a561f341b72)
- [第03课：三大框架的整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4ee11c01d18a561f342c0f)
- [第04课：Tomcat 8 安装部署及功能改造](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1335dbb1436093a6ca17)
- [第05课：产品设计之搭建精美实用的后台管理系统](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b35dbb1436093a6cc7a)
- [第06课：前端选型 AdminLTE3](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b70dbb1436093a6cc87)
- [第07课：登录模块的系统设计和实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b80dbb1436093a6cc8e)
- [第08课：使用 JqGrid 插件实现分页功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1b92dbb1436093a6cc93)
- [第09课：弹框组件整合——完善添加和修改功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bbddbb1436093a6cc9b)
- [第10课：图片管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bd0dbb1436093a6cca1)
- [第11课：多图上传与大文件分片上传、断点续传](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1bdedbb1436093a6cca2)
- [第12课：文件导入导出功能](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1beddbb1436093a6cca8)
- [第13课：富文本信息管理模块](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c00dbb1436093a6ccae)
- [第14课：SweetAlert 插件整合及搜索功能实现](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c11dbb1436093a6ccb1)
- [第15课：项目发布——Linux 命令及发布流程](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c21dbb1436093a6ccb6)
- [第16课：项目优化篇之日志输出](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c30dbb1436093a6ccbb)
- [第17课：项目优化之单元测试](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c3fdbb1436093a6ccc1)
- [第18课：项目优化之数据库连接池](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c50dbb1436093a6ccca)
- [第19课：项目优化之 Druid 整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c65dbb1436093a6cccd)
- [第20课：项目优化之缓存整合](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c7cdbb1436093a6ccd6)
- [第21课：网站架构演进及 Nginx 介绍](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c8bdbb1436093a6ccda)
- [第22课：Nginx + Tomcat 集群搭建](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1c9ddbb1436093a6cce2)
- [第23课：Nginx 动静分离](https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9/topic/5b4f1cb7dbb1436093a6cceb)

## 进阶篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（一）设计一套好的RESTful API](http://www.cnblogs.com/han-1034683568/p/7196345.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（二）RESTful API实战笔记(接口设计及Java后端实现)](http://www.cnblogs.com/han-1034683568/p/7300547.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（三）使用ajax方法实现form表单的提交](http://www.cnblogs.com/han-1034683568/p/7199168.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（四）RESTful实战(前端代码修改)](http://www.cnblogs.com/han-1034683568/p/7552007.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（五）记录一下从懵懂到理解RESTful的过程](http://www.cnblogs.com/han-1034683568/p/7569870.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（六）一定要RESTful吗？](http://www.cnblogs.com/han-1034683568/p/7663641.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（七）一次线上Mysql数据库崩溃事故的记录](http://www.cnblogs.com/han-1034683568/p/7787659.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（八）线上Mysql数据库崩溃事故的原因和处理](http://www.cnblogs.com/han-1034683568/p/7822237.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（九）Linux下安装redis及redis的常用命令和操作](http://www.cnblogs.com/han-1034683568/p/7862188.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十）easyUI整合KindEditor详细教程](http://www.cnblogs.com/han-1034683568/p/7930542.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十一）redis密码设置、安全设置](http://www.cnblogs.com/han-1034683568/p/7978577.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十二）Spring集成Redis缓存](http://www.cnblogs.com/han-1034683568/p/7994231.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十三）MyBatis+MySQL返回插入的主键id](http://www.cnblogs.com/han-1034683568/p/8305122.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十四）Redis正确的使用姿势](http://www.cnblogs.com/han-1034683568/p/8406497.html)
- [Spring+SpringMVC+MyBatis+easyUI整合进阶篇（十五）阶段总结](http://www.cnblogs.com/han-1034683568/p/9069008.html)


## 优化篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（一）System.out.print与Log](http://www.cnblogs.com/han-1034683568/p/6637914.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（二）Log4j讲解与整合](http://www.cnblogs.com/han-1034683568/p/6641808.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（三）代码测试](http://www.cnblogs.com/han-1034683568/p/6642306.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（四）单元测试实例](http://www.cnblogs.com/han-1034683568/p/6649077.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（五）结合MockMvc进行服务端的单元测试](http://www.cnblogs.com/han-1034683568/p/6653620.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（六）easyUI与富文本编辑器UEditor整合](http://www.cnblogs.com/han-1034683568/p/6664660.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（七）图片上传功能](http://www.cnblogs.com/han-1034683568/p/6692150.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（八）代码优化整理小记及个人吐槽](http://www.cnblogs.com/han-1034683568/p/6706158.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（九）数据层优化-jdbc连接池简述、druid简介](http://www.cnblogs.com/han-1034683568/p/6719298.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十）数据层优化-整合druid](http://www.cnblogs.com/han-1034683568/p/6725191.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十一）数据层优化-druid监控及慢sql记录](http://www.cnblogs.com/han-1034683568/p/6730869.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十二）数据层优化-explain关键字及慢sql优化](http://www.cnblogs.com/han-1034683568/p/6758578.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十三）数据层优化-表规范、索引优化](http://www.cnblogs.com/han-1034683568/p/6768807.html)
- [Spring+SpringMVC+MyBatis+easyUI整合优化篇（十四）谈谈写博客的原因和项目优化](http://www.cnblogs.com/han-1034683568/p/6782019.html)


## 基础篇（免费开源）

- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（一）项目简介](http://www.cnblogs.com/han-1034683568/p/6440090.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（二）牛刀小试](http://www.cnblogs.com/han-1034683568/p/6440157.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（三）搭建步骤](http://www.cnblogs.com/han-1034683568/p/6476827.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（四）代码简化](http://www.cnblogs.com/han-1034683568/p/6476852.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（五）讲一下maven](http://www.cnblogs.com/han-1034683568/p/6486117.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（六）maven整合SSM](http://www.cnblogs.com/han-1034683568/p/6507186.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（七）JDBC url的连接参数](http://www.cnblogs.com/han-1034683568/p/6512215.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（八）mysql中文查询bug修复](http://www.cnblogs.com/han-1034683568/p/6517344.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（九）版本控制](http://www.cnblogs.com/han-1034683568/p/6540079.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十）SVN搭建](http://www.cnblogs.com/han-1034683568/p/6545751.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十一）SVN服务器进阶](http://www.cnblogs.com/han-1034683568/p/6551498.html)
- [Spring+SpringMVC+MyBatis+easyUI整合基础篇（十二）阶段总结](http://www.cnblogs.com/han-1034683568/p/6562092.html)


推荐一下自己的达人课，感兴趣的朋友可以看一下：[SSM搭建精美实用的管理系统](http://gitbook.cn/m/mazi/comp/column?columnId=5b4dae389bcda53d07056bc9&sceneId=22778a708b0f11e8974b497483da0812)]
2019-08-04 17:55:27,084 DEBUG {conn-10005, pstmt-20000, rs-50062} closed
2019-08-04 17:55:27,084 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-04 17:55:27,084 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:27,084 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:27,084 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 138, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, , 3]
2019-08-04 17:55:27,084 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-04 17:55:27,093 DEBUG {conn-10005, pstmt-20001} executed. 8.578054 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
      blog_vote_size=? ,
       blog_summary=?
    where blog_id = ?
2019-08-04 17:55:27,093 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-04 17:55:27,093 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:27,101 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:27,101 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-04 17:55:27,101 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-04 17:55:27,101 DEBUG {conn-10005, pstmt-20002} executed. 0.594249 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20002, rs-50063} open
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20002, rs-50063} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20002, rs-50063} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20002, rs-50063} closed
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-04 17:55:27,102 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:27,102 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20003} Parameters : [3, 1]
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20003} executed. 0.504289 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20003, rs-50064} open
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20003, rs-50064} Header: [count(*)]
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20003, rs-50064} Result: [0]
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20003, rs-50064} closed
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-04 17:55:27,102 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:27,102 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20004} Parameters : [3, 1, 0, 8]
2019-08-04 17:55:27,102 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-04 17:55:27,105 DEBUG {conn-10005, pstmt-20004} executed. 0.480642 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-04 17:55:27,105 DEBUG {conn-10005, pstmt-20004, rs-50065} open
2019-08-04 17:55:27,105 DEBUG {conn-10005, pstmt-20004, rs-50065} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-04 17:55:27,105 DEBUG {conn-10005, pstmt-20004, rs-50065} closed
2019-08-04 17:55:27,105 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-04 17:55:27,105 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:27,105 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:27,105 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:55:27,105 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005} executed. 0.504289 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} open
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:27,106 DEBUG {conn-10005, pstmt-20005, rs-50066} closed
2019-08-04 17:55:27,107 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:55:27,107 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:44,119 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:44,119 DEBUG {conn-10005, pstmt-20006} Parameters : [1, 0, 8]
2019-08-04 17:55:44,119 DEBUG {conn-10005, pstmt-20006} Types : [INTEGER, INTEGER, INTEGER]
2019-08-04 17:55:44,131 DEBUG {conn-10005, pstmt-20006} executed. 11.792961 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-04 17:55:44,132 DEBUG {conn-10005, pstmt-20006, rs-50067} open
2019-08-04 17:55:44,132 DEBUG {conn-10005, pstmt-20006, rs-50067} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:55:44,132 DEBUG {conn-10005, pstmt-20006, rs-50067} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 145, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:55:44,132 DEBUG {conn-10005, pstmt-20006, rs-50067} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 138, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:55:44,132 DEBUG {conn-10005, pstmt-20006, rs-50067} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:55:44,132 DEBUG {conn-10005, pstmt-20006, rs-50067} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 260, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:55:44,133 DEBUG {conn-10005, pstmt-20006, rs-50067} closed
2019-08-04 17:55:44,133 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-04 17:55:44,133 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:44,133 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:44,133 DEBUG {conn-10005, pstmt-20007} Parameters : [24, 22, 24, 20]
2019-08-04 17:55:44,133 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER, INTEGER, INTEGER]
2019-08-04 17:55:44,134 DEBUG {conn-10005, pstmt-20007} executed. 0.699631 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     , ?
     , ?
     , ?
     ) 
    AND is_deleted = 0
2019-08-04 17:55:44,134 DEBUG {conn-10005, pstmt-20007, rs-50068} open
2019-08-04 17:55:44,134 DEBUG {conn-10005, pstmt-20007, rs-50068} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-04 17:55:44,134 DEBUG {conn-10005, pstmt-20007, rs-50068} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-04 17:55:44,134 DEBUG {conn-10005, pstmt-20007, rs-50068} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-04 17:55:44,134 DEBUG {conn-10005, pstmt-20007, rs-50068} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 22, 0, 2018-11-12 18:43:21.0]
2019-08-04 17:55:44,134 DEBUG {conn-10005, pstmt-20007, rs-50068} closed
2019-08-04 17:55:44,135 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-04 17:55:44,135 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:44,135 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:44,135 DEBUG {conn-10005, pstmt-20008} Parameters : [1]
2019-08-04 17:55:44,135 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER]
2019-08-04 17:55:44,136 DEBUG {conn-10005, pstmt-20008} executed. 0.567518 millis. select count(*) from tb_blog
    where is_deleted=0
     
     
      AND blog_status = ?
2019-08-04 17:55:44,136 DEBUG {conn-10005, pstmt-20008, rs-50069} open
2019-08-04 17:55:44,136 DEBUG {conn-10005, pstmt-20008, rs-50069} Header: [count(*)]
2019-08-04 17:55:44,136 DEBUG {conn-10005, pstmt-20008, rs-50069} Result: [4]
2019-08-04 17:55:44,136 DEBUG {conn-10005, pstmt-20008, rs-50069} closed
2019-08-04 17:55:44,136 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-04 17:55:44,136 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:44,137 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:44,137 DEBUG {conn-10005, pstmt-20009} Parameters : [9]
2019-08-04 17:55:44,137 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-04 17:55:44,137 DEBUG {conn-10005, pstmt-20009} executed. 0.530506 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-04 17:55:44,137 DEBUG {conn-10005, pstmt-20009, rs-50070} open
2019-08-04 17:55:44,137 DEBUG {conn-10005, pstmt-20009, rs-50070} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:55:44,137 DEBUG {conn-10005, pstmt-20009, rs-50070} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 145, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:55:44,138 DEBUG {conn-10005, pstmt-20009, rs-50070} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 138, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:55:44,138 DEBUG {conn-10005, pstmt-20009, rs-50070} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:55:44,138 DEBUG {conn-10005, pstmt-20009, rs-50070} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 260, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:55:44,138 DEBUG {conn-10005, pstmt-20009, rs-50070} closed
2019-08-04 17:55:44,138 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-04 17:55:44,138 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:44,139 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:44,139 DEBUG {conn-10005, pstmt-20010} Parameters : [9]
2019-08-04 17:55:44,139 DEBUG {conn-10005, pstmt-20010} Types : [INTEGER]
2019-08-04 17:55:44,139 DEBUG {conn-10005, pstmt-20010} executed. 0.68318 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-04 17:55:44,140 DEBUG {conn-10005, pstmt-20010, rs-50071} open
2019-08-04 17:55:44,140 DEBUG {conn-10005, pstmt-20010, rs-50071} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-04 17:55:44,140 DEBUG {conn-10005, pstmt-20010, rs-50071} Result: [1, 我是十三, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 260, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, ]
2019-08-04 17:55:44,140 DEBUG {conn-10005, pstmt-20010, rs-50071} Result: [4, SpringBoot系列教程, , /admin/dist/img/rand/29.jpg, 24, 日常随笔, SpringBoot,入门教程,实战教程,spring-boot企业级开发, 1, 145, 0, 0, 2019-05-13 17:58:54.0, 2019-05-13 17:58:54.0, 1, ]
2019-08-04 17:55:44,140 DEBUG {conn-10005, pstmt-20010, rs-50071} Result: [3, Spring+SpringMVC+MyBatis整合系列(easyUI、AdminLte3), , /admin/dist/img/rand/36.jpg, 22, SSM整合进阶篇, Spring,SpringMVC,MyBatis,easyUI,AdminLte3, 1, 138, 0, 0, 2019-04-24 23:46:15.0, 2019-04-24 23:46:15.0, 3, ]
2019-08-04 17:55:44,140 DEBUG {conn-10005, pstmt-20010, rs-50071} Result: [2, 文章总目录, , /admin/dist/img/rand/13.jpg, 24, 日常随笔, 目录, 1, 28, 0, 0, 2019-04-24 23:42:23.0, 2019-04-24 23:42:23.0, 2, ]
2019-08-04 17:55:44,140 DEBUG {conn-10005, pstmt-20010, rs-50071} closed
2019-08-04 17:55:44,140 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-04 17:55:44,140 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:44,141 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:44,141 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-04 17:55:44,141 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011} executed. 0.970024 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} open
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Header: [tag_id, tag_count, tag_name]
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [58, 1, 现在这个人就在看这句话]
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [66, 1, Spring]
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [67, 1, SpringMVC]
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [68, 1, MyBatis]
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [69, 1, easyUI]
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [127, 1, 目录]
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [128, 1, AdminLte3]
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [130, 1, SpringBoot]
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [131, 1, 入门教程]
2019-08-04 17:55:44,142 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [132, 1, 实战教程]
2019-08-04 17:55:44,143 DEBUG {conn-10005, pstmt-20011, rs-50072} Result: [133, 1, spring-boot企业级开发]
2019-08-04 17:55:44,143 DEBUG {conn-10005, pstmt-20011, rs-50072} closed
2019-08-04 17:55:44,143 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-04 17:55:44,143 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:44,143 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:44,143 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-04 17:55:44,143 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005} executed. 0.600418 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} open
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Header: [config_name, config_value, create_time, update_time]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005, rs-50073} closed
2019-08-04 17:55:44,144 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-04 17:55:44,144 DEBUG {conn-10005} pool-recycle
2019-08-04 17:55:44,557 DEBUG {conn-10005} pool-connect
2019-08-04 17:55:44,558 DEBUG {conn-10005, pstmt-20012} Parameters : [anonymousUser]
2019-08-04 17:55:44,558 DEBUG {conn-10005, pstmt-20012} Types : [VARCHAR]
2019-08-04 17:55:44,558 DEBUG {conn-10005, pstmt-20012, rs-50074} query executed. 0.831743 millis. select userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime from tb_UserConnection where userId = ? order by providerId, rank
2019-08-04 17:55:44,558 DEBUG {conn-10005, pstmt-20012, rs-50074} open
2019-08-04 17:55:44,559 DEBUG {conn-10005, pstmt-20012, rs-50074} Header: [userId, providerId, providerUserId, displayName, profileUrl, imageUrl, accessToken, secret, refreshToken, expireTime]
2019-08-04 17:55:44,559 DEBUG {conn-10005, pstmt-20012, rs-50074} closed
2019-08-04 17:55:44,559 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-04 17:55:44,559 DEBUG {conn-10005} pool-recycle
