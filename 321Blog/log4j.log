2019-08-15 00:20:35,235 DEBUG {conn-10005} pool-connect
2019-08-15 00:20:35,239 DEBUG {conn-10005} setAutoCommit false
2019-08-15 00:20:35,415 DEBUG {conn-10005, pstmt-20000} created. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:20:35,422 DEBUG {conn-10005, pstmt-20000} Parameters : [129680565, user3, $2a$10$KmqrcV5FVe5.EeXwn9Dq1ebBLUPMBv0AU8TscvQ0Ow7iQgazVfuUG, user, 7235235@163.com, 17388657185]
2019-08-15 00:20:35,422 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
2019-08-15 00:20:35,423 DEBUG {conn-10005, pstmt-20000} executed. 4.078003 millis. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:20:35,423 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 00:20:35,425 DEBUG {conn-10005, pstmt-20001} created. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:20:35,425 DEBUG {conn-10005, pstmt-20001} Parameters : [129680565, 2]
2019-08-15 00:20:35,425 DEBUG {conn-10005, pstmt-20001} Types : [BIGINT, BIGINT]
2019-08-15 00:20:35,426 DEBUG {conn-10005, pstmt-20001} executed. 1.036336 millis. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:20:35,426 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 00:20:35,432 DEBUG {conn-10005} commited
2019-08-15 00:20:35,432 DEBUG {conn-10005} setAutoCommit true
2019-08-15 00:20:35,434 DEBUG {conn-10005} pool-recycle
2019-08-15 00:21:55,308 DEBUG {conn-10001,procId-1258} connected
2019-08-15 00:21:55,314 DEBUG {conn-10002,procId-1259} connected
2019-08-15 00:21:55,319 DEBUG {conn-10003,procId-1260} connected
2019-08-15 00:21:55,324 DEBUG {conn-10004,procId-1261} connected
2019-08-15 00:21:55,328 DEBUG {conn-10005,procId-1262} connected
2019-08-15 00:21:55,331 DEBUG {conn-10005} pool-connect
2019-08-15 00:21:55,332 DEBUG {conn-10005} pool-recycle
2019-08-15 00:21:55,342 DEBUG {conn-10005} pool-connect
2019-08-15 00:21:55,344 DEBUG {conn-10005} pool-recycle
2019-08-15 00:21:55,640 DEBUG {conn-10005} pool-connect
2019-08-15 00:21:55,674 DEBUG {conn-10005} pool-recycle
2019-08-15 00:21:56,197 INFO [Strobe] modules [], plugins [], sites []
2019-08-15 00:21:56,205 DEBUG [Strobe] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 00:21:56,214 DEBUG [Strobe] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 00:21:56,222 DEBUG [Strobe] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:21:56,225 DEBUG [Strobe] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 00:21:56,225 DEBUG [Strobe] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 00:21:56,225 DEBUG [Strobe] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:21:56,225 DEBUG [Strobe] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 00:21:56,225 DEBUG [Strobe] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 00:21:56,225 DEBUG [Strobe] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:21:56,225 DEBUG [Strobe] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 00:21:56,225 DEBUG [Strobe] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:21:56,225 DEBUG [Strobe] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:21:56,226 DEBUG [Strobe] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 00:21:56,226 DEBUG [Strobe] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 00:21:56,226 DEBUG [Strobe] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 00:21:56,226 DEBUG [Strobe] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:21:57,386 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 00:21:57,401 DEBUG using gathering [true]
2019-08-15 00:21:57,418 DEBUG [Strobe] node_sampler_interval[5s]
2019-08-15 00:21:57,428 DEBUG Using select timeout of 500
2019-08-15 00:21:57,428 DEBUG Epoll-bug workaround enabled = false
2019-08-15 00:21:57,465 DEBUG [Strobe] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:21:57,485 DEBUG [Strobe] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:21:57,519 DEBUG [Strobe] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:21:58,081 DEBUG {conn-10005} pool-connect
2019-08-15 00:21:58,081 DEBUG {conn-10005} pool-recycle
2019-08-15 00:22:52,871 DEBUG {conn-10005} pool-connect
2019-08-15 00:22:52,872 DEBUG {conn-10005} setAutoCommit false
2019-08-15 00:22:53,046 DEBUG {conn-10005, pstmt-20000} created. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:22:53,052 DEBUG {conn-10005, pstmt-20000} Parameters : [176101646, test2, $2a$10$dyGn9.BvAou08Je624EFDOW4dAN1ypH.eeg1gBnWZu3SbRiTkuPBa, 小白, 13336470132@163.com, 17388657185]
2019-08-15 00:22:53,052 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
2019-08-15 00:22:53,054 DEBUG {conn-10005, pstmt-20000} executed. 3.854389 millis. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:22:53,054 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 00:22:53,056 DEBUG {conn-10005, pstmt-20001} created. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:22:53,056 DEBUG {conn-10005, pstmt-20001} Parameters : [176101646, 2]
2019-08-15 00:22:53,056 DEBUG {conn-10005, pstmt-20001} Types : [BIGINT, BIGINT]
2019-08-15 00:22:53,057 DEBUG {conn-10005, pstmt-20001} executed. 0.913991 millis. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:22:53,057 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 00:22:53,067 DEBUG {conn-10005} commited
2019-08-15 00:22:53,067 DEBUG {conn-10005} setAutoCommit true
2019-08-15 00:22:53,068 DEBUG {conn-10005} pool-recycle
2019-08-15 00:33:34,307 DEBUG {conn-10001,procId-1263} connected
2019-08-15 00:33:34,315 DEBUG {conn-10002,procId-1264} connected
2019-08-15 00:33:34,320 DEBUG {conn-10003,procId-1265} connected
2019-08-15 00:33:34,325 DEBUG {conn-10004,procId-1266} connected
2019-08-15 00:33:34,329 DEBUG {conn-10005,procId-1267} connected
2019-08-15 00:33:34,335 DEBUG {conn-10005} pool-connect
2019-08-15 00:33:34,337 DEBUG {conn-10005} pool-recycle
2019-08-15 00:33:34,344 DEBUG {conn-10005} pool-connect
2019-08-15 00:33:34,346 DEBUG {conn-10005} pool-recycle
2019-08-15 00:33:34,677 DEBUG {conn-10005} pool-connect
2019-08-15 00:33:34,714 DEBUG {conn-10005} pool-recycle
2019-08-15 00:33:35,305 INFO [Reject] modules [], plugins [], sites []
2019-08-15 00:33:35,315 DEBUG [Reject] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 00:33:35,328 DEBUG [Reject] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 00:33:35,338 DEBUG [Reject] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:33:35,339 DEBUG [Reject] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 00:33:35,339 DEBUG [Reject] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 00:33:35,339 DEBUG [Reject] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:33:35,339 DEBUG [Reject] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 00:33:35,339 DEBUG [Reject] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 00:33:35,339 DEBUG [Reject] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:33:35,339 DEBUG [Reject] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 00:33:35,339 DEBUG [Reject] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:33:35,339 DEBUG [Reject] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:33:35,340 DEBUG [Reject] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 00:33:35,340 DEBUG [Reject] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 00:33:35,340 DEBUG [Reject] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 00:33:35,340 DEBUG [Reject] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:33:36,613 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 00:33:36,629 DEBUG using gathering [true]
2019-08-15 00:33:36,648 DEBUG [Reject] node_sampler_interval[5s]
2019-08-15 00:33:36,658 DEBUG Using select timeout of 500
2019-08-15 00:33:36,658 DEBUG Epoll-bug workaround enabled = false
2019-08-15 00:33:36,696 DEBUG [Reject] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:33:36,717 DEBUG [Reject] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:33:36,743 DEBUG [Reject] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:33:37,336 DEBUG {conn-10005} pool-connect
2019-08-15 00:33:37,336 DEBUG {conn-10005} pool-recycle
2019-08-15 00:34:31,722 DEBUG {conn-10005} pool-connect
2019-08-15 00:34:31,723 DEBUG {conn-10005} setAutoCommit false
2019-08-15 00:34:31,920 DEBUG {conn-10005, pstmt-20000} created. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:34:31,929 DEBUG {conn-10005, pstmt-20000} Parameters : [139743389, xiaomao, $2a$10$a/eB7joUSKqI2Zb4CJHy0esJWXQHvOXe7BiJA9UYeTdMwRwQFDwBi, 小猫, 13336470132@163.com, 17388657185]
2019-08-15 00:34:31,929 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
2019-08-15 00:34:31,932 DEBUG {conn-10005, pstmt-20000} executed. 6.140393 millis. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:34:31,932 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 00:34:31,936 DEBUG {conn-10005, pstmt-20001} created. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:34:31,937 DEBUG {conn-10005, pstmt-20001} Parameters : [139743389, 2]
2019-08-15 00:34:31,937 DEBUG {conn-10005, pstmt-20001} Types : [BIGINT, BIGINT]
2019-08-15 00:34:31,942 DEBUG {conn-10005, pstmt-20001} executed. 5.017696 millis. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:34:31,942 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 00:34:31,944 DEBUG {conn-10005} commited
2019-08-15 00:34:31,945 DEBUG {conn-10005} setAutoCommit true
2019-08-15 00:34:31,946 DEBUG {conn-10005} pool-recycle
2019-08-15 00:43:31,473 DEBUG {conn-10001,procId-1268} connected
2019-08-15 00:43:31,479 DEBUG {conn-10002,procId-1269} connected
2019-08-15 00:43:31,486 DEBUG {conn-10003,procId-1270} connected
2019-08-15 00:43:31,491 DEBUG {conn-10004,procId-1271} connected
2019-08-15 00:43:31,495 DEBUG {conn-10005,procId-1272} connected
2019-08-15 00:43:31,500 DEBUG {conn-10005} pool-connect
2019-08-15 00:43:31,501 DEBUG {conn-10005} pool-recycle
2019-08-15 00:43:31,508 DEBUG {conn-10005} pool-connect
2019-08-15 00:43:31,510 DEBUG {conn-10005} pool-recycle
2019-08-15 00:43:31,839 DEBUG {conn-10005} pool-connect
2019-08-15 00:43:31,875 DEBUG {conn-10005} pool-recycle
2019-08-15 00:43:32,467 INFO [Reeva Payge] modules [], plugins [], sites []
2019-08-15 00:43:32,477 DEBUG [Reeva Payge] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 00:43:32,486 DEBUG [Reeva Payge] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 00:43:32,496 DEBUG [Reeva Payge] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:43:32,497 DEBUG [Reeva Payge] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 00:43:32,497 DEBUG [Reeva Payge] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 00:43:32,498 DEBUG [Reeva Payge] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:43:32,498 DEBUG [Reeva Payge] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 00:43:32,498 DEBUG [Reeva Payge] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 00:43:32,498 DEBUG [Reeva Payge] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:43:32,498 DEBUG [Reeva Payge] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 00:43:32,498 DEBUG [Reeva Payge] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:43:32,498 DEBUG [Reeva Payge] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:43:32,498 DEBUG [Reeva Payge] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 00:43:32,498 DEBUG [Reeva Payge] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 00:43:32,498 DEBUG [Reeva Payge] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 00:43:32,499 DEBUG [Reeva Payge] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:43:33,821 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 00:43:33,838 DEBUG using gathering [true]
2019-08-15 00:43:33,857 DEBUG [Reeva Payge] node_sampler_interval[5s]
2019-08-15 00:43:33,869 DEBUG Using select timeout of 500
2019-08-15 00:43:33,869 DEBUG Epoll-bug workaround enabled = false
2019-08-15 00:43:33,907 DEBUG [Reeva Payge] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:43:33,929 DEBUG [Reeva Payge] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:43:33,964 DEBUG [Reeva Payge] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:43:34,632 DEBUG {conn-10005} pool-connect
2019-08-15 00:43:34,632 DEBUG {conn-10005} pool-recycle
2019-08-15 00:45:21,522 DEBUG {conn-10005} pool-connect
2019-08-15 00:45:21,523 DEBUG {conn-10005} setAutoCommit false
2019-08-15 00:45:21,720 DEBUG {conn-10005, pstmt-20000} created. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:45:21,726 DEBUG {conn-10005, pstmt-20000} Parameters : [384248648, test3, $2a$10$0.coLsRbnNOcNeTr5EdYJ.Mx1t662vTd.8YOICt72zuWQtUsxnpqm, 小狗狗, 13336470132@163.com, 17388657185]
2019-08-15 00:45:21,726 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
2019-08-15 00:45:21,727 DEBUG {conn-10005, pstmt-20000} executed. 4.057955 millis. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:45:21,728 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 00:45:21,730 DEBUG {conn-10005, pstmt-20001} created. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:45:21,731 DEBUG {conn-10005, pstmt-20001} Parameters : [384248648, 2]
2019-08-15 00:45:21,731 DEBUG {conn-10005, pstmt-20001} Types : [BIGINT, BIGINT]
2019-08-15 00:45:21,732 DEBUG {conn-10005, pstmt-20001} executed. 1.09391 millis. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:45:21,732 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 00:45:21,740 DEBUG {conn-10005} commited
2019-08-15 00:45:21,740 DEBUG {conn-10005} setAutoCommit true
2019-08-15 00:45:21,742 DEBUG {conn-10005} pool-recycle
2019-08-15 00:48:30,772 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 00:48:30,820 DEBUG {conn-10005} pool-connect
2019-08-15 00:48:30,848 DEBUG {conn-10005, pstmt-20002} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 00:48:30,849 DEBUG {conn-10005, pstmt-20002} Parameters : [9]
2019-08-15 00:48:30,849 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 00:48:30,850 DEBUG {conn-10005, pstmt-20002} executed. 1.043018 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 00:48:30,853 DEBUG {conn-10005, pstmt-20002, rs-50000} open
2019-08-15 00:48:30,854 DEBUG {conn-10005, pstmt-20002, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:48:30,858 DEBUG {conn-10005, pstmt-20002, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 15, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:48:30,859 DEBUG {conn-10005, pstmt-20002, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:48:30,859 DEBUG {conn-10005, pstmt-20002, rs-50000} closed
2019-08-15 00:48:30,859 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 00:48:30,860 DEBUG {conn-10005} pool-recycle
2019-08-15 00:48:30,866 DEBUG {conn-10005} pool-connect
2019-08-15 00:48:30,867 DEBUG {conn-10005, pstmt-20003} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 00:48:30,867 DEBUG {conn-10005, pstmt-20003} Parameters : [9]
2019-08-15 00:48:30,867 DEBUG {conn-10005, pstmt-20003} Types : [INTEGER]
2019-08-15 00:48:30,868 DEBUG {conn-10005, pstmt-20003} executed. 0.766457 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 00:48:30,868 DEBUG {conn-10005, pstmt-20003, rs-50001} open
2019-08-15 00:48:30,868 DEBUG {conn-10005, pstmt-20003, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:48:30,868 DEBUG {conn-10005, pstmt-20003, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:48:30,868 DEBUG {conn-10005, pstmt-20003, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 15, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:48:30,869 DEBUG {conn-10005, pstmt-20003, rs-50001} closed
2019-08-15 00:48:30,869 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 00:48:30,869 DEBUG {conn-10005} pool-recycle
2019-08-15 00:48:30,869 DEBUG {conn-10005} pool-connect
2019-08-15 00:48:30,873 DEBUG {conn-10005, pstmt-20004} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:48:30,873 DEBUG {conn-10005, pstmt-20004} Parameters : []
2019-08-15 00:48:30,873 DEBUG {conn-10005, pstmt-20004} Types : []
2019-08-15 00:48:30,874 DEBUG {conn-10005, pstmt-20004} executed. 1.222938 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:48:30,874 DEBUG {conn-10005, pstmt-20004, rs-50002} open
2019-08-15 00:48:30,874 DEBUG {conn-10005, pstmt-20004, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 00:48:30,874 DEBUG {conn-10005, pstmt-20004, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 00:48:30,875 DEBUG {conn-10005, pstmt-20004, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 00:48:30,875 DEBUG {conn-10005, pstmt-20004, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 00:48:30,875 DEBUG {conn-10005, pstmt-20004, rs-50002} closed
2019-08-15 00:48:30,875 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 00:48:30,875 DEBUG {conn-10005} pool-recycle
2019-08-15 00:48:30,877 DEBUG {conn-10005} pool-connect
2019-08-15 00:48:30,877 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:48:30,877 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 00:48:30,877 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 00:48:30,878 DEBUG {conn-10005, pstmt-20005} executed. 0.728931 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:48:30,878 DEBUG {conn-10005, pstmt-20005, rs-50003} open
2019-08-15 00:48:30,878 DEBUG {conn-10005, pstmt-20005, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 00:48:30,879 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 00:48:30,879 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 00:48:30,879 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 00:48:30,879 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 00:48:30,879 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 00:48:30,881 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 00:48:30,881 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 00:48:30,881 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 00:48:30,882 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 00:48:30,882 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 00:48:30,882 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 00:48:30,882 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 00:48:30,882 DEBUG {conn-10005, pstmt-20005, rs-50003} closed
2019-08-15 00:48:30,882 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 00:48:30,882 DEBUG {conn-10005} pool-recycle
2019-08-15 00:48:30,915 DEBUG {conn-10005} pool-connect
2019-08-15 00:48:30,915 DEBUG {conn-10005, pstmt-20006} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 00:48:30,915 DEBUG {conn-10005, pstmt-20006} Parameters : [admin]
2019-08-15 00:48:30,916 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR]
2019-08-15 00:48:30,916 DEBUG {conn-10005, pstmt-20006} executed. 0.751035 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 00:48:30,916 DEBUG {conn-10005, pstmt-20006, rs-50004} open
2019-08-15 00:48:30,916 DEBUG {conn-10005, pstmt-20006, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 00:48:30,917 DEBUG {conn-10005, pstmt-20006, rs-50004} closed
2019-08-15 00:48:30,917 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 00:48:30,917 DEBUG {conn-10005} pool-recycle
2019-08-15 00:49:24,505 DEBUG {conn-10001,procId-1273} connected
2019-08-15 00:49:24,514 DEBUG {conn-10002,procId-1274} connected
2019-08-15 00:49:24,519 DEBUG {conn-10003,procId-1275} connected
2019-08-15 00:49:24,523 DEBUG {conn-10004,procId-1276} connected
2019-08-15 00:49:24,526 DEBUG {conn-10005,procId-1277} connected
2019-08-15 00:49:24,530 DEBUG {conn-10005} pool-connect
2019-08-15 00:49:24,531 DEBUG {conn-10005} pool-recycle
2019-08-15 00:49:24,539 DEBUG {conn-10005} pool-connect
2019-08-15 00:49:24,541 DEBUG {conn-10005} pool-recycle
2019-08-15 00:49:24,827 DEBUG {conn-10005} pool-connect
2019-08-15 00:49:24,861 DEBUG {conn-10005} pool-recycle
2019-08-15 00:49:25,364 INFO [Salvo] modules [], plugins [], sites []
2019-08-15 00:49:25,386 DEBUG [Salvo] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 00:49:25,417 DEBUG [Salvo] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 00:49:25,430 DEBUG [Salvo] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:49:25,431 DEBUG [Salvo] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 00:49:25,431 DEBUG [Salvo] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 00:49:25,431 DEBUG [Salvo] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:49:25,431 DEBUG [Salvo] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 00:49:25,431 DEBUG [Salvo] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 00:49:25,431 DEBUG [Salvo] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:49:25,431 DEBUG [Salvo] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 00:49:25,431 DEBUG [Salvo] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:49:25,431 DEBUG [Salvo] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:49:25,431 DEBUG [Salvo] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 00:49:25,431 DEBUG [Salvo] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 00:49:25,432 DEBUG [Salvo] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 00:49:25,432 DEBUG [Salvo] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:49:26,638 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 00:49:26,653 DEBUG using gathering [true]
2019-08-15 00:49:26,672 DEBUG [Salvo] node_sampler_interval[5s]
2019-08-15 00:49:26,682 DEBUG Using select timeout of 500
2019-08-15 00:49:26,682 DEBUG Epoll-bug workaround enabled = false
2019-08-15 00:49:26,721 DEBUG [Salvo] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:49:26,743 DEBUG [Salvo] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:49:26,775 DEBUG [Salvo] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:49:27,356 DEBUG {conn-10005} pool-connect
2019-08-15 00:49:27,356 DEBUG {conn-10005} pool-recycle
2019-08-15 00:50:16,524 DEBUG {conn-10005} pool-connect
2019-08-15 00:50:16,524 DEBUG {conn-10005} setAutoCommit false
2019-08-15 00:50:16,699 DEBUG {conn-10005, pstmt-20000} created. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:50:16,705 DEBUG {conn-10005, pstmt-20000} Parameters : [189959024, test5, $2a$10$HD8O56Kpve/9vGd.dbuSeOz7CwWkmCVad5Cz0bwmxhpbnf2/avuZC, 小黑, 13336470132@163.com, 17388657185]
2019-08-15 00:50:16,705 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
2019-08-15 00:50:16,706 DEBUG {conn-10005, pstmt-20000} executed. 3.67961 millis. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:50:16,707 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 00:50:16,709 DEBUG {conn-10005, pstmt-20001} created. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:50:16,709 DEBUG {conn-10005, pstmt-20001} Parameters : [189959024, 2]
2019-08-15 00:50:16,709 DEBUG {conn-10005, pstmt-20001} Types : [BIGINT, BIGINT]
2019-08-15 00:50:16,711 DEBUG {conn-10005, pstmt-20001} executed. 1.305187 millis. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:50:16,711 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 00:50:16,716 DEBUG {conn-10005} commited
2019-08-15 00:50:16,716 DEBUG {conn-10005} setAutoCommit true
2019-08-15 00:50:16,718 DEBUG {conn-10005} pool-recycle
2019-08-15 00:50:58,317 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 00:50:58,369 DEBUG {conn-10005} pool-connect
2019-08-15 00:50:58,397 DEBUG {conn-10005, pstmt-20002} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 00:50:58,398 DEBUG {conn-10005, pstmt-20002} Parameters : [9]
2019-08-15 00:50:58,398 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 00:50:58,399 DEBUG {conn-10005, pstmt-20002} executed. 0.941236 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 00:50:58,403 DEBUG {conn-10005, pstmt-20002, rs-50000} open
2019-08-15 00:50:58,404 DEBUG {conn-10005, pstmt-20002, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:50:58,410 DEBUG {conn-10005, pstmt-20002, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 15, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:50:58,411 DEBUG {conn-10005, pstmt-20002, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:50:58,411 DEBUG {conn-10005, pstmt-20002, rs-50000} closed
2019-08-15 00:50:58,412 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 00:50:58,412 DEBUG {conn-10005} pool-recycle
2019-08-15 00:50:58,417 DEBUG {conn-10005} pool-connect
2019-08-15 00:50:58,417 DEBUG {conn-10005, pstmt-20003} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 00:50:58,418 DEBUG {conn-10005, pstmt-20003} Parameters : [9]
2019-08-15 00:50:58,418 DEBUG {conn-10005, pstmt-20003} Types : [INTEGER]
2019-08-15 00:50:58,418 DEBUG {conn-10005, pstmt-20003} executed. 0.623035 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 00:50:58,418 DEBUG {conn-10005, pstmt-20003, rs-50001} open
2019-08-15 00:50:58,418 DEBUG {conn-10005, pstmt-20003, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:50:58,419 DEBUG {conn-10005, pstmt-20003, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:50:58,419 DEBUG {conn-10005, pstmt-20003, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 15, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:50:58,419 DEBUG {conn-10005, pstmt-20003, rs-50001} closed
2019-08-15 00:50:58,419 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 00:50:58,420 DEBUG {conn-10005} pool-recycle
2019-08-15 00:50:58,420 DEBUG {conn-10005} pool-connect
2019-08-15 00:50:58,425 DEBUG {conn-10005, pstmt-20004} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:50:58,426 DEBUG {conn-10005, pstmt-20004} Parameters : []
2019-08-15 00:50:58,426 DEBUG {conn-10005, pstmt-20004} Types : []
2019-08-15 00:50:58,427 DEBUG {conn-10005, pstmt-20004} executed. 1.275372 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:50:58,427 DEBUG {conn-10005, pstmt-20004, rs-50002} open
2019-08-15 00:50:58,427 DEBUG {conn-10005, pstmt-20004, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 00:50:58,427 DEBUG {conn-10005, pstmt-20004, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 00:50:58,427 DEBUG {conn-10005, pstmt-20004, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 00:50:58,427 DEBUG {conn-10005, pstmt-20004, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 00:50:58,428 DEBUG {conn-10005, pstmt-20004, rs-50002} closed
2019-08-15 00:50:58,428 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 00:50:58,428 DEBUG {conn-10005} pool-recycle
2019-08-15 00:50:58,430 DEBUG {conn-10005} pool-connect
2019-08-15 00:50:58,430 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:50:58,430 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 00:50:58,430 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 00:50:58,431 DEBUG {conn-10005, pstmt-20005} executed. 0.551582 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:50:58,431 DEBUG {conn-10005, pstmt-20005, rs-50003} open
2019-08-15 00:50:58,431 DEBUG {conn-10005, pstmt-20005, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 00:50:58,431 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 00:50:58,431 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 00:50:58,431 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 00:50:58,432 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 00:50:58,432 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 00:50:58,432 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 00:50:58,432 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 00:50:58,433 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 00:50:58,433 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 00:50:58,433 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 00:50:58,433 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 00:50:58,433 DEBUG {conn-10005, pstmt-20005, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 00:50:58,434 DEBUG {conn-10005, pstmt-20005, rs-50003} closed
2019-08-15 00:50:58,434 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 00:50:58,434 DEBUG {conn-10005} pool-recycle
2019-08-15 00:50:58,468 DEBUG {conn-10005} pool-connect
2019-08-15 00:50:58,469 DEBUG {conn-10005, pstmt-20006} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 00:50:58,469 DEBUG {conn-10005, pstmt-20006} Parameters : [admin]
2019-08-15 00:50:58,469 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR]
2019-08-15 00:50:58,470 DEBUG {conn-10005, pstmt-20006} executed. 0.801412 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 00:50:58,470 DEBUG {conn-10005, pstmt-20006, rs-50004} open
2019-08-15 00:50:58,470 DEBUG {conn-10005, pstmt-20006, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 00:50:58,471 DEBUG {conn-10005, pstmt-20006, rs-50004} closed
2019-08-15 00:50:58,471 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 00:50:58,471 DEBUG {conn-10005} pool-recycle
2019-08-15 00:50:58,498 DEBUG {conn-10005} pool-connect
2019-08-15 00:50:58,499 DEBUG {conn-10005, pstmt-20002} Parameters : [9]
2019-08-15 00:50:58,499 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 00:50:58,499 DEBUG {conn-10005, pstmt-20002} executed. 0.703743 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 00:50:58,500 DEBUG {conn-10005, pstmt-20002, rs-50005} open
2019-08-15 00:50:58,500 DEBUG {conn-10005, pstmt-20002, rs-50005} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:50:58,500 DEBUG {conn-10005, pstmt-20002, rs-50005} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 15, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:50:58,500 DEBUG {conn-10005, pstmt-20002, rs-50005} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:50:58,501 DEBUG {conn-10005, pstmt-20002, rs-50005} closed
2019-08-15 00:50:58,501 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 00:50:58,501 DEBUG {conn-10005} pool-recycle
2019-08-15 00:50:58,501 DEBUG {conn-10005} pool-connect
2019-08-15 00:50:58,501 DEBUG {conn-10005, pstmt-20003} Parameters : [9]
2019-08-15 00:50:58,501 DEBUG {conn-10005, pstmt-20003} Types : [INTEGER]
2019-08-15 00:50:58,502 DEBUG {conn-10005, pstmt-20003} executed. 0.730473 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 00:50:58,502 DEBUG {conn-10005, pstmt-20003, rs-50006} open
2019-08-15 00:50:58,502 DEBUG {conn-10005, pstmt-20003, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:50:58,502 DEBUG {conn-10005, pstmt-20003, rs-50006} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:50:58,502 DEBUG {conn-10005, pstmt-20003, rs-50006} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 15, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:50:58,503 DEBUG {conn-10005, pstmt-20003, rs-50006} closed
2019-08-15 00:50:58,503 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 00:50:58,503 DEBUG {conn-10005} pool-recycle
2019-08-15 00:50:58,503 DEBUG {conn-10005} pool-connect
2019-08-15 00:50:58,503 DEBUG {conn-10005, pstmt-20004} Parameters : []
2019-08-15 00:50:58,503 DEBUG {conn-10005, pstmt-20004} Types : []
2019-08-15 00:50:58,504 DEBUG {conn-10005, pstmt-20004} executed. 0.890344 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:50:58,504 DEBUG {conn-10005, pstmt-20004, rs-50007} open
2019-08-15 00:50:58,504 DEBUG {conn-10005, pstmt-20004, rs-50007} Header: [tag_id, tag_count, tag_name]
2019-08-15 00:50:58,504 DEBUG {conn-10005, pstmt-20004, rs-50007} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 00:50:58,505 DEBUG {conn-10005, pstmt-20004, rs-50007} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 00:50:58,505 DEBUG {conn-10005, pstmt-20004, rs-50007} Result: [139, 1, jqGrid]
2019-08-15 00:50:58,505 DEBUG {conn-10005, pstmt-20004, rs-50007} closed
2019-08-15 00:50:58,505 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 00:50:58,505 DEBUG {conn-10005} pool-recycle
2019-08-15 00:50:58,505 DEBUG {conn-10005} pool-connect
2019-08-15 00:50:58,505 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 00:50:58,505 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 00:50:58,506 DEBUG {conn-10005, pstmt-20005} executed. 0.709911 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:50:58,506 DEBUG {conn-10005, pstmt-20005, rs-50008} open
2019-08-15 00:50:58,506 DEBUG {conn-10005, pstmt-20005, rs-50008} Header: [config_name, config_value, create_time, update_time]
2019-08-15 00:50:58,507 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 00:50:58,507 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 00:50:58,507 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 00:50:58,507 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 00:50:58,508 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 00:50:58,509 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 00:50:58,509 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 00:50:58,509 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 00:50:58,509 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 00:50:58,509 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 00:50:58,509 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 00:50:58,510 DEBUG {conn-10005, pstmt-20005, rs-50008} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 00:50:58,510 DEBUG {conn-10005, pstmt-20005, rs-50008} closed
2019-08-15 00:50:58,510 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 00:50:58,510 DEBUG {conn-10005} pool-recycle
2019-08-15 00:50:58,525 DEBUG {conn-10005} pool-connect
2019-08-15 00:50:58,525 DEBUG {conn-10005, pstmt-20006} Parameters : [admin]
2019-08-15 00:50:58,525 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR]
2019-08-15 00:50:58,526 DEBUG {conn-10005, pstmt-20006} executed. 0.692947 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 00:50:58,526 DEBUG {conn-10005, pstmt-20006, rs-50009} open
2019-08-15 00:50:58,526 DEBUG {conn-10005, pstmt-20006, rs-50009} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 00:50:58,526 DEBUG {conn-10005, pstmt-20006, rs-50009} closed
2019-08-15 00:50:58,527 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 00:50:58,527 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:12,406 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:12,407 DEBUG {conn-10005, pstmt-20007} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 00:51:12,407 DEBUG {conn-10005, pstmt-20007} Parameters : [23]
2019-08-15 00:51:12,407 DEBUG {conn-10005, pstmt-20007} Types : [BIGINT]
2019-08-15 00:51:12,409 DEBUG {conn-10005, pstmt-20007} executed. 2.020239 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 00:51:12,409 DEBUG {conn-10005, pstmt-20007, rs-50010} open
2019-08-15 00:51:12,409 DEBUG {conn-10005, pstmt-20007, rs-50010} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 00:51:12,410 DEBUG {conn-10005, pstmt-20007, rs-50010} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 15, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 00:51:12,410 DEBUG {conn-10005, pstmt-20007, rs-50010} closed
2019-08-15 00:51:12,410 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 00:51:12,410 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:12,411 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:12,418 DEBUG {conn-10005, pstmt-20008} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 00:51:12,420 DEBUG {conn-10005, pstmt-20008} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 16, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 00:51:12,420 DEBUG {conn-10005, pstmt-20008} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 00:51:12,422 DEBUG {conn-10005, pstmt-20008} executed. 2.015098 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 00:51:12,422 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 00:51:12,422 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:12,484 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:12,485 DEBUG {conn-10005, pstmt-20009} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 00:51:12,485 DEBUG {conn-10005, pstmt-20009} Parameters : [25]
2019-08-15 00:51:12,485 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-15 00:51:12,486 DEBUG {conn-10005, pstmt-20009} executed. 0.710939 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 00:51:12,486 DEBUG {conn-10005, pstmt-20009, rs-50011} open
2019-08-15 00:51:12,486 DEBUG {conn-10005, pstmt-20009, rs-50011} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 00:51:12,486 DEBUG {conn-10005, pstmt-20009, rs-50011} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 00:51:12,487 DEBUG {conn-10005, pstmt-20009, rs-50011} closed
2019-08-15 00:51:12,487 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 00:51:12,487 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:12,488 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:12,489 DEBUG {conn-10005, pstmt-20010} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 00:51:12,489 DEBUG {conn-10005, pstmt-20010} Parameters : [23, 1]
2019-08-15 00:51:12,489 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT, INTEGER]
2019-08-15 00:51:12,490 DEBUG {conn-10005, pstmt-20010} executed. 0.70734 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 00:51:12,490 DEBUG {conn-10005, pstmt-20010, rs-50012} open
2019-08-15 00:51:12,490 DEBUG {conn-10005, pstmt-20010, rs-50012} Header: [count(*)]
2019-08-15 00:51:12,490 DEBUG {conn-10005, pstmt-20010, rs-50012} Result: [0]
2019-08-15 00:51:12,491 DEBUG {conn-10005, pstmt-20010, rs-50012} closed
2019-08-15 00:51:12,491 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 00:51:12,491 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:12,492 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:12,492 DEBUG {conn-10005, pstmt-20011} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 00:51:12,493 DEBUG {conn-10005, pstmt-20011} Parameters : [23, 1, 0, 8]
2019-08-15 00:51:12,493 DEBUG {conn-10005, pstmt-20011} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 00:51:12,493 DEBUG {conn-10005, pstmt-20011} executed. 0.545413 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 00:51:12,493 DEBUG {conn-10005, pstmt-20011, rs-50013} open
2019-08-15 00:51:12,493 DEBUG {conn-10005, pstmt-20011, rs-50013} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 00:51:12,493 DEBUG {conn-10005, pstmt-20011, rs-50013} closed
2019-08-15 00:51:12,493 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 00:51:12,493 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:12,494 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:12,494 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 00:51:12,494 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 00:51:12,494 DEBUG {conn-10005, pstmt-20005} executed. 0.406618 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:51:12,494 DEBUG {conn-10005, pstmt-20005, rs-50014} open
2019-08-15 00:51:12,494 DEBUG {conn-10005, pstmt-20005, rs-50014} Header: [config_name, config_value, create_time, update_time]
2019-08-15 00:51:12,494 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:12,495 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:12,495 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:12,495 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:12,495 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:12,495 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:12,495 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:12,495 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:12,495 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:12,496 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:12,496 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:12,496 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:12,496 DEBUG {conn-10005, pstmt-20005, rs-50014} closed
2019-08-15 00:51:12,496 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 00:51:12,496 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:17,271 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:17,271 DEBUG {conn-10005, pstmt-20004} Parameters : []
2019-08-15 00:51:17,271 DEBUG {conn-10005, pstmt-20004} Types : []
2019-08-15 00:51:17,272 DEBUG {conn-10005, pstmt-20004} executed. 0.662618 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:51:17,272 DEBUG {conn-10005, pstmt-20004, rs-50015} open
2019-08-15 00:51:17,272 DEBUG {conn-10005, pstmt-20004, rs-50015} Header: [tag_id, tag_count, tag_name]
2019-08-15 00:51:17,272 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 00:51:17,272 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 00:51:17,273 DEBUG {conn-10005, pstmt-20004, rs-50015} Result: [139, 1, jqGrid]
2019-08-15 00:51:17,273 DEBUG {conn-10005, pstmt-20004, rs-50015} closed
2019-08-15 00:51:17,273 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 00:51:17,273 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:17,275 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:17,275 DEBUG {conn-10005, pstmt-20012} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 00:51:17,276 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 00:51:17,276 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 00:51:17,276 DEBUG {conn-10005, pstmt-20012} executed. 0.568031 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 00:51:17,276 DEBUG {conn-10005, pstmt-20012, rs-50016} open
2019-08-15 00:51:17,276 DEBUG {conn-10005, pstmt-20012, rs-50016} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 00:51:17,276 DEBUG {conn-10005, pstmt-20012, rs-50016} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 00:51:17,276 DEBUG {conn-10005, pstmt-20012, rs-50016} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 00:51:17,277 DEBUG {conn-10005, pstmt-20012, rs-50016} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 00:51:17,277 DEBUG {conn-10005, pstmt-20012, rs-50016} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 00:51:17,277 DEBUG {conn-10005, pstmt-20012, rs-50016} closed
2019-08-15 00:51:17,278 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 00:51:17,278 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:17,278 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:17,278 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 00:51:17,278 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 00:51:17,279 DEBUG {conn-10005, pstmt-20005} executed. 0.676497 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:51:17,279 DEBUG {conn-10005, pstmt-20005, rs-50017} open
2019-08-15 00:51:17,279 DEBUG {conn-10005, pstmt-20005, rs-50017} Header: [config_name, config_value, create_time, update_time]
2019-08-15 00:51:17,279 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:17,280 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:17,280 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:17,280 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:17,280 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:17,280 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:17,280 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:17,280 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:17,281 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:17,281 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:17,281 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:17,281 DEBUG {conn-10005, pstmt-20005, rs-50017} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:17,281 DEBUG {conn-10005, pstmt-20005, rs-50017} closed
2019-08-15 00:51:17,281 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 00:51:17,281 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:19,434 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:19,435 DEBUG {conn-10005, pstmt-20013} created. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 00:51:19,435 DEBUG {conn-10005, pstmt-20013} Parameters : [jqGrid]
2019-08-15 00:51:19,435 DEBUG {conn-10005, pstmt-20013} Types : [VARCHAR]
2019-08-15 00:51:19,435 DEBUG {conn-10005, pstmt-20013} executed. 0.450827 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 00:51:19,435 DEBUG {conn-10005, pstmt-20013, rs-50018} open
2019-08-15 00:51:19,435 DEBUG {conn-10005, pstmt-20013, rs-50018} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 00:51:19,436 DEBUG {conn-10005, pstmt-20013, rs-50018} Result: [139, jqGrid, 0, 2019-08-14 19:46:03.0]
2019-08-15 00:51:19,436 DEBUG {conn-10005, pstmt-20013, rs-50018} closed
2019-08-15 00:51:19,436 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 00:51:19,436 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:19,436 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:19,444 DEBUG {conn-10005, pstmt-20014} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
    AND blog_status =1 AND is_deleted=0
    order by blog_id desc
     
      limit ?,?
2019-08-15 00:51:19,445 DEBUG {conn-10005, pstmt-20014} Parameters : [139, 0, 9]
2019-08-15 00:51:19,445 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER, INTEGER]
2019-08-15 00:51:19,446 DEBUG {conn-10005, pstmt-20014} executed. 1.07489 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
    AND blog_status =1 AND is_deleted=0
    order by blog_id desc
     
      limit ?,?
2019-08-15 00:51:19,446 DEBUG {conn-10005, pstmt-20014, rs-50019} open
2019-08-15 00:51:19,446 DEBUG {conn-10005, pstmt-20014, rs-50019} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:51:19,446 DEBUG {conn-10005, pstmt-20014, rs-50019} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 16, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:51:19,447 DEBUG {conn-10005, pstmt-20014, rs-50019} closed
2019-08-15 00:51:19,447 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 00:51:19,447 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:19,448 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:19,448 DEBUG {conn-10005, pstmt-20015} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     ) 
    AND is_deleted = 0
2019-08-15 00:51:19,448 DEBUG {conn-10005, pstmt-20015} Parameters : [25]
2019-08-15 00:51:19,448 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER]
2019-08-15 00:51:19,449 DEBUG {conn-10005, pstmt-20015} executed. 0.556722 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     ) 
    AND is_deleted = 0
2019-08-15 00:51:19,449 DEBUG {conn-10005, pstmt-20015, rs-50020} open
2019-08-15 00:51:19,449 DEBUG {conn-10005, pstmt-20015, rs-50020} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 00:51:19,449 DEBUG {conn-10005, pstmt-20015, rs-50020} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 00:51:19,449 DEBUG {conn-10005, pstmt-20015, rs-50020} closed
2019-08-15 00:51:19,450 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 00:51:19,450 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:19,451 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:19,451 DEBUG {conn-10005, pstmt-20016} created. select count(*)
        from tb_blog
        where  blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
        AND blog_status =1 AND is_deleted=0
2019-08-15 00:51:19,451 DEBUG {conn-10005, pstmt-20016} Parameters : [139]
2019-08-15 00:51:19,451 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER]
2019-08-15 00:51:19,452 DEBUG {conn-10005, pstmt-20016} executed. 0.501204 millis. select count(*)
        from tb_blog
        where  blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
        AND blog_status =1 AND is_deleted=0
2019-08-15 00:51:19,452 DEBUG {conn-10005, pstmt-20016, rs-50021} open
2019-08-15 00:51:19,452 DEBUG {conn-10005, pstmt-20016, rs-50021} Header: [count(*)]
2019-08-15 00:51:19,452 DEBUG {conn-10005, pstmt-20016, rs-50021} Result: [1]
2019-08-15 00:51:19,452 DEBUG {conn-10005, pstmt-20016, rs-50021} closed
2019-08-15 00:51:19,452 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 00:51:19,452 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:19,452 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:19,453 DEBUG {conn-10005, pstmt-20002} Parameters : [9]
2019-08-15 00:51:19,453 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 00:51:19,453 DEBUG {conn-10005, pstmt-20002} executed. 0.339791 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 00:51:19,453 DEBUG {conn-10005, pstmt-20002, rs-50022} open
2019-08-15 00:51:19,453 DEBUG {conn-10005, pstmt-20002, rs-50022} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:51:19,453 DEBUG {conn-10005, pstmt-20002, rs-50022} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 16, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:51:19,453 DEBUG {conn-10005, pstmt-20002, rs-50022} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:51:19,454 DEBUG {conn-10005, pstmt-20002, rs-50022} closed
2019-08-15 00:51:19,454 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 00:51:19,454 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:19,454 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:19,454 DEBUG {conn-10005, pstmt-20003} Parameters : [9]
2019-08-15 00:51:19,454 DEBUG {conn-10005, pstmt-20003} Types : [INTEGER]
2019-08-15 00:51:19,454 DEBUG {conn-10005, pstmt-20003} executed. 0.324369 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 00:51:19,454 DEBUG {conn-10005, pstmt-20003, rs-50023} open
2019-08-15 00:51:19,454 DEBUG {conn-10005, pstmt-20003, rs-50023} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:51:19,454 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:51:19,455 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 16, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:51:19,455 DEBUG {conn-10005, pstmt-20003, rs-50023} closed
2019-08-15 00:51:19,455 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 00:51:19,455 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:19,455 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:19,455 DEBUG {conn-10005, pstmt-20004} Parameters : []
2019-08-15 00:51:19,455 DEBUG {conn-10005, pstmt-20004} Types : []
2019-08-15 00:51:19,456 DEBUG {conn-10005, pstmt-20004} executed. 0.449799 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:51:19,456 DEBUG {conn-10005, pstmt-20004, rs-50024} open
2019-08-15 00:51:19,456 DEBUG {conn-10005, pstmt-20004, rs-50024} Header: [tag_id, tag_count, tag_name]
2019-08-15 00:51:19,456 DEBUG {conn-10005, pstmt-20004, rs-50024} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 00:51:19,456 DEBUG {conn-10005, pstmt-20004, rs-50024} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 00:51:19,456 DEBUG {conn-10005, pstmt-20004, rs-50024} Result: [139, 1, jqGrid]
2019-08-15 00:51:19,456 DEBUG {conn-10005, pstmt-20004, rs-50024} closed
2019-08-15 00:51:19,456 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 00:51:19,456 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:19,456 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:19,456 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 00:51:19,456 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 00:51:19,457 DEBUG {conn-10005, pstmt-20005} executed. 0.365494 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:51:19,457 DEBUG {conn-10005, pstmt-20005, rs-50025} open
2019-08-15 00:51:19,457 DEBUG {conn-10005, pstmt-20005, rs-50025} Header: [config_name, config_value, create_time, update_time]
2019-08-15 00:51:19,457 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:19,457 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:19,457 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:19,457 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:19,457 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:19,457 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:19,458 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:19,458 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:19,458 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:19,458 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:19,458 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:19,458 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:19,458 DEBUG {conn-10005, pstmt-20005, rs-50025} closed
2019-08-15 00:51:19,458 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 00:51:19,458 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:21,123 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:21,123 DEBUG {conn-10005, pstmt-20007} Parameters : [23]
2019-08-15 00:51:21,123 DEBUG {conn-10005, pstmt-20007} Types : [BIGINT]
2019-08-15 00:51:21,124 DEBUG {conn-10005, pstmt-20007} executed. 0.509429 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 00:51:21,124 DEBUG {conn-10005, pstmt-20007, rs-50026} open
2019-08-15 00:51:21,124 DEBUG {conn-10005, pstmt-20007, rs-50026} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 00:51:21,124 DEBUG {conn-10005, pstmt-20007, rs-50026} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 16, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 00:51:21,124 DEBUG {conn-10005, pstmt-20007, rs-50026} closed
2019-08-15 00:51:21,124 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 00:51:21,124 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:21,124 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:21,125 DEBUG {conn-10005, pstmt-20008} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 00:51:21,125 DEBUG {conn-10005, pstmt-20008} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 00:51:21,133 DEBUG {conn-10005, pstmt-20008} executed. 8.608888 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 00:51:21,134 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 00:51:21,134 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:21,136 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:21,136 DEBUG {conn-10005, pstmt-20009} Parameters : [25]
2019-08-15 00:51:21,136 DEBUG {conn-10005, pstmt-20009} Types : [INTEGER]
2019-08-15 00:51:21,136 DEBUG {conn-10005, pstmt-20009} executed. 0.478586 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 00:51:21,136 DEBUG {conn-10005, pstmt-20009, rs-50027} open
2019-08-15 00:51:21,136 DEBUG {conn-10005, pstmt-20009, rs-50027} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 00:51:21,137 DEBUG {conn-10005, pstmt-20009, rs-50027} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 00:51:21,137 DEBUG {conn-10005, pstmt-20009, rs-50027} closed
2019-08-15 00:51:21,137 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 00:51:21,137 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:21,137 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:21,137 DEBUG {conn-10005, pstmt-20010} Parameters : [23, 1]
2019-08-15 00:51:21,137 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT, INTEGER]
2019-08-15 00:51:21,138 DEBUG {conn-10005, pstmt-20010} executed. 0.410216 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 00:51:21,138 DEBUG {conn-10005, pstmt-20010, rs-50028} open
2019-08-15 00:51:21,138 DEBUG {conn-10005, pstmt-20010, rs-50028} Header: [count(*)]
2019-08-15 00:51:21,138 DEBUG {conn-10005, pstmt-20010, rs-50028} Result: [0]
2019-08-15 00:51:21,138 DEBUG {conn-10005, pstmt-20010, rs-50028} closed
2019-08-15 00:51:21,138 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 00:51:21,138 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:21,138 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:21,138 DEBUG {conn-10005, pstmt-20011} Parameters : [23, 1, 0, 8]
2019-08-15 00:51:21,138 DEBUG {conn-10005, pstmt-20011} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 00:51:21,139 DEBUG {conn-10005, pstmt-20011} executed. 0.331566 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 00:51:21,139 DEBUG {conn-10005, pstmt-20011, rs-50029} open
2019-08-15 00:51:21,139 DEBUG {conn-10005, pstmt-20011, rs-50029} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 00:51:21,139 DEBUG {conn-10005, pstmt-20011, rs-50029} closed
2019-08-15 00:51:21,139 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 00:51:21,139 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:21,139 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:21,139 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 00:51:21,139 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 00:51:21,139 DEBUG {conn-10005, pstmt-20005} executed. 0.285301 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:51:21,139 DEBUG {conn-10005, pstmt-20005, rs-50030} open
2019-08-15 00:51:21,139 DEBUG {conn-10005, pstmt-20005, rs-50030} Header: [config_name, config_value, create_time, update_time]
2019-08-15 00:51:21,139 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:21,140 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:21,140 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:21,140 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:21,140 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:21,140 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:21,140 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:21,140 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:21,140 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:21,140 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:21,140 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:21,140 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:21,141 DEBUG {conn-10005, pstmt-20005, rs-50030} closed
2019-08-15 00:51:21,141 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 00:51:21,141 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:23,210 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:23,210 DEBUG {conn-10005, pstmt-20002} Parameters : [9]
2019-08-15 00:51:23,210 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 00:51:23,211 DEBUG {conn-10005, pstmt-20002} executed. 0.750007 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 00:51:23,211 DEBUG {conn-10005, pstmt-20002, rs-50031} open
2019-08-15 00:51:23,211 DEBUG {conn-10005, pstmt-20002, rs-50031} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:51:23,212 DEBUG {conn-10005, pstmt-20002, rs-50031} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:51:23,214 DEBUG {conn-10005, pstmt-20002, rs-50031} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:51:23,214 DEBUG {conn-10005, pstmt-20002, rs-50031} closed
2019-08-15 00:51:23,214 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 00:51:23,214 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:23,215 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:23,215 DEBUG {conn-10005, pstmt-20003} Parameters : [9]
2019-08-15 00:51:23,215 DEBUG {conn-10005, pstmt-20003} Types : [INTEGER]
2019-08-15 00:51:23,215 DEBUG {conn-10005, pstmt-20003} executed. 0.506345 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 00:51:23,215 DEBUG {conn-10005, pstmt-20003, rs-50032} open
2019-08-15 00:51:23,215 DEBUG {conn-10005, pstmt-20003, rs-50032} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:51:23,216 DEBUG {conn-10005, pstmt-20003, rs-50032} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:51:23,216 DEBUG {conn-10005, pstmt-20003, rs-50032} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:51:23,216 DEBUG {conn-10005, pstmt-20003, rs-50032} closed
2019-08-15 00:51:23,216 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 00:51:23,216 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:23,217 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:23,217 DEBUG {conn-10005, pstmt-20004} Parameters : []
2019-08-15 00:51:23,217 DEBUG {conn-10005, pstmt-20004} Types : []
2019-08-15 00:51:23,218 DEBUG {conn-10005, pstmt-20004} executed. 0.72122 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:51:23,218 DEBUG {conn-10005, pstmt-20004, rs-50033} open
2019-08-15 00:51:23,218 DEBUG {conn-10005, pstmt-20004, rs-50033} Header: [tag_id, tag_count, tag_name]
2019-08-15 00:51:23,218 DEBUG {conn-10005, pstmt-20004, rs-50033} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 00:51:23,218 DEBUG {conn-10005, pstmt-20004, rs-50033} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 00:51:23,218 DEBUG {conn-10005, pstmt-20004, rs-50033} Result: [139, 1, jqGrid]
2019-08-15 00:51:23,219 DEBUG {conn-10005, pstmt-20004, rs-50033} closed
2019-08-15 00:51:23,219 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 00:51:23,219 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:23,219 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:23,219 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 00:51:23,219 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 00:51:23,219 DEBUG {conn-10005, pstmt-20005} executed. 0.38914 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:51:23,219 DEBUG {conn-10005, pstmt-20005, rs-50034} open
2019-08-15 00:51:23,219 DEBUG {conn-10005, pstmt-20005, rs-50034} Header: [config_name, config_value, create_time, update_time]
2019-08-15 00:51:23,219 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:23,220 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:23,220 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:23,220 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:23,220 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 00:51:23,220 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:23,220 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:23,220 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:23,221 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 00:51:23,221 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:23,221 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:23,221 DEBUG {conn-10005, pstmt-20005, rs-50034} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 00:51:23,221 DEBUG {conn-10005, pstmt-20005, rs-50034} closed
2019-08-15 00:51:23,221 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 00:51:23,222 DEBUG {conn-10005} pool-recycle
2019-08-15 00:51:23,235 DEBUG {conn-10005} pool-connect
2019-08-15 00:51:23,235 DEBUG {conn-10005, pstmt-20006} Parameters : [admin]
2019-08-15 00:51:23,235 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR]
2019-08-15 00:51:23,236 DEBUG {conn-10005, pstmt-20006} executed. 0.431293 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 00:51:23,236 DEBUG {conn-10005, pstmt-20006, rs-50035} open
2019-08-15 00:51:23,236 DEBUG {conn-10005, pstmt-20006, rs-50035} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 00:51:23,236 DEBUG {conn-10005, pstmt-20006, rs-50035} closed
2019-08-15 00:51:23,236 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 00:51:23,236 DEBUG {conn-10005} pool-recycle
2019-08-15 00:53:13,360 DEBUG {conn-10005} pool-connect
2019-08-15 00:53:13,360 DEBUG {conn-10005} setAutoCommit false
2019-08-15 00:53:13,444 DEBUG {conn-10005, pstmt-20000} Parameters : [337575483, oooo, $2a$10$NYGebtzZ2Lzb9vV4kbqgm.fTBj.PLjYRL4Lj/mFZho6xPQnZ.2/Aa, 小灰, 1158767965@qq.com, 17388657185]
2019-08-15 00:53:13,444 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
2019-08-15 00:53:13,445 DEBUG {conn-10005, pstmt-20000} executed. 0.8302 millis. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:53:13,445 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 00:53:13,445 DEBUG {conn-10005, pstmt-20001} Parameters : [337575483, 2]
2019-08-15 00:53:13,445 DEBUG {conn-10005, pstmt-20001} Types : [BIGINT, BIGINT]
2019-08-15 00:53:13,446 DEBUG {conn-10005, pstmt-20001} executed. 0.578313 millis. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:53:13,446 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 00:53:13,448 DEBUG {conn-10005} commited
2019-08-15 00:53:13,449 DEBUG {conn-10005} setAutoCommit true
2019-08-15 00:53:13,449 DEBUG {conn-10005} pool-recycle
2019-08-15 00:54:13,257 DEBUG {conn-10001,procId-1278} connected
2019-08-15 00:54:13,263 DEBUG {conn-10002,procId-1279} connected
2019-08-15 00:54:13,267 DEBUG {conn-10003,procId-1280} connected
2019-08-15 00:54:13,271 DEBUG {conn-10004,procId-1281} connected
2019-08-15 00:54:13,275 DEBUG {conn-10005,procId-1282} connected
2019-08-15 00:54:13,278 DEBUG {conn-10005} pool-connect
2019-08-15 00:54:13,280 DEBUG {conn-10005} pool-recycle
2019-08-15 00:54:13,288 DEBUG {conn-10005} pool-connect
2019-08-15 00:54:13,289 DEBUG {conn-10005} pool-recycle
2019-08-15 00:54:13,559 DEBUG {conn-10005} pool-connect
2019-08-15 00:54:13,591 DEBUG {conn-10005} pool-recycle
2019-08-15 00:54:14,105 INFO [Jimmy Woo] modules [], plugins [], sites []
2019-08-15 00:54:14,114 DEBUG [Jimmy Woo] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 00:54:14,121 DEBUG [Jimmy Woo] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 00:54:14,130 DEBUG [Jimmy Woo] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:54:14,130 DEBUG [Jimmy Woo] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 00:54:14,131 DEBUG [Jimmy Woo] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 00:54:14,131 DEBUG [Jimmy Woo] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:54:14,131 DEBUG [Jimmy Woo] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 00:54:14,131 DEBUG [Jimmy Woo] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 00:54:14,131 DEBUG [Jimmy Woo] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:54:14,131 DEBUG [Jimmy Woo] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 00:54:14,131 DEBUG [Jimmy Woo] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:54:14,131 DEBUG [Jimmy Woo] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:54:14,131 DEBUG [Jimmy Woo] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 00:54:14,132 DEBUG [Jimmy Woo] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 00:54:14,132 DEBUG [Jimmy Woo] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 00:54:14,132 DEBUG [Jimmy Woo] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:54:15,312 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 00:54:15,334 DEBUG using gathering [true]
2019-08-15 00:54:15,358 DEBUG [Jimmy Woo] node_sampler_interval[5s]
2019-08-15 00:54:15,369 DEBUG Using select timeout of 500
2019-08-15 00:54:15,369 DEBUG Epoll-bug workaround enabled = false
2019-08-15 00:54:15,403 DEBUG [Jimmy Woo] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:54:15,426 DEBUG [Jimmy Woo] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:54:15,456 DEBUG [Jimmy Woo] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:54:15,989 DEBUG {conn-10005} pool-connect
2019-08-15 00:54:15,989 DEBUG {conn-10005} pool-recycle
2019-08-15 00:54:21,625 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 00:54:21,722 DEBUG {conn-10005} pool-connect
2019-08-15 00:54:21,810 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 00:54:21,818 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 00:54:21,818 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 00:54:21,820 DEBUG {conn-10005, pstmt-20000} executed. 5.274724 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 00:54:21,824 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 00:54:21,825 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:54:21,830 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:54:21,832 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:54:21,833 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 00:54:21,833 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 00:54:21,834 DEBUG {conn-10005} pool-recycle
2019-08-15 00:54:21,838 DEBUG {conn-10005} pool-connect
2019-08-15 00:54:21,838 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 00:54:21,839 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 00:54:21,839 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 00:54:21,839 DEBUG {conn-10005, pstmt-20001} executed. 0.621493 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 00:54:21,839 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 00:54:21,840 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:54:21,840 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:54:21,840 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:54:21,840 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 00:54:21,840 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 00:54:21,840 DEBUG {conn-10005} pool-recycle
2019-08-15 00:54:21,841 DEBUG {conn-10005} pool-connect
2019-08-15 00:54:21,844 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:54:21,845 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 00:54:21,845 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 00:54:21,846 DEBUG {conn-10005, pstmt-20002} executed. 0.976191 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:54:21,846 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 00:54:21,846 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 00:54:21,846 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 00:54:21,846 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 00:54:21,846 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 00:54:21,846 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 00:54:21,846 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 00:54:21,846 DEBUG {conn-10005} pool-recycle
2019-08-15 00:54:21,849 DEBUG {conn-10005} pool-connect
2019-08-15 00:54:21,850 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:54:21,850 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 00:54:21,850 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 00:54:21,851 DEBUG {conn-10005, pstmt-20003} executed. 0.746923 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:54:21,851 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 00:54:21,851 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 00:54:21,851 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 00:54:21,851 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 00:54:21,852 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 00:54:21,852 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 00:54:21,852 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 00:54:21,852 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 00:54:21,853 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 00:54:21,853 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 00:54:21,853 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 00:54:21,853 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 00:54:21,853 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 00:54:21,854 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 00:54:21,854 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 00:54:21,854 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 00:54:21,854 DEBUG {conn-10005} pool-recycle
2019-08-15 00:54:21,888 DEBUG {conn-10005} pool-connect
2019-08-15 00:54:21,888 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 00:54:21,889 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 00:54:21,889 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 00:54:21,889 DEBUG {conn-10005, pstmt-20004} executed. 0.638971 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 00:54:21,889 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 00:54:21,889 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 00:54:21,889 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 00:54:21,890 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 00:54:21,890 DEBUG {conn-10005} pool-recycle
2019-08-15 00:55:06,419 DEBUG {conn-10005} pool-connect
2019-08-15 00:55:06,419 DEBUG {conn-10005} setAutoCommit false
2019-08-15 00:55:06,514 DEBUG {conn-10005, pstmt-20005} created. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:55:06,514 DEBUG {conn-10005, pstmt-20005} Parameters : [856452675, pppe, $2a$10$OwQkNAFmJGTnNp/XCHLPA.JaxJJy.NS6czFRH4o999iWhI69de17W, 小黄, 739663514@qq.com, 17388657185]
2019-08-15 00:55:06,515 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
2019-08-15 00:55:06,515 DEBUG {conn-10005, pstmt-20005} executed. 1.030167 millis. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 00:55:06,516 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 00:55:06,517 DEBUG {conn-10005, pstmt-20006} created. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:55:06,517 DEBUG {conn-10005, pstmt-20006} Parameters : [856452675, 2]
2019-08-15 00:55:06,517 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT, BIGINT]
2019-08-15 00:55:06,518 DEBUG {conn-10005, pstmt-20006} executed. 0.79216 millis. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 00:55:06,518 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 00:55:06,526 DEBUG {conn-10005} commited
2019-08-15 00:55:06,526 DEBUG {conn-10005} setAutoCommit true
2019-08-15 00:55:06,527 DEBUG {conn-10005} pool-recycle
2019-08-15 00:58:57,331 DEBUG {conn-10001,procId-1283} connected
2019-08-15 00:58:57,338 DEBUG {conn-10002,procId-1284} connected
2019-08-15 00:58:57,342 DEBUG {conn-10003,procId-1285} connected
2019-08-15 00:58:57,347 DEBUG {conn-10004,procId-1286} connected
2019-08-15 00:58:57,351 DEBUG {conn-10005,procId-1287} connected
2019-08-15 00:58:57,357 DEBUG {conn-10005} pool-connect
2019-08-15 00:58:57,358 DEBUG {conn-10005} pool-recycle
2019-08-15 00:58:57,365 DEBUG {conn-10005} pool-connect
2019-08-15 00:58:57,368 DEBUG {conn-10005} pool-recycle
2019-08-15 00:58:57,682 DEBUG {conn-10005} pool-connect
2019-08-15 00:58:57,716 DEBUG {conn-10005} pool-recycle
2019-08-15 00:58:58,287 INFO [Carl "Crusher" Creel] modules [], plugins [], sites []
2019-08-15 00:58:58,295 DEBUG [Carl "Crusher" Creel] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 00:58:58,302 DEBUG [Carl "Crusher" Creel] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 00:58:58,311 DEBUG [Carl "Crusher" Creel] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:58:58,311 DEBUG [Carl "Crusher" Creel] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 00:58:58,312 DEBUG [Carl "Crusher" Creel] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 00:58:58,312 DEBUG [Carl "Crusher" Creel] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:58:58,312 DEBUG [Carl "Crusher" Creel] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 00:58:58,312 DEBUG [Carl "Crusher" Creel] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 00:58:58,312 DEBUG [Carl "Crusher" Creel] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:58:58,312 DEBUG [Carl "Crusher" Creel] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 00:58:58,312 DEBUG [Carl "Crusher" Creel] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:58:58,312 DEBUG [Carl "Crusher" Creel] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 00:58:58,312 DEBUG [Carl "Crusher" Creel] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 00:58:58,312 DEBUG [Carl "Crusher" Creel] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 00:58:58,312 DEBUG [Carl "Crusher" Creel] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 00:58:58,313 DEBUG [Carl "Crusher" Creel] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 00:58:59,489 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 00:58:59,507 DEBUG using gathering [true]
2019-08-15 00:58:59,527 DEBUG [Carl "Crusher" Creel] node_sampler_interval[5s]
2019-08-15 00:58:59,539 DEBUG Using select timeout of 500
2019-08-15 00:58:59,539 DEBUG Epoll-bug workaround enabled = false
2019-08-15 00:58:59,577 DEBUG [Carl "Crusher" Creel] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:58:59,600 DEBUG [Carl "Crusher" Creel] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:58:59,630 DEBUG [Carl "Crusher" Creel] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 00:59:00,241 DEBUG {conn-10005} pool-connect
2019-08-15 00:59:00,241 DEBUG {conn-10005} pool-recycle
2019-08-15 00:59:16,399 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 00:59:16,492 DEBUG {conn-10005} pool-connect
2019-08-15 00:59:16,577 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 00:59:16,584 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 00:59:16,584 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 00:59:16,585 DEBUG {conn-10005, pstmt-20000} executed. 4.191095 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 00:59:16,589 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 00:59:16,590 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:59:16,594 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:59:16,595 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:59:16,595 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 00:59:16,596 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 00:59:16,596 DEBUG {conn-10005} pool-recycle
2019-08-15 00:59:16,600 DEBUG {conn-10005} pool-connect
2019-08-15 00:59:16,601 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 00:59:16,602 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 00:59:16,602 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 00:59:16,603 DEBUG {conn-10005, pstmt-20001} executed. 0.773654 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 00:59:16,603 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 00:59:16,603 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 00:59:16,603 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 00:59:16,604 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 00:59:16,604 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 00:59:16,604 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 00:59:16,604 DEBUG {conn-10005} pool-recycle
2019-08-15 00:59:16,604 DEBUG {conn-10005} pool-connect
2019-08-15 00:59:16,607 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:59:16,608 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 00:59:16,608 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 00:59:16,609 DEBUG {conn-10005, pstmt-20002} executed. 0.902167 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 00:59:16,609 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 00:59:16,609 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 00:59:16,609 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 00:59:16,609 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 00:59:16,609 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 00:59:16,609 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 00:59:16,610 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 00:59:16,610 DEBUG {conn-10005} pool-recycle
2019-08-15 00:59:16,613 DEBUG {conn-10005} pool-connect
2019-08-15 00:59:16,613 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:59:16,613 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 00:59:16,613 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 00:59:16,614 DEBUG {conn-10005, pstmt-20003} executed. 0.628176 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 00:59:16,614 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 00:59:16,614 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 00:59:16,614 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 00:59:16,614 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 00:59:16,615 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 00:59:16,615 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 00:59:16,615 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 00:59:16,615 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 00:59:16,615 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 00:59:16,616 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 00:59:16,616 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 00:59:16,616 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 00:59:16,616 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 00:59:16,616 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 00:59:16,617 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 00:59:16,617 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 00:59:16,617 DEBUG {conn-10005} pool-recycle
2019-08-15 00:59:16,646 DEBUG {conn-10005} pool-connect
2019-08-15 00:59:16,646 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 00:59:16,647 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 00:59:16,647 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 00:59:16,648 DEBUG {conn-10005, pstmt-20004} executed. 0.761316 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 00:59:16,648 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 00:59:16,648 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 00:59:16,648 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 00:59:16,648 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 00:59:16,648 DEBUG {conn-10005} pool-recycle
2019-08-15 01:01:11,541 DEBUG {conn-10001,procId-1288} connected
2019-08-15 01:01:11,548 DEBUG {conn-10002,procId-1289} connected
2019-08-15 01:01:11,552 DEBUG {conn-10003,procId-1290} connected
2019-08-15 01:01:11,556 DEBUG {conn-10004,procId-1291} connected
2019-08-15 01:01:11,561 DEBUG {conn-10005,procId-1292} connected
2019-08-15 01:01:11,564 DEBUG {conn-10005} pool-connect
2019-08-15 01:01:11,566 DEBUG {conn-10005} pool-recycle
2019-08-15 01:01:11,573 DEBUG {conn-10005} pool-connect
2019-08-15 01:01:11,575 DEBUG {conn-10005} pool-recycle
2019-08-15 01:01:11,853 DEBUG {conn-10005} pool-connect
2019-08-15 01:01:11,888 DEBUG {conn-10005} pool-recycle
2019-08-15 01:01:12,375 INFO [Kosmos] modules [], plugins [], sites []
2019-08-15 01:01:12,386 DEBUG [Kosmos] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 01:01:12,394 DEBUG [Kosmos] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 01:01:12,403 DEBUG [Kosmos] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:01:12,403 DEBUG [Kosmos] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 01:01:12,404 DEBUG [Kosmos] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:01:13,509 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 01:01:13,525 DEBUG using gathering [true]
2019-08-15 01:01:13,544 DEBUG [Kosmos] node_sampler_interval[5s]
2019-08-15 01:01:13,555 DEBUG Using select timeout of 500
2019-08-15 01:01:13,555 DEBUG Epoll-bug workaround enabled = false
2019-08-15 01:01:13,594 DEBUG [Kosmos] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:01:13,619 DEBUG [Kosmos] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:01:13,655 DEBUG [Kosmos] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:01:14,292 DEBUG {conn-10005} pool-connect
2019-08-15 01:01:14,292 DEBUG {conn-10005} pool-recycle
2019-08-15 01:02:15,557 DEBUG {conn-10005} pool-connect
2019-08-15 01:02:15,558 DEBUG {conn-10005} setAutoCommit false
2019-08-15 01:02:15,729 DEBUG {conn-10005, pstmt-20000} created. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 01:02:15,735 DEBUG {conn-10005, pstmt-20000} Parameters : [571345682, 哈哈嗯嗯, $2a$10$3bu7SzrEhqmqQIKlBwJAjOPirajs2S/1R22GezJbItS0NdbPXlyEu, 快快快, 7235235@163.com, 17388657185]
2019-08-15 01:02:15,735 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
2019-08-15 01:02:15,737 DEBUG {conn-10005, pstmt-20000} executed. 3.849762 millis. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 01:02:15,737 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:02:15,739 DEBUG {conn-10005, pstmt-20001} created. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 01:02:15,739 DEBUG {conn-10005, pstmt-20001} Parameters : [571345682, 2]
2019-08-15 01:02:15,739 DEBUG {conn-10005, pstmt-20001} Types : [BIGINT, BIGINT]
2019-08-15 01:02:15,740 DEBUG {conn-10005, pstmt-20001} executed. 0.916561 millis. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 01:02:15,740 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:02:15,745 DEBUG {conn-10005} commited
2019-08-15 01:02:15,745 DEBUG {conn-10005} setAutoCommit true
2019-08-15 01:02:15,747 DEBUG {conn-10005} pool-recycle
2019-08-15 01:04:42,524 DEBUG {conn-10001,procId-1293} connected
2019-08-15 01:04:42,529 DEBUG {conn-10002,procId-1294} connected
2019-08-15 01:04:42,533 DEBUG {conn-10003,procId-1295} connected
2019-08-15 01:04:42,536 DEBUG {conn-10004,procId-1296} connected
2019-08-15 01:04:42,540 DEBUG {conn-10005,procId-1297} connected
2019-08-15 01:04:42,542 DEBUG {conn-10005} pool-connect
2019-08-15 01:04:42,543 DEBUG {conn-10005} pool-recycle
2019-08-15 01:04:42,550 DEBUG {conn-10005} pool-connect
2019-08-15 01:04:42,552 DEBUG {conn-10005} pool-recycle
2019-08-15 01:04:42,820 DEBUG {conn-10005} pool-connect
2019-08-15 01:04:42,851 DEBUG {conn-10005} pool-recycle
2019-08-15 01:04:43,358 INFO [Raving Beauty] modules [], plugins [], sites []
2019-08-15 01:04:43,368 DEBUG [Raving Beauty] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 01:04:43,375 DEBUG [Raving Beauty] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 01:04:43,383 DEBUG [Raving Beauty] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:04:43,383 DEBUG [Raving Beauty] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 01:04:43,383 DEBUG [Raving Beauty] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 01:04:43,383 DEBUG [Raving Beauty] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:04:43,384 DEBUG [Raving Beauty] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 01:04:43,384 DEBUG [Raving Beauty] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 01:04:43,384 DEBUG [Raving Beauty] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:04:43,384 DEBUG [Raving Beauty] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 01:04:43,384 DEBUG [Raving Beauty] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:04:43,384 DEBUG [Raving Beauty] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:04:43,384 DEBUG [Raving Beauty] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 01:04:43,384 DEBUG [Raving Beauty] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 01:04:43,384 DEBUG [Raving Beauty] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 01:04:43,384 DEBUG [Raving Beauty] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:04:44,498 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 01:04:44,512 DEBUG using gathering [true]
2019-08-15 01:04:44,530 DEBUG [Raving Beauty] node_sampler_interval[5s]
2019-08-15 01:04:44,539 DEBUG Using select timeout of 500
2019-08-15 01:04:44,539 DEBUG Epoll-bug workaround enabled = false
2019-08-15 01:04:44,573 DEBUG [Raving Beauty] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:04:44,593 DEBUG [Raving Beauty] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:04:44,623 DEBUG [Raving Beauty] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:04:45,146 DEBUG {conn-10005} pool-connect
2019-08-15 01:04:45,146 DEBUG {conn-10005} pool-recycle
2019-08-15 01:05:31,237 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 01:05:31,332 DEBUG {conn-10005} pool-connect
2019-08-15 01:05:31,419 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:05:31,426 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:05:31,426 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:05:31,427 DEBUG {conn-10005, pstmt-20000} executed. 3.878549 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:05:31,432 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 01:05:31,432 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:05:31,437 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:05:31,439 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:05:31,439 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 01:05:31,440 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:05:31,440 DEBUG {conn-10005} pool-recycle
2019-08-15 01:05:31,444 DEBUG {conn-10005} pool-connect
2019-08-15 01:05:31,445 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:05:31,445 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:05:31,445 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:05:31,446 DEBUG {conn-10005, pstmt-20001} executed. 0.624063 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:05:31,446 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 01:05:31,446 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:05:31,446 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:05:31,447 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:05:31,447 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 01:05:31,447 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:05:31,447 DEBUG {conn-10005} pool-recycle
2019-08-15 01:05:31,447 DEBUG {conn-10005} pool-connect
2019-08-15 01:05:31,451 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:05:31,451 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:05:31,452 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:05:31,453 DEBUG {conn-10005, pstmt-20002} executed. 1.621845 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:05:31,453 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 01:05:31,453 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:05:31,454 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:05:31,454 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:05:31,454 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 01:05:31,454 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 01:05:31,454 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:05:31,455 DEBUG {conn-10005} pool-recycle
2019-08-15 01:05:31,458 DEBUG {conn-10005} pool-connect
2019-08-15 01:05:31,459 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:05:31,459 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:05:31,459 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:05:31,460 DEBUG {conn-10005, pstmt-20003} executed. 0.890344 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:05:31,460 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 01:05:31,460 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:05:31,460 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:05:31,461 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:05:31,461 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:05:31,462 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:05:31,462 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:05:31,462 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:05:31,463 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:05:31,463 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:05:31,463 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:05:31,463 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:05:31,464 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:05:31,464 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:05:31,464 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 01:05:31,464 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:05:31,464 DEBUG {conn-10005} pool-recycle
2019-08-15 01:05:31,498 DEBUG {conn-10005} pool-connect
2019-08-15 01:05:31,499 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:05:31,499 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:05:31,499 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:05:31,500 DEBUG {conn-10005, pstmt-20004} executed. 0.672385 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:05:31,500 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 01:05:31,500 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:05:31,500 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 01:05:31,500 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:05:31,500 DEBUG {conn-10005} pool-recycle
2019-08-15 01:06:08,048 DEBUG {conn-10005} pool-connect
2019-08-15 01:06:08,048 DEBUG {conn-10005} setAutoCommit false
2019-08-15 01:06:08,142 DEBUG {conn-10005, pstmt-20005} created. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 01:06:08,143 DEBUG {conn-10005, pstmt-20005} Parameters : [390027172, uuuu, $2a$10$js3P6cPV6X/qlKblerzCW.ECROhbX4CNJ6jfMvyiY1xpzL/pAlq9m, tttt, 1158767965@qq.com, 17388657185]
2019-08-15 01:06:08,143 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
2019-08-15 01:06:08,144 DEBUG {conn-10005, pstmt-20005} executed. 1.067179 millis. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 01:06:08,144 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:06:08,146 DEBUG {conn-10005, pstmt-20006} created. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 01:06:08,146 DEBUG {conn-10005, pstmt-20006} Parameters : [390027172, 2]
2019-08-15 01:06:08,146 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT, BIGINT]
2019-08-15 01:06:08,147 DEBUG {conn-10005, pstmt-20006} executed. 0.740754 millis. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 01:06:08,147 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:06:08,157 DEBUG {conn-10005} commited
2019-08-15 01:06:08,157 DEBUG {conn-10005} setAutoCommit true
2019-08-15 01:06:08,159 DEBUG {conn-10005} pool-recycle
2019-08-15 01:08:53,484 DEBUG {conn-10001,procId-1298} connected
2019-08-15 01:08:53,491 DEBUG {conn-10002,procId-1299} connected
2019-08-15 01:08:53,495 DEBUG {conn-10003,procId-1300} connected
2019-08-15 01:08:53,499 DEBUG {conn-10004,procId-1301} connected
2019-08-15 01:08:53,502 DEBUG {conn-10005,procId-1302} connected
2019-08-15 01:08:53,505 DEBUG {conn-10005} pool-connect
2019-08-15 01:08:53,506 DEBUG {conn-10005} pool-recycle
2019-08-15 01:08:53,512 DEBUG {conn-10005} pool-connect
2019-08-15 01:08:53,514 DEBUG {conn-10005} pool-recycle
2019-08-15 01:08:53,780 DEBUG {conn-10005} pool-connect
2019-08-15 01:08:53,812 DEBUG {conn-10005} pool-recycle
2019-08-15 01:08:54,304 INFO [Soulfire] modules [], plugins [], sites []
2019-08-15 01:08:54,313 DEBUG [Soulfire] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 01:08:54,321 DEBUG [Soulfire] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 01:08:54,329 DEBUG [Soulfire] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:08:54,330 DEBUG [Soulfire] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 01:08:54,330 DEBUG [Soulfire] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 01:08:54,330 DEBUG [Soulfire] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:08:54,330 DEBUG [Soulfire] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 01:08:54,330 DEBUG [Soulfire] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 01:08:54,330 DEBUG [Soulfire] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:08:54,330 DEBUG [Soulfire] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 01:08:54,330 DEBUG [Soulfire] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:08:54,330 DEBUG [Soulfire] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:08:54,330 DEBUG [Soulfire] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 01:08:54,331 DEBUG [Soulfire] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 01:08:54,331 DEBUG [Soulfire] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 01:08:54,331 DEBUG [Soulfire] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:08:55,415 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 01:08:55,430 DEBUG using gathering [true]
2019-08-15 01:08:55,446 DEBUG [Soulfire] node_sampler_interval[5s]
2019-08-15 01:08:55,455 DEBUG Using select timeout of 500
2019-08-15 01:08:55,455 DEBUG Epoll-bug workaround enabled = false
2019-08-15 01:08:55,491 DEBUG [Soulfire] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:08:55,510 DEBUG [Soulfire] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:08:55,539 DEBUG [Soulfire] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:08:56,072 DEBUG {conn-10005} pool-connect
2019-08-15 01:08:56,072 DEBUG {conn-10005} pool-recycle
2019-08-15 01:09:04,567 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 01:09:04,672 DEBUG {conn-10005} pool-connect
2019-08-15 01:09:04,763 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:09:04,769 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:09:04,769 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:09:04,770 DEBUG {conn-10005, pstmt-20000} executed. 3.524365 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:09:04,773 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 01:09:04,774 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:09:04,780 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:09:04,781 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:09:04,782 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 01:09:04,782 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:09:04,782 DEBUG {conn-10005} pool-recycle
2019-08-15 01:09:04,786 DEBUG {conn-10005} pool-connect
2019-08-15 01:09:04,787 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:09:04,787 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:09:04,787 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:09:04,788 DEBUG {conn-10005, pstmt-20001} executed. 0.718135 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:09:04,788 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 01:09:04,788 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:09:04,788 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:09:04,789 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:09:04,789 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 01:09:04,789 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:09:04,789 DEBUG {conn-10005} pool-recycle
2019-08-15 01:09:04,790 DEBUG {conn-10005} pool-connect
2019-08-15 01:09:04,794 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:09:04,794 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:09:04,795 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:09:04,795 DEBUG {conn-10005, pstmt-20002} executed. 0.81118 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:09:04,795 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 01:09:04,795 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:09:04,796 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:09:04,796 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:09:04,796 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 01:09:04,796 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 01:09:04,796 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:09:04,796 DEBUG {conn-10005} pool-recycle
2019-08-15 01:09:04,799 DEBUG {conn-10005} pool-connect
2019-08-15 01:09:04,799 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:09:04,799 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:09:04,799 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:09:04,800 DEBUG {conn-10005, pstmt-20003} executed. 0.72379 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:09:04,800 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 01:09:04,800 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:09:04,800 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:09:04,801 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:09:04,801 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:09:04,801 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:09:04,801 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:09:04,802 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:09:04,802 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:09:04,802 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:09:04,803 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:09:04,803 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:09:04,803 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:09:04,803 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:09:04,803 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 01:09:04,804 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:09:04,804 DEBUG {conn-10005} pool-recycle
2019-08-15 01:09:04,836 DEBUG {conn-10005} pool-connect
2019-08-15 01:09:04,837 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:09:04,838 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:09:04,838 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:09:04,838 DEBUG {conn-10005, pstmt-20004} executed. 0.620979 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:09:04,838 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 01:09:04,838 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:09:04,838 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 01:09:04,839 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:09:04,839 DEBUG {conn-10005} pool-recycle
2019-08-15 01:09:38,215 DEBUG {conn-10005} pool-connect
2019-08-15 01:09:38,215 DEBUG {conn-10005} setAutoCommit false
2019-08-15 01:09:38,311 DEBUG {conn-10005, pstmt-20005} created. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 01:09:38,312 DEBUG {conn-10005, pstmt-20005} Parameters : [919699115, 5454r, $2a$10$x2EtNBY9w0FBCOVHzKL/.O3XAtheO82Q6TwypeuLCIestn8zbYgIa, kyede, 1158767965@qq.com, 17388657185]
2019-08-15 01:09:38,312 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
2019-08-15 01:09:38,313 DEBUG {conn-10005, pstmt-20005} executed. 1.105734 millis. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 01:09:38,313 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:09:38,315 DEBUG {conn-10005, pstmt-20006} created. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 01:09:38,315 DEBUG {conn-10005, pstmt-20006} Parameters : [919699115, 2]
2019-08-15 01:09:38,315 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT, BIGINT]
2019-08-15 01:09:38,316 DEBUG {conn-10005, pstmt-20006} executed. 0.833284 millis. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 01:09:38,316 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:09:38,324 DEBUG {conn-10005} commited
2019-08-15 01:09:38,324 DEBUG {conn-10005} setAutoCommit true
2019-08-15 01:09:38,326 DEBUG {conn-10005} pool-recycle
2019-08-15 01:10:52,787 DEBUG {conn-10001,procId-1303} connected
2019-08-15 01:10:52,793 DEBUG {conn-10002,procId-1304} connected
2019-08-15 01:10:52,797 DEBUG {conn-10003,procId-1305} connected
2019-08-15 01:10:52,802 DEBUG {conn-10004,procId-1306} connected
2019-08-15 01:10:52,805 DEBUG {conn-10005,procId-1307} connected
2019-08-15 01:10:52,809 DEBUG {conn-10005} pool-connect
2019-08-15 01:10:52,810 DEBUG {conn-10005} pool-recycle
2019-08-15 01:10:52,817 DEBUG {conn-10005} pool-connect
2019-08-15 01:10:52,818 DEBUG {conn-10005} pool-recycle
2019-08-15 01:10:53,095 DEBUG {conn-10005} pool-connect
2019-08-15 01:10:53,125 DEBUG {conn-10005} pool-recycle
2019-08-15 01:10:53,625 INFO [Scanner] modules [], plugins [], sites []
2019-08-15 01:10:53,634 DEBUG [Scanner] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 01:10:53,642 DEBUG [Scanner] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 01:10:53,651 DEBUG [Scanner] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:10:53,652 DEBUG [Scanner] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 01:10:53,652 DEBUG [Scanner] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 01:10:53,652 DEBUG [Scanner] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:10:53,652 DEBUG [Scanner] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 01:10:53,652 DEBUG [Scanner] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 01:10:53,652 DEBUG [Scanner] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:10:53,652 DEBUG [Scanner] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 01:10:53,653 DEBUG [Scanner] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:10:53,653 DEBUG [Scanner] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:10:53,653 DEBUG [Scanner] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 01:10:53,653 DEBUG [Scanner] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 01:10:53,653 DEBUG [Scanner] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 01:10:53,653 DEBUG [Scanner] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:10:54,734 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 01:10:54,749 DEBUG using gathering [true]
2019-08-15 01:10:54,767 DEBUG [Scanner] node_sampler_interval[5s]
2019-08-15 01:10:54,777 DEBUG Using select timeout of 500
2019-08-15 01:10:54,777 DEBUG Epoll-bug workaround enabled = false
2019-08-15 01:10:54,811 DEBUG [Scanner] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:10:54,832 DEBUG [Scanner] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:10:54,861 DEBUG [Scanner] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:10:55,456 DEBUG {conn-10005} pool-connect
2019-08-15 01:10:55,456 DEBUG {conn-10005} pool-recycle
2019-08-15 01:11:26,431 DEBUG {conn-10001,procId-1308} connected
2019-08-15 01:11:26,436 DEBUG {conn-10002,procId-1309} connected
2019-08-15 01:11:26,440 DEBUG {conn-10003,procId-1310} connected
2019-08-15 01:11:26,445 DEBUG {conn-10004,procId-1311} connected
2019-08-15 01:11:26,448 DEBUG {conn-10005,procId-1312} connected
2019-08-15 01:11:26,451 DEBUG {conn-10005} pool-connect
2019-08-15 01:11:26,452 DEBUG {conn-10005} pool-recycle
2019-08-15 01:11:26,460 DEBUG {conn-10005} pool-connect
2019-08-15 01:11:26,462 DEBUG {conn-10005} pool-recycle
2019-08-15 01:11:26,744 DEBUG {conn-10005} pool-connect
2019-08-15 01:11:26,776 DEBUG {conn-10005} pool-recycle
2019-08-15 01:11:27,300 INFO [Termagaira] modules [], plugins [], sites []
2019-08-15 01:11:27,310 DEBUG [Termagaira] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 01:11:27,317 DEBUG [Termagaira] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 01:11:27,326 DEBUG [Termagaira] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:11:27,326 DEBUG [Termagaira] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 01:11:27,326 DEBUG [Termagaira] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 01:11:27,326 DEBUG [Termagaira] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:11:27,327 DEBUG [Termagaira] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 01:11:27,327 DEBUG [Termagaira] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 01:11:27,327 DEBUG [Termagaira] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:11:27,327 DEBUG [Termagaira] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 01:11:27,327 DEBUG [Termagaira] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:11:27,327 DEBUG [Termagaira] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:11:27,327 DEBUG [Termagaira] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 01:11:27,327 DEBUG [Termagaira] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 01:11:27,327 DEBUG [Termagaira] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 01:11:27,327 DEBUG [Termagaira] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:11:28,489 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 01:11:28,502 DEBUG using gathering [true]
2019-08-15 01:11:28,520 DEBUG [Termagaira] node_sampler_interval[5s]
2019-08-15 01:11:28,530 DEBUG Using select timeout of 500
2019-08-15 01:11:28,530 DEBUG Epoll-bug workaround enabled = false
2019-08-15 01:11:28,564 DEBUG [Termagaira] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:11:28,586 DEBUG [Termagaira] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:11:28,615 DEBUG [Termagaira] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:11:29,170 DEBUG {conn-10005} pool-connect
2019-08-15 01:11:29,170 DEBUG {conn-10005} pool-recycle
2019-08-15 01:11:55,776 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 01:11:55,868 DEBUG {conn-10005} pool-connect
2019-08-15 01:11:55,955 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:11:55,962 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:11:55,962 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:11:55,963 DEBUG {conn-10005, pstmt-20000} executed. 3.700172 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:11:55,966 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 01:11:55,967 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:11:55,973 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:11:55,975 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:11:55,976 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 01:11:55,976 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:11:55,977 DEBUG {conn-10005} pool-recycle
2019-08-15 01:11:55,980 DEBUG {conn-10005} pool-connect
2019-08-15 01:11:55,981 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:11:55,981 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:11:55,981 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:11:55,982 DEBUG {conn-10005, pstmt-20001} executed. 0.656963 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:11:55,982 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 01:11:55,982 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:11:55,982 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:11:55,983 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:11:55,983 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 01:11:55,983 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:11:55,983 DEBUG {conn-10005} pool-recycle
2019-08-15 01:11:55,983 DEBUG {conn-10005} pool-connect
2019-08-15 01:11:55,988 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:11:55,988 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:11:55,989 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:11:55,989 DEBUG {conn-10005, pstmt-20002} executed. 0.998296 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:11:55,990 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 01:11:55,990 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:11:55,990 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:11:55,990 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:11:55,990 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 01:11:55,990 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 01:11:55,990 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:11:55,990 DEBUG {conn-10005} pool-recycle
2019-08-15 01:11:55,993 DEBUG {conn-10005} pool-connect
2019-08-15 01:11:55,994 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:11:55,994 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:11:55,994 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:11:55,994 DEBUG {conn-10005, pstmt-20003} executed. 0.631774 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:11:55,994 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 01:11:55,994 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:11:55,995 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:11:55,995 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:11:55,995 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:11:55,995 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:11:55,995 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:11:55,996 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:11:55,996 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:11:55,996 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:11:55,996 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:11:55,997 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:11:55,997 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:11:55,997 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:11:55,997 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 01:11:55,998 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:11:55,998 DEBUG {conn-10005} pool-recycle
2019-08-15 01:11:56,027 DEBUG {conn-10005} pool-connect
2019-08-15 01:11:56,028 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:11:56,029 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:11:56,029 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:11:56,029 DEBUG {conn-10005, pstmt-20004} executed. 0.639999 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:11:56,029 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 01:11:56,029 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:11:56,029 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 01:11:56,030 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:11:56,030 DEBUG {conn-10005} pool-recycle
2019-08-15 01:12:24,059 DEBUG {conn-10005} pool-connect
2019-08-15 01:12:24,059 DEBUG {conn-10005} setAutoCommit false
2019-08-15 01:12:24,158 DEBUG {conn-10005, pstmt-20005} created. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 01:12:24,158 DEBUG {conn-10005, pstmt-20005} Parameters : [566312792, iiii, $2a$10$u/QgRXyeFG69KZ9pSJ18u.HzlQ5OSpSpOHYnZbQ.6ziKbrmxNGxBi, eee, 1158767965@qq.com, 17388657185]
2019-08-15 01:12:24,158 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, VARCHAR]
2019-08-15 01:12:24,159 DEBUG {conn-10005, pstmt-20005} executed. 0.98236 millis. insert into tb_admin_user
     ( id,
      
      
        login_user_name,
      
      
        login_password,
      
      
        nick_name,
      
      
      
      
        email,
      
      
        phone ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
      
        ?,
      
      
        ? )
2019-08-15 01:12:24,159 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:12:24,162 DEBUG {conn-10005, pstmt-20006} created. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 01:12:24,162 DEBUG {conn-10005, pstmt-20006} Parameters : [566312792, 2]
2019-08-15 01:12:24,162 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT, BIGINT]
2019-08-15 01:12:24,163 DEBUG {conn-10005, pstmt-20006} executed. 0.934039 millis. insert into tb_user_authority
     ( user_id,
      
      
        authority_id ) 
     values ( ?,
      
      
        ? )
2019-08-15 01:12:24,163 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:12:24,168 DEBUG {conn-10005} commited
2019-08-15 01:12:24,168 DEBUG {conn-10005} setAutoCommit true
2019-08-15 01:12:24,170 DEBUG {conn-10005} pool-recycle
2019-08-15 01:16:37,030 DEBUG {conn-10001,procId-1313} connected
2019-08-15 01:16:37,037 DEBUG {conn-10002,procId-1314} connected
2019-08-15 01:16:37,041 DEBUG {conn-10003,procId-1315} connected
2019-08-15 01:16:37,044 DEBUG {conn-10004,procId-1316} connected
2019-08-15 01:16:37,048 DEBUG {conn-10005,procId-1317} connected
2019-08-15 01:16:37,051 DEBUG {conn-10005} pool-connect
2019-08-15 01:16:37,052 DEBUG {conn-10005} pool-recycle
2019-08-15 01:16:37,059 DEBUG {conn-10005} pool-connect
2019-08-15 01:16:37,060 DEBUG {conn-10005} pool-recycle
2019-08-15 01:16:37,342 DEBUG {conn-10005} pool-connect
2019-08-15 01:16:37,373 DEBUG {conn-10005} pool-recycle
2019-08-15 01:16:37,906 INFO [Calvin Rankin] modules [], plugins [], sites []
2019-08-15 01:16:37,916 DEBUG [Calvin Rankin] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 01:16:37,923 DEBUG [Calvin Rankin] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 01:16:37,931 DEBUG [Calvin Rankin] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:16:37,932 DEBUG [Calvin Rankin] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 01:16:37,932 DEBUG [Calvin Rankin] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 01:16:37,932 DEBUG [Calvin Rankin] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:16:37,932 DEBUG [Calvin Rankin] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 01:16:37,932 DEBUG [Calvin Rankin] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 01:16:37,932 DEBUG [Calvin Rankin] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:16:37,932 DEBUG [Calvin Rankin] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 01:16:37,932 DEBUG [Calvin Rankin] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:16:37,932 DEBUG [Calvin Rankin] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:16:37,932 DEBUG [Calvin Rankin] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 01:16:37,933 DEBUG [Calvin Rankin] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 01:16:37,933 DEBUG [Calvin Rankin] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 01:16:37,933 DEBUG [Calvin Rankin] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:16:39,075 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 01:16:39,091 DEBUG using gathering [true]
2019-08-15 01:16:39,110 DEBUG [Calvin Rankin] node_sampler_interval[5s]
2019-08-15 01:16:39,120 DEBUG Using select timeout of 500
2019-08-15 01:16:39,120 DEBUG Epoll-bug workaround enabled = false
2019-08-15 01:16:39,157 DEBUG [Calvin Rankin] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:16:39,178 DEBUG [Calvin Rankin] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:16:39,210 DEBUG [Calvin Rankin] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:16:39,749 DEBUG {conn-10005} pool-connect
2019-08-15 01:16:39,749 DEBUG {conn-10005} pool-recycle
2019-08-15 01:16:49,479 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 01:16:49,576 DEBUG {conn-10005} pool-connect
2019-08-15 01:16:49,663 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:16:49,669 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:16:49,669 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:16:49,670 DEBUG {conn-10005, pstmt-20000} executed. 3.877007 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:16:49,674 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 01:16:49,675 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:16:49,680 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:16:49,682 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:16:49,682 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 01:16:49,682 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:16:49,683 DEBUG {conn-10005} pool-recycle
2019-08-15 01:16:49,686 DEBUG {conn-10005} pool-connect
2019-08-15 01:16:49,687 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:16:49,687 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:16:49,687 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:16:49,688 DEBUG {conn-10005, pstmt-20001} executed. 0.677526 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:16:49,688 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 01:16:49,688 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:16:49,688 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:16:49,689 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:16:49,689 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 01:16:49,689 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:16:49,689 DEBUG {conn-10005} pool-recycle
2019-08-15 01:16:49,690 DEBUG {conn-10005} pool-connect
2019-08-15 01:16:49,693 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:16:49,694 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:16:49,694 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:16:49,694 DEBUG {conn-10005, pstmt-20002} executed. 0.923758 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:16:49,695 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 01:16:49,695 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:16:49,695 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:16:49,695 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:16:49,695 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 01:16:49,695 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 01:16:49,695 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:16:49,695 DEBUG {conn-10005} pool-recycle
2019-08-15 01:16:49,698 DEBUG {conn-10005} pool-connect
2019-08-15 01:16:49,698 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:16:49,698 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:16:49,698 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:16:49,699 DEBUG {conn-10005, pstmt-20003} executed. 0.66416 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:16:49,699 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 01:16:49,699 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:16:49,699 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:16:49,700 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:16:49,700 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:16:49,700 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:16:49,700 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:16:49,700 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:16:49,701 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:16:49,701 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:16:49,701 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:16:49,701 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:16:49,701 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:16:49,702 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:16:49,702 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 01:16:49,702 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:16:49,702 DEBUG {conn-10005} pool-recycle
2019-08-15 01:16:49,730 DEBUG {conn-10005} pool-connect
2019-08-15 01:16:49,730 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:16:49,731 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:16:49,731 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:16:49,732 DEBUG {conn-10005, pstmt-20004} executed. 0.657477 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:16:49,732 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 01:16:49,732 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:16:49,732 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 01:16:49,732 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:16:49,732 DEBUG {conn-10005} pool-recycle
2019-08-15 01:17:04,085 DEBUG {conn-10005} pool-connect
2019-08-15 01:17:04,086 DEBUG {conn-10005, pstmt-20005} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:17:04,086 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 01:17:04,086 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 01:17:04,089 DEBUG {conn-10005, pstmt-20005} executed. 2.415033 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:17:04,089 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-15 01:17:04,089 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:17:04,089 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:17:04,090 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:17:04,091 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-15 01:17:04,091 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:17:04,091 DEBUG {conn-10005} pool-recycle
2019-08-15 01:17:04,204 DEBUG {conn-10005} pool-connect
2019-08-15 01:17:04,205 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:17:04,205 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:17:04,205 DEBUG {conn-10005, pstmt-20000} executed. 0.627148 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:17:04,205 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-15 01:17:04,205 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:17:04,205 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:17:04,206 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:17:04,206 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-15 01:17:04,206 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:17:04,206 DEBUG {conn-10005} pool-recycle
2019-08-15 01:17:04,206 DEBUG {conn-10005} pool-connect
2019-08-15 01:17:04,206 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:17:04,206 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:17:04,206 DEBUG {conn-10005, pstmt-20001} executed. 0.573686 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:17:04,206 DEBUG {conn-10005, pstmt-20001, rs-50007} open
2019-08-15 01:17:04,206 DEBUG {conn-10005, pstmt-20001, rs-50007} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:17:04,207 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:17:04,207 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:17:04,207 DEBUG {conn-10005, pstmt-20001, rs-50007} closed
2019-08-15 01:17:04,207 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:17:04,207 DEBUG {conn-10005} pool-recycle
2019-08-15 01:17:04,207 DEBUG {conn-10005} pool-connect
2019-08-15 01:17:04,208 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:17:04,208 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:17:04,208 DEBUG {conn-10005, pstmt-20002} executed. 0.603501 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:17:04,208 DEBUG {conn-10005, pstmt-20002, rs-50008} open
2019-08-15 01:17:04,208 DEBUG {conn-10005, pstmt-20002, rs-50008} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:17:04,208 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:17:04,209 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:17:04,209 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [139, 1, jqGrid]
2019-08-15 01:17:04,209 DEBUG {conn-10005, pstmt-20002, rs-50008} closed
2019-08-15 01:17:04,209 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:17:04,209 DEBUG {conn-10005} pool-recycle
2019-08-15 01:17:04,209 DEBUG {conn-10005} pool-connect
2019-08-15 01:17:04,209 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:17:04,209 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:17:04,210 DEBUG {conn-10005, pstmt-20003} executed. 0.477558 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:17:04,210 DEBUG {conn-10005, pstmt-20003, rs-50009} open
2019-08-15 01:17:04,210 DEBUG {conn-10005, pstmt-20003, rs-50009} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:17:04,210 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:17:04,210 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:17:04,211 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:17:04,211 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:17:04,212 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:17:04,212 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:17:04,212 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:17:04,212 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:17:04,212 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:17:04,212 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:17:04,212 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:17:04,213 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:17:04,213 DEBUG {conn-10005, pstmt-20003, rs-50009} closed
2019-08-15 01:17:04,213 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:17:04,213 DEBUG {conn-10005} pool-recycle
2019-08-15 01:17:04,226 DEBUG {conn-10005} pool-connect
2019-08-15 01:17:04,226 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:17:04,226 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:17:04,226 DEBUG {conn-10005, pstmt-20004} executed. 0.539758 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:17:04,226 DEBUG {conn-10005, pstmt-20004, rs-50010} open
2019-08-15 01:17:04,226 DEBUG {conn-10005, pstmt-20004, rs-50010} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:17:04,227 DEBUG {conn-10005, pstmt-20004, rs-50010} closed
2019-08-15 01:17:04,227 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:17:04,227 DEBUG {conn-10005} pool-recycle
2019-08-15 01:18:39,149 DEBUG {conn-10001,procId-1318} connected
2019-08-15 01:18:39,157 DEBUG {conn-10002,procId-1319} connected
2019-08-15 01:18:39,163 DEBUG {conn-10003,procId-1320} connected
2019-08-15 01:18:39,167 DEBUG {conn-10004,procId-1321} connected
2019-08-15 01:18:39,171 DEBUG {conn-10005,procId-1322} connected
2019-08-15 01:18:39,178 DEBUG {conn-10005} pool-connect
2019-08-15 01:18:39,181 DEBUG {conn-10005} pool-recycle
2019-08-15 01:18:39,189 DEBUG {conn-10005} pool-connect
2019-08-15 01:18:39,191 DEBUG {conn-10005} pool-recycle
2019-08-15 01:18:39,507 DEBUG {conn-10005} pool-connect
2019-08-15 01:18:39,542 DEBUG {conn-10005} pool-recycle
2019-08-15 01:18:40,126 INFO [Plazm] modules [], plugins [], sites []
2019-08-15 01:18:40,136 DEBUG [Plazm] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 01:18:40,145 DEBUG [Plazm] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 01:18:40,155 DEBUG [Plazm] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:18:40,156 DEBUG [Plazm] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 01:18:40,156 DEBUG [Plazm] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 01:18:40,156 DEBUG [Plazm] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:18:40,156 DEBUG [Plazm] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 01:18:40,156 DEBUG [Plazm] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 01:18:40,156 DEBUG [Plazm] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:18:40,156 DEBUG [Plazm] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 01:18:40,156 DEBUG [Plazm] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:18:40,156 DEBUG [Plazm] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:18:40,156 DEBUG [Plazm] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 01:18:40,157 DEBUG [Plazm] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 01:18:40,157 DEBUG [Plazm] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 01:18:40,157 DEBUG [Plazm] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:18:41,570 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 01:18:41,595 DEBUG using gathering [true]
2019-08-15 01:18:41,623 DEBUG [Plazm] node_sampler_interval[5s]
2019-08-15 01:18:41,634 DEBUG Using select timeout of 500
2019-08-15 01:18:41,634 DEBUG Epoll-bug workaround enabled = false
2019-08-15 01:18:41,670 DEBUG [Plazm] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:18:41,693 DEBUG [Plazm] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:18:41,726 DEBUG [Plazm] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:18:42,374 DEBUG {conn-10005} pool-connect
2019-08-15 01:18:42,374 DEBUG {conn-10005} pool-recycle
2019-08-15 01:18:49,883 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 01:18:50,087 DEBUG {conn-10005} pool-connect
2019-08-15 01:18:50,327 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:18:50,341 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:18:50,341 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:18:50,343 DEBUG {conn-10005, pstmt-20000} executed. 7.82444 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:18:50,350 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 01:18:50,352 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:18:50,361 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:18:50,365 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:18:50,366 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 01:18:50,367 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:18:50,368 DEBUG {conn-10005} pool-recycle
2019-08-15 01:18:50,376 DEBUG {conn-10005} pool-connect
2019-08-15 01:18:50,378 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:18:50,379 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:18:50,379 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:18:50,380 DEBUG {conn-10005, pstmt-20001} executed. 1.228079 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:18:50,380 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 01:18:50,380 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:18:50,380 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:18:50,381 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:18:50,382 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 01:18:50,382 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:18:50,383 DEBUG {conn-10005} pool-recycle
2019-08-15 01:18:50,384 DEBUG {conn-10005} pool-connect
2019-08-15 01:18:50,391 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:18:50,392 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:18:50,392 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:18:50,393 DEBUG {conn-10005, pstmt-20002} executed. 1.49436 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:18:50,394 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 01:18:50,394 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:18:50,394 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:18:50,394 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:18:50,394 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 01:18:50,395 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 01:18:50,395 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:18:50,395 DEBUG {conn-10005} pool-recycle
2019-08-15 01:18:50,402 DEBUG {conn-10005} pool-connect
2019-08-15 01:18:50,403 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:18:50,403 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:18:50,403 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:18:50,404 DEBUG {conn-10005, pstmt-20003} executed. 1.087227 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:18:50,404 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 01:18:50,404 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:18:50,405 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:18:50,405 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:18:50,406 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:18:50,406 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:18:50,406 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:18:50,407 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:18:50,408 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:18:50,408 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:18:50,409 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:18:50,409 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:18:50,410 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:18:50,410 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:18:50,411 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 01:18:50,411 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:18:50,411 DEBUG {conn-10005} pool-recycle
2019-08-15 01:18:50,479 DEBUG {conn-10005} pool-connect
2019-08-15 01:18:50,481 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:18:50,482 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:18:50,483 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:18:50,484 DEBUG {conn-10005, pstmt-20004} executed. 1.419307 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:18:50,484 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 01:18:50,484 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:18:50,485 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 01:18:50,485 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:18:50,485 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:04,371 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:04,371 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:19:04,371 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:19:04,372 DEBUG {conn-10005, pstmt-20000} executed. 0.829171 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:19:04,372 DEBUG {conn-10005, pstmt-20000, rs-50005} open
2019-08-15 01:19:04,372 DEBUG {conn-10005, pstmt-20000, rs-50005} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:19:04,372 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:19:04,373 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:19:04,373 DEBUG {conn-10005, pstmt-20000, rs-50005} closed
2019-08-15 01:19:04,373 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:19:04,373 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:04,373 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:04,373 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:19:04,373 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:19:04,374 DEBUG {conn-10005, pstmt-20001} executed. 0.551582 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:19:04,374 DEBUG {conn-10005, pstmt-20001, rs-50006} open
2019-08-15 01:19:04,374 DEBUG {conn-10005, pstmt-20001, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:19:04,375 DEBUG {conn-10005, pstmt-20001, rs-50006} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:19:04,375 DEBUG {conn-10005, pstmt-20001, rs-50006} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:19:04,375 DEBUG {conn-10005, pstmt-20001, rs-50006} closed
2019-08-15 01:19:04,375 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:19:04,376 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:04,376 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:04,376 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:19:04,376 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:19:04,376 DEBUG {conn-10005, pstmt-20002} executed. 0.684208 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:19:04,377 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-15 01:19:04,377 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:19:04,377 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:19:04,377 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:19:04,377 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [139, 1, jqGrid]
2019-08-15 01:19:04,377 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-15 01:19:04,377 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:19:04,377 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:04,377 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:04,377 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:19:04,377 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:19:04,378 DEBUG {conn-10005, pstmt-20003} executed. 0.38657 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:19:04,378 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-15 01:19:04,378 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:19:04,378 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:04,378 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:04,378 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:04,378 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:04,379 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:04,379 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:04,380 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:04,380 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:04,380 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:04,380 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:19:04,380 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:19:04,380 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:19:04,380 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-15 01:19:04,380 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:19:04,381 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:04,389 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:04,389 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:19:04,389 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:19:04,390 DEBUG {conn-10005, pstmt-20004} executed. 0.669814 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:19:04,390 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-15 01:19:04,390 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:19:04,390 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-15 01:19:04,390 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:19:04,390 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:09,785 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:09,786 DEBUG {conn-10005, pstmt-20005} created. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
2019-08-15 01:19:09,786 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 01:19:09,786 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 01:19:09,787 DEBUG {conn-10005, pstmt-20005} executed. 0.964368 millis. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
2019-08-15 01:19:09,787 DEBUG {conn-10005, pstmt-20005, rs-50010} open
2019-08-15 01:19:09,787 DEBUG {conn-10005, pstmt-20005, rs-50010} Header: [link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, create_time]
2019-08-15 01:19:09,788 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [32, 0, fh, 567457, sf, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:19:09,788 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [31, 0, dg, 658, 手动阀, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:19:09,788 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [30, 0, 接口, 090, 模拟, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:19:09,789 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [29, 0, 校验码, 745, 如果和人, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:19:09,789 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [28, 0, 很关键, 456, 天涯海角, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:19:09,789 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [27, 0, 染发膏, 456, 突然好几天, 1, 0, 2019-11-04 00:00:00.0]
2019-08-15 01:19:09,790 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [26, 0, 翻滚吧, 345, 姑获鸟, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:19:09,790 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [25, 0, 分别, 34534, 法国红酒, 1, 0, 2019-09-23 00:00:00.0]
2019-08-15 01:19:09,790 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [24, 0, 4356fg地方, 345, 儿童, 1, 0, 2019-06-05 00:00:00.0]
2019-08-15 01:19:09,790 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [23, 0, 后就开始的, 34534, 放电饭锅, 0, 0, 2019-04-04 00:00:00.0]
2019-08-15 01:19:09,791 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [22, 0, 托尔斯泰, 34534, 的双方各是地方, 1, 0, 2019-04-05 00:00:00.0]
2019-08-15 01:19:09,791 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [21, 0, test2, 2222222222222222, sdgsfgdg, 0, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:19:09,791 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [20, 0, test1, 1111111111, dfgs, 0, 0, 2019-04-03 00:00:00.0]
2019-08-15 01:19:09,791 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [19, 2, 《玩转Spring Boot 系列》, https://www.shiyanlou.com/courses/1274, SpringBoot实战课程, 20, 0, 2019-04-25 00:10:30.0]
2019-08-15 01:19:09,791 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [18, 2, 谷歌浏览器Chrome插件打包下载, https://www.crx4chrome.com/, 垂直专业的资源网站, 19, 0, 2019-07-25 00:07:27.0]
2019-08-15 01:19:09,791 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [17, 2, 《SSM 搭建精美实用的管理系统》, https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9, Spring+SpringMVC+MyBatis实战课程, 18, 0, 2019-04-25 00:06:52.0]
2019-08-15 01:19:09,793 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [16, 1, 实验楼, https://www.shiyanlou.com/, 一家专注于IT技术的在线实训平台, 17, 0, 2019-04-25 00:03:48.0]
2019-08-15 01:19:09,793 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [14, 0, dalaoyang, https://www.dalaoyang.cn/, dalaoyang, 0, 0, 2019-04-24 23:31:50.0]
2019-08-15 01:19:09,793 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [13, 0, 郭赵晖, http://guozh.net/, 老郭三分地, 0, 0, 2019-04-24 23:30:19.0]
2019-08-15 01:19:09,793 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [9, 0, 纯洁的微笑, http://www.ityouknow.com, 分享技术，分享生活, 3, 0, 2018-10-23 04:27:16.0]
2019-08-15 01:19:09,793 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [8, 0, Giraffe Home, https://yemengying.com/, Giraffe Home, 0, 0, 2018-10-23 04:27:04.0]
2019-08-15 01:19:09,793 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [7, 0, 猿天地, http://cxytiandi.com, 一个综合性的网站,以程序猿用户为主,提供各种开发相关的内容, 12, 0, 2018-10-23 04:02:41.0]
2019-08-15 01:19:09,794 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [6, 0, 梁桂钊的博客, http://blog.720ui.com, 后端攻城狮, 1, 0, 2018-10-23 04:01:38.0]
2019-08-15 01:19:09,794 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [5, 1, CSDN, https://www.csdn.net/, CSDN-专业IT技术社区官网, 4, 0, 2018-10-23 03:56:47.0]
2019-08-15 01:19:09,794 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [4, 1, CSDN 图文课, https://gitchat.csdn.net, IT优质内容平台, 6, 0, 2019-07-25 03:55:55.0]
2019-08-15 01:19:09,794 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [3, 2, Kuky的博客, http://321kuky.com, 个人独立博客13blog, 14, 0, 2019-07-25 03:53:34.0]
2019-08-15 01:19:09,794 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [2, 2, Kuky的GitHub, https://github.com/Kukyhmy, 分享代码的地方, 1, 0, 2019-07-25 03:41:04.0]
2019-08-15 01:19:09,794 DEBUG {conn-10005, pstmt-20005, rs-50010} closed
2019-08-15 01:19:09,794 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:19:09,794 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:09,795 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:09,796 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:19:09,796 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:19:09,796 DEBUG {conn-10005, pstmt-20003} executed. 0.547983 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:19:09,796 DEBUG {conn-10005, pstmt-20003, rs-50011} open
2019-08-15 01:19:09,796 DEBUG {conn-10005, pstmt-20003, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:19:09,796 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:09,796 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:09,797 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:09,797 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:09,797 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:09,797 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:09,797 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:09,797 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:09,797 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:09,797 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:19:09,798 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:19:09,798 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:19:09,798 DEBUG {conn-10005, pstmt-20003, rs-50011} closed
2019-08-15 01:19:09,798 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:19:09,798 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:23,323 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:23,324 DEBUG {conn-10005, pstmt-20006} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:19:23,324 DEBUG {conn-10005, pstmt-20006} Parameters : [admin]
2019-08-15 01:19:23,324 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR]
2019-08-15 01:19:23,327 DEBUG {conn-10005, pstmt-20006} executed. 2.642245 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:19:23,327 DEBUG {conn-10005, pstmt-20006, rs-50012} open
2019-08-15 01:19:23,327 DEBUG {conn-10005, pstmt-20006, rs-50012} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:19:23,327 DEBUG {conn-10005, pstmt-20006, rs-50012} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:19:23,328 DEBUG {conn-10005, pstmt-20006, rs-50012} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:19:23,328 DEBUG {conn-10005, pstmt-20006, rs-50012} closed
2019-08-15 01:19:23,328 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:19:23,328 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:23,441 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:23,441 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:19:23,441 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:19:23,442 DEBUG {conn-10005, pstmt-20000} executed. 0.700144 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:19:23,442 DEBUG {conn-10005, pstmt-20000, rs-50013} open
2019-08-15 01:19:23,442 DEBUG {conn-10005, pstmt-20000, rs-50013} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:19:23,443 DEBUG {conn-10005, pstmt-20000, rs-50013} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:19:23,443 DEBUG {conn-10005, pstmt-20000, rs-50013} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:19:23,443 DEBUG {conn-10005, pstmt-20000, rs-50013} closed
2019-08-15 01:19:23,444 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:19:23,444 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:23,444 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:23,444 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:19:23,444 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:19:23,444 DEBUG {conn-10005, pstmt-20001} executed. 0.588594 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:19:23,445 DEBUG {conn-10005, pstmt-20001, rs-50014} open
2019-08-15 01:19:23,445 DEBUG {conn-10005, pstmt-20001, rs-50014} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:19:23,445 DEBUG {conn-10005, pstmt-20001, rs-50014} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:19:23,445 DEBUG {conn-10005, pstmt-20001, rs-50014} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:19:23,446 DEBUG {conn-10005, pstmt-20001, rs-50014} closed
2019-08-15 01:19:23,446 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:19:23,446 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:23,447 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:23,447 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:19:23,447 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:19:23,448 DEBUG {conn-10005, pstmt-20002} executed. 1.050216 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:19:23,448 DEBUG {conn-10005, pstmt-20002, rs-50015} open
2019-08-15 01:19:23,448 DEBUG {conn-10005, pstmt-20002, rs-50015} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:19:23,448 DEBUG {conn-10005, pstmt-20002, rs-50015} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:19:23,448 DEBUG {conn-10005, pstmt-20002, rs-50015} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:19:23,448 DEBUG {conn-10005, pstmt-20002, rs-50015} Result: [139, 1, jqGrid]
2019-08-15 01:19:23,448 DEBUG {conn-10005, pstmt-20002, rs-50015} closed
2019-08-15 01:19:23,449 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:19:23,449 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:23,449 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:23,449 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:19:23,449 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:19:23,449 DEBUG {conn-10005, pstmt-20003} executed. 0.553638 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:19:23,450 DEBUG {conn-10005, pstmt-20003, rs-50016} open
2019-08-15 01:19:23,450 DEBUG {conn-10005, pstmt-20003, rs-50016} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:19:23,450 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:23,450 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:23,450 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:23,450 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:23,450 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:19:23,450 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:23,450 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:23,451 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:23,451 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:19:23,451 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:19:23,451 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:19:23,451 DEBUG {conn-10005, pstmt-20003, rs-50016} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:19:23,451 DEBUG {conn-10005, pstmt-20003, rs-50016} closed
2019-08-15 01:19:23,451 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:19:23,451 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:23,460 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:23,460 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:19:23,460 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:19:23,460 DEBUG {conn-10005, pstmt-20004} executed. 0.469847 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:19:23,460 DEBUG {conn-10005, pstmt-20004, rs-50017} open
2019-08-15 01:19:23,460 DEBUG {conn-10005, pstmt-20004, rs-50017} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:19:23,461 DEBUG {conn-10005, pstmt-20004, rs-50017} closed
2019-08-15 01:19:23,461 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:19:23,461 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:36,370 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:36,371 DEBUG {conn-10005, pstmt-20007} created. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:19:36,372 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:19:36,372 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:19:36,373 DEBUG {conn-10005, pstmt-20007} executed. 1.121156 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:19:36,373 DEBUG {conn-10005, pstmt-20007, rs-50018} open
2019-08-15 01:19:36,373 DEBUG {conn-10005, pstmt-20007, rs-50018} Header: [count(*)]
2019-08-15 01:19:36,373 DEBUG {conn-10005, pstmt-20007, rs-50018} Result: [4]
2019-08-15 01:19:36,376 DEBUG {conn-10005, pstmt-20007, rs-50018} closed
2019-08-15 01:19:36,376 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:19:36,376 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:36,377 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:36,377 DEBUG {conn-10005, pstmt-20008} created. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:19:36,377 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:19:36,377 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:19:36,378 DEBUG {conn-10005, pstmt-20008} executed. 0.51714 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:19:36,378 DEBUG {conn-10005, pstmt-20008, rs-50019} open
2019-08-15 01:19:36,378 DEBUG {conn-10005, pstmt-20008, rs-50019} Header: [count(*)]
2019-08-15 01:19:36,378 DEBUG {conn-10005, pstmt-20008, rs-50019} Result: [2]
2019-08-15 01:19:36,378 DEBUG {conn-10005, pstmt-20008, rs-50019} closed
2019-08-15 01:19:36,378 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:19:36,378 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:36,379 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:36,379 DEBUG {conn-10005, pstmt-20009} created. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:19:36,379 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:19:36,379 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:19:36,380 DEBUG {conn-10005, pstmt-20009} executed. 0.438489 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:19:36,380 DEBUG {conn-10005, pstmt-20009, rs-50020} open
2019-08-15 01:19:36,380 DEBUG {conn-10005, pstmt-20009, rs-50020} Header: [count(*)]
2019-08-15 01:19:36,380 DEBUG {conn-10005, pstmt-20009, rs-50020} Result: [27]
2019-08-15 01:19:36,381 DEBUG {conn-10005, pstmt-20009, rs-50020} closed
2019-08-15 01:19:36,381 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:19:36,381 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:36,381 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:36,381 DEBUG {conn-10005, pstmt-20010} created. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:19:36,381 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:19:36,381 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:19:36,381 DEBUG {conn-10005, pstmt-20010} executed. 0.393766 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:19:36,381 DEBUG {conn-10005, pstmt-20010, rs-50021} open
2019-08-15 01:19:36,381 DEBUG {conn-10005, pstmt-20010, rs-50021} Header: [count(*)]
2019-08-15 01:19:36,381 DEBUG {conn-10005, pstmt-20010, rs-50021} Result: [14]
2019-08-15 01:19:36,381 DEBUG {conn-10005, pstmt-20010, rs-50021} closed
2019-08-15 01:19:36,381 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:19:36,381 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:36,381 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:36,382 DEBUG {conn-10005, pstmt-20011} created. select count(*)  from tb_admin_user
2019-08-15 01:19:36,382 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:19:36,382 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:19:36,382 DEBUG {conn-10005, pstmt-20011} executed. 0.344417 millis. select count(*)  from tb_admin_user
2019-08-15 01:19:36,382 DEBUG {conn-10005, pstmt-20011, rs-50022} open
2019-08-15 01:19:36,382 DEBUG {conn-10005, pstmt-20011, rs-50022} Header: [count(*)]
2019-08-15 01:19:36,382 DEBUG {conn-10005, pstmt-20011, rs-50022} Result: [10]
2019-08-15 01:19:36,383 DEBUG {conn-10005, pstmt-20011, rs-50022} closed
2019-08-15 01:19:36,383 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:19:36,383 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:36,383 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:36,383 DEBUG {conn-10005, pstmt-20012} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:19:36,383 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 01:19:36,383 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 01:19:36,391 DEBUG {conn-10005, pstmt-20012} executed. 7.190609 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:19:36,391 DEBUG {conn-10005, pstmt-20012, rs-50023} open
2019-08-15 01:19:36,391 DEBUG {conn-10005, pstmt-20012, rs-50023} Header: [count(*)]
2019-08-15 01:19:36,391 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [5]
2019-08-15 01:19:36,391 DEBUG {conn-10005, pstmt-20012, rs-50023} closed
2019-08-15 01:19:36,391 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:19:36,391 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:46,240 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:46,241 DEBUG {conn-10005, pstmt-20013} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:19:46,241 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:19:46,241 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:19:46,242 DEBUG {conn-10005, pstmt-20013} executed. 0.872866 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:19:46,242 DEBUG {conn-10005, pstmt-20013, rs-50024} open
2019-08-15 01:19:46,242 DEBUG {conn-10005, pstmt-20013, rs-50024} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:19:46,243 DEBUG {conn-10005, pstmt-20013, rs-50024} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:19:46,243 DEBUG {conn-10005, pstmt-20013, rs-50024} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:19:46,243 DEBUG {conn-10005, pstmt-20013, rs-50024} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:19:46,244 DEBUG {conn-10005, pstmt-20013, rs-50024} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:19:46,244 DEBUG {conn-10005, pstmt-20013, rs-50024} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:19:46,245 DEBUG {conn-10005, pstmt-20013, rs-50024} closed
2019-08-15 01:19:46,245 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:19:46,245 DEBUG {conn-10005} pool-recycle
2019-08-15 01:19:46,246 DEBUG {conn-10005} pool-connect
2019-08-15 01:19:46,246 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 01:19:46,246 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 01:19:46,246 DEBUG {conn-10005, pstmt-20012} executed. 0.674441 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:19:46,247 DEBUG {conn-10005, pstmt-20012, rs-50025} open
2019-08-15 01:19:46,247 DEBUG {conn-10005, pstmt-20012, rs-50025} Header: [count(*)]
2019-08-15 01:19:46,247 DEBUG {conn-10005, pstmt-20012, rs-50025} Result: [5]
2019-08-15 01:19:46,247 DEBUG {conn-10005, pstmt-20012, rs-50025} closed
2019-08-15 01:19:46,247 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:19:46,247 DEBUG {conn-10005} pool-recycle
2019-08-15 01:20:13,085 DEBUG {conn-10005} pool-connect
2019-08-15 01:20:13,088 DEBUG {conn-10005, pstmt-20014} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:20:13,089 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:20:13,089 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:20:13,090 DEBUG {conn-10005, pstmt-20014} executed. 0.900111 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:20:13,090 DEBUG {conn-10005, pstmt-20014, rs-50026} open
2019-08-15 01:20:13,090 DEBUG {conn-10005, pstmt-20014, rs-50026} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:20:13,090 DEBUG {conn-10005, pstmt-20014, rs-50026} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:20:13,090 DEBUG {conn-10005, pstmt-20014, rs-50026} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:20:13,090 DEBUG {conn-10005, pstmt-20014, rs-50026} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:20:13,091 DEBUG {conn-10005, pstmt-20014, rs-50026} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:20:13,091 DEBUG {conn-10005, pstmt-20014, rs-50026} closed
2019-08-15 01:20:13,091 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:20:13,091 DEBUG {conn-10005} pool-recycle
2019-08-15 01:20:13,091 DEBUG {conn-10005} pool-connect
2019-08-15 01:20:13,091 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:20:13,091 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:20:13,092 DEBUG {conn-10005, pstmt-20007} executed. 0.627147 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:20:13,092 DEBUG {conn-10005, pstmt-20007, rs-50027} open
2019-08-15 01:20:13,092 DEBUG {conn-10005, pstmt-20007, rs-50027} Header: [count(*)]
2019-08-15 01:20:13,092 DEBUG {conn-10005, pstmt-20007, rs-50027} Result: [4]
2019-08-15 01:20:13,093 DEBUG {conn-10005, pstmt-20007, rs-50027} closed
2019-08-15 01:20:13,093 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:20:13,093 DEBUG {conn-10005} pool-recycle
2019-08-15 01:20:32,421 DEBUG {conn-10005} pool-connect
2019-08-15 01:20:32,422 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:20:32,422 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:20:32,422 DEBUG {conn-10005, pstmt-20013} executed. 0.742297 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:20:32,422 DEBUG {conn-10005, pstmt-20013, rs-50028} open
2019-08-15 01:20:32,422 DEBUG {conn-10005, pstmt-20013, rs-50028} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:20:32,423 DEBUG {conn-10005, pstmt-20013, rs-50028} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:20:32,423 DEBUG {conn-10005, pstmt-20013, rs-50028} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:20:32,423 DEBUG {conn-10005, pstmt-20013, rs-50028} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:20:32,423 DEBUG {conn-10005, pstmt-20013, rs-50028} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:20:32,424 DEBUG {conn-10005, pstmt-20013, rs-50028} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:20:32,424 DEBUG {conn-10005, pstmt-20013, rs-50028} closed
2019-08-15 01:20:32,424 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:20:32,424 DEBUG {conn-10005} pool-recycle
2019-08-15 01:20:32,424 DEBUG {conn-10005} pool-connect
2019-08-15 01:20:32,425 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 01:20:32,425 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 01:20:32,425 DEBUG {conn-10005, pstmt-20012} executed. 0.473959 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:20:32,425 DEBUG {conn-10005, pstmt-20012, rs-50029} open
2019-08-15 01:20:32,425 DEBUG {conn-10005, pstmt-20012, rs-50029} Header: [count(*)]
2019-08-15 01:20:32,425 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [5]
2019-08-15 01:20:32,425 DEBUG {conn-10005, pstmt-20012, rs-50029} closed
2019-08-15 01:20:32,425 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:20:32,425 DEBUG {conn-10005} pool-recycle
2019-08-15 01:20:34,185 DEBUG {conn-10005} pool-connect
2019-08-15 01:20:34,185 DEBUG {conn-10005, pstmt-20015} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:20:34,186 DEBUG {conn-10005, pstmt-20015} Parameters : [0, 10]
2019-08-15 01:20:34,186 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
2019-08-15 01:20:34,187 DEBUG {conn-10005, pstmt-20015} executed. 1.099565 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:20:34,187 DEBUG {conn-10005, pstmt-20015, rs-50030} open
2019-08-15 01:20:34,187 DEBUG {conn-10005, pstmt-20015, rs-50030} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:20:34,187 DEBUG {conn-10005, pstmt-20015, rs-50030} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:20:34,188 DEBUG {conn-10005, pstmt-20015, rs-50030} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:20:34,188 DEBUG {conn-10005, pstmt-20015, rs-50030} closed
2019-08-15 01:20:34,189 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 01:20:34,189 DEBUG {conn-10005} pool-recycle
2019-08-15 01:20:34,189 DEBUG {conn-10005} pool-connect
2019-08-15 01:20:34,190 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:20:34,190 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:20:34,190 DEBUG {conn-10005, pstmt-20008} executed. 0.971565 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:20:34,191 DEBUG {conn-10005, pstmt-20008, rs-50031} open
2019-08-15 01:20:34,191 DEBUG {conn-10005, pstmt-20008, rs-50031} Header: [count(*)]
2019-08-15 01:20:34,191 DEBUG {conn-10005, pstmt-20008, rs-50031} Result: [2]
2019-08-15 01:20:34,191 DEBUG {conn-10005, pstmt-20008, rs-50031} closed
2019-08-15 01:20:34,191 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:20:34,191 DEBUG {conn-10005} pool-recycle
2019-08-15 01:20:37,203 DEBUG {conn-10005} pool-connect
2019-08-15 01:20:37,204 DEBUG {conn-10005, pstmt-20016} created. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:20:37,205 DEBUG {conn-10005, pstmt-20016} Parameters : [0, 10]
2019-08-15 01:20:37,205 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER, INTEGER]
2019-08-15 01:20:37,206 DEBUG {conn-10005, pstmt-20016} executed. 0.839453 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:20:37,206 DEBUG {conn-10005, pstmt-20016, rs-50032} open
2019-08-15 01:20:37,206 DEBUG {conn-10005, pstmt-20016, rs-50032} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 01:20:37,206 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 01:20:37,206 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:20:37,207 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:20:37,207 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:20:37,207 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:20:37,208 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:20:37,208 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:20:37,208 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [337575483, oooo, 小灰, 0, null, 1158767965@qq.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:20:37,209 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:20:37,209 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:20:37,209 DEBUG {conn-10005, pstmt-20016, rs-50032} closed
2019-08-15 01:20:37,209 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 01:20:37,210 DEBUG {conn-10005} pool-recycle
2019-08-15 01:20:37,211 DEBUG {conn-10005} pool-connect
2019-08-15 01:20:37,211 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:20:37,212 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:20:37,212 DEBUG {conn-10005, pstmt-20011} executed. 0.551581 millis. select count(*)  from tb_admin_user
2019-08-15 01:20:37,212 DEBUG {conn-10005, pstmt-20011, rs-50033} open
2019-08-15 01:20:37,212 DEBUG {conn-10005, pstmt-20011, rs-50033} Header: [count(*)]
2019-08-15 01:20:37,212 DEBUG {conn-10005, pstmt-20011, rs-50033} Result: [10]
2019-08-15 01:20:37,213 DEBUG {conn-10005, pstmt-20011, rs-50033} closed
2019-08-15 01:20:37,213 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:20:37,213 DEBUG {conn-10005} pool-recycle
2019-08-15 01:20:39,219 DEBUG {conn-10005} pool-connect
2019-08-15 01:20:39,220 DEBUG {conn-10005, pstmt-20017} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 01:20:39,220 DEBUG {conn-10005, pstmt-20017} Parameters : []
2019-08-15 01:20:39,220 DEBUG {conn-10005, pstmt-20017} Types : []
2019-08-15 01:20:39,221 DEBUG {conn-10005, pstmt-20017} executed. 1.06975 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 01:20:39,221 DEBUG {conn-10005, pstmt-20017, rs-50034} open
2019-08-15 01:20:39,221 DEBUG {conn-10005, pstmt-20017, rs-50034} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:20:39,221 DEBUG {conn-10005, pstmt-20017, rs-50034} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:20:39,222 DEBUG {conn-10005, pstmt-20017, rs-50034} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:20:39,222 DEBUG {conn-10005, pstmt-20017, rs-50034} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:20:39,222 DEBUG {conn-10005, pstmt-20017, rs-50034} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:20:39,222 DEBUG {conn-10005, pstmt-20017, rs-50034} closed
2019-08-15 01:20:39,223 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-15 01:20:39,223 DEBUG {conn-10005} pool-recycle
2019-08-15 01:20:42,105 DEBUG {conn-10005} pool-connect
2019-08-15 01:20:42,106 DEBUG {conn-10005, pstmt-20015} Parameters : [0, 10]
2019-08-15 01:20:42,106 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
2019-08-15 01:20:42,106 DEBUG {conn-10005, pstmt-20015} executed. 0.738698 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:20:42,107 DEBUG {conn-10005, pstmt-20015, rs-50035} open
2019-08-15 01:20:42,107 DEBUG {conn-10005, pstmt-20015, rs-50035} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:20:42,107 DEBUG {conn-10005, pstmt-20015, rs-50035} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:20:42,107 DEBUG {conn-10005, pstmt-20015, rs-50035} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:20:42,110 DEBUG {conn-10005, pstmt-20015, rs-50035} closed
2019-08-15 01:20:42,110 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 01:20:42,110 DEBUG {conn-10005} pool-recycle
2019-08-15 01:20:42,111 DEBUG {conn-10005} pool-connect
2019-08-15 01:20:42,111 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:20:42,111 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:20:42,111 DEBUG {conn-10005, pstmt-20008} executed. 0.603501 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:20:42,112 DEBUG {conn-10005, pstmt-20008, rs-50036} open
2019-08-15 01:20:42,112 DEBUG {conn-10005, pstmt-20008, rs-50036} Header: [count(*)]
2019-08-15 01:20:42,112 DEBUG {conn-10005, pstmt-20008, rs-50036} Result: [2]
2019-08-15 01:20:42,112 DEBUG {conn-10005, pstmt-20008, rs-50036} closed
2019-08-15 01:20:42,112 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:20:42,112 DEBUG {conn-10005} pool-recycle
2019-08-15 01:21:10,543 DEBUG {conn-10005} pool-connect
2019-08-15 01:21:10,543 DEBUG {conn-10005, pstmt-20006} Parameters : [admin]
2019-08-15 01:21:10,543 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR]
2019-08-15 01:21:10,543 DEBUG {conn-10005, pstmt-20006} executed. 0.739211 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:21:10,544 DEBUG {conn-10005, pstmt-20006, rs-50037} open
2019-08-15 01:21:10,544 DEBUG {conn-10005, pstmt-20006, rs-50037} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:21:10,544 DEBUG {conn-10005, pstmt-20006, rs-50037} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:21:10,544 DEBUG {conn-10005, pstmt-20006, rs-50037} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:21:10,544 DEBUG {conn-10005, pstmt-20006, rs-50037} closed
2019-08-15 01:21:10,545 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:21:10,545 DEBUG {conn-10005} pool-recycle
2019-08-15 01:21:10,931 DEBUG {conn-10005} pool-connect
2019-08-15 01:21:10,931 DEBUG {conn-10005, pstmt-20015} Parameters : [0, 10]
2019-08-15 01:21:10,931 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
2019-08-15 01:21:10,932 DEBUG {conn-10005, pstmt-20015} executed. 1.127324 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:21:10,933 DEBUG {conn-10005, pstmt-20015, rs-50038} open
2019-08-15 01:21:10,933 DEBUG {conn-10005, pstmt-20015, rs-50038} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:21:10,933 DEBUG {conn-10005, pstmt-20015, rs-50038} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:21:10,933 DEBUG {conn-10005, pstmt-20015, rs-50038} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:21:10,934 DEBUG {conn-10005, pstmt-20015, rs-50038} closed
2019-08-15 01:21:10,934 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 01:21:10,934 DEBUG {conn-10005} pool-recycle
2019-08-15 01:21:10,934 DEBUG {conn-10005} pool-connect
2019-08-15 01:21:10,934 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:21:10,934 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:21:10,935 DEBUG {conn-10005, pstmt-20008} executed. 0.767999 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:21:10,935 DEBUG {conn-10005, pstmt-20008, rs-50039} open
2019-08-15 01:21:10,935 DEBUG {conn-10005, pstmt-20008, rs-50039} Header: [count(*)]
2019-08-15 01:21:10,935 DEBUG {conn-10005, pstmt-20008, rs-50039} Result: [2]
2019-08-15 01:21:10,935 DEBUG {conn-10005, pstmt-20008, rs-50039} closed
2019-08-15 01:21:10,936 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:21:10,936 DEBUG {conn-10005} pool-recycle
2019-08-15 01:21:12,506 DEBUG {conn-10005} pool-connect
2019-08-15 01:21:12,506 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:21:12,506 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:21:12,507 DEBUG {conn-10005, pstmt-20013} executed. 0.7973 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:21:12,507 DEBUG {conn-10005, pstmt-20013, rs-50040} open
2019-08-15 01:21:12,507 DEBUG {conn-10005, pstmt-20013, rs-50040} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:21:12,507 DEBUG {conn-10005, pstmt-20013, rs-50040} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:21:12,508 DEBUG {conn-10005, pstmt-20013, rs-50040} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:21:12,508 DEBUG {conn-10005, pstmt-20013, rs-50040} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:21:12,508 DEBUG {conn-10005, pstmt-20013, rs-50040} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:21:12,508 DEBUG {conn-10005, pstmt-20013, rs-50040} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:21:12,509 DEBUG {conn-10005, pstmt-20013, rs-50040} closed
2019-08-15 01:21:12,509 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:21:12,509 DEBUG {conn-10005} pool-recycle
2019-08-15 01:21:12,510 DEBUG {conn-10005} pool-connect
2019-08-15 01:21:12,510 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 01:21:12,510 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 01:21:12,510 DEBUG {conn-10005, pstmt-20012} executed. 0.69963 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:21:12,510 DEBUG {conn-10005, pstmt-20012, rs-50041} open
2019-08-15 01:21:12,511 DEBUG {conn-10005, pstmt-20012, rs-50041} Header: [count(*)]
2019-08-15 01:21:12,511 DEBUG {conn-10005, pstmt-20012, rs-50041} Result: [5]
2019-08-15 01:21:12,511 DEBUG {conn-10005, pstmt-20012, rs-50041} closed
2019-08-15 01:21:12,511 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:21:12,511 DEBUG {conn-10005} pool-recycle
2019-08-15 01:21:16,153 DEBUG {conn-10005} pool-connect
2019-08-15 01:21:16,153 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:21:16,153 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:21:16,153 DEBUG {conn-10005, pstmt-20014} executed. 0.52228 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:21:16,153 DEBUG {conn-10005, pstmt-20014, rs-50042} open
2019-08-15 01:21:16,153 DEBUG {conn-10005, pstmt-20014, rs-50042} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:21:16,154 DEBUG {conn-10005, pstmt-20014, rs-50042} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:21:16,154 DEBUG {conn-10005, pstmt-20014, rs-50042} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:21:16,154 DEBUG {conn-10005, pstmt-20014, rs-50042} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:21:16,154 DEBUG {conn-10005, pstmt-20014, rs-50042} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:21:16,154 DEBUG {conn-10005, pstmt-20014, rs-50042} closed
2019-08-15 01:21:16,154 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:21:16,154 DEBUG {conn-10005} pool-recycle
2019-08-15 01:21:16,154 DEBUG {conn-10005} pool-connect
2019-08-15 01:21:16,154 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:21:16,154 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:21:16,155 DEBUG {conn-10005, pstmt-20007} executed. 0.354699 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:21:16,155 DEBUG {conn-10005, pstmt-20007, rs-50043} open
2019-08-15 01:21:16,155 DEBUG {conn-10005, pstmt-20007, rs-50043} Header: [count(*)]
2019-08-15 01:21:16,155 DEBUG {conn-10005, pstmt-20007, rs-50043} Result: [4]
2019-08-15 01:21:16,155 DEBUG {conn-10005, pstmt-20007, rs-50043} closed
2019-08-15 01:21:16,155 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:21:16,155 DEBUG {conn-10005} pool-recycle
2019-08-15 01:22:07,677 DEBUG {conn-10005} pool-connect
2019-08-15 01:22:07,678 DEBUG {conn-10005, pstmt-20018} created. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where is_deleted=0
    order by tag_id desc
     
      limit ?,?
2019-08-15 01:22:07,678 DEBUG {conn-10005, pstmt-20018} Parameters : [0, 10]
2019-08-15 01:22:07,678 DEBUG {conn-10005, pstmt-20018} Types : [INTEGER, INTEGER]
2019-08-15 01:22:07,679 DEBUG {conn-10005, pstmt-20018} executed. 1.172561 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where is_deleted=0
    order by tag_id desc
     
      limit ?,?
2019-08-15 01:22:07,679 DEBUG {conn-10005, pstmt-20018, rs-50044} open
2019-08-15 01:22:07,679 DEBUG {conn-10005, pstmt-20018, rs-50044} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 01:22:07,680 DEBUG {conn-10005, pstmt-20018, rs-50044} Result: [139, jqGrid, 0, 2019-08-14 19:46:03.0]
2019-08-15 01:22:07,680 DEBUG {conn-10005, pstmt-20018, rs-50044} Result: [138, test, 0, 2019-08-14 01:59:43.0]
2019-08-15 01:22:07,680 DEBUG {conn-10005, pstmt-20018, rs-50044} Result: [133, spring-boot企业级开发, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:22:07,680 DEBUG {conn-10005, pstmt-20018, rs-50044} Result: [132, 实战教程, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:22:07,681 DEBUG {conn-10005, pstmt-20018, rs-50044} Result: [131, 入门教程, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:22:07,681 DEBUG {conn-10005, pstmt-20018, rs-50044} Result: [130, SpringBoot, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:22:07,681 DEBUG {conn-10005, pstmt-20018, rs-50044} Result: [128, AdminLte3, 0, 2019-04-24 23:46:16.0]
2019-08-15 01:22:07,682 DEBUG {conn-10005, pstmt-20018, rs-50044} Result: [127, 目录, 0, 2019-04-24 23:41:39.0]
2019-08-15 01:22:07,682 DEBUG {conn-10005, pstmt-20018, rs-50044} Result: [69, easyUI, 0, 2018-11-12 18:55:14.0]
2019-08-15 01:22:07,682 DEBUG {conn-10005, pstmt-20018, rs-50044} Result: [68, MyBatis, 0, 2018-11-12 18:55:14.0]
2019-08-15 01:22:07,682 DEBUG {conn-10005, pstmt-20018, rs-50044} closed
2019-08-15 01:22:07,682 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 01:22:07,683 DEBUG {conn-10005} pool-recycle
2019-08-15 01:22:07,683 DEBUG {conn-10005} pool-connect
2019-08-15 01:22:07,683 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:22:07,683 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:22:07,683 DEBUG {conn-10005, pstmt-20010} executed. 0.585509 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:22:07,684 DEBUG {conn-10005, pstmt-20010, rs-50045} open
2019-08-15 01:22:07,684 DEBUG {conn-10005, pstmt-20010, rs-50045} Header: [count(*)]
2019-08-15 01:22:07,684 DEBUG {conn-10005, pstmt-20010, rs-50045} Result: [14]
2019-08-15 01:22:07,684 DEBUG {conn-10005, pstmt-20010, rs-50045} closed
2019-08-15 01:22:07,685 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:22:07,685 DEBUG {conn-10005} pool-recycle
2019-08-15 01:22:10,451 DEBUG {conn-10005} pool-connect
2019-08-15 01:22:10,451 DEBUG {conn-10005, pstmt-20016} Parameters : [0, 10]
2019-08-15 01:22:10,451 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER, INTEGER]
2019-08-15 01:22:10,452 DEBUG {conn-10005, pstmt-20016} executed. 0.801413 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:22:10,452 DEBUG {conn-10005, pstmt-20016, rs-50046} open
2019-08-15 01:22:10,452 DEBUG {conn-10005, pstmt-20016, rs-50046} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 01:22:10,452 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 01:22:10,453 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:22:10,454 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:22:10,454 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:22:10,454 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:22:10,456 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:22:10,456 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:22:10,456 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [337575483, oooo, 小灰, 0, null, 1158767965@qq.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:22:10,457 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:22:10,457 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:22:10,457 DEBUG {conn-10005, pstmt-20016, rs-50046} closed
2019-08-15 01:22:10,457 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 01:22:10,457 DEBUG {conn-10005} pool-recycle
2019-08-15 01:22:10,459 DEBUG {conn-10005} pool-connect
2019-08-15 01:22:10,459 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:22:10,459 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:22:10,459 DEBUG {conn-10005, pstmt-20011} executed. 0.556722 millis. select count(*)  from tb_admin_user
2019-08-15 01:22:10,459 DEBUG {conn-10005, pstmt-20011, rs-50047} open
2019-08-15 01:22:10,460 DEBUG {conn-10005, pstmt-20011, rs-50047} Header: [count(*)]
2019-08-15 01:22:10,460 DEBUG {conn-10005, pstmt-20011, rs-50047} Result: [10]
2019-08-15 01:22:10,460 DEBUG {conn-10005, pstmt-20011, rs-50047} closed
2019-08-15 01:22:10,460 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:22:10,460 DEBUG {conn-10005} pool-recycle
2019-08-15 01:22:12,470 DEBUG {conn-10005} pool-connect
2019-08-15 01:22:12,470 DEBUG {conn-10005, pstmt-20015} Parameters : [0, 10]
2019-08-15 01:22:12,470 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
2019-08-15 01:22:12,474 DEBUG {conn-10005, pstmt-20015} executed. 0.509943 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:22:12,474 DEBUG {conn-10005, pstmt-20015, rs-50048} open
2019-08-15 01:22:12,474 DEBUG {conn-10005, pstmt-20015, rs-50048} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:22:12,474 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:22:12,474 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:22:12,475 DEBUG {conn-10005, pstmt-20015, rs-50048} closed
2019-08-15 01:22:12,475 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 01:22:12,475 DEBUG {conn-10005} pool-recycle
2019-08-15 01:22:12,475 DEBUG {conn-10005} pool-connect
2019-08-15 01:22:12,475 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:22:12,475 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:22:12,476 DEBUG {conn-10005, pstmt-20008} executed. 0.602473 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:22:12,476 DEBUG {conn-10005, pstmt-20008, rs-50049} open
2019-08-15 01:22:12,476 DEBUG {conn-10005, pstmt-20008, rs-50049} Header: [count(*)]
2019-08-15 01:22:12,476 DEBUG {conn-10005, pstmt-20008, rs-50049} Result: [2]
2019-08-15 01:22:12,476 DEBUG {conn-10005, pstmt-20008, rs-50049} closed
2019-08-15 01:22:12,476 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:22:12,477 DEBUG {conn-10005} pool-recycle
2019-08-15 01:22:57,223 DEBUG {conn-10005} pool-connect
2019-08-15 01:22:57,223 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:22:57,223 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:22:57,224 DEBUG {conn-10005, pstmt-20013} executed. 0.725847 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:22:57,224 DEBUG {conn-10005, pstmt-20013, rs-50050} open
2019-08-15 01:22:57,224 DEBUG {conn-10005, pstmt-20013, rs-50050} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:22:57,224 DEBUG {conn-10005, pstmt-20013, rs-50050} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:22:57,227 DEBUG {conn-10005, pstmt-20013, rs-50050} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:22:57,227 DEBUG {conn-10005, pstmt-20013, rs-50050} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:22:57,227 DEBUG {conn-10005, pstmt-20013, rs-50050} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:22:57,227 DEBUG {conn-10005, pstmt-20013, rs-50050} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:22:57,228 DEBUG {conn-10005, pstmt-20013, rs-50050} closed
2019-08-15 01:22:57,228 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:22:57,228 DEBUG {conn-10005} pool-recycle
2019-08-15 01:22:57,228 DEBUG {conn-10005} pool-connect
2019-08-15 01:22:57,228 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 01:22:57,228 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 01:22:57,229 DEBUG {conn-10005, pstmt-20012} executed. 0.654393 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:22:57,229 DEBUG {conn-10005, pstmt-20012, rs-50051} open
2019-08-15 01:22:57,229 DEBUG {conn-10005, pstmt-20012, rs-50051} Header: [count(*)]
2019-08-15 01:22:57,229 DEBUG {conn-10005, pstmt-20012, rs-50051} Result: [5]
2019-08-15 01:22:57,229 DEBUG {conn-10005, pstmt-20012, rs-50051} closed
2019-08-15 01:22:57,229 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:22:57,229 DEBUG {conn-10005} pool-recycle
2019-08-15 01:23:01,277 DEBUG {conn-10005} pool-connect
2019-08-15 01:23:01,278 DEBUG {conn-10005, pstmt-20015} Parameters : [0, 10]
2019-08-15 01:23:01,278 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
2019-08-15 01:23:01,278 DEBUG {conn-10005, pstmt-20015} executed. 0.536675 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:23:01,278 DEBUG {conn-10005, pstmt-20015, rs-50052} open
2019-08-15 01:23:01,278 DEBUG {conn-10005, pstmt-20015, rs-50052} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:23:01,278 DEBUG {conn-10005, pstmt-20015, rs-50052} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:23:01,279 DEBUG {conn-10005, pstmt-20015, rs-50052} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:23:01,279 DEBUG {conn-10005, pstmt-20015, rs-50052} closed
2019-08-15 01:23:01,279 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 01:23:01,280 DEBUG {conn-10005} pool-recycle
2019-08-15 01:23:01,280 DEBUG {conn-10005} pool-connect
2019-08-15 01:23:01,280 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:23:01,280 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:23:01,281 DEBUG {conn-10005, pstmt-20008} executed. 1.019372 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:23:01,281 DEBUG {conn-10005, pstmt-20008, rs-50053} open
2019-08-15 01:23:01,281 DEBUG {conn-10005, pstmt-20008, rs-50053} Header: [count(*)]
2019-08-15 01:23:01,281 DEBUG {conn-10005, pstmt-20008, rs-50053} Result: [2]
2019-08-15 01:23:01,282 DEBUG {conn-10005, pstmt-20008, rs-50053} closed
2019-08-15 01:23:01,282 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:23:01,282 DEBUG {conn-10005} pool-recycle
2019-08-15 01:23:04,202 DEBUG {conn-10005} pool-connect
2019-08-15 01:23:04,202 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:23:04,202 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:23:04,203 DEBUG {conn-10005, pstmt-20014} executed. 0.584995 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:23:04,203 DEBUG {conn-10005, pstmt-20014, rs-50054} open
2019-08-15 01:23:04,203 DEBUG {conn-10005, pstmt-20014, rs-50054} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:23:04,203 DEBUG {conn-10005, pstmt-20014, rs-50054} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:23:04,203 DEBUG {conn-10005, pstmt-20014, rs-50054} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:23:04,203 DEBUG {conn-10005, pstmt-20014, rs-50054} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:23:04,203 DEBUG {conn-10005, pstmt-20014, rs-50054} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:23:04,204 DEBUG {conn-10005, pstmt-20014, rs-50054} closed
2019-08-15 01:23:04,204 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:23:04,204 DEBUG {conn-10005} pool-recycle
2019-08-15 01:23:04,205 DEBUG {conn-10005} pool-connect
2019-08-15 01:23:04,205 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:23:04,205 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:23:04,205 DEBUG {conn-10005, pstmt-20007} executed. 0.367549 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:23:04,205 DEBUG {conn-10005, pstmt-20007, rs-50055} open
2019-08-15 01:23:04,205 DEBUG {conn-10005, pstmt-20007, rs-50055} Header: [count(*)]
2019-08-15 01:23:04,205 DEBUG {conn-10005, pstmt-20007, rs-50055} Result: [4]
2019-08-15 01:23:04,205 DEBUG {conn-10005, pstmt-20007, rs-50055} closed
2019-08-15 01:23:04,205 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:23:04,205 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:07,988 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:07,988 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:26:07,988 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:26:07,989 DEBUG {conn-10005, pstmt-20000} executed. 0.584995 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:26:07,989 DEBUG {conn-10005, pstmt-20000, rs-50056} open
2019-08-15 01:26:07,989 DEBUG {conn-10005, pstmt-20000, rs-50056} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:26:07,989 DEBUG {conn-10005, pstmt-20000, rs-50056} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:26:07,989 DEBUG {conn-10005, pstmt-20000, rs-50056} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:26:07,989 DEBUG {conn-10005, pstmt-20000, rs-50056} closed
2019-08-15 01:26:07,990 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:26:07,990 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:07,990 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:07,990 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:26:07,990 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:26:07,991 DEBUG {conn-10005, pstmt-20001} executed. 0.53359 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:26:07,991 DEBUG {conn-10005, pstmt-20001, rs-50057} open
2019-08-15 01:26:07,991 DEBUG {conn-10005, pstmt-20001, rs-50057} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:26:07,991 DEBUG {conn-10005, pstmt-20001, rs-50057} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:26:07,991 DEBUG {conn-10005, pstmt-20001, rs-50057} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:26:07,991 DEBUG {conn-10005, pstmt-20001, rs-50057} closed
2019-08-15 01:26:07,991 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:26:07,991 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:07,993 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:07,993 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:26:07,993 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:26:07,994 DEBUG {conn-10005, pstmt-20002} executed. 0.745381 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:26:07,994 DEBUG {conn-10005, pstmt-20002, rs-50058} open
2019-08-15 01:26:07,994 DEBUG {conn-10005, pstmt-20002, rs-50058} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:26:07,994 DEBUG {conn-10005, pstmt-20002, rs-50058} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:26:07,994 DEBUG {conn-10005, pstmt-20002, rs-50058} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:26:07,994 DEBUG {conn-10005, pstmt-20002, rs-50058} Result: [139, 1, jqGrid]
2019-08-15 01:26:07,994 DEBUG {conn-10005, pstmt-20002, rs-50058} closed
2019-08-15 01:26:07,994 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:26:07,994 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:07,995 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003} executed. 0.373719 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003, rs-50059} open
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003, rs-50059} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:26:07,995 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:26:07,996 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:26:07,996 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:26:07,996 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:26:07,996 DEBUG {conn-10005, pstmt-20003, rs-50059} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:26:07,996 DEBUG {conn-10005, pstmt-20003, rs-50059} closed
2019-08-15 01:26:07,996 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:26:07,996 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:08,007 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:08,007 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:26:08,007 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:26:08,007 DEBUG {conn-10005, pstmt-20004} executed. 0.414843 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:26:08,008 DEBUG {conn-10005, pstmt-20004, rs-50060} open
2019-08-15 01:26:08,008 DEBUG {conn-10005, pstmt-20004, rs-50060} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:26:08,008 DEBUG {conn-10005, pstmt-20004, rs-50060} closed
2019-08-15 01:26:08,008 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:26:08,008 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:32,560 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:32,560 DEBUG {conn-10005, pstmt-20006} Parameters : [admin]
2019-08-15 01:26:32,560 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR]
2019-08-15 01:26:32,560 DEBUG {conn-10005, pstmt-20006} executed. 0.484754 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:26:32,560 DEBUG {conn-10005, pstmt-20006, rs-50061} open
2019-08-15 01:26:32,560 DEBUG {conn-10005, pstmt-20006, rs-50061} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:26:32,560 DEBUG {conn-10005, pstmt-20006, rs-50061} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:26:32,561 DEBUG {conn-10005, pstmt-20006, rs-50061} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:26:32,561 DEBUG {conn-10005, pstmt-20006, rs-50061} closed
2019-08-15 01:26:32,561 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:26:32,561 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:32,662 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:32,662 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:26:32,662 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:26:32,662 DEBUG {conn-10005, pstmt-20007} executed. 0.409189 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:26:32,663 DEBUG {conn-10005, pstmt-20007, rs-50062} open
2019-08-15 01:26:32,663 DEBUG {conn-10005, pstmt-20007, rs-50062} Header: [count(*)]
2019-08-15 01:26:32,663 DEBUG {conn-10005, pstmt-20007, rs-50062} Result: [4]
2019-08-15 01:26:32,663 DEBUG {conn-10005, pstmt-20007, rs-50062} closed
2019-08-15 01:26:32,663 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:26:32,663 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:32,663 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:32,663 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:26:32,663 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:26:32,663 DEBUG {conn-10005, pstmt-20008} executed. 0.319742 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:26:32,663 DEBUG {conn-10005, pstmt-20008, rs-50063} open
2019-08-15 01:26:32,664 DEBUG {conn-10005, pstmt-20008, rs-50063} Header: [count(*)]
2019-08-15 01:26:32,664 DEBUG {conn-10005, pstmt-20008, rs-50063} Result: [2]
2019-08-15 01:26:32,664 DEBUG {conn-10005, pstmt-20008, rs-50063} closed
2019-08-15 01:26:32,664 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:26:32,664 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:32,664 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:32,664 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:26:32,664 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:26:32,664 DEBUG {conn-10005, pstmt-20009} executed. 0.327968 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:26:32,664 DEBUG {conn-10005, pstmt-20009, rs-50064} open
2019-08-15 01:26:32,664 DEBUG {conn-10005, pstmt-20009, rs-50064} Header: [count(*)]
2019-08-15 01:26:32,664 DEBUG {conn-10005, pstmt-20009, rs-50064} Result: [27]
2019-08-15 01:26:32,665 DEBUG {conn-10005, pstmt-20009, rs-50064} closed
2019-08-15 01:26:32,665 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:26:32,665 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:32,665 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:32,665 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:26:32,665 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:26:32,665 DEBUG {conn-10005, pstmt-20010} executed. 0.297638 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:26:32,665 DEBUG {conn-10005, pstmt-20010, rs-50065} open
2019-08-15 01:26:32,665 DEBUG {conn-10005, pstmt-20010, rs-50065} Header: [count(*)]
2019-08-15 01:26:32,665 DEBUG {conn-10005, pstmt-20010, rs-50065} Result: [14]
2019-08-15 01:26:32,665 DEBUG {conn-10005, pstmt-20010, rs-50065} closed
2019-08-15 01:26:32,665 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:26:32,665 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:32,665 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:32,666 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:26:32,666 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:26:32,666 DEBUG {conn-10005, pstmt-20011} executed. 0.286329 millis. select count(*)  from tb_admin_user
2019-08-15 01:26:32,666 DEBUG {conn-10005, pstmt-20011, rs-50066} open
2019-08-15 01:26:32,666 DEBUG {conn-10005, pstmt-20011, rs-50066} Header: [count(*)]
2019-08-15 01:26:32,666 DEBUG {conn-10005, pstmt-20011, rs-50066} Result: [10]
2019-08-15 01:26:32,666 DEBUG {conn-10005, pstmt-20011, rs-50066} closed
2019-08-15 01:26:32,666 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:26:32,666 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:32,667 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:32,667 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 01:26:32,667 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 01:26:32,668 DEBUG {conn-10005, pstmt-20012} executed. 0.810665 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:26:32,668 DEBUG {conn-10005, pstmt-20012, rs-50067} open
2019-08-15 01:26:32,668 DEBUG {conn-10005, pstmt-20012, rs-50067} Header: [count(*)]
2019-08-15 01:26:32,668 DEBUG {conn-10005, pstmt-20012, rs-50067} Result: [5]
2019-08-15 01:26:32,668 DEBUG {conn-10005, pstmt-20012, rs-50067} closed
2019-08-15 01:26:32,668 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:26:32,668 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:34,991 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:34,991 DEBUG {conn-10005, pstmt-20015} Parameters : [0, 10]
2019-08-15 01:26:34,991 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20015} executed. 0.638971 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20015, rs-50068} open
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20015, rs-50068} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20015, rs-50068} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20015, rs-50068} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20015, rs-50068} closed
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 01:26:34,992 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:34,992 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20008} executed. 0.572144 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20008, rs-50069} open
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20008, rs-50069} Header: [count(*)]
2019-08-15 01:26:34,992 DEBUG {conn-10005, pstmt-20008, rs-50069} Result: [2]
2019-08-15 01:26:34,993 DEBUG {conn-10005, pstmt-20008, rs-50069} closed
2019-08-15 01:26:34,993 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:26:34,993 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:58,458 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:58,458 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:26:58,458 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:26:58,459 DEBUG {conn-10005, pstmt-20000} executed. 0.881092 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:26:58,459 DEBUG {conn-10005, pstmt-20000, rs-50070} open
2019-08-15 01:26:58,459 DEBUG {conn-10005, pstmt-20000, rs-50070} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:26:58,459 DEBUG {conn-10005, pstmt-20000, rs-50070} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:26:58,460 DEBUG {conn-10005, pstmt-20000, rs-50070} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:26:58,460 DEBUG {conn-10005, pstmt-20000, rs-50070} closed
2019-08-15 01:26:58,460 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:26:58,460 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:58,461 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:58,461 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:26:58,461 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:26:58,462 DEBUG {conn-10005, pstmt-20001} executed. 0.75926 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:26:58,462 DEBUG {conn-10005, pstmt-20001, rs-50071} open
2019-08-15 01:26:58,462 DEBUG {conn-10005, pstmt-20001, rs-50071} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:26:58,462 DEBUG {conn-10005, pstmt-20001, rs-50071} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:26:58,463 DEBUG {conn-10005, pstmt-20001, rs-50071} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:26:58,463 DEBUG {conn-10005, pstmt-20001, rs-50071} closed
2019-08-15 01:26:58,463 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:26:58,463 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:58,463 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:58,463 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:26:58,463 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:26:58,464 DEBUG {conn-10005, pstmt-20002} executed. 0.900626 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:26:58,464 DEBUG {conn-10005, pstmt-20002, rs-50072} open
2019-08-15 01:26:58,464 DEBUG {conn-10005, pstmt-20002, rs-50072} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:26:58,465 DEBUG {conn-10005, pstmt-20002, rs-50072} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:26:58,465 DEBUG {conn-10005, pstmt-20002, rs-50072} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:26:58,465 DEBUG {conn-10005, pstmt-20002, rs-50072} Result: [139, 1, jqGrid]
2019-08-15 01:26:58,465 DEBUG {conn-10005, pstmt-20002, rs-50072} closed
2019-08-15 01:26:58,465 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:26:58,465 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:58,465 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:58,465 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:26:58,465 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:26:58,466 DEBUG {conn-10005, pstmt-20003} executed. 0.518168 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:26:58,466 DEBUG {conn-10005, pstmt-20003, rs-50073} open
2019-08-15 01:26:58,466 DEBUG {conn-10005, pstmt-20003, rs-50073} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:26:58,466 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:26:58,466 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:26:58,466 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:26:58,466 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:26:58,467 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:26:58,467 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:26:58,467 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:26:58,467 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:26:58,467 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:26:58,468 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:26:58,468 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:26:58,468 DEBUG {conn-10005, pstmt-20003, rs-50073} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:26:58,469 DEBUG {conn-10005, pstmt-20003, rs-50073} closed
2019-08-15 01:26:58,469 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:26:58,469 DEBUG {conn-10005} pool-recycle
2019-08-15 01:26:58,480 DEBUG {conn-10005} pool-connect
2019-08-15 01:26:58,481 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:26:58,481 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:26:58,481 DEBUG {conn-10005, pstmt-20004} executed. 0.494008 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:26:58,481 DEBUG {conn-10005, pstmt-20004, rs-50074} open
2019-08-15 01:26:58,481 DEBUG {conn-10005, pstmt-20004, rs-50074} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:26:58,481 DEBUG {conn-10005, pstmt-20004, rs-50074} closed
2019-08-15 01:26:58,481 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:26:58,482 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:11,371 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:11,371 DEBUG {conn-10005, pstmt-20006} Parameters : [admin]
2019-08-15 01:27:11,371 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR]
2019-08-15 01:27:11,371 DEBUG {conn-10005, pstmt-20006} executed. 0.569574 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:27:11,371 DEBUG {conn-10005, pstmt-20006, rs-50075} open
2019-08-15 01:27:11,371 DEBUG {conn-10005, pstmt-20006, rs-50075} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:27:11,372 DEBUG {conn-10005, pstmt-20006, rs-50075} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:27:11,372 DEBUG {conn-10005, pstmt-20006, rs-50075} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:27:11,372 DEBUG {conn-10005, pstmt-20006, rs-50075} closed
2019-08-15 01:27:11,372 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:27:11,372 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:11,464 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:11,464 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:27:11,464 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:27:11,464 DEBUG {conn-10005, pstmt-20000} executed. 0.527936 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:27:11,464 DEBUG {conn-10005, pstmt-20000, rs-50076} open
2019-08-15 01:27:11,464 DEBUG {conn-10005, pstmt-20000, rs-50076} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:27:11,464 DEBUG {conn-10005, pstmt-20000, rs-50076} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:27:11,465 DEBUG {conn-10005, pstmt-20000, rs-50076} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:27:11,465 DEBUG {conn-10005, pstmt-20000, rs-50076} closed
2019-08-15 01:27:11,465 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:27:11,465 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:11,465 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:11,465 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:27:11,465 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:27:11,465 DEBUG {conn-10005, pstmt-20001} executed. 0.401991 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:27:11,466 DEBUG {conn-10005, pstmt-20001, rs-50077} open
2019-08-15 01:27:11,466 DEBUG {conn-10005, pstmt-20001, rs-50077} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:27:11,466 DEBUG {conn-10005, pstmt-20001, rs-50077} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:27:11,466 DEBUG {conn-10005, pstmt-20001, rs-50077} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:27:11,466 DEBUG {conn-10005, pstmt-20001, rs-50077} closed
2019-08-15 01:27:11,466 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:27:11,466 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:11,466 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:11,466 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:27:11,466 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:27:11,467 DEBUG {conn-10005, pstmt-20002} executed. 0.537702 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:27:11,467 DEBUG {conn-10005, pstmt-20002, rs-50078} open
2019-08-15 01:27:11,467 DEBUG {conn-10005, pstmt-20002, rs-50078} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:27:11,467 DEBUG {conn-10005, pstmt-20002, rs-50078} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:27:11,467 DEBUG {conn-10005, pstmt-20002, rs-50078} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:27:11,467 DEBUG {conn-10005, pstmt-20002, rs-50078} Result: [139, 1, jqGrid]
2019-08-15 01:27:11,468 DEBUG {conn-10005, pstmt-20002, rs-50078} closed
2019-08-15 01:27:11,468 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:27:11,468 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:11,468 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:11,468 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:27:11,468 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:27:11,468 DEBUG {conn-10005, pstmt-20003} executed. 0.389654 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:27:11,468 DEBUG {conn-10005, pstmt-20003, rs-50079} open
2019-08-15 01:27:11,468 DEBUG {conn-10005, pstmt-20003, rs-50079} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:27:11,468 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003, rs-50079} closed
2019-08-15 01:27:11,469 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:27:11,469 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:11,479 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:11,479 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:27:11,479 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:27:11,483 DEBUG {conn-10005, pstmt-20004} executed. 4.594115 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:27:11,483 DEBUG {conn-10005, pstmt-20004, rs-50080} open
2019-08-15 01:27:11,483 DEBUG {conn-10005, pstmt-20004, rs-50080} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:27:11,484 DEBUG {conn-10005, pstmt-20004, rs-50080} closed
2019-08-15 01:27:11,484 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:27:11,484 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:22,252 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:22,252 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:27:22,252 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:27:22,253 DEBUG {conn-10005, pstmt-20007} executed. 0.69963 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:27:22,253 DEBUG {conn-10005, pstmt-20007, rs-50081} open
2019-08-15 01:27:22,253 DEBUG {conn-10005, pstmt-20007, rs-50081} Header: [count(*)]
2019-08-15 01:27:22,253 DEBUG {conn-10005, pstmt-20007, rs-50081} Result: [4]
2019-08-15 01:27:22,253 DEBUG {conn-10005, pstmt-20007, rs-50081} closed
2019-08-15 01:27:22,253 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:27:22,253 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:22,254 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:22,254 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:27:22,254 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:27:22,254 DEBUG {conn-10005, pstmt-20008} executed. 0.464192 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:27:22,254 DEBUG {conn-10005, pstmt-20008, rs-50082} open
2019-08-15 01:27:22,254 DEBUG {conn-10005, pstmt-20008, rs-50082} Header: [count(*)]
2019-08-15 01:27:22,254 DEBUG {conn-10005, pstmt-20008, rs-50082} Result: [2]
2019-08-15 01:27:22,255 DEBUG {conn-10005, pstmt-20008, rs-50082} closed
2019-08-15 01:27:22,255 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:27:22,255 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:22,255 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:22,255 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:27:22,255 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:27:22,255 DEBUG {conn-10005, pstmt-20009} executed. 0.361895 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:27:22,255 DEBUG {conn-10005, pstmt-20009, rs-50083} open
2019-08-15 01:27:22,255 DEBUG {conn-10005, pstmt-20009, rs-50083} Header: [count(*)]
2019-08-15 01:27:22,255 DEBUG {conn-10005, pstmt-20009, rs-50083} Result: [27]
2019-08-15 01:27:22,255 DEBUG {conn-10005, pstmt-20009, rs-50083} closed
2019-08-15 01:27:22,255 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:27:22,256 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:22,256 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:22,256 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:27:22,256 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:27:22,256 DEBUG {conn-10005, pstmt-20010} executed. 0.348015 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:27:22,256 DEBUG {conn-10005, pstmt-20010, rs-50084} open
2019-08-15 01:27:22,256 DEBUG {conn-10005, pstmt-20010, rs-50084} Header: [count(*)]
2019-08-15 01:27:22,256 DEBUG {conn-10005, pstmt-20010, rs-50084} Result: [14]
2019-08-15 01:27:22,256 DEBUG {conn-10005, pstmt-20010, rs-50084} closed
2019-08-15 01:27:22,256 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:27:22,256 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:22,257 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:22,257 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:27:22,257 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:27:22,257 DEBUG {conn-10005, pstmt-20011} executed. 0.514569 millis. select count(*)  from tb_admin_user
2019-08-15 01:27:22,257 DEBUG {conn-10005, pstmt-20011, rs-50085} open
2019-08-15 01:27:22,257 DEBUG {conn-10005, pstmt-20011, rs-50085} Header: [count(*)]
2019-08-15 01:27:22,257 DEBUG {conn-10005, pstmt-20011, rs-50085} Result: [10]
2019-08-15 01:27:22,258 DEBUG {conn-10005, pstmt-20011, rs-50085} closed
2019-08-15 01:27:22,258 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:27:22,258 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:22,258 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:22,258 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 01:27:22,258 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 01:27:22,259 DEBUG {conn-10005, pstmt-20012} executed. 0.527935 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:27:22,259 DEBUG {conn-10005, pstmt-20012, rs-50086} open
2019-08-15 01:27:22,259 DEBUG {conn-10005, pstmt-20012, rs-50086} Header: [count(*)]
2019-08-15 01:27:22,259 DEBUG {conn-10005, pstmt-20012, rs-50086} Result: [5]
2019-08-15 01:27:22,259 DEBUG {conn-10005, pstmt-20012, rs-50086} closed
2019-08-15 01:27:22,259 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:27:22,259 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:25,043 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:25,043 DEBUG {conn-10005, pstmt-20015} Parameters : [0, 10]
2019-08-15 01:27:25,043 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
2019-08-15 01:27:25,044 DEBUG {conn-10005, pstmt-20015} executed. 0.523823 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:27:25,044 DEBUG {conn-10005, pstmt-20015, rs-50087} open
2019-08-15 01:27:25,044 DEBUG {conn-10005, pstmt-20015, rs-50087} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:27:25,044 DEBUG {conn-10005, pstmt-20015, rs-50087} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:27:25,044 DEBUG {conn-10005, pstmt-20015, rs-50087} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:27:25,044 DEBUG {conn-10005, pstmt-20015, rs-50087} closed
2019-08-15 01:27:25,044 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 01:27:25,044 DEBUG {conn-10005} pool-recycle
2019-08-15 01:27:25,045 DEBUG {conn-10005} pool-connect
2019-08-15 01:27:25,045 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:27:25,045 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:27:25,045 DEBUG {conn-10005, pstmt-20008} executed. 0.363438 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:27:25,045 DEBUG {conn-10005, pstmt-20008, rs-50088} open
2019-08-15 01:27:25,045 DEBUG {conn-10005, pstmt-20008, rs-50088} Header: [count(*)]
2019-08-15 01:27:25,045 DEBUG {conn-10005, pstmt-20008, rs-50088} Result: [2]
2019-08-15 01:27:25,045 DEBUG {conn-10005, pstmt-20008, rs-50088} closed
2019-08-15 01:27:25,045 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:27:25,045 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:28,826 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:28,826 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:28:28,826 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:28:28,827 DEBUG {conn-10005, pstmt-20013} executed. 0.649253 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:28:28,827 DEBUG {conn-10005, pstmt-20013, rs-50089} open
2019-08-15 01:28:28,827 DEBUG {conn-10005, pstmt-20013, rs-50089} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:28:28,827 DEBUG {conn-10005, pstmt-20013, rs-50089} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:28:28,827 DEBUG {conn-10005, pstmt-20013, rs-50089} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:28:28,827 DEBUG {conn-10005, pstmt-20013, rs-50089} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:28:28,827 DEBUG {conn-10005, pstmt-20013, rs-50089} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:28:28,828 DEBUG {conn-10005, pstmt-20013, rs-50089} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:28:28,828 DEBUG {conn-10005, pstmt-20013, rs-50089} closed
2019-08-15 01:28:28,828 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:28:28,828 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:28,828 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:28,828 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 01:28:28,828 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 01:28:28,829 DEBUG {conn-10005, pstmt-20012} executed. 0.574714 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:28:28,829 DEBUG {conn-10005, pstmt-20012, rs-50090} open
2019-08-15 01:28:28,829 DEBUG {conn-10005, pstmt-20012, rs-50090} Header: [count(*)]
2019-08-15 01:28:28,829 DEBUG {conn-10005, pstmt-20012, rs-50090} Result: [5]
2019-08-15 01:28:28,829 DEBUG {conn-10005, pstmt-20012, rs-50090} closed
2019-08-15 01:28:28,829 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:28:28,830 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:30,541 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:30,541 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:28:30,541 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:28:30,542 DEBUG {conn-10005, pstmt-20014} executed. 0.712481 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:28:30,542 DEBUG {conn-10005, pstmt-20014, rs-50091} open
2019-08-15 01:28:30,542 DEBUG {conn-10005, pstmt-20014, rs-50091} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:28:30,542 DEBUG {conn-10005, pstmt-20014, rs-50091} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:28:30,543 DEBUG {conn-10005, pstmt-20014, rs-50091} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:28:30,543 DEBUG {conn-10005, pstmt-20014, rs-50091} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:28:30,543 DEBUG {conn-10005, pstmt-20014, rs-50091} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:28:30,543 DEBUG {conn-10005, pstmt-20014, rs-50091} closed
2019-08-15 01:28:30,543 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:28:30,543 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:30,544 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:30,544 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:28:30,544 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:28:30,544 DEBUG {conn-10005, pstmt-20007} executed. 0.764401 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:28:30,545 DEBUG {conn-10005, pstmt-20007, rs-50092} open
2019-08-15 01:28:30,545 DEBUG {conn-10005, pstmt-20007, rs-50092} Header: [count(*)]
2019-08-15 01:28:30,545 DEBUG {conn-10005, pstmt-20007, rs-50092} Result: [4]
2019-08-15 01:28:30,545 DEBUG {conn-10005, pstmt-20007, rs-50092} closed
2019-08-15 01:28:30,545 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:28:30,545 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:33,306 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:33,306 DEBUG {conn-10005, pstmt-20018} Parameters : [0, 10]
2019-08-15 01:28:33,306 DEBUG {conn-10005, pstmt-20018} Types : [INTEGER, INTEGER]
2019-08-15 01:28:33,307 DEBUG {conn-10005, pstmt-20018} executed. 0.703228 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where is_deleted=0
    order by tag_id desc
     
      limit ?,?
2019-08-15 01:28:33,307 DEBUG {conn-10005, pstmt-20018, rs-50093} open
2019-08-15 01:28:33,307 DEBUG {conn-10005, pstmt-20018, rs-50093} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 01:28:33,310 DEBUG {conn-10005, pstmt-20018, rs-50093} Result: [139, jqGrid, 0, 2019-08-14 19:46:03.0]
2019-08-15 01:28:33,310 DEBUG {conn-10005, pstmt-20018, rs-50093} Result: [138, test, 0, 2019-08-14 01:59:43.0]
2019-08-15 01:28:33,310 DEBUG {conn-10005, pstmt-20018, rs-50093} Result: [133, spring-boot企业级开发, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:28:33,313 DEBUG {conn-10005, pstmt-20018, rs-50093} Result: [132, 实战教程, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:28:33,314 DEBUG {conn-10005, pstmt-20018, rs-50093} Result: [131, 入门教程, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:28:33,314 DEBUG {conn-10005, pstmt-20018, rs-50093} Result: [130, SpringBoot, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:28:33,316 DEBUG {conn-10005, pstmt-20018, rs-50093} Result: [128, AdminLte3, 0, 2019-04-24 23:46:16.0]
2019-08-15 01:28:33,317 DEBUG {conn-10005, pstmt-20018, rs-50093} Result: [127, 目录, 0, 2019-04-24 23:41:39.0]
2019-08-15 01:28:33,318 DEBUG {conn-10005, pstmt-20018, rs-50093} Result: [69, easyUI, 0, 2018-11-12 18:55:14.0]
2019-08-15 01:28:33,319 DEBUG {conn-10005, pstmt-20018, rs-50093} Result: [68, MyBatis, 0, 2018-11-12 18:55:14.0]
2019-08-15 01:28:33,319 DEBUG {conn-10005, pstmt-20018, rs-50093} closed
2019-08-15 01:28:33,320 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 01:28:33,320 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:33,320 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:33,320 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:28:33,320 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:28:33,321 DEBUG {conn-10005, pstmt-20010} executed. 0.772626 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:28:33,321 DEBUG {conn-10005, pstmt-20010, rs-50094} open
2019-08-15 01:28:33,321 DEBUG {conn-10005, pstmt-20010, rs-50094} Header: [count(*)]
2019-08-15 01:28:33,321 DEBUG {conn-10005, pstmt-20010, rs-50094} Result: [14]
2019-08-15 01:28:33,322 DEBUG {conn-10005, pstmt-20010, rs-50094} closed
2019-08-15 01:28:33,322 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:28:33,323 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:36,190 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:36,191 DEBUG {conn-10005, pstmt-20019} created. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
         
            limit ?,?
2019-08-15 01:28:36,191 DEBUG {conn-10005, pstmt-20019} Parameters : [0, 10]
2019-08-15 01:28:36,191 DEBUG {conn-10005, pstmt-20019} Types : [INTEGER, INTEGER]
2019-08-15 01:28:36,193 DEBUG {conn-10005, pstmt-20019} executed. 2.228431 millis. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
         
            limit ?,?
2019-08-15 01:28:36,194 DEBUG {conn-10005, pstmt-20019, rs-50095} open
2019-08-15 01:28:36,194 DEBUG {conn-10005, pstmt-20019, rs-50095} Header: [link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, create_time]
2019-08-15 01:28:36,195 DEBUG {conn-10005, pstmt-20019, rs-50095} Result: [32, 0, fh, 567457, sf, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:28:36,195 DEBUG {conn-10005, pstmt-20019, rs-50095} Result: [31, 0, dg, 658, 手动阀, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:28:36,195 DEBUG {conn-10005, pstmt-20019, rs-50095} Result: [30, 0, 接口, 090, 模拟, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:28:36,195 DEBUG {conn-10005, pstmt-20019, rs-50095} Result: [29, 0, 校验码, 745, 如果和人, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:28:36,195 DEBUG {conn-10005, pstmt-20019, rs-50095} Result: [28, 0, 很关键, 456, 天涯海角, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:28:36,195 DEBUG {conn-10005, pstmt-20019, rs-50095} Result: [27, 0, 染发膏, 456, 突然好几天, 1, 0, 2019-11-04 00:00:00.0]
2019-08-15 01:28:36,195 DEBUG {conn-10005, pstmt-20019, rs-50095} Result: [26, 0, 翻滚吧, 345, 姑获鸟, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:28:36,195 DEBUG {conn-10005, pstmt-20019, rs-50095} Result: [25, 0, 分别, 34534, 法国红酒, 1, 0, 2019-09-23 00:00:00.0]
2019-08-15 01:28:36,195 DEBUG {conn-10005, pstmt-20019, rs-50095} Result: [24, 0, 4356fg地方, 345, 儿童, 1, 0, 2019-06-05 00:00:00.0]
2019-08-15 01:28:36,196 DEBUG {conn-10005, pstmt-20019, rs-50095} Result: [23, 0, 后就开始的, 34534, 放电饭锅, 0, 0, 2019-04-04 00:00:00.0]
2019-08-15 01:28:36,196 DEBUG {conn-10005, pstmt-20019, rs-50095} closed
2019-08-15 01:28:36,196 DEBUG {conn-10005, pstmt-20019} clearParameters. 
2019-08-15 01:28:36,197 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:36,197 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:36,197 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:28:36,197 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:28:36,198 DEBUG {conn-10005, pstmt-20009} executed. 0.698087 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:28:36,198 DEBUG {conn-10005, pstmt-20009, rs-50096} open
2019-08-15 01:28:36,198 DEBUG {conn-10005, pstmt-20009, rs-50096} Header: [count(*)]
2019-08-15 01:28:36,198 DEBUG {conn-10005, pstmt-20009, rs-50096} Result: [27]
2019-08-15 01:28:36,198 DEBUG {conn-10005, pstmt-20009, rs-50096} closed
2019-08-15 01:28:36,199 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:28:36,199 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:37,980 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:37,981 DEBUG {conn-10005, pstmt-20006} Parameters : [admin]
2019-08-15 01:28:37,981 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR]
2019-08-15 01:28:37,982 DEBUG {conn-10005, pstmt-20006} executed. 0.997268 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:28:37,982 DEBUG {conn-10005, pstmt-20006, rs-50097} open
2019-08-15 01:28:37,982 DEBUG {conn-10005, pstmt-20006, rs-50097} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:28:37,982 DEBUG {conn-10005, pstmt-20006, rs-50097} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:28:37,982 DEBUG {conn-10005, pstmt-20006, rs-50097} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:28:37,983 DEBUG {conn-10005, pstmt-20006, rs-50097} closed
2019-08-15 01:28:37,983 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:28:37,983 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:43,950 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:43,950 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:28:43,950 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:28:43,951 DEBUG {conn-10005, pstmt-20000} executed. 0.793188 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:28:43,951 DEBUG {conn-10005, pstmt-20000, rs-50098} open
2019-08-15 01:28:43,951 DEBUG {conn-10005, pstmt-20000, rs-50098} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:28:43,951 DEBUG {conn-10005, pstmt-20000, rs-50098} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:28:43,953 DEBUG {conn-10005, pstmt-20000, rs-50098} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:28:43,954 DEBUG {conn-10005, pstmt-20000, rs-50098} closed
2019-08-15 01:28:43,954 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:28:43,954 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:43,955 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:43,955 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:28:43,955 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:28:43,956 DEBUG {conn-10005, pstmt-20001} executed. 1.356079 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:28:43,956 DEBUG {conn-10005, pstmt-20001, rs-50099} open
2019-08-15 01:28:43,956 DEBUG {conn-10005, pstmt-20001, rs-50099} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:28:43,957 DEBUG {conn-10005, pstmt-20001, rs-50099} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:28:43,957 DEBUG {conn-10005, pstmt-20001, rs-50099} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:28:43,957 DEBUG {conn-10005, pstmt-20001, rs-50099} closed
2019-08-15 01:28:43,957 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:28:43,957 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:43,958 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:43,958 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:28:43,958 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:28:43,959 DEBUG {conn-10005, pstmt-20002} executed. 1.056898 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:28:43,959 DEBUG {conn-10005, pstmt-20002, rs-50100} open
2019-08-15 01:28:43,959 DEBUG {conn-10005, pstmt-20002, rs-50100} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:28:43,959 DEBUG {conn-10005, pstmt-20002, rs-50100} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:28:43,959 DEBUG {conn-10005, pstmt-20002, rs-50100} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:28:43,959 DEBUG {conn-10005, pstmt-20002, rs-50100} Result: [139, 1, jqGrid]
2019-08-15 01:28:43,960 DEBUG {conn-10005, pstmt-20002, rs-50100} closed
2019-08-15 01:28:43,960 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:28:43,960 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:43,960 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:43,961 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:28:43,961 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:28:43,962 DEBUG {conn-10005, pstmt-20003} executed. 1.617219 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:28:43,962 DEBUG {conn-10005, pstmt-20003, rs-50101} open
2019-08-15 01:28:43,962 DEBUG {conn-10005, pstmt-20003, rs-50101} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:28:43,963 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:28:43,963 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:28:43,963 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:28:43,963 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:28:43,963 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:28:43,963 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:28:43,963 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:28:43,963 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:28:43,963 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:28:43,964 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:28:43,964 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:28:43,964 DEBUG {conn-10005, pstmt-20003, rs-50101} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:28:43,965 DEBUG {conn-10005, pstmt-20003, rs-50101} closed
2019-08-15 01:28:43,965 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:28:43,965 DEBUG {conn-10005} pool-recycle
2019-08-15 01:28:44,014 DEBUG {conn-10005} pool-connect
2019-08-15 01:28:44,014 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:28:44,014 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:28:44,015 DEBUG {conn-10005, pstmt-20004} executed. 0.692433 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:28:44,015 DEBUG {conn-10005, pstmt-20004, rs-50102} open
2019-08-15 01:28:44,015 DEBUG {conn-10005, pstmt-20004, rs-50102} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:28:44,015 DEBUG {conn-10005, pstmt-20004, rs-50102} closed
2019-08-15 01:28:44,015 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:28:44,016 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:09,569 DEBUG {conn-10001,procId-1323} connected
2019-08-15 01:29:09,583 DEBUG {conn-10002,procId-1324} connected
2019-08-15 01:29:09,592 DEBUG {conn-10003,procId-1325} connected
2019-08-15 01:29:09,602 DEBUG {conn-10004,procId-1326} connected
2019-08-15 01:29:09,610 DEBUG {conn-10005,procId-1327} connected
2019-08-15 01:29:09,619 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:09,622 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:09,639 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:09,643 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:10,449 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:10,548 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:11,924 INFO [Eternity] modules [], plugins [], sites []
2019-08-15 01:29:11,952 DEBUG [Eternity] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 01:29:11,975 DEBUG [Eternity] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 01:29:12,008 DEBUG [Eternity] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:29:12,010 DEBUG [Eternity] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 01:29:12,011 DEBUG [Eternity] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 01:29:12,011 DEBUG [Eternity] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:29:12,011 DEBUG [Eternity] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 01:29:12,011 DEBUG [Eternity] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 01:29:12,011 DEBUG [Eternity] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:29:12,012 DEBUG [Eternity] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 01:29:12,012 DEBUG [Eternity] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:29:12,012 DEBUG [Eternity] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:29:12,012 DEBUG [Eternity] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 01:29:12,012 DEBUG [Eternity] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 01:29:12,013 DEBUG [Eternity] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 01:29:12,013 DEBUG [Eternity] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:29:14,000 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 01:29:14,021 DEBUG using gathering [true]
2019-08-15 01:29:14,047 DEBUG [Eternity] node_sampler_interval[5s]
2019-08-15 01:29:14,064 DEBUG Using select timeout of 500
2019-08-15 01:29:14,064 DEBUG Epoll-bug workaround enabled = false
2019-08-15 01:29:14,118 DEBUG [Eternity] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:29:14,145 DEBUG [Eternity] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:29:14,181 DEBUG [Eternity] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:29:14,845 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:14,845 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:16,743 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 01:29:16,911 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:17,107 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:29:17,122 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:29:17,122 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:29:17,124 DEBUG {conn-10005, pstmt-20000} executed. 8.465981 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:29:17,128 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 01:29:17,129 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:29:17,138 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:29:17,141 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:29:17,142 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 01:29:17,143 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:29:17,144 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:17,149 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:17,150 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:29:17,151 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:29:17,151 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:29:17,152 DEBUG {conn-10005, pstmt-20001} executed. 0.90114 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:29:17,152 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 01:29:17,152 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:29:17,152 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:29:17,153 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:29:17,153 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 01:29:17,153 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:29:17,153 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:17,154 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:17,159 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:29:17,159 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:29:17,159 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:29:17,161 DEBUG {conn-10005, pstmt-20002} executed. 1.339629 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:29:17,161 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 01:29:17,161 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:29:17,161 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:29:17,162 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:29:17,162 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 01:29:17,162 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 01:29:17,162 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:29:17,162 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:17,167 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:17,167 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:29:17,168 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:29:17,168 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:29:17,169 DEBUG {conn-10005, pstmt-20003} executed. 1.181814 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:29:17,169 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 01:29:17,169 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:29:17,170 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:29:17,170 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:29:17,171 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:29:17,171 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:29:17,171 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:29:17,172 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:29:17,173 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:29:17,173 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:29:17,174 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:29:17,174 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:29:17,175 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:29:17,175 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:29:17,176 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 01:29:17,176 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:29:17,176 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:17,221 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:17,221 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:29:17,222 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:29:17,222 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:29:17,223 DEBUG {conn-10005, pstmt-20004} executed. 0.734071 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:29:17,223 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 01:29:17,223 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:29:17,223 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 01:29:17,223 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:29:17,224 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:31,211 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:31,212 DEBUG {conn-10005, pstmt-20005} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:29:31,212 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 01:29:31,212 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 01:29:31,215 DEBUG {conn-10005, pstmt-20005} executed. 2.668462 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:29:31,215 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-15 01:29:31,215 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:29:31,216 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:29:31,217 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:29:31,217 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-15 01:29:31,218 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:29:31,218 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:31,320 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:31,320 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:29:31,320 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:29:31,320 DEBUG {conn-10005, pstmt-20000} executed. 0.59836 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:29:31,320 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-15 01:29:31,320 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:29:31,321 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:29:31,321 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:29:31,321 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-15 01:29:31,321 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:29:31,321 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:31,322 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:31,322 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:29:31,322 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:29:31,323 DEBUG {conn-10005, pstmt-20001} executed. 0.672385 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:29:31,323 DEBUG {conn-10005, pstmt-20001, rs-50007} open
2019-08-15 01:29:31,323 DEBUG {conn-10005, pstmt-20001, rs-50007} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:29:31,323 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:29:31,324 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:29:31,324 DEBUG {conn-10005, pstmt-20001, rs-50007} closed
2019-08-15 01:29:31,324 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:29:31,324 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:31,324 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:31,324 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:29:31,324 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:29:31,325 DEBUG {conn-10005, pstmt-20002} executed. 0.681638 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:29:31,325 DEBUG {conn-10005, pstmt-20002, rs-50008} open
2019-08-15 01:29:31,325 DEBUG {conn-10005, pstmt-20002, rs-50008} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:29:31,325 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:29:31,325 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:29:31,325 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [139, 1, jqGrid]
2019-08-15 01:29:31,325 DEBUG {conn-10005, pstmt-20002, rs-50008} closed
2019-08-15 01:29:31,325 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:29:31,326 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:31,326 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:31,326 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:29:31,326 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:29:31,326 DEBUG {conn-10005, pstmt-20003} executed. 0.399935 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:29:31,326 DEBUG {conn-10005, pstmt-20003, rs-50009} open
2019-08-15 01:29:31,326 DEBUG {conn-10005, pstmt-20003, rs-50009} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:29:31,326 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:29:31,326 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:29:31,327 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:29:31,327 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:29:31,328 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:29:31,328 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:29:31,328 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:29:31,328 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:29:31,328 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:29:31,328 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:29:31,329 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:29:31,329 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:29:31,329 DEBUG {conn-10005, pstmt-20003, rs-50009} closed
2019-08-15 01:29:31,329 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:29:31,329 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:31,339 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:31,339 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:29:31,339 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:29:31,340 DEBUG {conn-10005, pstmt-20004} executed. 0.571629 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:29:31,340 DEBUG {conn-10005, pstmt-20004, rs-50010} open
2019-08-15 01:29:31,340 DEBUG {conn-10005, pstmt-20004, rs-50010} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:29:31,340 DEBUG {conn-10005, pstmt-20004, rs-50010} closed
2019-08-15 01:29:31,340 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:29:31,341 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:37,797 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:37,798 DEBUG {conn-10005, pstmt-20006} created. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:29:37,798 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:29:37,798 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:29:37,799 DEBUG {conn-10005, pstmt-20006} executed. 0.55775 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:29:37,799 DEBUG {conn-10005, pstmt-20006, rs-50011} open
2019-08-15 01:29:37,799 DEBUG {conn-10005, pstmt-20006, rs-50011} Header: [count(*)]
2019-08-15 01:29:37,799 DEBUG {conn-10005, pstmt-20006, rs-50011} Result: [4]
2019-08-15 01:29:37,801 DEBUG {conn-10005, pstmt-20006, rs-50011} closed
2019-08-15 01:29:37,801 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:29:37,801 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:37,802 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:37,803 DEBUG {conn-10005, pstmt-20007} created. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:29:37,803 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:29:37,803 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:29:37,803 DEBUG {conn-10005, pstmt-20007} executed. 0.50069 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:29:37,804 DEBUG {conn-10005, pstmt-20007, rs-50012} open
2019-08-15 01:29:37,804 DEBUG {conn-10005, pstmt-20007, rs-50012} Header: [count(*)]
2019-08-15 01:29:37,804 DEBUG {conn-10005, pstmt-20007, rs-50012} Result: [2]
2019-08-15 01:29:37,804 DEBUG {conn-10005, pstmt-20007, rs-50012} closed
2019-08-15 01:29:37,804 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:29:37,804 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:37,807 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:37,808 DEBUG {conn-10005, pstmt-20008} created. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:29:37,808 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:29:37,808 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:29:37,809 DEBUG {conn-10005, pstmt-20008} executed. 1.12938 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:29:37,809 DEBUG {conn-10005, pstmt-20008, rs-50013} open
2019-08-15 01:29:37,809 DEBUG {conn-10005, pstmt-20008, rs-50013} Header: [count(*)]
2019-08-15 01:29:37,810 DEBUG {conn-10005, pstmt-20008, rs-50013} Result: [27]
2019-08-15 01:29:37,810 DEBUG {conn-10005, pstmt-20008, rs-50013} closed
2019-08-15 01:29:37,810 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:29:37,810 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:37,810 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:37,811 DEBUG {conn-10005, pstmt-20009} created. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:29:37,811 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:29:37,811 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:29:37,811 DEBUG {conn-10005, pstmt-20009} executed. 0.590136 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:29:37,812 DEBUG {conn-10005, pstmt-20009, rs-50014} open
2019-08-15 01:29:37,812 DEBUG {conn-10005, pstmt-20009, rs-50014} Header: [count(*)]
2019-08-15 01:29:37,812 DEBUG {conn-10005, pstmt-20009, rs-50014} Result: [14]
2019-08-15 01:29:37,812 DEBUG {conn-10005, pstmt-20009, rs-50014} closed
2019-08-15 01:29:37,812 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:29:37,812 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:37,812 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:37,813 DEBUG {conn-10005, pstmt-20010} created. select count(*)  from tb_admin_user
2019-08-15 01:29:37,813 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:29:37,813 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:29:37,813 DEBUG {conn-10005, pstmt-20010} executed. 0.494008 millis. select count(*)  from tb_admin_user
2019-08-15 01:29:37,814 DEBUG {conn-10005, pstmt-20010, rs-50015} open
2019-08-15 01:29:37,814 DEBUG {conn-10005, pstmt-20010, rs-50015} Header: [count(*)]
2019-08-15 01:29:37,814 DEBUG {conn-10005, pstmt-20010, rs-50015} Result: [10]
2019-08-15 01:29:37,814 DEBUG {conn-10005, pstmt-20010, rs-50015} closed
2019-08-15 01:29:37,814 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:29:37,814 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:37,815 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:37,815 DEBUG {conn-10005, pstmt-20011} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:29:37,815 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:29:37,815 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:29:37,816 DEBUG {conn-10005, pstmt-20011} executed. 0.521766 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:29:37,816 DEBUG {conn-10005, pstmt-20011, rs-50016} open
2019-08-15 01:29:37,816 DEBUG {conn-10005, pstmt-20011, rs-50016} Header: [count(*)]
2019-08-15 01:29:37,816 DEBUG {conn-10005, pstmt-20011, rs-50016} Result: [5]
2019-08-15 01:29:37,816 DEBUG {conn-10005, pstmt-20011, rs-50016} closed
2019-08-15 01:29:37,816 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:29:37,816 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:40,232 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:40,233 DEBUG {conn-10005, pstmt-20012} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:29:40,234 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 01:29:40,234 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 01:29:40,235 DEBUG {conn-10005, pstmt-20012} executed. 0.902681 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:29:40,235 DEBUG {conn-10005, pstmt-20012, rs-50017} open
2019-08-15 01:29:40,235 DEBUG {conn-10005, pstmt-20012, rs-50017} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:29:40,235 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:29:40,236 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:29:40,236 DEBUG {conn-10005, pstmt-20012, rs-50017} closed
2019-08-15 01:29:40,236 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:29:40,237 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:40,237 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:40,237 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:29:40,237 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:29:40,238 DEBUG {conn-10005, pstmt-20007} executed. 0.692947 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:29:40,238 DEBUG {conn-10005, pstmt-20007, rs-50018} open
2019-08-15 01:29:40,238 DEBUG {conn-10005, pstmt-20007, rs-50018} Header: [count(*)]
2019-08-15 01:29:40,238 DEBUG {conn-10005, pstmt-20007, rs-50018} Result: [2]
2019-08-15 01:29:40,238 DEBUG {conn-10005, pstmt-20007, rs-50018} closed
2019-08-15 01:29:40,238 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:29:40,238 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:42,956 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:42,957 DEBUG {conn-10005, pstmt-20013} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:29:42,957 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:29:42,957 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:29:42,958 DEBUG {conn-10005, pstmt-20013} executed. 0.721734 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:29:42,958 DEBUG {conn-10005, pstmt-20013, rs-50019} open
2019-08-15 01:29:42,958 DEBUG {conn-10005, pstmt-20013, rs-50019} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:29:42,958 DEBUG {conn-10005, pstmt-20013, rs-50019} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:29:42,959 DEBUG {conn-10005, pstmt-20013, rs-50019} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:29:42,959 DEBUG {conn-10005, pstmt-20013, rs-50019} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:29:42,960 DEBUG {conn-10005, pstmt-20013, rs-50019} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:29:42,960 DEBUG {conn-10005, pstmt-20013, rs-50019} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:29:42,960 DEBUG {conn-10005, pstmt-20013, rs-50019} closed
2019-08-15 01:29:42,960 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:29:42,960 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:42,961 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:42,961 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:29:42,961 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:29:42,962 DEBUG {conn-10005, pstmt-20011} executed. 0.75926 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:29:42,962 DEBUG {conn-10005, pstmt-20011, rs-50020} open
2019-08-15 01:29:42,962 DEBUG {conn-10005, pstmt-20011, rs-50020} Header: [count(*)]
2019-08-15 01:29:42,962 DEBUG {conn-10005, pstmt-20011, rs-50020} Result: [5]
2019-08-15 01:29:42,962 DEBUG {conn-10005, pstmt-20011, rs-50020} closed
2019-08-15 01:29:42,962 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:29:42,962 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:44,434 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:44,435 DEBUG {conn-10005, pstmt-20014} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:29:44,435 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:29:44,435 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:29:44,436 DEBUG {conn-10005, pstmt-20014} executed. 0.75412 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:29:44,436 DEBUG {conn-10005, pstmt-20014, rs-50021} open
2019-08-15 01:29:44,436 DEBUG {conn-10005, pstmt-20014, rs-50021} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:29:44,436 DEBUG {conn-10005, pstmt-20014, rs-50021} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:29:44,437 DEBUG {conn-10005, pstmt-20014, rs-50021} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:29:44,437 DEBUG {conn-10005, pstmt-20014, rs-50021} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:29:44,437 DEBUG {conn-10005, pstmt-20014, rs-50021} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:29:44,437 DEBUG {conn-10005, pstmt-20014, rs-50021} closed
2019-08-15 01:29:44,437 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:29:44,437 DEBUG {conn-10005} pool-recycle
2019-08-15 01:29:44,437 DEBUG {conn-10005} pool-connect
2019-08-15 01:29:44,437 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:29:44,438 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:29:44,438 DEBUG {conn-10005, pstmt-20006} executed. 0.430779 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:29:44,438 DEBUG {conn-10005, pstmt-20006, rs-50022} open
2019-08-15 01:29:44,438 DEBUG {conn-10005, pstmt-20006, rs-50022} Header: [count(*)]
2019-08-15 01:29:44,438 DEBUG {conn-10005, pstmt-20006, rs-50022} Result: [4]
2019-08-15 01:29:44,438 DEBUG {conn-10005, pstmt-20006, rs-50022} closed
2019-08-15 01:29:44,438 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:29:44,438 DEBUG {conn-10005} pool-recycle
2019-08-15 01:31:09,931 DEBUG {conn-10005} pool-connect
2019-08-15 01:31:09,931 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:31:09,931 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:31:09,932 DEBUG {conn-10005, pstmt-20014} executed. 0.86824 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:31:09,932 DEBUG {conn-10005, pstmt-20014, rs-50023} open
2019-08-15 01:31:09,932 DEBUG {conn-10005, pstmt-20014, rs-50023} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:31:09,933 DEBUG {conn-10005, pstmt-20014, rs-50023} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:31:09,933 DEBUG {conn-10005, pstmt-20014, rs-50023} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:31:09,933 DEBUG {conn-10005, pstmt-20014, rs-50023} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:31:09,933 DEBUG {conn-10005, pstmt-20014, rs-50023} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:31:09,934 DEBUG {conn-10005, pstmt-20014, rs-50023} closed
2019-08-15 01:31:09,934 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:31:09,934 DEBUG {conn-10005} pool-recycle
2019-08-15 01:31:09,934 DEBUG {conn-10005} pool-connect
2019-08-15 01:31:09,934 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:31:09,934 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:31:09,935 DEBUG {conn-10005, pstmt-20006} executed. 0.642056 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:31:09,935 DEBUG {conn-10005, pstmt-20006, rs-50024} open
2019-08-15 01:31:09,935 DEBUG {conn-10005, pstmt-20006, rs-50024} Header: [count(*)]
2019-08-15 01:31:09,935 DEBUG {conn-10005, pstmt-20006, rs-50024} Result: [4]
2019-08-15 01:31:09,936 DEBUG {conn-10005, pstmt-20006, rs-50024} closed
2019-08-15 01:31:09,936 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:31:09,936 DEBUG {conn-10005} pool-recycle
2019-08-15 01:31:13,307 DEBUG {conn-10005} pool-connect
2019-08-15 01:31:13,308 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:31:13,308 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:31:13,308 DEBUG {conn-10005, pstmt-20014} executed. 0.764914 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:31:13,308 DEBUG {conn-10005, pstmt-20014, rs-50025} open
2019-08-15 01:31:13,308 DEBUG {conn-10005, pstmt-20014, rs-50025} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:31:13,309 DEBUG {conn-10005, pstmt-20014, rs-50025} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:31:13,309 DEBUG {conn-10005, pstmt-20014, rs-50025} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:31:13,309 DEBUG {conn-10005, pstmt-20014, rs-50025} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:31:13,309 DEBUG {conn-10005, pstmt-20014, rs-50025} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:31:13,310 DEBUG {conn-10005, pstmt-20014, rs-50025} closed
2019-08-15 01:31:13,310 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:31:13,310 DEBUG {conn-10005} pool-recycle
2019-08-15 01:31:13,310 DEBUG {conn-10005} pool-connect
2019-08-15 01:31:13,310 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:31:13,310 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:31:13,311 DEBUG {conn-10005, pstmt-20006} executed. 0.711967 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:31:13,311 DEBUG {conn-10005, pstmt-20006, rs-50026} open
2019-08-15 01:31:13,311 DEBUG {conn-10005, pstmt-20006, rs-50026} Header: [count(*)]
2019-08-15 01:31:13,311 DEBUG {conn-10005, pstmt-20006, rs-50026} Result: [4]
2019-08-15 01:31:13,312 DEBUG {conn-10005, pstmt-20006, rs-50026} closed
2019-08-15 01:31:13,312 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:31:13,312 DEBUG {conn-10005} pool-recycle
2019-08-15 01:31:18,013 DEBUG {conn-10005} pool-connect
2019-08-15 01:31:18,013 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:31:18,013 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:31:18,014 DEBUG {conn-10005, pstmt-20014} executed. 0.711453 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:31:18,014 DEBUG {conn-10005, pstmt-20014, rs-50027} open
2019-08-15 01:31:18,014 DEBUG {conn-10005, pstmt-20014, rs-50027} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:31:18,014 DEBUG {conn-10005, pstmt-20014, rs-50027} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:31:18,015 DEBUG {conn-10005, pstmt-20014, rs-50027} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:31:18,015 DEBUG {conn-10005, pstmt-20014, rs-50027} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:31:18,015 DEBUG {conn-10005, pstmt-20014, rs-50027} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:31:18,017 DEBUG {conn-10005, pstmt-20014, rs-50027} closed
2019-08-15 01:31:18,017 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:31:18,018 DEBUG {conn-10005} pool-recycle
2019-08-15 01:31:18,018 DEBUG {conn-10005} pool-connect
2019-08-15 01:31:18,018 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:31:18,018 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:31:18,019 DEBUG {conn-10005, pstmt-20006} executed. 0.631774 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:31:18,019 DEBUG {conn-10005, pstmt-20006, rs-50028} open
2019-08-15 01:31:18,019 DEBUG {conn-10005, pstmt-20006, rs-50028} Header: [count(*)]
2019-08-15 01:31:18,019 DEBUG {conn-10005, pstmt-20006, rs-50028} Result: [4]
2019-08-15 01:31:18,019 DEBUG {conn-10005, pstmt-20006, rs-50028} closed
2019-08-15 01:31:18,019 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:31:18,019 DEBUG {conn-10005} pool-recycle
2019-08-15 01:33:28,490 DEBUG {conn-10005} pool-connect
2019-08-15 01:33:28,491 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:33:28,491 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:33:28,492 DEBUG {conn-10005, pstmt-20013} executed. 0.927356 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:33:28,492 DEBUG {conn-10005, pstmt-20013, rs-50029} open
2019-08-15 01:33:28,492 DEBUG {conn-10005, pstmt-20013, rs-50029} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:33:28,492 DEBUG {conn-10005, pstmt-20013, rs-50029} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:33:28,492 DEBUG {conn-10005, pstmt-20013, rs-50029} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:33:28,493 DEBUG {conn-10005, pstmt-20013, rs-50029} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:33:28,493 DEBUG {conn-10005, pstmt-20013, rs-50029} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:33:28,493 DEBUG {conn-10005, pstmt-20013, rs-50029} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:33:28,494 DEBUG {conn-10005, pstmt-20013, rs-50029} closed
2019-08-15 01:33:28,494 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:33:28,494 DEBUG {conn-10005} pool-recycle
2019-08-15 01:33:28,494 DEBUG {conn-10005} pool-connect
2019-08-15 01:33:28,495 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:33:28,495 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:33:28,495 DEBUG {conn-10005, pstmt-20011} executed. 0.844593 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:33:28,495 DEBUG {conn-10005, pstmt-20011, rs-50030} open
2019-08-15 01:33:28,496 DEBUG {conn-10005, pstmt-20011, rs-50030} Header: [count(*)]
2019-08-15 01:33:28,496 DEBUG {conn-10005, pstmt-20011, rs-50030} Result: [5]
2019-08-15 01:33:28,496 DEBUG {conn-10005, pstmt-20011, rs-50030} closed
2019-08-15 01:33:28,496 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:33:28,496 DEBUG {conn-10005} pool-recycle
2019-08-15 01:35:27,477 DEBUG {conn-10005} pool-connect
2019-08-15 01:35:27,477 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:35:27,477 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:35:27,478 DEBUG {conn-10005, pstmt-20014} executed. 0.663646 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:35:27,478 DEBUG {conn-10005, pstmt-20014, rs-50031} open
2019-08-15 01:35:27,478 DEBUG {conn-10005, pstmt-20014, rs-50031} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:35:27,478 DEBUG {conn-10005, pstmt-20014, rs-50031} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:35:27,478 DEBUG {conn-10005, pstmt-20014, rs-50031} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:35:27,478 DEBUG {conn-10005, pstmt-20014, rs-50031} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:35:27,479 DEBUG {conn-10005, pstmt-20014, rs-50031} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:35:27,479 DEBUG {conn-10005, pstmt-20014, rs-50031} closed
2019-08-15 01:35:27,479 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:35:27,479 DEBUG {conn-10005} pool-recycle
2019-08-15 01:35:27,479 DEBUG {conn-10005} pool-connect
2019-08-15 01:35:27,479 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:35:27,479 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:35:27,480 DEBUG {conn-10005, pstmt-20006} executed. 0.508401 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:35:27,480 DEBUG {conn-10005, pstmt-20006, rs-50032} open
2019-08-15 01:35:27,480 DEBUG {conn-10005, pstmt-20006, rs-50032} Header: [count(*)]
2019-08-15 01:35:27,480 DEBUG {conn-10005, pstmt-20006, rs-50032} Result: [4]
2019-08-15 01:35:27,480 DEBUG {conn-10005, pstmt-20006, rs-50032} closed
2019-08-15 01:35:27,480 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:35:27,480 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:22,938 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:22,938 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:38:22,938 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:38:22,938 DEBUG {conn-10005, pstmt-20000} executed. 0.597847 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:38:22,938 DEBUG {conn-10005, pstmt-20000, rs-50033} open
2019-08-15 01:38:22,938 DEBUG {conn-10005, pstmt-20000, rs-50033} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:38:22,939 DEBUG {conn-10005, pstmt-20000, rs-50033} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:38:22,939 DEBUG {conn-10005, pstmt-20000, rs-50033} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:38:22,939 DEBUG {conn-10005, pstmt-20000, rs-50033} closed
2019-08-15 01:38:22,939 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:38:22,939 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:22,940 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:22,940 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:38:22,940 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:38:22,941 DEBUG {conn-10005, pstmt-20001} executed. 0.650794 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:38:22,941 DEBUG {conn-10005, pstmt-20001, rs-50034} open
2019-08-15 01:38:22,941 DEBUG {conn-10005, pstmt-20001, rs-50034} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:38:22,941 DEBUG {conn-10005, pstmt-20001, rs-50034} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:38:22,941 DEBUG {conn-10005, pstmt-20001, rs-50034} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:38:22,942 DEBUG {conn-10005, pstmt-20001, rs-50034} closed
2019-08-15 01:38:22,942 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:38:22,942 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:22,942 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:22,942 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:38:22,942 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:38:22,943 DEBUG {conn-10005, pstmt-20002} executed. 0.784449 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:38:22,943 DEBUG {conn-10005, pstmt-20002, rs-50035} open
2019-08-15 01:38:22,943 DEBUG {conn-10005, pstmt-20002, rs-50035} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:38:22,943 DEBUG {conn-10005, pstmt-20002, rs-50035} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:38:22,943 DEBUG {conn-10005, pstmt-20002, rs-50035} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:38:22,943 DEBUG {conn-10005, pstmt-20002, rs-50035} Result: [139, 1, jqGrid]
2019-08-15 01:38:22,943 DEBUG {conn-10005, pstmt-20002, rs-50035} closed
2019-08-15 01:38:22,943 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:38:22,943 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:22,944 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:22,944 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:38:22,944 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:38:22,944 DEBUG {conn-10005, pstmt-20003} executed. 0.40302 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:38:22,944 DEBUG {conn-10005, pstmt-20003, rs-50036} open
2019-08-15 01:38:22,944 DEBUG {conn-10005, pstmt-20003, rs-50036} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:38:22,944 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:38:22,944 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:38:22,945 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:38:22,945 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:38:22,945 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:38:22,945 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:38:22,945 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:38:22,945 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:38:22,945 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:38:22,945 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:38:22,945 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:38:22,945 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:38:22,946 DEBUG {conn-10005, pstmt-20003, rs-50036} closed
2019-08-15 01:38:22,946 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:38:22,946 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:22,956 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:22,956 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:38:22,956 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:38:22,956 DEBUG {conn-10005, pstmt-20004} executed. 0.48167 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:38:22,956 DEBUG {conn-10005, pstmt-20004, rs-50037} open
2019-08-15 01:38:22,956 DEBUG {conn-10005, pstmt-20004, rs-50037} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:38:22,956 DEBUG {conn-10005, pstmt-20004, rs-50037} closed
2019-08-15 01:38:22,956 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:38:22,956 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:37,095 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:37,095 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 01:38:37,095 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 01:38:37,096 DEBUG {conn-10005, pstmt-20005} executed. 0.615838 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:38:37,096 DEBUG {conn-10005, pstmt-20005, rs-50038} open
2019-08-15 01:38:37,096 DEBUG {conn-10005, pstmt-20005, rs-50038} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:38:37,096 DEBUG {conn-10005, pstmt-20005, rs-50038} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:38:37,096 DEBUG {conn-10005, pstmt-20005, rs-50038} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:38:37,097 DEBUG {conn-10005, pstmt-20005, rs-50038} closed
2019-08-15 01:38:37,097 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:38:37,097 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:37,207 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:37,207 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:38:37,207 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:38:37,208 DEBUG {conn-10005, pstmt-20000} executed. 1.036336 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:38:37,208 DEBUG {conn-10005, pstmt-20000, rs-50039} open
2019-08-15 01:38:37,208 DEBUG {conn-10005, pstmt-20000, rs-50039} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:38:37,209 DEBUG {conn-10005, pstmt-20000, rs-50039} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:38:37,209 DEBUG {conn-10005, pstmt-20000, rs-50039} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:38:37,212 DEBUG {conn-10005, pstmt-20000, rs-50039} closed
2019-08-15 01:38:37,212 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:38:37,212 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:37,212 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:37,212 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:38:37,212 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:38:37,213 DEBUG {conn-10005, pstmt-20001} executed. 0.560835 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:38:37,213 DEBUG {conn-10005, pstmt-20001, rs-50040} open
2019-08-15 01:38:37,213 DEBUG {conn-10005, pstmt-20001, rs-50040} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:38:37,213 DEBUG {conn-10005, pstmt-20001, rs-50040} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:38:37,214 DEBUG {conn-10005, pstmt-20001, rs-50040} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:38:37,214 DEBUG {conn-10005, pstmt-20001, rs-50040} closed
2019-08-15 01:38:37,214 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:38:37,214 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:37,215 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:37,215 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:38:37,215 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:38:37,216 DEBUG {conn-10005, pstmt-20002} executed. 0.594762 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:38:37,216 DEBUG {conn-10005, pstmt-20002, rs-50041} open
2019-08-15 01:38:37,216 DEBUG {conn-10005, pstmt-20002, rs-50041} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:38:37,216 DEBUG {conn-10005, pstmt-20002, rs-50041} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:38:37,216 DEBUG {conn-10005, pstmt-20002, rs-50041} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:38:37,216 DEBUG {conn-10005, pstmt-20002, rs-50041} Result: [139, 1, jqGrid]
2019-08-15 01:38:37,216 DEBUG {conn-10005, pstmt-20002, rs-50041} closed
2019-08-15 01:38:37,216 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:38:37,216 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:37,216 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:37,216 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:38:37,216 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003} executed. 0.38914 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003, rs-50042} open
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003, rs-50042} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:38:37,217 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:38:37,218 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:38:37,218 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:38:37,218 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:38:37,218 DEBUG {conn-10005, pstmt-20003, rs-50042} closed
2019-08-15 01:38:37,218 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:38:37,218 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:37,229 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:37,229 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:38:37,229 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:38:37,229 DEBUG {conn-10005, pstmt-20004} executed. 0.460079 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:38:37,229 DEBUG {conn-10005, pstmt-20004, rs-50043} open
2019-08-15 01:38:37,229 DEBUG {conn-10005, pstmt-20004, rs-50043} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:38:37,229 DEBUG {conn-10005, pstmt-20004, rs-50043} closed
2019-08-15 01:38:37,229 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:38:37,230 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:43,017 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:43,017 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:38:43,017 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:38:43,017 DEBUG {conn-10005, pstmt-20006} executed. 0.603501 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:38:43,017 DEBUG {conn-10005, pstmt-20006, rs-50044} open
2019-08-15 01:38:43,017 DEBUG {conn-10005, pstmt-20006, rs-50044} Header: [count(*)]
2019-08-15 01:38:43,018 DEBUG {conn-10005, pstmt-20006, rs-50044} Result: [4]
2019-08-15 01:38:43,018 DEBUG {conn-10005, pstmt-20006, rs-50044} closed
2019-08-15 01:38:43,018 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:38:43,018 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:43,018 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:43,018 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:38:43,018 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:38:43,019 DEBUG {conn-10005, pstmt-20007} executed. 0.573172 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:38:43,019 DEBUG {conn-10005, pstmt-20007, rs-50045} open
2019-08-15 01:38:43,019 DEBUG {conn-10005, pstmt-20007, rs-50045} Header: [count(*)]
2019-08-15 01:38:43,019 DEBUG {conn-10005, pstmt-20007, rs-50045} Result: [2]
2019-08-15 01:38:43,019 DEBUG {conn-10005, pstmt-20007, rs-50045} closed
2019-08-15 01:38:43,019 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:38:43,019 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:43,020 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:43,020 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:38:43,020 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:38:43,021 DEBUG {conn-10005, pstmt-20008} executed. 1.065638 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:38:43,021 DEBUG {conn-10005, pstmt-20008, rs-50046} open
2019-08-15 01:38:43,021 DEBUG {conn-10005, pstmt-20008, rs-50046} Header: [count(*)]
2019-08-15 01:38:43,021 DEBUG {conn-10005, pstmt-20008, rs-50046} Result: [27]
2019-08-15 01:38:43,022 DEBUG {conn-10005, pstmt-20008, rs-50046} closed
2019-08-15 01:38:43,022 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:38:43,022 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:43,022 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:43,022 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:38:43,022 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:38:43,023 DEBUG {conn-10005, pstmt-20009} executed. 0.680096 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:38:43,023 DEBUG {conn-10005, pstmt-20009, rs-50047} open
2019-08-15 01:38:43,023 DEBUG {conn-10005, pstmt-20009, rs-50047} Header: [count(*)]
2019-08-15 01:38:43,023 DEBUG {conn-10005, pstmt-20009, rs-50047} Result: [14]
2019-08-15 01:38:43,023 DEBUG {conn-10005, pstmt-20009, rs-50047} closed
2019-08-15 01:38:43,023 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:38:43,023 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:43,024 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:43,024 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:38:43,024 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:38:43,024 DEBUG {conn-10005, pstmt-20010} executed. 0.453397 millis. select count(*)  from tb_admin_user
2019-08-15 01:38:43,024 DEBUG {conn-10005, pstmt-20010, rs-50048} open
2019-08-15 01:38:43,024 DEBUG {conn-10005, pstmt-20010, rs-50048} Header: [count(*)]
2019-08-15 01:38:43,024 DEBUG {conn-10005, pstmt-20010, rs-50048} Result: [10]
2019-08-15 01:38:43,024 DEBUG {conn-10005, pstmt-20010, rs-50048} closed
2019-08-15 01:38:43,025 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:38:43,025 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:43,025 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:43,025 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:38:43,025 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:38:43,026 DEBUG {conn-10005, pstmt-20011} executed. 0.625091 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:38:43,026 DEBUG {conn-10005, pstmt-20011, rs-50049} open
2019-08-15 01:38:43,026 DEBUG {conn-10005, pstmt-20011, rs-50049} Header: [count(*)]
2019-08-15 01:38:43,026 DEBUG {conn-10005, pstmt-20011, rs-50049} Result: [5]
2019-08-15 01:38:43,026 DEBUG {conn-10005, pstmt-20011, rs-50049} closed
2019-08-15 01:38:43,026 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:38:43,026 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:47,035 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:47,036 DEBUG {conn-10005, pstmt-20015} created. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where is_deleted=0
    order by tag_id desc
     
      limit ?,?
2019-08-15 01:38:47,036 DEBUG {conn-10005, pstmt-20015} Parameters : [0, 10]
2019-08-15 01:38:47,036 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
2019-08-15 01:38:47,036 DEBUG {conn-10005, pstmt-20015} executed. 0.537188 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where is_deleted=0
    order by tag_id desc
     
      limit ?,?
2019-08-15 01:38:47,036 DEBUG {conn-10005, pstmt-20015, rs-50050} open
2019-08-15 01:38:47,036 DEBUG {conn-10005, pstmt-20015, rs-50050} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 01:38:47,036 DEBUG {conn-10005, pstmt-20015, rs-50050} Result: [139, jqGrid, 0, 2019-08-14 19:46:03.0]
2019-08-15 01:38:47,037 DEBUG {conn-10005, pstmt-20015, rs-50050} Result: [138, test, 0, 2019-08-14 01:59:43.0]
2019-08-15 01:38:47,037 DEBUG {conn-10005, pstmt-20015, rs-50050} Result: [133, spring-boot企业级开发, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:38:47,037 DEBUG {conn-10005, pstmt-20015, rs-50050} Result: [132, 实战教程, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:38:47,038 DEBUG {conn-10005, pstmt-20015, rs-50050} Result: [131, 入门教程, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:38:47,038 DEBUG {conn-10005, pstmt-20015, rs-50050} Result: [130, SpringBoot, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:38:47,038 DEBUG {conn-10005, pstmt-20015, rs-50050} Result: [128, AdminLte3, 0, 2019-04-24 23:46:16.0]
2019-08-15 01:38:47,038 DEBUG {conn-10005, pstmt-20015, rs-50050} Result: [127, 目录, 0, 2019-04-24 23:41:39.0]
2019-08-15 01:38:47,038 DEBUG {conn-10005, pstmt-20015, rs-50050} Result: [69, easyUI, 0, 2018-11-12 18:55:14.0]
2019-08-15 01:38:47,038 DEBUG {conn-10005, pstmt-20015, rs-50050} Result: [68, MyBatis, 0, 2018-11-12 18:55:14.0]
2019-08-15 01:38:47,039 DEBUG {conn-10005, pstmt-20015, rs-50050} closed
2019-08-15 01:38:47,039 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 01:38:47,039 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:47,039 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:47,040 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:38:47,040 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:38:47,040 DEBUG {conn-10005, pstmt-20009} executed. 0.565461 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:38:47,040 DEBUG {conn-10005, pstmt-20009, rs-50051} open
2019-08-15 01:38:47,040 DEBUG {conn-10005, pstmt-20009, rs-50051} Header: [count(*)]
2019-08-15 01:38:47,040 DEBUG {conn-10005, pstmt-20009, rs-50051} Result: [14]
2019-08-15 01:38:47,040 DEBUG {conn-10005, pstmt-20009, rs-50051} closed
2019-08-15 01:38:47,040 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:38:47,041 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:49,297 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:49,297 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:38:49,297 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:38:49,298 DEBUG {conn-10005, pstmt-20014} executed. 0.682152 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:38:49,298 DEBUG {conn-10005, pstmt-20014, rs-50052} open
2019-08-15 01:38:49,298 DEBUG {conn-10005, pstmt-20014, rs-50052} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:38:49,298 DEBUG {conn-10005, pstmt-20014, rs-50052} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:38:49,298 DEBUG {conn-10005, pstmt-20014, rs-50052} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:38:49,298 DEBUG {conn-10005, pstmt-20014, rs-50052} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:38:49,298 DEBUG {conn-10005, pstmt-20014, rs-50052} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:38:49,299 DEBUG {conn-10005, pstmt-20014, rs-50052} closed
2019-08-15 01:38:49,299 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:38:49,299 DEBUG {conn-10005} pool-recycle
2019-08-15 01:38:49,299 DEBUG {conn-10005} pool-connect
2019-08-15 01:38:49,299 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:38:49,299 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:38:49,300 DEBUG {conn-10005, pstmt-20006} executed. 1.032223 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:38:49,301 DEBUG {conn-10005, pstmt-20006, rs-50053} open
2019-08-15 01:38:49,301 DEBUG {conn-10005, pstmt-20006, rs-50053} Header: [count(*)]
2019-08-15 01:38:49,301 DEBUG {conn-10005, pstmt-20006, rs-50053} Result: [4]
2019-08-15 01:38:49,301 DEBUG {conn-10005, pstmt-20006, rs-50053} closed
2019-08-15 01:38:49,301 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:38:49,301 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:11,678 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:11,678 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:41:11,678 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:41:11,679 DEBUG {conn-10005, pstmt-20006} executed. 0.540787 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:41:11,679 DEBUG {conn-10005, pstmt-20006, rs-50054} open
2019-08-15 01:41:11,679 DEBUG {conn-10005, pstmt-20006, rs-50054} Header: [count(*)]
2019-08-15 01:41:11,679 DEBUG {conn-10005, pstmt-20006, rs-50054} Result: [4]
2019-08-15 01:41:11,679 DEBUG {conn-10005, pstmt-20006, rs-50054} closed
2019-08-15 01:41:11,679 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:41:11,679 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:11,679 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:11,680 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:41:11,680 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:41:11,680 DEBUG {conn-10005, pstmt-20007} executed. 0.581396 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:41:11,680 DEBUG {conn-10005, pstmt-20007, rs-50055} open
2019-08-15 01:41:11,680 DEBUG {conn-10005, pstmt-20007, rs-50055} Header: [count(*)]
2019-08-15 01:41:11,680 DEBUG {conn-10005, pstmt-20007, rs-50055} Result: [2]
2019-08-15 01:41:11,681 DEBUG {conn-10005, pstmt-20007, rs-50055} closed
2019-08-15 01:41:11,681 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:41:11,681 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:11,681 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:11,681 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:41:11,681 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:41:11,682 DEBUG {conn-10005, pstmt-20008} executed. 0.741782 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:41:11,682 DEBUG {conn-10005, pstmt-20008, rs-50056} open
2019-08-15 01:41:11,682 DEBUG {conn-10005, pstmt-20008, rs-50056} Header: [count(*)]
2019-08-15 01:41:11,682 DEBUG {conn-10005, pstmt-20008, rs-50056} Result: [27]
2019-08-15 01:41:11,682 DEBUG {conn-10005, pstmt-20008, rs-50056} closed
2019-08-15 01:41:11,682 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:41:11,683 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:11,683 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:11,683 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:41:11,683 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:41:11,683 DEBUG {conn-10005, pstmt-20009} executed. 0.435405 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:41:11,683 DEBUG {conn-10005, pstmt-20009, rs-50057} open
2019-08-15 01:41:11,683 DEBUG {conn-10005, pstmt-20009, rs-50057} Header: [count(*)]
2019-08-15 01:41:11,683 DEBUG {conn-10005, pstmt-20009, rs-50057} Result: [14]
2019-08-15 01:41:11,683 DEBUG {conn-10005, pstmt-20009, rs-50057} closed
2019-08-15 01:41:11,683 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:41:11,684 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:11,684 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:11,684 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:41:11,684 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:41:11,684 DEBUG {conn-10005, pstmt-20010} executed. 0.317172 millis. select count(*)  from tb_admin_user
2019-08-15 01:41:11,684 DEBUG {conn-10005, pstmt-20010, rs-50058} open
2019-08-15 01:41:11,684 DEBUG {conn-10005, pstmt-20010, rs-50058} Header: [count(*)]
2019-08-15 01:41:11,684 DEBUG {conn-10005, pstmt-20010, rs-50058} Result: [10]
2019-08-15 01:41:11,684 DEBUG {conn-10005, pstmt-20010, rs-50058} closed
2019-08-15 01:41:11,684 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:41:11,684 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:11,684 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:11,684 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:41:11,684 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:41:11,685 DEBUG {conn-10005, pstmt-20011} executed. 0.349043 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:41:11,685 DEBUG {conn-10005, pstmt-20011, rs-50059} open
2019-08-15 01:41:11,685 DEBUG {conn-10005, pstmt-20011, rs-50059} Header: [count(*)]
2019-08-15 01:41:11,685 DEBUG {conn-10005, pstmt-20011, rs-50059} Result: [5]
2019-08-15 01:41:11,685 DEBUG {conn-10005, pstmt-20011, rs-50059} closed
2019-08-15 01:41:11,685 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:41:11,685 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:14,419 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:14,419 DEBUG {conn-10005, pstmt-20016} created. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
         
            limit ?,?
2019-08-15 01:41:14,420 DEBUG {conn-10005, pstmt-20016} Parameters : [0, 10]
2019-08-15 01:41:14,420 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER, INTEGER]
2019-08-15 01:41:14,420 DEBUG {conn-10005, pstmt-20016} executed. 0.72379 millis. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
         
            limit ?,?
2019-08-15 01:41:14,420 DEBUG {conn-10005, pstmt-20016, rs-50060} open
2019-08-15 01:41:14,420 DEBUG {conn-10005, pstmt-20016, rs-50060} Header: [link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, create_time]
2019-08-15 01:41:14,421 DEBUG {conn-10005, pstmt-20016, rs-50060} Result: [32, 0, fh, 567457, sf, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:41:14,421 DEBUG {conn-10005, pstmt-20016, rs-50060} Result: [31, 0, dg, 658, 手动阀, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:41:14,421 DEBUG {conn-10005, pstmt-20016, rs-50060} Result: [30, 0, 接口, 090, 模拟, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:41:14,421 DEBUG {conn-10005, pstmt-20016, rs-50060} Result: [29, 0, 校验码, 745, 如果和人, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:41:14,421 DEBUG {conn-10005, pstmt-20016, rs-50060} Result: [28, 0, 很关键, 456, 天涯海角, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:41:14,421 DEBUG {conn-10005, pstmt-20016, rs-50060} Result: [27, 0, 染发膏, 456, 突然好几天, 1, 0, 2019-11-04 00:00:00.0]
2019-08-15 01:41:14,422 DEBUG {conn-10005, pstmt-20016, rs-50060} Result: [26, 0, 翻滚吧, 345, 姑获鸟, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:41:14,422 DEBUG {conn-10005, pstmt-20016, rs-50060} Result: [25, 0, 分别, 34534, 法国红酒, 1, 0, 2019-09-23 00:00:00.0]
2019-08-15 01:41:14,422 DEBUG {conn-10005, pstmt-20016, rs-50060} Result: [24, 0, 4356fg地方, 345, 儿童, 1, 0, 2019-06-05 00:00:00.0]
2019-08-15 01:41:14,422 DEBUG {conn-10005, pstmt-20016, rs-50060} Result: [23, 0, 后就开始的, 34534, 放电饭锅, 0, 0, 2019-04-04 00:00:00.0]
2019-08-15 01:41:14,422 DEBUG {conn-10005, pstmt-20016, rs-50060} closed
2019-08-15 01:41:14,423 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 01:41:14,423 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:14,423 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:14,423 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:41:14,423 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:41:14,424 DEBUG {conn-10005, pstmt-20008} executed. 0.551581 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:41:14,424 DEBUG {conn-10005, pstmt-20008, rs-50061} open
2019-08-15 01:41:14,424 DEBUG {conn-10005, pstmt-20008, rs-50061} Header: [count(*)]
2019-08-15 01:41:14,424 DEBUG {conn-10005, pstmt-20008, rs-50061} Result: [27]
2019-08-15 01:41:14,424 DEBUG {conn-10005, pstmt-20008, rs-50061} closed
2019-08-15 01:41:14,424 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:41:14,424 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:17,650 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:17,650 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 01:41:17,650 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 01:41:17,651 DEBUG {conn-10005, pstmt-20005} executed. 0.545927 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:41:17,651 DEBUG {conn-10005, pstmt-20005, rs-50062} open
2019-08-15 01:41:17,651 DEBUG {conn-10005, pstmt-20005, rs-50062} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:41:17,651 DEBUG {conn-10005, pstmt-20005, rs-50062} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:41:17,651 DEBUG {conn-10005, pstmt-20005, rs-50062} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:41:17,652 DEBUG {conn-10005, pstmt-20005, rs-50062} closed
2019-08-15 01:41:17,652 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:41:17,652 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:19,906 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:19,907 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 01:41:19,907 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 01:41:19,908 DEBUG {conn-10005, pstmt-20012} executed. 1.059469 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:41:19,908 DEBUG {conn-10005, pstmt-20012, rs-50063} open
2019-08-15 01:41:19,908 DEBUG {conn-10005, pstmt-20012, rs-50063} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:41:19,908 DEBUG {conn-10005, pstmt-20012, rs-50063} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:41:19,909 DEBUG {conn-10005, pstmt-20012, rs-50063} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:41:19,909 DEBUG {conn-10005, pstmt-20012, rs-50063} closed
2019-08-15 01:41:19,909 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:41:19,909 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:19,909 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:19,909 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:41:19,910 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:41:19,910 DEBUG {conn-10005, pstmt-20007} executed. 0.620979 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:41:19,910 DEBUG {conn-10005, pstmt-20007, rs-50064} open
2019-08-15 01:41:19,910 DEBUG {conn-10005, pstmt-20007, rs-50064} Header: [count(*)]
2019-08-15 01:41:19,910 DEBUG {conn-10005, pstmt-20007, rs-50064} Result: [2]
2019-08-15 01:41:19,911 DEBUG {conn-10005, pstmt-20007, rs-50064} closed
2019-08-15 01:41:19,911 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:41:19,911 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:21,049 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:21,050 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:41:21,050 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:41:21,050 DEBUG {conn-10005, pstmt-20013} executed. 0.698088 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:41:21,050 DEBUG {conn-10005, pstmt-20013, rs-50065} open
2019-08-15 01:41:21,050 DEBUG {conn-10005, pstmt-20013, rs-50065} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:41:21,051 DEBUG {conn-10005, pstmt-20013, rs-50065} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:41:21,051 DEBUG {conn-10005, pstmt-20013, rs-50065} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:41:21,051 DEBUG {conn-10005, pstmt-20013, rs-50065} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:41:21,051 DEBUG {conn-10005, pstmt-20013, rs-50065} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:41:21,051 DEBUG {conn-10005, pstmt-20013, rs-50065} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:41:21,052 DEBUG {conn-10005, pstmt-20013, rs-50065} closed
2019-08-15 01:41:21,052 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:41:21,052 DEBUG {conn-10005} pool-recycle
2019-08-15 01:41:21,052 DEBUG {conn-10005} pool-connect
2019-08-15 01:41:21,052 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:41:21,052 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:41:21,053 DEBUG {conn-10005, pstmt-20011} executed. 0.508915 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:41:21,053 DEBUG {conn-10005, pstmt-20011, rs-50066} open
2019-08-15 01:41:21,053 DEBUG {conn-10005, pstmt-20011, rs-50066} Header: [count(*)]
2019-08-15 01:41:21,053 DEBUG {conn-10005, pstmt-20011, rs-50066} Result: [5]
2019-08-15 01:41:21,053 DEBUG {conn-10005, pstmt-20011, rs-50066} closed
2019-08-15 01:41:21,053 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:41:21,053 DEBUG {conn-10005} pool-recycle
2019-08-15 01:43:28,516 DEBUG {conn-10005} pool-connect
2019-08-15 01:43:28,516 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 01:43:28,516 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 01:43:28,517 DEBUG {conn-10005, pstmt-20005} executed. 0.72122 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:43:28,517 DEBUG {conn-10005, pstmt-20005, rs-50067} open
2019-08-15 01:43:28,517 DEBUG {conn-10005, pstmt-20005, rs-50067} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:43:28,517 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:43:28,517 DEBUG {conn-10005, pstmt-20005, rs-50067} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:43:28,518 DEBUG {conn-10005, pstmt-20005, rs-50067} closed
2019-08-15 01:43:28,518 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:43:28,518 DEBUG {conn-10005} pool-recycle
2019-08-15 01:43:29,009 DEBUG {conn-10005} pool-connect
2019-08-15 01:43:29,009 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:43:29,010 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:43:29,010 DEBUG {conn-10005, pstmt-20013} executed. 0.644626 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:43:29,010 DEBUG {conn-10005, pstmt-20013, rs-50068} open
2019-08-15 01:43:29,010 DEBUG {conn-10005, pstmt-20013, rs-50068} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:43:29,010 DEBUG {conn-10005, pstmt-20013, rs-50068} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:43:29,013 DEBUG {conn-10005, pstmt-20013, rs-50068} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:43:29,013 DEBUG {conn-10005, pstmt-20013, rs-50068} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:43:29,013 DEBUG {conn-10005, pstmt-20013, rs-50068} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:43:29,013 DEBUG {conn-10005, pstmt-20013, rs-50068} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:43:29,013 DEBUG {conn-10005, pstmt-20013, rs-50068} closed
2019-08-15 01:43:29,013 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:43:29,014 DEBUG {conn-10005} pool-recycle
2019-08-15 01:43:29,014 DEBUG {conn-10005} pool-connect
2019-08-15 01:43:29,014 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:43:29,014 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:43:29,015 DEBUG {conn-10005, pstmt-20011} executed. 0.681124 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:43:29,015 DEBUG {conn-10005, pstmt-20011, rs-50069} open
2019-08-15 01:43:29,015 DEBUG {conn-10005, pstmt-20011, rs-50069} Header: [count(*)]
2019-08-15 01:43:29,015 DEBUG {conn-10005, pstmt-20011, rs-50069} Result: [5]
2019-08-15 01:43:29,015 DEBUG {conn-10005, pstmt-20011, rs-50069} closed
2019-08-15 01:43:29,015 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:43:29,015 DEBUG {conn-10005} pool-recycle
2019-08-15 01:43:39,392 DEBUG {conn-10005} pool-connect
2019-08-15 01:43:39,392 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:43:39,392 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:43:39,393 DEBUG {conn-10005, pstmt-20014} executed. 0.995212 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:43:39,393 DEBUG {conn-10005, pstmt-20014, rs-50070} open
2019-08-15 01:43:39,393 DEBUG {conn-10005, pstmt-20014, rs-50070} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:43:39,393 DEBUG {conn-10005, pstmt-20014, rs-50070} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:43:39,394 DEBUG {conn-10005, pstmt-20014, rs-50070} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:43:39,394 DEBUG {conn-10005, pstmt-20014, rs-50070} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:43:39,394 DEBUG {conn-10005, pstmt-20014, rs-50070} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:43:39,394 DEBUG {conn-10005, pstmt-20014, rs-50070} closed
2019-08-15 01:43:39,394 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:43:39,394 DEBUG {conn-10005} pool-recycle
2019-08-15 01:43:39,394 DEBUG {conn-10005} pool-connect
2019-08-15 01:43:39,395 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:43:39,395 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:43:39,395 DEBUG {conn-10005, pstmt-20006} executed. 0.617894 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:43:39,395 DEBUG {conn-10005, pstmt-20006, rs-50071} open
2019-08-15 01:43:39,395 DEBUG {conn-10005, pstmt-20006, rs-50071} Header: [count(*)]
2019-08-15 01:43:39,396 DEBUG {conn-10005, pstmt-20006, rs-50071} Result: [4]
2019-08-15 01:43:39,396 DEBUG {conn-10005, pstmt-20006, rs-50071} closed
2019-08-15 01:43:39,396 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:43:39,396 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:04,214 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:04,214 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:47:04,214 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:47:04,215 DEBUG {conn-10005, pstmt-20000} executed. 0.687292 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:47:04,215 DEBUG {conn-10005, pstmt-20000, rs-50072} open
2019-08-15 01:47:04,215 DEBUG {conn-10005, pstmt-20000, rs-50072} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:47:04,215 DEBUG {conn-10005, pstmt-20000, rs-50072} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:47:04,215 DEBUG {conn-10005, pstmt-20000, rs-50072} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:47:04,216 DEBUG {conn-10005, pstmt-20000, rs-50072} closed
2019-08-15 01:47:04,216 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:47:04,216 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:04,216 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:04,217 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:47:04,217 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:47:04,217 DEBUG {conn-10005, pstmt-20001} executed. 0.707855 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:47:04,217 DEBUG {conn-10005, pstmt-20001, rs-50073} open
2019-08-15 01:47:04,217 DEBUG {conn-10005, pstmt-20001, rs-50073} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:47:04,217 DEBUG {conn-10005, pstmt-20001, rs-50073} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:47:04,218 DEBUG {conn-10005, pstmt-20001, rs-50073} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:47:04,218 DEBUG {conn-10005, pstmt-20001, rs-50073} closed
2019-08-15 01:47:04,218 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:47:04,218 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:04,218 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:04,218 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:47:04,218 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:47:04,224 DEBUG {conn-10005, pstmt-20002} executed. 5.042885 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:47:04,224 DEBUG {conn-10005, pstmt-20002, rs-50074} open
2019-08-15 01:47:04,224 DEBUG {conn-10005, pstmt-20002, rs-50074} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:47:04,224 DEBUG {conn-10005, pstmt-20002, rs-50074} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:47:04,224 DEBUG {conn-10005, pstmt-20002, rs-50074} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:47:04,224 DEBUG {conn-10005, pstmt-20002, rs-50074} Result: [139, 1, jqGrid]
2019-08-15 01:47:04,224 DEBUG {conn-10005, pstmt-20002, rs-50074} closed
2019-08-15 01:47:04,224 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:47:04,224 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:04,224 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:04,224 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:47:04,224 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003} executed. 0.39171 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} open
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:47:04,225 DEBUG {conn-10005, pstmt-20003, rs-50075} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:47:04,226 DEBUG {conn-10005, pstmt-20003, rs-50075} closed
2019-08-15 01:47:04,226 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:47:04,226 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:04,235 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:04,235 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:47:04,235 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:47:04,235 DEBUG {conn-10005, pstmt-20004} executed. 0.398393 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:47:04,235 DEBUG {conn-10005, pstmt-20004, rs-50076} open
2019-08-15 01:47:04,235 DEBUG {conn-10005, pstmt-20004, rs-50076} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:47:04,235 DEBUG {conn-10005, pstmt-20004, rs-50076} closed
2019-08-15 01:47:04,235 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:47:04,235 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:17,421 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:17,421 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 01:47:17,421 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 01:47:17,422 DEBUG {conn-10005, pstmt-20005} executed. 0.534104 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:47:17,422 DEBUG {conn-10005, pstmt-20005, rs-50077} open
2019-08-15 01:47:17,422 DEBUG {conn-10005, pstmt-20005, rs-50077} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:47:17,422 DEBUG {conn-10005, pstmt-20005, rs-50077} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:47:17,422 DEBUG {conn-10005, pstmt-20005, rs-50077} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:47:17,422 DEBUG {conn-10005, pstmt-20005, rs-50077} closed
2019-08-15 01:47:17,423 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:47:17,423 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:17,524 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:17,524 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:47:17,524 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:47:17,524 DEBUG {conn-10005, pstmt-20000} executed. 0.633831 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:47:17,524 DEBUG {conn-10005, pstmt-20000, rs-50078} open
2019-08-15 01:47:17,524 DEBUG {conn-10005, pstmt-20000, rs-50078} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:47:17,525 DEBUG {conn-10005, pstmt-20000, rs-50078} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:47:17,525 DEBUG {conn-10005, pstmt-20000, rs-50078} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:47:17,525 DEBUG {conn-10005, pstmt-20000, rs-50078} closed
2019-08-15 01:47:17,525 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:47:17,525 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:17,526 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:17,526 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:47:17,526 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:47:17,527 DEBUG {conn-10005, pstmt-20001} executed. 0.736642 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:47:17,527 DEBUG {conn-10005, pstmt-20001, rs-50079} open
2019-08-15 01:47:17,527 DEBUG {conn-10005, pstmt-20001, rs-50079} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:47:17,527 DEBUG {conn-10005, pstmt-20001, rs-50079} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:47:17,527 DEBUG {conn-10005, pstmt-20001, rs-50079} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:47:17,528 DEBUG {conn-10005, pstmt-20001, rs-50079} closed
2019-08-15 01:47:17,528 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:47:17,528 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:17,528 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:17,528 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:47:17,528 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:47:17,529 DEBUG {conn-10005, pstmt-20002} executed. 0.709911 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:47:17,529 DEBUG {conn-10005, pstmt-20002, rs-50080} open
2019-08-15 01:47:17,529 DEBUG {conn-10005, pstmt-20002, rs-50080} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:47:17,529 DEBUG {conn-10005, pstmt-20002, rs-50080} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:47:17,530 DEBUG {conn-10005, pstmt-20002, rs-50080} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:47:17,530 DEBUG {conn-10005, pstmt-20002, rs-50080} Result: [139, 1, jqGrid]
2019-08-15 01:47:17,530 DEBUG {conn-10005, pstmt-20002, rs-50080} closed
2019-08-15 01:47:17,530 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:47:17,530 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:17,530 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:17,530 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:47:17,530 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:47:17,531 DEBUG {conn-10005, pstmt-20003} executed. 0.473959 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:47:17,531 DEBUG {conn-10005, pstmt-20003, rs-50081} open
2019-08-15 01:47:17,531 DEBUG {conn-10005, pstmt-20003, rs-50081} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:47:17,531 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:47:17,531 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:47:17,531 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:47:17,531 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:47:17,531 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:47:17,531 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:47:17,532 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:47:17,532 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:47:17,532 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:47:17,532 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:47:17,532 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:47:17,532 DEBUG {conn-10005, pstmt-20003, rs-50081} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:47:17,532 DEBUG {conn-10005, pstmt-20003, rs-50081} closed
2019-08-15 01:47:17,532 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:47:17,533 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:17,544 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:17,544 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:47:17,544 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:47:17,545 DEBUG {conn-10005, pstmt-20004} executed. 0.483727 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:47:17,545 DEBUG {conn-10005, pstmt-20004, rs-50082} open
2019-08-15 01:47:17,545 DEBUG {conn-10005, pstmt-20004, rs-50082} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:47:17,545 DEBUG {conn-10005, pstmt-20004, rs-50082} closed
2019-08-15 01:47:17,545 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:47:17,545 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:23,295 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:23,296 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:47:23,296 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:47:23,296 DEBUG {conn-10005, pstmt-20006} executed. 0.517654 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:47:23,296 DEBUG {conn-10005, pstmt-20006, rs-50083} open
2019-08-15 01:47:23,296 DEBUG {conn-10005, pstmt-20006, rs-50083} Header: [count(*)]
2019-08-15 01:47:23,296 DEBUG {conn-10005, pstmt-20006, rs-50083} Result: [4]
2019-08-15 01:47:23,296 DEBUG {conn-10005, pstmt-20006, rs-50083} closed
2019-08-15 01:47:23,296 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:47:23,296 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:23,297 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:23,297 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:47:23,297 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:47:23,297 DEBUG {conn-10005, pstmt-20007} executed. 0.362409 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:47:23,297 DEBUG {conn-10005, pstmt-20007, rs-50084} open
2019-08-15 01:47:23,297 DEBUG {conn-10005, pstmt-20007, rs-50084} Header: [count(*)]
2019-08-15 01:47:23,297 DEBUG {conn-10005, pstmt-20007, rs-50084} Result: [2]
2019-08-15 01:47:23,297 DEBUG {conn-10005, pstmt-20007, rs-50084} closed
2019-08-15 01:47:23,298 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:47:23,298 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:23,298 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:23,298 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:47:23,298 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:47:23,298 DEBUG {conn-10005, pstmt-20008} executed. 0.493493 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:47:23,298 DEBUG {conn-10005, pstmt-20008, rs-50085} open
2019-08-15 01:47:23,298 DEBUG {conn-10005, pstmt-20008, rs-50085} Header: [count(*)]
2019-08-15 01:47:23,298 DEBUG {conn-10005, pstmt-20008, rs-50085} Result: [27]
2019-08-15 01:47:23,299 DEBUG {conn-10005, pstmt-20008, rs-50085} closed
2019-08-15 01:47:23,299 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:47:23,299 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:23,299 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:23,299 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:47:23,299 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:47:23,300 DEBUG {conn-10005, pstmt-20009} executed. 0.453397 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:47:23,300 DEBUG {conn-10005, pstmt-20009, rs-50086} open
2019-08-15 01:47:23,300 DEBUG {conn-10005, pstmt-20009, rs-50086} Header: [count(*)]
2019-08-15 01:47:23,300 DEBUG {conn-10005, pstmt-20009, rs-50086} Result: [14]
2019-08-15 01:47:23,300 DEBUG {conn-10005, pstmt-20009, rs-50086} closed
2019-08-15 01:47:23,300 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:47:23,300 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:23,300 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:23,300 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:47:23,300 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:47:23,301 DEBUG {conn-10005, pstmt-20010} executed. 0.803469 millis. select count(*)  from tb_admin_user
2019-08-15 01:47:23,301 DEBUG {conn-10005, pstmt-20010, rs-50087} open
2019-08-15 01:47:23,301 DEBUG {conn-10005, pstmt-20010, rs-50087} Header: [count(*)]
2019-08-15 01:47:23,301 DEBUG {conn-10005, pstmt-20010, rs-50087} Result: [10]
2019-08-15 01:47:23,302 DEBUG {conn-10005, pstmt-20010, rs-50087} closed
2019-08-15 01:47:23,302 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:47:23,302 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:23,302 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:23,302 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:47:23,302 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:47:23,303 DEBUG {conn-10005, pstmt-20011} executed. 0.844079 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:47:23,303 DEBUG {conn-10005, pstmt-20011, rs-50088} open
2019-08-15 01:47:23,303 DEBUG {conn-10005, pstmt-20011, rs-50088} Header: [count(*)]
2019-08-15 01:47:23,303 DEBUG {conn-10005, pstmt-20011, rs-50088} Result: [5]
2019-08-15 01:47:23,303 DEBUG {conn-10005, pstmt-20011, rs-50088} closed
2019-08-15 01:47:23,303 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:47:23,304 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:26,678 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:26,678 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:47:26,679 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:47:26,679 DEBUG {conn-10005, pstmt-20013} executed. 0.582425 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:47:26,679 DEBUG {conn-10005, pstmt-20013, rs-50089} open
2019-08-15 01:47:26,679 DEBUG {conn-10005, pstmt-20013, rs-50089} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:47:26,679 DEBUG {conn-10005, pstmt-20013, rs-50089} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:47:26,680 DEBUG {conn-10005, pstmt-20013, rs-50089} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:47:26,680 DEBUG {conn-10005, pstmt-20013, rs-50089} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:47:26,680 DEBUG {conn-10005, pstmt-20013, rs-50089} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:47:26,680 DEBUG {conn-10005, pstmt-20013, rs-50089} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:47:26,680 DEBUG {conn-10005, pstmt-20013, rs-50089} closed
2019-08-15 01:47:26,680 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:47:26,680 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:26,680 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:26,680 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:47:26,680 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:47:26,681 DEBUG {conn-10005, pstmt-20011} executed. 0.415357 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:47:26,681 DEBUG {conn-10005, pstmt-20011, rs-50090} open
2019-08-15 01:47:26,681 DEBUG {conn-10005, pstmt-20011, rs-50090} Header: [count(*)]
2019-08-15 01:47:26,681 DEBUG {conn-10005, pstmt-20011, rs-50090} Result: [5]
2019-08-15 01:47:26,681 DEBUG {conn-10005, pstmt-20011, rs-50090} closed
2019-08-15 01:47:26,681 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:47:26,682 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:48,160 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:48,160 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:47:48,160 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:47:48,160 DEBUG {conn-10005, pstmt-20014} executed. 0.565461 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:47:48,161 DEBUG {conn-10005, pstmt-20014, rs-50091} open
2019-08-15 01:47:48,161 DEBUG {conn-10005, pstmt-20014, rs-50091} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:47:48,161 DEBUG {conn-10005, pstmt-20014, rs-50091} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:47:48,161 DEBUG {conn-10005, pstmt-20014, rs-50091} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:47:48,161 DEBUG {conn-10005, pstmt-20014, rs-50091} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:47:48,161 DEBUG {conn-10005, pstmt-20014, rs-50091} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:47:48,161 DEBUG {conn-10005, pstmt-20014, rs-50091} closed
2019-08-15 01:47:48,161 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:47:48,161 DEBUG {conn-10005} pool-recycle
2019-08-15 01:47:48,161 DEBUG {conn-10005} pool-connect
2019-08-15 01:47:48,162 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:47:48,162 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:47:48,162 DEBUG {conn-10005, pstmt-20006} executed. 0.507887 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:47:48,162 DEBUG {conn-10005, pstmt-20006, rs-50092} open
2019-08-15 01:47:48,162 DEBUG {conn-10005, pstmt-20006, rs-50092} Header: [count(*)]
2019-08-15 01:47:48,162 DEBUG {conn-10005, pstmt-20006, rs-50092} Result: [4]
2019-08-15 01:47:48,162 DEBUG {conn-10005, pstmt-20006, rs-50092} closed
2019-08-15 01:47:48,163 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:47:48,163 DEBUG {conn-10005} pool-recycle
2019-08-15 01:50:25,461 DEBUG {conn-10001,procId-1333} connected
2019-08-15 01:50:25,468 DEBUG {conn-10002,procId-1334} connected
2019-08-15 01:50:25,473 DEBUG {conn-10003,procId-1335} connected
2019-08-15 01:50:25,478 DEBUG {conn-10004,procId-1336} connected
2019-08-15 01:50:25,483 DEBUG {conn-10005,procId-1337} connected
2019-08-15 01:50:25,487 DEBUG {conn-10005} pool-connect
2019-08-15 01:50:25,488 DEBUG {conn-10005} pool-recycle
2019-08-15 01:50:25,496 DEBUG {conn-10005} pool-connect
2019-08-15 01:50:25,498 DEBUG {conn-10005} pool-recycle
2019-08-15 01:50:25,796 DEBUG {conn-10005} pool-connect
2019-08-15 01:50:25,824 DEBUG {conn-10005} pool-recycle
2019-08-15 01:50:26,432 INFO [Double Helix] modules [], plugins [], sites []
2019-08-15 01:50:26,445 DEBUG [Double Helix] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 01:50:26,454 DEBUG [Double Helix] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 01:50:26,466 DEBUG [Double Helix] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:50:26,466 DEBUG [Double Helix] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 01:50:26,466 DEBUG [Double Helix] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 01:50:26,467 DEBUG [Double Helix] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:50:26,467 DEBUG [Double Helix] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 01:50:26,467 DEBUG [Double Helix] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 01:50:26,467 DEBUG [Double Helix] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:50:26,467 DEBUG [Double Helix] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 01:50:26,467 DEBUG [Double Helix] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:50:26,467 DEBUG [Double Helix] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:50:26,467 DEBUG [Double Helix] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 01:50:26,467 DEBUG [Double Helix] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 01:50:26,468 DEBUG [Double Helix] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 01:50:26,468 DEBUG [Double Helix] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:50:27,695 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 01:50:27,711 DEBUG using gathering [true]
2019-08-15 01:50:27,731 DEBUG [Double Helix] node_sampler_interval[5s]
2019-08-15 01:50:27,743 DEBUG Using select timeout of 500
2019-08-15 01:50:27,743 DEBUG Epoll-bug workaround enabled = false
2019-08-15 01:50:27,781 DEBUG [Double Helix] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:50:27,804 DEBUG [Double Helix] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:50:27,838 DEBUG [Double Helix] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:50:28,452 DEBUG {conn-10005} pool-connect
2019-08-15 01:50:28,452 DEBUG {conn-10005} pool-recycle
2019-08-15 01:50:43,416 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 01:50:43,511 DEBUG {conn-10005} pool-connect
2019-08-15 01:50:43,595 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:50:43,602 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:50:43,602 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:50:43,604 DEBUG {conn-10005, pstmt-20000} executed. 3.907337 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:50:43,607 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 01:50:43,608 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:50:43,613 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:50:43,614 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:50:43,615 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 01:50:43,615 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:50:43,616 DEBUG {conn-10005} pool-recycle
2019-08-15 01:50:43,620 DEBUG {conn-10005} pool-connect
2019-08-15 01:50:43,621 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:50:43,621 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:50:43,621 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:50:43,622 DEBUG {conn-10005, pstmt-20001} executed. 0.61224 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:50:43,622 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 01:50:43,622 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:50:43,622 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:50:43,623 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:50:43,623 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 01:50:43,623 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:50:43,623 DEBUG {conn-10005} pool-recycle
2019-08-15 01:50:43,624 DEBUG {conn-10005} pool-connect
2019-08-15 01:50:43,627 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:50:43,627 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:50:43,627 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:50:43,629 DEBUG {conn-10005, pstmt-20002} executed. 1.50207 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:50:43,629 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 01:50:43,629 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:50:43,629 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:50:43,629 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:50:43,630 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 01:50:43,630 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 01:50:43,630 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:50:43,630 DEBUG {conn-10005} pool-recycle
2019-08-15 01:50:43,633 DEBUG {conn-10005} pool-connect
2019-08-15 01:50:43,633 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:50:43,633 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:50:43,633 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:50:43,634 DEBUG {conn-10005, pstmt-20003} executed. 0.7351 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:50:43,634 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 01:50:43,634 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:50:43,634 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:50:43,635 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:50:43,635 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:50:43,635 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:50:43,635 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:50:43,635 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:50:43,636 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:50:43,636 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:50:43,636 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:50:43,636 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:50:43,636 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:50:43,637 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:50:43,637 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 01:50:43,637 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:50:43,637 DEBUG {conn-10005} pool-recycle
2019-08-15 01:50:43,665 DEBUG {conn-10005} pool-connect
2019-08-15 01:50:43,666 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:50:43,666 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:50:43,666 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:50:43,667 DEBUG {conn-10005, pstmt-20004} executed. 0.63126 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:50:43,667 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 01:50:43,667 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:50:43,667 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 01:50:43,667 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:50:43,668 DEBUG {conn-10005} pool-recycle
2019-08-15 01:51:06,755 DEBUG {conn-10005} pool-connect
2019-08-15 01:51:06,756 DEBUG {conn-10005, pstmt-20005} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:51:06,756 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 01:51:06,756 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 01:51:06,758 DEBUG {conn-10005, pstmt-20005} executed. 2.228431 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:51:06,759 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-15 01:51:06,759 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:51:06,759 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:51:06,760 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:51:06,760 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-15 01:51:06,760 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:51:06,760 DEBUG {conn-10005} pool-recycle
2019-08-15 01:51:06,874 DEBUG {conn-10005} pool-connect
2019-08-15 01:51:06,874 DEBUG {conn-10005, pstmt-20006} created. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:51:06,875 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:51:06,875 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:51:06,875 DEBUG {conn-10005, pstmt-20006} executed. 0.614296 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:51:06,875 DEBUG {conn-10005, pstmt-20006, rs-50006} open
2019-08-15 01:51:06,875 DEBUG {conn-10005, pstmt-20006, rs-50006} Header: [count(*)]
2019-08-15 01:51:06,876 DEBUG {conn-10005, pstmt-20006, rs-50006} Result: [4]
2019-08-15 01:51:06,877 DEBUG {conn-10005, pstmt-20006, rs-50006} closed
2019-08-15 01:51:06,877 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:51:06,877 DEBUG {conn-10005} pool-recycle
2019-08-15 01:51:06,878 DEBUG {conn-10005} pool-connect
2019-08-15 01:51:06,879 DEBUG {conn-10005, pstmt-20007} created. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:51:06,879 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:51:06,879 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:51:06,879 DEBUG {conn-10005, pstmt-20007} executed. 0.554152 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:51:06,879 DEBUG {conn-10005, pstmt-20007, rs-50007} open
2019-08-15 01:51:06,879 DEBUG {conn-10005, pstmt-20007, rs-50007} Header: [count(*)]
2019-08-15 01:51:06,880 DEBUG {conn-10005, pstmt-20007, rs-50007} Result: [2]
2019-08-15 01:51:06,880 DEBUG {conn-10005, pstmt-20007, rs-50007} closed
2019-08-15 01:51:06,880 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:51:06,880 DEBUG {conn-10005} pool-recycle
2019-08-15 01:51:06,883 DEBUG {conn-10005} pool-connect
2019-08-15 01:51:06,884 DEBUG {conn-10005, pstmt-20008} created. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:51:06,884 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:51:06,884 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:51:06,885 DEBUG {conn-10005, pstmt-20008} executed. 0.778794 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:51:06,885 DEBUG {conn-10005, pstmt-20008, rs-50008} open
2019-08-15 01:51:06,885 DEBUG {conn-10005, pstmt-20008, rs-50008} Header: [count(*)]
2019-08-15 01:51:06,885 DEBUG {conn-10005, pstmt-20008, rs-50008} Result: [27]
2019-08-15 01:51:06,885 DEBUG {conn-10005, pstmt-20008, rs-50008} closed
2019-08-15 01:51:06,885 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:51:06,885 DEBUG {conn-10005} pool-recycle
2019-08-15 01:51:06,886 DEBUG {conn-10005} pool-connect
2019-08-15 01:51:06,886 DEBUG {conn-10005, pstmt-20009} created. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:51:06,886 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:51:06,886 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:51:06,887 DEBUG {conn-10005, pstmt-20009} executed. 0.535646 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:51:06,887 DEBUG {conn-10005, pstmt-20009, rs-50009} open
2019-08-15 01:51:06,887 DEBUG {conn-10005, pstmt-20009, rs-50009} Header: [count(*)]
2019-08-15 01:51:06,887 DEBUG {conn-10005, pstmt-20009, rs-50009} Result: [14]
2019-08-15 01:51:06,887 DEBUG {conn-10005, pstmt-20009, rs-50009} closed
2019-08-15 01:51:06,887 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:51:06,887 DEBUG {conn-10005} pool-recycle
2019-08-15 01:51:06,887 DEBUG {conn-10005} pool-connect
2019-08-15 01:51:06,888 DEBUG {conn-10005, pstmt-20010} created. select count(*)  from tb_admin_user
2019-08-15 01:51:06,888 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:51:06,888 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:51:06,888 DEBUG {conn-10005, pstmt-20010} executed. 0.503775 millis. select count(*)  from tb_admin_user
2019-08-15 01:51:06,888 DEBUG {conn-10005, pstmt-20010, rs-50010} open
2019-08-15 01:51:06,888 DEBUG {conn-10005, pstmt-20010, rs-50010} Header: [count(*)]
2019-08-15 01:51:06,888 DEBUG {conn-10005, pstmt-20010, rs-50010} Result: [10]
2019-08-15 01:51:06,889 DEBUG {conn-10005, pstmt-20010, rs-50010} closed
2019-08-15 01:51:06,889 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:51:06,889 DEBUG {conn-10005} pool-recycle
2019-08-15 01:51:06,889 DEBUG {conn-10005} pool-connect
2019-08-15 01:51:06,890 DEBUG {conn-10005, pstmt-20011} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:51:06,890 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:51:06,890 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:51:06,890 DEBUG {conn-10005, pstmt-20011} executed. 0.570602 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:51:06,890 DEBUG {conn-10005, pstmt-20011, rs-50011} open
2019-08-15 01:51:06,890 DEBUG {conn-10005, pstmt-20011, rs-50011} Header: [count(*)]
2019-08-15 01:51:06,890 DEBUG {conn-10005, pstmt-20011, rs-50011} Result: [5]
2019-08-15 01:51:06,891 DEBUG {conn-10005, pstmt-20011, rs-50011} closed
2019-08-15 01:51:06,891 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:51:06,891 DEBUG {conn-10005} pool-recycle
2019-08-15 01:51:11,780 DEBUG {conn-10005} pool-connect
2019-08-15 01:51:11,781 DEBUG {conn-10005, pstmt-20012} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:51:11,781 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 01:51:11,781 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 01:51:11,782 DEBUG {conn-10005, pstmt-20012} executed. 0.893429 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:51:11,782 DEBUG {conn-10005, pstmt-20012, rs-50012} open
2019-08-15 01:51:11,782 DEBUG {conn-10005, pstmt-20012, rs-50012} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:51:11,782 DEBUG {conn-10005, pstmt-20012, rs-50012} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:51:11,783 DEBUG {conn-10005, pstmt-20012, rs-50012} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:51:11,783 DEBUG {conn-10005, pstmt-20012, rs-50012} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:51:11,784 DEBUG {conn-10005, pstmt-20012, rs-50012} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:51:11,784 DEBUG {conn-10005, pstmt-20012, rs-50012} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:51:11,784 DEBUG {conn-10005, pstmt-20012, rs-50012} closed
2019-08-15 01:51:11,784 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:51:11,784 DEBUG {conn-10005} pool-recycle
2019-08-15 01:51:11,785 DEBUG {conn-10005} pool-connect
2019-08-15 01:51:11,785 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:51:11,785 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:51:11,785 DEBUG {conn-10005, pstmt-20011} executed. 0.47036 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:51:11,785 DEBUG {conn-10005, pstmt-20011, rs-50013} open
2019-08-15 01:51:11,785 DEBUG {conn-10005, pstmt-20011, rs-50013} Header: [count(*)]
2019-08-15 01:51:11,785 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [5]
2019-08-15 01:51:11,786 DEBUG {conn-10005, pstmt-20011, rs-50013} closed
2019-08-15 01:51:11,786 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:51:11,786 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:26,605 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:26,606 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:52:26,606 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:52:26,606 DEBUG {conn-10005, pstmt-20000} executed. 0.611726 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:52:26,606 DEBUG {conn-10005, pstmt-20000, rs-50014} open
2019-08-15 01:52:26,606 DEBUG {conn-10005, pstmt-20000, rs-50014} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:52:26,607 DEBUG {conn-10005, pstmt-20000, rs-50014} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:52:26,607 DEBUG {conn-10005, pstmt-20000, rs-50014} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:52:26,607 DEBUG {conn-10005, pstmt-20000, rs-50014} closed
2019-08-15 01:52:26,608 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:52:26,608 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:26,608 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:26,608 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:52:26,608 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:52:26,609 DEBUG {conn-10005, pstmt-20001} executed. 0.631774 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:52:26,609 DEBUG {conn-10005, pstmt-20001, rs-50015} open
2019-08-15 01:52:26,609 DEBUG {conn-10005, pstmt-20001, rs-50015} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:52:26,609 DEBUG {conn-10005, pstmt-20001, rs-50015} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:52:26,609 DEBUG {conn-10005, pstmt-20001, rs-50015} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:52:26,610 DEBUG {conn-10005, pstmt-20001, rs-50015} closed
2019-08-15 01:52:26,610 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:52:26,610 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:26,610 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:26,610 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:52:26,610 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:52:26,611 DEBUG {conn-10005, pstmt-20002} executed. 0.941236 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:52:26,611 DEBUG {conn-10005, pstmt-20002, rs-50016} open
2019-08-15 01:52:26,611 DEBUG {conn-10005, pstmt-20002, rs-50016} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:52:26,612 DEBUG {conn-10005, pstmt-20002, rs-50016} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:52:26,612 DEBUG {conn-10005, pstmt-20002, rs-50016} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:52:26,612 DEBUG {conn-10005, pstmt-20002, rs-50016} Result: [139, 1, jqGrid]
2019-08-15 01:52:26,612 DEBUG {conn-10005, pstmt-20002, rs-50016} closed
2019-08-15 01:52:26,612 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:52:26,612 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:26,612 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:26,612 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:52:26,612 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:52:26,613 DEBUG {conn-10005, pstmt-20003} executed. 0.392738 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:52:26,613 DEBUG {conn-10005, pstmt-20003, rs-50017} open
2019-08-15 01:52:26,613 DEBUG {conn-10005, pstmt-20003, rs-50017} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:52:26,613 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:52:26,613 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:52:26,613 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:52:26,613 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:52:26,614 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:52:26,614 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:52:26,615 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:52:26,615 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:52:26,615 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:52:26,615 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:52:26,615 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:52:26,615 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:52:26,616 DEBUG {conn-10005, pstmt-20003, rs-50017} closed
2019-08-15 01:52:26,616 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:52:26,616 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:26,624 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:26,625 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:52:26,625 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:52:26,625 DEBUG {conn-10005, pstmt-20004} executed. 0.48167 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:52:26,625 DEBUG {conn-10005, pstmt-20004, rs-50018} open
2019-08-15 01:52:26,625 DEBUG {conn-10005, pstmt-20004, rs-50018} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:52:26,625 DEBUG {conn-10005, pstmt-20004, rs-50018} closed
2019-08-15 01:52:26,625 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:52:26,625 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:40,361 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:40,361 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 01:52:40,361 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 01:52:40,362 DEBUG {conn-10005, pstmt-20005} executed. 0.64771 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:52:40,362 DEBUG {conn-10005, pstmt-20005, rs-50019} open
2019-08-15 01:52:40,362 DEBUG {conn-10005, pstmt-20005, rs-50019} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:52:40,362 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:52:40,363 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:52:40,363 DEBUG {conn-10005, pstmt-20005, rs-50019} closed
2019-08-15 01:52:40,363 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:52:40,363 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:40,452 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:40,452 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:52:40,452 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:52:40,452 DEBUG {conn-10005, pstmt-20000} executed. 0.526907 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:52:40,452 DEBUG {conn-10005, pstmt-20000, rs-50020} open
2019-08-15 01:52:40,452 DEBUG {conn-10005, pstmt-20000, rs-50020} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:52:40,453 DEBUG {conn-10005, pstmt-20000, rs-50020} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:52:40,453 DEBUG {conn-10005, pstmt-20000, rs-50020} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:52:40,453 DEBUG {conn-10005, pstmt-20000, rs-50020} closed
2019-08-15 01:52:40,453 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:52:40,453 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:40,453 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:40,453 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:52:40,453 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:52:40,454 DEBUG {conn-10005, pstmt-20001} executed. 0.430264 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:52:40,454 DEBUG {conn-10005, pstmt-20001, rs-50021} open
2019-08-15 01:52:40,454 DEBUG {conn-10005, pstmt-20001, rs-50021} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:52:40,454 DEBUG {conn-10005, pstmt-20001, rs-50021} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:52:40,454 DEBUG {conn-10005, pstmt-20001, rs-50021} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:52:40,455 DEBUG {conn-10005, pstmt-20001, rs-50021} closed
2019-08-15 01:52:40,455 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:52:40,455 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:40,455 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:40,455 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:52:40,455 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:52:40,455 DEBUG {conn-10005, pstmt-20002} executed. 0.567517 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:52:40,455 DEBUG {conn-10005, pstmt-20002, rs-50022} open
2019-08-15 01:52:40,455 DEBUG {conn-10005, pstmt-20002, rs-50022} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:52:40,456 DEBUG {conn-10005, pstmt-20002, rs-50022} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:52:40,456 DEBUG {conn-10005, pstmt-20002, rs-50022} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:52:40,456 DEBUG {conn-10005, pstmt-20002, rs-50022} Result: [139, 1, jqGrid]
2019-08-15 01:52:40,456 DEBUG {conn-10005, pstmt-20002, rs-50022} closed
2019-08-15 01:52:40,456 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:52:40,456 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:40,456 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:40,457 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:52:40,457 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:52:40,457 DEBUG {conn-10005, pstmt-20003} executed. 0.55775 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:52:40,457 DEBUG {conn-10005, pstmt-20003, rs-50023} open
2019-08-15 01:52:40,457 DEBUG {conn-10005, pstmt-20003, rs-50023} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:52:40,457 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:52:40,457 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:52:40,458 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:52:40,458 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:52:40,458 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:52:40,458 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:52:40,458 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:52:40,458 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:52:40,458 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:52:40,459 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:52:40,459 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:52:40,459 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:52:40,459 DEBUG {conn-10005, pstmt-20003, rs-50023} closed
2019-08-15 01:52:40,459 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:52:40,459 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:40,468 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:40,468 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:52:40,468 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:52:40,468 DEBUG {conn-10005, pstmt-20004} executed. 0.485268 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:52:40,468 DEBUG {conn-10005, pstmt-20004, rs-50024} open
2019-08-15 01:52:40,468 DEBUG {conn-10005, pstmt-20004, rs-50024} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:52:40,469 DEBUG {conn-10005, pstmt-20004, rs-50024} closed
2019-08-15 01:52:40,469 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:52:40,469 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:46,840 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:46,840 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:52:46,840 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:52:46,840 DEBUG {conn-10005, pstmt-20006} executed. 0.464707 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:52:46,840 DEBUG {conn-10005, pstmt-20006, rs-50025} open
2019-08-15 01:52:46,840 DEBUG {conn-10005, pstmt-20006, rs-50025} Header: [count(*)]
2019-08-15 01:52:46,840 DEBUG {conn-10005, pstmt-20006, rs-50025} Result: [4]
2019-08-15 01:52:46,841 DEBUG {conn-10005, pstmt-20006, rs-50025} closed
2019-08-15 01:52:46,841 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:52:46,841 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:46,841 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:46,841 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:52:46,841 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:52:46,841 DEBUG {conn-10005, pstmt-20007} executed. 0.361895 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:52:46,841 DEBUG {conn-10005, pstmt-20007, rs-50026} open
2019-08-15 01:52:46,841 DEBUG {conn-10005, pstmt-20007, rs-50026} Header: [count(*)]
2019-08-15 01:52:46,841 DEBUG {conn-10005, pstmt-20007, rs-50026} Result: [2]
2019-08-15 01:52:46,842 DEBUG {conn-10005, pstmt-20007, rs-50026} closed
2019-08-15 01:52:46,842 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:52:46,842 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:46,842 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:46,842 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:52:46,842 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:52:46,842 DEBUG {conn-10005, pstmt-20008} executed. 0.336707 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:52:46,842 DEBUG {conn-10005, pstmt-20008, rs-50027} open
2019-08-15 01:52:46,842 DEBUG {conn-10005, pstmt-20008, rs-50027} Header: [count(*)]
2019-08-15 01:52:46,842 DEBUG {conn-10005, pstmt-20008, rs-50027} Result: [27]
2019-08-15 01:52:46,843 DEBUG {conn-10005, pstmt-20008, rs-50027} closed
2019-08-15 01:52:46,843 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:52:46,843 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:46,843 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:46,843 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:52:46,843 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:52:46,843 DEBUG {conn-10005, pstmt-20009} executed. 0.348529 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:52:46,843 DEBUG {conn-10005, pstmt-20009, rs-50028} open
2019-08-15 01:52:46,843 DEBUG {conn-10005, pstmt-20009, rs-50028} Header: [count(*)]
2019-08-15 01:52:46,843 DEBUG {conn-10005, pstmt-20009, rs-50028} Result: [14]
2019-08-15 01:52:46,843 DEBUG {conn-10005, pstmt-20009, rs-50028} closed
2019-08-15 01:52:46,844 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:52:46,844 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:46,844 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:46,844 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:52:46,844 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:52:46,844 DEBUG {conn-10005, pstmt-20010} executed. 0.285301 millis. select count(*)  from tb_admin_user
2019-08-15 01:52:46,844 DEBUG {conn-10005, pstmt-20010, rs-50029} open
2019-08-15 01:52:46,844 DEBUG {conn-10005, pstmt-20010, rs-50029} Header: [count(*)]
2019-08-15 01:52:46,844 DEBUG {conn-10005, pstmt-20010, rs-50029} Result: [10]
2019-08-15 01:52:46,844 DEBUG {conn-10005, pstmt-20010, rs-50029} closed
2019-08-15 01:52:46,844 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:52:46,844 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:46,845 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:46,845 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:52:46,845 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:52:46,845 DEBUG {conn-10005, pstmt-20011} executed. 0.31306 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:52:46,845 DEBUG {conn-10005, pstmt-20011, rs-50030} open
2019-08-15 01:52:46,845 DEBUG {conn-10005, pstmt-20011, rs-50030} Header: [count(*)]
2019-08-15 01:52:46,845 DEBUG {conn-10005, pstmt-20011, rs-50030} Result: [5]
2019-08-15 01:52:46,845 DEBUG {conn-10005, pstmt-20011, rs-50030} closed
2019-08-15 01:52:46,845 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:52:46,845 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:49,616 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:49,617 DEBUG {conn-10005, pstmt-20013} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:52:49,618 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:52:49,618 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:52:49,619 DEBUG {conn-10005, pstmt-20013} executed. 1.048674 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:52:49,619 DEBUG {conn-10005, pstmt-20013, rs-50031} open
2019-08-15 01:52:49,619 DEBUG {conn-10005, pstmt-20013, rs-50031} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:52:49,619 DEBUG {conn-10005, pstmt-20013, rs-50031} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:52:49,619 DEBUG {conn-10005, pstmt-20013, rs-50031} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:52:49,620 DEBUG {conn-10005, pstmt-20013, rs-50031} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:52:49,620 DEBUG {conn-10005, pstmt-20013, rs-50031} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:52:49,620 DEBUG {conn-10005, pstmt-20013, rs-50031} closed
2019-08-15 01:52:49,620 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:52:49,620 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:49,621 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:49,621 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:52:49,621 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:52:49,621 DEBUG {conn-10005, pstmt-20006} executed. 0.550553 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:52:49,621 DEBUG {conn-10005, pstmt-20006, rs-50032} open
2019-08-15 01:52:49,621 DEBUG {conn-10005, pstmt-20006, rs-50032} Header: [count(*)]
2019-08-15 01:52:49,621 DEBUG {conn-10005, pstmt-20006, rs-50032} Result: [4]
2019-08-15 01:52:49,622 DEBUG {conn-10005, pstmt-20006, rs-50032} closed
2019-08-15 01:52:49,622 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:52:49,622 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:52,418 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:52,418 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 01:52:52,418 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 01:52:52,419 DEBUG {conn-10005, pstmt-20012} executed. 0.862071 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:52:52,419 DEBUG {conn-10005, pstmt-20012, rs-50033} open
2019-08-15 01:52:52,419 DEBUG {conn-10005, pstmt-20012, rs-50033} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:52:52,420 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:52:52,420 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:52:52,420 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:52:52,421 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:52:52,421 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:52:52,421 DEBUG {conn-10005, pstmt-20012, rs-50033} closed
2019-08-15 01:52:52,421 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:52:52,422 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:52,422 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:52,422 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:52:52,422 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:52:52,423 DEBUG {conn-10005, pstmt-20011} executed. 0.705799 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:52:52,423 DEBUG {conn-10005, pstmt-20011, rs-50034} open
2019-08-15 01:52:52,423 DEBUG {conn-10005, pstmt-20011, rs-50034} Header: [count(*)]
2019-08-15 01:52:52,423 DEBUG {conn-10005, pstmt-20011, rs-50034} Result: [5]
2019-08-15 01:52:52,423 DEBUG {conn-10005, pstmt-20011, rs-50034} closed
2019-08-15 01:52:52,423 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:52:52,424 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:53,042 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:53,042 DEBUG {conn-10005, pstmt-20014} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:52:53,043 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:52:53,043 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:52:53,043 DEBUG {conn-10005, pstmt-20014} executed. 0.606072 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:52:53,043 DEBUG {conn-10005, pstmt-20014, rs-50035} open
2019-08-15 01:52:53,043 DEBUG {conn-10005, pstmt-20014, rs-50035} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:52:53,044 DEBUG {conn-10005, pstmt-20014, rs-50035} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:52:53,044 DEBUG {conn-10005, pstmt-20014, rs-50035} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:52:53,044 DEBUG {conn-10005, pstmt-20014, rs-50035} closed
2019-08-15 01:52:53,044 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:52:53,044 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:53,045 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:53,045 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:52:53,045 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:52:53,045 DEBUG {conn-10005, pstmt-20007} executed. 0.674441 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:52:53,046 DEBUG {conn-10005, pstmt-20007, rs-50036} open
2019-08-15 01:52:53,046 DEBUG {conn-10005, pstmt-20007, rs-50036} Header: [count(*)]
2019-08-15 01:52:53,046 DEBUG {conn-10005, pstmt-20007, rs-50036} Result: [2]
2019-08-15 01:52:53,046 DEBUG {conn-10005, pstmt-20007, rs-50036} closed
2019-08-15 01:52:53,046 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:52:53,046 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:54,382 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:54,383 DEBUG {conn-10005, pstmt-20015} created. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
         
            limit ?,?
2019-08-15 01:52:54,383 DEBUG {conn-10005, pstmt-20015} Parameters : [0, 10]
2019-08-15 01:52:54,384 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
2019-08-15 01:52:54,384 DEBUG {conn-10005, pstmt-20015} executed. 0.659019 millis. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
         
            limit ?,?
2019-08-15 01:52:54,384 DEBUG {conn-10005, pstmt-20015, rs-50037} open
2019-08-15 01:52:54,384 DEBUG {conn-10005, pstmt-20015, rs-50037} Header: [link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, create_time]
2019-08-15 01:52:54,384 DEBUG {conn-10005, pstmt-20015, rs-50037} Result: [32, 0, fh, 567457, sf, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:52:54,385 DEBUG {conn-10005, pstmt-20015, rs-50037} Result: [31, 0, dg, 658, 手动阀, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:52:54,385 DEBUG {conn-10005, pstmt-20015, rs-50037} Result: [30, 0, 接口, 090, 模拟, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:52:54,385 DEBUG {conn-10005, pstmt-20015, rs-50037} Result: [29, 0, 校验码, 745, 如果和人, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:52:54,385 DEBUG {conn-10005, pstmt-20015, rs-50037} Result: [28, 0, 很关键, 456, 天涯海角, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:52:54,385 DEBUG {conn-10005, pstmt-20015, rs-50037} Result: [27, 0, 染发膏, 456, 突然好几天, 1, 0, 2019-11-04 00:00:00.0]
2019-08-15 01:52:54,385 DEBUG {conn-10005, pstmt-20015, rs-50037} Result: [26, 0, 翻滚吧, 345, 姑获鸟, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:52:54,386 DEBUG {conn-10005, pstmt-20015, rs-50037} Result: [25, 0, 分别, 34534, 法国红酒, 1, 0, 2019-09-23 00:00:00.0]
2019-08-15 01:52:54,386 DEBUG {conn-10005, pstmt-20015, rs-50037} Result: [24, 0, 4356fg地方, 345, 儿童, 1, 0, 2019-06-05 00:00:00.0]
2019-08-15 01:52:54,386 DEBUG {conn-10005, pstmt-20015, rs-50037} Result: [23, 0, 后就开始的, 34534, 放电饭锅, 0, 0, 2019-04-04 00:00:00.0]
2019-08-15 01:52:54,386 DEBUG {conn-10005, pstmt-20015, rs-50037} closed
2019-08-15 01:52:54,386 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 01:52:54,386 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:54,387 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:54,387 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:52:54,387 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:52:54,387 DEBUG {conn-10005, pstmt-20008} executed. 0.672384 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:52:54,388 DEBUG {conn-10005, pstmt-20008, rs-50038} open
2019-08-15 01:52:54,388 DEBUG {conn-10005, pstmt-20008, rs-50038} Header: [count(*)]
2019-08-15 01:52:54,388 DEBUG {conn-10005, pstmt-20008, rs-50038} Result: [27]
2019-08-15 01:52:54,388 DEBUG {conn-10005, pstmt-20008, rs-50038} closed
2019-08-15 01:52:54,388 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:52:54,388 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:56,207 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:56,208 DEBUG {conn-10005, pstmt-20016} created. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:52:56,208 DEBUG {conn-10005, pstmt-20016} Parameters : [0, 10]
2019-08-15 01:52:56,208 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER, INTEGER]
2019-08-15 01:52:56,209 DEBUG {conn-10005, pstmt-20016} executed. 0.922729 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:52:56,209 DEBUG {conn-10005, pstmt-20016, rs-50039} open
2019-08-15 01:52:56,210 DEBUG {conn-10005, pstmt-20016, rs-50039} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 01:52:56,210 DEBUG {conn-10005, pstmt-20016, rs-50039} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 01:52:56,210 DEBUG {conn-10005, pstmt-20016, rs-50039} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:52:56,210 DEBUG {conn-10005, pstmt-20016, rs-50039} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:52:56,210 DEBUG {conn-10005, pstmt-20016, rs-50039} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:52:56,211 DEBUG {conn-10005, pstmt-20016, rs-50039} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:52:56,211 DEBUG {conn-10005, pstmt-20016, rs-50039} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:52:56,212 DEBUG {conn-10005, pstmt-20016, rs-50039} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:52:56,212 DEBUG {conn-10005, pstmt-20016, rs-50039} Result: [337575483, oooo, 小灰, 0, null, 1158767965@qq.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:52:56,212 DEBUG {conn-10005, pstmt-20016, rs-50039} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:52:56,213 DEBUG {conn-10005, pstmt-20016, rs-50039} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:52:56,213 DEBUG {conn-10005, pstmt-20016, rs-50039} closed
2019-08-15 01:52:56,213 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 01:52:56,213 DEBUG {conn-10005} pool-recycle
2019-08-15 01:52:56,216 DEBUG {conn-10005} pool-connect
2019-08-15 01:52:56,216 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:52:56,216 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:52:56,217 DEBUG {conn-10005, pstmt-20010} executed. 0.588594 millis. select count(*)  from tb_admin_user
2019-08-15 01:52:56,217 DEBUG {conn-10005, pstmt-20010, rs-50040} open
2019-08-15 01:52:56,217 DEBUG {conn-10005, pstmt-20010, rs-50040} Header: [count(*)]
2019-08-15 01:52:56,217 DEBUG {conn-10005, pstmt-20010, rs-50040} Result: [10]
2019-08-15 01:52:56,217 DEBUG {conn-10005, pstmt-20010, rs-50040} closed
2019-08-15 01:52:56,217 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:52:56,217 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:05,357 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:05,357 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:53:05,357 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:53:05,358 DEBUG {conn-10005, pstmt-20014} executed. 0.61481 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:53:05,358 DEBUG {conn-10005, pstmt-20014, rs-50041} open
2019-08-15 01:53:05,358 DEBUG {conn-10005, pstmt-20014, rs-50041} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:53:05,358 DEBUG {conn-10005, pstmt-20014, rs-50041} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:53:05,359 DEBUG {conn-10005, pstmt-20014, rs-50041} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:53:05,362 DEBUG {conn-10005, pstmt-20014, rs-50041} closed
2019-08-15 01:53:05,362 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:53:05,362 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:05,362 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:05,363 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:53:05,363 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:53:05,363 DEBUG {conn-10005, pstmt-20007} executed. 0.613268 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:53:05,363 DEBUG {conn-10005, pstmt-20007, rs-50042} open
2019-08-15 01:53:05,363 DEBUG {conn-10005, pstmt-20007, rs-50042} Header: [count(*)]
2019-08-15 01:53:05,363 DEBUG {conn-10005, pstmt-20007, rs-50042} Result: [2]
2019-08-15 01:53:05,364 DEBUG {conn-10005, pstmt-20007, rs-50042} closed
2019-08-15 01:53:05,364 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:53:05,364 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:07,325 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:07,325 DEBUG {conn-10005, pstmt-20016} Parameters : [0, 10]
2019-08-15 01:53:07,325 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER, INTEGER]
2019-08-15 01:53:07,326 DEBUG {conn-10005, pstmt-20016} executed. 0.772626 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:53:07,326 DEBUG {conn-10005, pstmt-20016, rs-50043} open
2019-08-15 01:53:07,326 DEBUG {conn-10005, pstmt-20016, rs-50043} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 01:53:07,326 DEBUG {conn-10005, pstmt-20016, rs-50043} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 01:53:07,327 DEBUG {conn-10005, pstmt-20016, rs-50043} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:07,327 DEBUG {conn-10005, pstmt-20016, rs-50043} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:07,328 DEBUG {conn-10005, pstmt-20016, rs-50043} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:07,328 DEBUG {conn-10005, pstmt-20016, rs-50043} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:07,330 DEBUG {conn-10005, pstmt-20016, rs-50043} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:07,331 DEBUG {conn-10005, pstmt-20016, rs-50043} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:07,331 DEBUG {conn-10005, pstmt-20016, rs-50043} Result: [337575483, oooo, 小灰, 0, null, 1158767965@qq.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:07,332 DEBUG {conn-10005, pstmt-20016, rs-50043} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:07,332 DEBUG {conn-10005, pstmt-20016, rs-50043} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:07,332 DEBUG {conn-10005, pstmt-20016, rs-50043} closed
2019-08-15 01:53:07,333 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 01:53:07,333 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:07,334 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:07,334 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:53:07,334 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:53:07,335 DEBUG {conn-10005, pstmt-20010} executed. 0.806039 millis. select count(*)  from tb_admin_user
2019-08-15 01:53:07,335 DEBUG {conn-10005, pstmt-20010, rs-50044} open
2019-08-15 01:53:07,335 DEBUG {conn-10005, pstmt-20010, rs-50044} Header: [count(*)]
2019-08-15 01:53:07,335 DEBUG {conn-10005, pstmt-20010, rs-50044} Result: [10]
2019-08-15 01:53:07,335 DEBUG {conn-10005, pstmt-20010, rs-50044} closed
2019-08-15 01:53:07,335 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:53:07,336 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:08,781 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:08,781 DEBUG {conn-10005, pstmt-20017} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 01:53:08,781 DEBUG {conn-10005, pstmt-20017} Parameters : []
2019-08-15 01:53:08,781 DEBUG {conn-10005, pstmt-20017} Types : []
2019-08-15 01:53:08,782 DEBUG {conn-10005, pstmt-20017} executed. 0.525364 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 01:53:08,782 DEBUG {conn-10005, pstmt-20017, rs-50045} open
2019-08-15 01:53:08,782 DEBUG {conn-10005, pstmt-20017, rs-50045} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:53:08,782 DEBUG {conn-10005, pstmt-20017, rs-50045} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:53:08,782 DEBUG {conn-10005, pstmt-20017, rs-50045} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:53:08,782 DEBUG {conn-10005, pstmt-20017, rs-50045} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:53:08,782 DEBUG {conn-10005, pstmt-20017, rs-50045} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:53:08,783 DEBUG {conn-10005, pstmt-20017, rs-50045} closed
2019-08-15 01:53:08,783 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-15 01:53:08,783 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:11,040 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:11,040 DEBUG {conn-10005, pstmt-20016} Parameters : [0, 10]
2019-08-15 01:53:11,040 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER, INTEGER]
2019-08-15 01:53:11,041 DEBUG {conn-10005, pstmt-20016} executed. 0.778794 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:53:11,041 DEBUG {conn-10005, pstmt-20016, rs-50046} open
2019-08-15 01:53:11,041 DEBUG {conn-10005, pstmt-20016, rs-50046} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 01:53:11,041 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 01:53:11,041 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:11,041 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:11,042 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:11,042 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:11,042 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:11,042 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:11,043 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [337575483, oooo, 小灰, 0, null, 1158767965@qq.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:11,043 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:11,043 DEBUG {conn-10005, pstmt-20016, rs-50046} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:11,043 DEBUG {conn-10005, pstmt-20016, rs-50046} closed
2019-08-15 01:53:11,043 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 01:53:11,043 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:11,044 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:11,044 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:53:11,044 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:53:11,045 DEBUG {conn-10005, pstmt-20010} executed. 0.521253 millis. select count(*)  from tb_admin_user
2019-08-15 01:53:11,045 DEBUG {conn-10005, pstmt-20010, rs-50047} open
2019-08-15 01:53:11,045 DEBUG {conn-10005, pstmt-20010, rs-50047} Header: [count(*)]
2019-08-15 01:53:11,045 DEBUG {conn-10005, pstmt-20010, rs-50047} Result: [10]
2019-08-15 01:53:11,045 DEBUG {conn-10005, pstmt-20010, rs-50047} closed
2019-08-15 01:53:11,045 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:53:11,045 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:15,769 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:15,769 DEBUG {conn-10005, pstmt-20015} Parameters : [0, 10]
2019-08-15 01:53:15,769 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
2019-08-15 01:53:15,770 DEBUG {conn-10005, pstmt-20015} executed. 0.704256 millis. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
         
            limit ?,?
2019-08-15 01:53:15,770 DEBUG {conn-10005, pstmt-20015, rs-50048} open
2019-08-15 01:53:15,770 DEBUG {conn-10005, pstmt-20015, rs-50048} Header: [link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, create_time]
2019-08-15 01:53:15,770 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [32, 0, fh, 567457, sf, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:53:15,771 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [31, 0, dg, 658, 手动阀, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:53:15,771 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [30, 0, 接口, 090, 模拟, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:53:15,771 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [29, 0, 校验码, 745, 如果和人, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:53:15,771 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [28, 0, 很关键, 456, 天涯海角, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:53:15,771 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [27, 0, 染发膏, 456, 突然好几天, 1, 0, 2019-11-04 00:00:00.0]
2019-08-15 01:53:15,774 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [26, 0, 翻滚吧, 345, 姑获鸟, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:53:15,774 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [25, 0, 分别, 34534, 法国红酒, 1, 0, 2019-09-23 00:00:00.0]
2019-08-15 01:53:15,774 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [24, 0, 4356fg地方, 345, 儿童, 1, 0, 2019-06-05 00:00:00.0]
2019-08-15 01:53:15,774 DEBUG {conn-10005, pstmt-20015, rs-50048} Result: [23, 0, 后就开始的, 34534, 放电饭锅, 0, 0, 2019-04-04 00:00:00.0]
2019-08-15 01:53:15,775 DEBUG {conn-10005, pstmt-20015, rs-50048} closed
2019-08-15 01:53:15,775 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 01:53:15,775 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:15,775 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:15,775 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:53:15,775 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:53:15,776 DEBUG {conn-10005, pstmt-20008} executed. 0.617895 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:53:15,776 DEBUG {conn-10005, pstmt-20008, rs-50049} open
2019-08-15 01:53:15,776 DEBUG {conn-10005, pstmt-20008, rs-50049} Header: [count(*)]
2019-08-15 01:53:15,776 DEBUG {conn-10005, pstmt-20008, rs-50049} Result: [27]
2019-08-15 01:53:15,776 DEBUG {conn-10005, pstmt-20008, rs-50049} closed
2019-08-15 01:53:15,776 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:53:15,776 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:18,040 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:18,040 DEBUG {conn-10005, pstmt-20016} Parameters : [0, 10]
2019-08-15 01:53:18,040 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER, INTEGER]
2019-08-15 01:53:18,041 DEBUG {conn-10005, pstmt-20016} executed. 0.557236 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:53:18,041 DEBUG {conn-10005, pstmt-20016, rs-50050} open
2019-08-15 01:53:18,041 DEBUG {conn-10005, pstmt-20016, rs-50050} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 01:53:18,041 DEBUG {conn-10005, pstmt-20016, rs-50050} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 01:53:18,041 DEBUG {conn-10005, pstmt-20016, rs-50050} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:18,041 DEBUG {conn-10005, pstmt-20016, rs-50050} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:18,041 DEBUG {conn-10005, pstmt-20016, rs-50050} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:18,042 DEBUG {conn-10005, pstmt-20016, rs-50050} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:18,042 DEBUG {conn-10005, pstmt-20016, rs-50050} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:18,042 DEBUG {conn-10005, pstmt-20016, rs-50050} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:18,042 DEBUG {conn-10005, pstmt-20016, rs-50050} Result: [337575483, oooo, 小灰, 0, null, 1158767965@qq.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:18,042 DEBUG {conn-10005, pstmt-20016, rs-50050} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:18,042 DEBUG {conn-10005, pstmt-20016, rs-50050} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:53:18,042 DEBUG {conn-10005, pstmt-20016, rs-50050} closed
2019-08-15 01:53:18,042 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 01:53:18,042 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:18,043 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:18,043 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:53:18,043 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:53:18,044 DEBUG {conn-10005, pstmt-20010} executed. 0.535132 millis. select count(*)  from tb_admin_user
2019-08-15 01:53:18,044 DEBUG {conn-10005, pstmt-20010, rs-50051} open
2019-08-15 01:53:18,044 DEBUG {conn-10005, pstmt-20010, rs-50051} Header: [count(*)]
2019-08-15 01:53:18,044 DEBUG {conn-10005, pstmt-20010, rs-50051} Result: [10]
2019-08-15 01:53:18,044 DEBUG {conn-10005, pstmt-20010, rs-50051} closed
2019-08-15 01:53:18,044 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:53:18,044 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:42,827 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:42,827 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:53:42,827 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:53:42,828 DEBUG {conn-10005, pstmt-20000} executed. 0.606072 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:53:42,828 DEBUG {conn-10005, pstmt-20000, rs-50052} open
2019-08-15 01:53:42,828 DEBUG {conn-10005, pstmt-20000, rs-50052} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:53:42,828 DEBUG {conn-10005, pstmt-20000, rs-50052} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:53:42,828 DEBUG {conn-10005, pstmt-20000, rs-50052} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:53:42,829 DEBUG {conn-10005, pstmt-20000, rs-50052} closed
2019-08-15 01:53:42,829 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:53:42,829 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:42,829 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:42,829 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:53:42,829 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:53:42,830 DEBUG {conn-10005, pstmt-20001} executed. 0.547469 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:53:42,830 DEBUG {conn-10005, pstmt-20001, rs-50053} open
2019-08-15 01:53:42,830 DEBUG {conn-10005, pstmt-20001, rs-50053} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:53:42,830 DEBUG {conn-10005, pstmt-20001, rs-50053} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:53:42,830 DEBUG {conn-10005, pstmt-20001, rs-50053} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:53:42,830 DEBUG {conn-10005, pstmt-20001, rs-50053} closed
2019-08-15 01:53:42,830 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:53:42,830 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:42,832 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:42,832 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:53:42,832 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:53:42,833 DEBUG {conn-10005, pstmt-20002} executed. 0.72122 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:53:42,833 DEBUG {conn-10005, pstmt-20002, rs-50054} open
2019-08-15 01:53:42,833 DEBUG {conn-10005, pstmt-20002, rs-50054} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:53:42,833 DEBUG {conn-10005, pstmt-20002, rs-50054} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:53:42,833 DEBUG {conn-10005, pstmt-20002, rs-50054} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:53:42,833 DEBUG {conn-10005, pstmt-20002, rs-50054} Result: [139, 1, jqGrid]
2019-08-15 01:53:42,833 DEBUG {conn-10005, pstmt-20002, rs-50054} closed
2019-08-15 01:53:42,833 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:53:42,833 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:42,833 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:42,833 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:53:42,833 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:53:42,834 DEBUG {conn-10005, pstmt-20003} executed. 0.407132 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:53:42,834 DEBUG {conn-10005, pstmt-20003, rs-50055} open
2019-08-15 01:53:42,834 DEBUG {conn-10005, pstmt-20003, rs-50055} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:53:42,834 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:53:42,834 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:53:42,834 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:53:42,834 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:53:42,834 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:53:42,834 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:53:42,834 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:53:42,835 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:53:42,835 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:53:42,835 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:53:42,835 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:53:42,835 DEBUG {conn-10005, pstmt-20003, rs-50055} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:53:42,835 DEBUG {conn-10005, pstmt-20003, rs-50055} closed
2019-08-15 01:53:42,835 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:53:42,835 DEBUG {conn-10005} pool-recycle
2019-08-15 01:53:42,847 DEBUG {conn-10005} pool-connect
2019-08-15 01:53:42,847 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:53:42,847 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:53:42,847 DEBUG {conn-10005, pstmt-20004} executed. 0.488353 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:53:42,847 DEBUG {conn-10005, pstmt-20004, rs-50056} open
2019-08-15 01:53:42,847 DEBUG {conn-10005, pstmt-20004, rs-50056} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:53:42,847 DEBUG {conn-10005, pstmt-20004, rs-50056} closed
2019-08-15 01:53:42,847 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:53:42,848 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:00,596 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:00,596 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 01:54:00,596 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 01:54:00,597 DEBUG {conn-10005, pstmt-20005} executed. 0.732015 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:54:00,597 DEBUG {conn-10005, pstmt-20005, rs-50057} open
2019-08-15 01:54:00,597 DEBUG {conn-10005, pstmt-20005, rs-50057} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:54:00,597 DEBUG {conn-10005, pstmt-20005, rs-50057} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:54:00,597 DEBUG {conn-10005, pstmt-20005, rs-50057} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:54:00,597 DEBUG {conn-10005, pstmt-20005, rs-50057} closed
2019-08-15 01:54:00,598 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:54:00,598 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:00,690 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:00,690 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:54:00,690 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:54:00,691 DEBUG {conn-10005, pstmt-20000} executed. 0.732015 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:54:00,691 DEBUG {conn-10005, pstmt-20000, rs-50058} open
2019-08-15 01:54:00,691 DEBUG {conn-10005, pstmt-20000, rs-50058} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:54:00,691 DEBUG {conn-10005, pstmt-20000, rs-50058} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:54:00,691 DEBUG {conn-10005, pstmt-20000, rs-50058} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:54:00,691 DEBUG {conn-10005, pstmt-20000, rs-50058} closed
2019-08-15 01:54:00,692 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:54:00,692 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:00,692 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:00,692 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:54:00,692 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:54:00,693 DEBUG {conn-10005, pstmt-20001} executed. 0.612754 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:54:00,693 DEBUG {conn-10005, pstmt-20001, rs-50059} open
2019-08-15 01:54:00,693 DEBUG {conn-10005, pstmt-20001, rs-50059} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:54:00,693 DEBUG {conn-10005, pstmt-20001, rs-50059} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:54:00,693 DEBUG {conn-10005, pstmt-20001, rs-50059} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:54:00,694 DEBUG {conn-10005, pstmt-20001, rs-50059} closed
2019-08-15 01:54:00,694 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:54:00,694 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:00,694 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:00,694 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:54:00,694 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:54:00,695 DEBUG {conn-10005, pstmt-20002} executed. 0.651822 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:54:00,695 DEBUG {conn-10005, pstmt-20002, rs-50060} open
2019-08-15 01:54:00,695 DEBUG {conn-10005, pstmt-20002, rs-50060} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:54:00,695 DEBUG {conn-10005, pstmt-20002, rs-50060} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:54:00,695 DEBUG {conn-10005, pstmt-20002, rs-50060} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:54:00,695 DEBUG {conn-10005, pstmt-20002, rs-50060} Result: [139, 1, jqGrid]
2019-08-15 01:54:00,695 DEBUG {conn-10005, pstmt-20002, rs-50060} closed
2019-08-15 01:54:00,695 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:54:00,695 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:00,695 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:00,695 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:54:00,695 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:54:00,696 DEBUG {conn-10005, pstmt-20003} executed. 0.441059 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:54:00,696 DEBUG {conn-10005, pstmt-20003, rs-50061} open
2019-08-15 01:54:00,696 DEBUG {conn-10005, pstmt-20003, rs-50061} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:54:00,696 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:54:00,696 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:54:00,696 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:54:00,696 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:54:00,696 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:54:00,696 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:54:00,696 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:54:00,697 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:54:00,697 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:54:00,697 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:54:00,697 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:54:00,697 DEBUG {conn-10005, pstmt-20003, rs-50061} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:54:00,697 DEBUG {conn-10005, pstmt-20003, rs-50061} closed
2019-08-15 01:54:00,697 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:54:00,697 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:00,706 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:00,706 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:54:00,706 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:54:00,706 DEBUG {conn-10005, pstmt-20004} executed. 0.565461 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:54:00,706 DEBUG {conn-10005, pstmt-20004, rs-50062} open
2019-08-15 01:54:00,707 DEBUG {conn-10005, pstmt-20004, rs-50062} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:54:00,707 DEBUG {conn-10005, pstmt-20004, rs-50062} closed
2019-08-15 01:54:00,707 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:54:00,707 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:07,651 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:07,651 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:54:07,651 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:54:07,652 DEBUG {conn-10005, pstmt-20006} executed. 0.653879 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:54:07,652 DEBUG {conn-10005, pstmt-20006, rs-50063} open
2019-08-15 01:54:07,652 DEBUG {conn-10005, pstmt-20006, rs-50063} Header: [count(*)]
2019-08-15 01:54:07,652 DEBUG {conn-10005, pstmt-20006, rs-50063} Result: [4]
2019-08-15 01:54:07,653 DEBUG {conn-10005, pstmt-20006, rs-50063} closed
2019-08-15 01:54:07,653 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:54:07,653 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:07,653 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:07,653 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:54:07,653 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:54:07,654 DEBUG {conn-10005, pstmt-20007} executed. 0.602473 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:54:07,654 DEBUG {conn-10005, pstmt-20007, rs-50064} open
2019-08-15 01:54:07,654 DEBUG {conn-10005, pstmt-20007, rs-50064} Header: [count(*)]
2019-08-15 01:54:07,654 DEBUG {conn-10005, pstmt-20007, rs-50064} Result: [2]
2019-08-15 01:54:07,654 DEBUG {conn-10005, pstmt-20007, rs-50064} closed
2019-08-15 01:54:07,654 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:54:07,654 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:07,655 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:07,655 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:54:07,655 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:54:07,655 DEBUG {conn-10005, pstmt-20008} executed. 0.618923 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:54:07,655 DEBUG {conn-10005, pstmt-20008, rs-50065} open
2019-08-15 01:54:07,655 DEBUG {conn-10005, pstmt-20008, rs-50065} Header: [count(*)]
2019-08-15 01:54:07,656 DEBUG {conn-10005, pstmt-20008, rs-50065} Result: [27]
2019-08-15 01:54:07,656 DEBUG {conn-10005, pstmt-20008, rs-50065} closed
2019-08-15 01:54:07,656 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:54:07,656 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:07,656 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:07,656 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:54:07,656 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:54:07,657 DEBUG {conn-10005, pstmt-20009} executed. 0.596819 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:54:07,657 DEBUG {conn-10005, pstmt-20009, rs-50066} open
2019-08-15 01:54:07,657 DEBUG {conn-10005, pstmt-20009, rs-50066} Header: [count(*)]
2019-08-15 01:54:07,657 DEBUG {conn-10005, pstmt-20009, rs-50066} Result: [14]
2019-08-15 01:54:07,657 DEBUG {conn-10005, pstmt-20009, rs-50066} closed
2019-08-15 01:54:07,658 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:54:07,658 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:07,658 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:07,658 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:54:07,658 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:54:07,658 DEBUG {conn-10005, pstmt-20010} executed. 0.550039 millis. select count(*)  from tb_admin_user
2019-08-15 01:54:07,659 DEBUG {conn-10005, pstmt-20010, rs-50067} open
2019-08-15 01:54:07,659 DEBUG {conn-10005, pstmt-20010, rs-50067} Header: [count(*)]
2019-08-15 01:54:07,659 DEBUG {conn-10005, pstmt-20010, rs-50067} Result: [10]
2019-08-15 01:54:07,659 DEBUG {conn-10005, pstmt-20010, rs-50067} closed
2019-08-15 01:54:07,659 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:54:07,659 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:07,659 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:07,659 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:54:07,659 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:54:07,660 DEBUG {conn-10005, pstmt-20011} executed. 0.569059 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:54:07,660 DEBUG {conn-10005, pstmt-20011, rs-50068} open
2019-08-15 01:54:07,660 DEBUG {conn-10005, pstmt-20011, rs-50068} Header: [count(*)]
2019-08-15 01:54:07,660 DEBUG {conn-10005, pstmt-20011, rs-50068} Result: [5]
2019-08-15 01:54:07,660 DEBUG {conn-10005, pstmt-20011, rs-50068} closed
2019-08-15 01:54:07,660 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:54:07,661 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:08,930 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:08,930 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:54:08,930 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:54:08,930 DEBUG {conn-10005, pstmt-20006} executed. 0.388112 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:54:08,930 DEBUG {conn-10005, pstmt-20006, rs-50069} open
2019-08-15 01:54:08,930 DEBUG {conn-10005, pstmt-20006, rs-50069} Header: [count(*)]
2019-08-15 01:54:08,930 DEBUG {conn-10005, pstmt-20006, rs-50069} Result: [4]
2019-08-15 01:54:08,931 DEBUG {conn-10005, pstmt-20006, rs-50069} closed
2019-08-15 01:54:08,931 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:54:08,931 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:08,931 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:08,931 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:54:08,931 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:54:08,931 DEBUG {conn-10005, pstmt-20007} executed. 0.325912 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:54:08,931 DEBUG {conn-10005, pstmt-20007, rs-50070} open
2019-08-15 01:54:08,931 DEBUG {conn-10005, pstmt-20007, rs-50070} Header: [count(*)]
2019-08-15 01:54:08,931 DEBUG {conn-10005, pstmt-20007, rs-50070} Result: [2]
2019-08-15 01:54:08,931 DEBUG {conn-10005, pstmt-20007, rs-50070} closed
2019-08-15 01:54:08,931 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:54:08,932 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:08,932 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:08,932 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:54:08,932 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:54:08,932 DEBUG {conn-10005, pstmt-20008} executed. 0.471389 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:54:08,932 DEBUG {conn-10005, pstmt-20008, rs-50071} open
2019-08-15 01:54:08,932 DEBUG {conn-10005, pstmt-20008, rs-50071} Header: [count(*)]
2019-08-15 01:54:08,932 DEBUG {conn-10005, pstmt-20008, rs-50071} Result: [27]
2019-08-15 01:54:08,932 DEBUG {conn-10005, pstmt-20008, rs-50071} closed
2019-08-15 01:54:08,933 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:54:08,933 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:08,933 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:08,933 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:54:08,933 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:54:08,933 DEBUG {conn-10005, pstmt-20009} executed. 0.534103 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:54:08,933 DEBUG {conn-10005, pstmt-20009, rs-50072} open
2019-08-15 01:54:08,933 DEBUG {conn-10005, pstmt-20009, rs-50072} Header: [count(*)]
2019-08-15 01:54:08,933 DEBUG {conn-10005, pstmt-20009, rs-50072} Result: [14]
2019-08-15 01:54:08,934 DEBUG {conn-10005, pstmt-20009, rs-50072} closed
2019-08-15 01:54:08,934 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:54:08,934 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:08,934 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:08,934 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:54:08,934 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:54:08,935 DEBUG {conn-10005, pstmt-20010} executed. 0.793188 millis. select count(*)  from tb_admin_user
2019-08-15 01:54:08,935 DEBUG {conn-10005, pstmt-20010, rs-50073} open
2019-08-15 01:54:08,935 DEBUG {conn-10005, pstmt-20010, rs-50073} Header: [count(*)]
2019-08-15 01:54:08,935 DEBUG {conn-10005, pstmt-20010, rs-50073} Result: [10]
2019-08-15 01:54:08,935 DEBUG {conn-10005, pstmt-20010, rs-50073} closed
2019-08-15 01:54:08,935 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:54:08,935 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:08,936 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:08,936 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:54:08,936 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:54:08,936 DEBUG {conn-10005, pstmt-20011} executed. 0.480128 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:54:08,936 DEBUG {conn-10005, pstmt-20011, rs-50074} open
2019-08-15 01:54:08,936 DEBUG {conn-10005, pstmt-20011, rs-50074} Header: [count(*)]
2019-08-15 01:54:08,936 DEBUG {conn-10005, pstmt-20011, rs-50074} Result: [5]
2019-08-15 01:54:08,937 DEBUG {conn-10005, pstmt-20011, rs-50074} closed
2019-08-15 01:54:08,937 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:54:08,937 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:11,366 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:11,366 DEBUG {conn-10005, pstmt-20016} Parameters : [0, 10]
2019-08-15 01:54:11,366 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER, INTEGER]
2019-08-15 01:54:11,367 DEBUG {conn-10005, pstmt-20016} executed. 1.446038 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:54:11,367 DEBUG {conn-10005, pstmt-20016, rs-50075} open
2019-08-15 01:54:11,367 DEBUG {conn-10005, pstmt-20016, rs-50075} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 01:54:11,368 DEBUG {conn-10005, pstmt-20016, rs-50075} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 01:54:11,368 DEBUG {conn-10005, pstmt-20016, rs-50075} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:54:11,368 DEBUG {conn-10005, pstmt-20016, rs-50075} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:54:11,368 DEBUG {conn-10005, pstmt-20016, rs-50075} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:54:11,369 DEBUG {conn-10005, pstmt-20016, rs-50075} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:54:11,369 DEBUG {conn-10005, pstmt-20016, rs-50075} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:54:11,369 DEBUG {conn-10005, pstmt-20016, rs-50075} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:54:11,369 DEBUG {conn-10005, pstmt-20016, rs-50075} Result: [337575483, oooo, 小灰, 0, null, 1158767965@qq.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:54:11,370 DEBUG {conn-10005, pstmt-20016, rs-50075} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:54:11,370 DEBUG {conn-10005, pstmt-20016, rs-50075} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:54:11,370 DEBUG {conn-10005, pstmt-20016, rs-50075} closed
2019-08-15 01:54:11,370 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 01:54:11,371 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:11,372 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:11,372 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:54:11,372 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:54:11,372 DEBUG {conn-10005, pstmt-20010} executed. 0.654907 millis. select count(*)  from tb_admin_user
2019-08-15 01:54:11,373 DEBUG {conn-10005, pstmt-20010, rs-50076} open
2019-08-15 01:54:11,373 DEBUG {conn-10005, pstmt-20010, rs-50076} Header: [count(*)]
2019-08-15 01:54:11,373 DEBUG {conn-10005, pstmt-20010, rs-50076} Result: [10]
2019-08-15 01:54:11,373 DEBUG {conn-10005, pstmt-20010, rs-50076} closed
2019-08-15 01:54:11,373 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:54:11,373 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:14,496 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:14,496 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:54:14,496 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:54:14,501 DEBUG {conn-10005, pstmt-20014} executed. 0.681124 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:54:14,501 DEBUG {conn-10005, pstmt-20014, rs-50077} open
2019-08-15 01:54:14,501 DEBUG {conn-10005, pstmt-20014, rs-50077} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:54:14,502 DEBUG {conn-10005, pstmt-20014, rs-50077} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:54:14,502 DEBUG {conn-10005, pstmt-20014, rs-50077} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:54:14,502 DEBUG {conn-10005, pstmt-20014, rs-50077} closed
2019-08-15 01:54:14,502 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:54:14,503 DEBUG {conn-10005} pool-recycle
2019-08-15 01:54:14,503 DEBUG {conn-10005} pool-connect
2019-08-15 01:54:14,503 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:54:14,503 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:54:14,504 DEBUG {conn-10005, pstmt-20007} executed. 0.68575 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:54:14,504 DEBUG {conn-10005, pstmt-20007, rs-50078} open
2019-08-15 01:54:14,504 DEBUG {conn-10005, pstmt-20007, rs-50078} Header: [count(*)]
2019-08-15 01:54:14,504 DEBUG {conn-10005, pstmt-20007, rs-50078} Result: [2]
2019-08-15 01:54:14,504 DEBUG {conn-10005, pstmt-20007, rs-50078} closed
2019-08-15 01:54:14,504 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:54:14,504 DEBUG {conn-10005} pool-recycle
2019-08-15 01:56:08,585 DEBUG {conn-10005} pool-connect
2019-08-15 01:56:08,585 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:56:08,585 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:56:08,590 DEBUG {conn-10005, pstmt-20000} executed. 6.164554 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:56:08,590 DEBUG {conn-10005, pstmt-20000, rs-50079} open
2019-08-15 01:56:08,590 DEBUG {conn-10005, pstmt-20000, rs-50079} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:56:08,591 DEBUG {conn-10005, pstmt-20000, rs-50079} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:56:08,591 DEBUG {conn-10005, pstmt-20000, rs-50079} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:56:08,591 DEBUG {conn-10005, pstmt-20000, rs-50079} closed
2019-08-15 01:56:08,591 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:56:08,591 DEBUG {conn-10005} pool-recycle
2019-08-15 01:56:08,591 DEBUG {conn-10005} pool-connect
2019-08-15 01:56:08,591 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:56:08,591 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:56:08,592 DEBUG {conn-10005, pstmt-20001} executed. 0.582425 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:56:08,592 DEBUG {conn-10005, pstmt-20001, rs-50080} open
2019-08-15 01:56:08,592 DEBUG {conn-10005, pstmt-20001, rs-50080} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:56:08,592 DEBUG {conn-10005, pstmt-20001, rs-50080} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:56:08,592 DEBUG {conn-10005, pstmt-20001, rs-50080} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:56:08,593 DEBUG {conn-10005, pstmt-20001, rs-50080} closed
2019-08-15 01:56:08,593 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:56:08,593 DEBUG {conn-10005} pool-recycle
2019-08-15 01:56:08,593 DEBUG {conn-10005} pool-connect
2019-08-15 01:56:08,593 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:56:08,593 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:56:08,594 DEBUG {conn-10005, pstmt-20002} executed. 0.775709 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:56:08,594 DEBUG {conn-10005, pstmt-20002, rs-50081} open
2019-08-15 01:56:08,594 DEBUG {conn-10005, pstmt-20002, rs-50081} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:56:08,594 DEBUG {conn-10005, pstmt-20002, rs-50081} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:56:08,595 DEBUG {conn-10005, pstmt-20002, rs-50081} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:56:08,595 DEBUG {conn-10005, pstmt-20002, rs-50081} Result: [139, 1, jqGrid]
2019-08-15 01:56:08,596 DEBUG {conn-10005, pstmt-20002, rs-50081} closed
2019-08-15 01:56:08,596 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:56:08,596 DEBUG {conn-10005} pool-recycle
2019-08-15 01:56:08,596 DEBUG {conn-10005} pool-connect
2019-08-15 01:56:08,596 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:56:08,596 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:56:08,597 DEBUG {conn-10005, pstmt-20003} executed. 0.982874 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:56:08,597 DEBUG {conn-10005, pstmt-20003, rs-50082} open
2019-08-15 01:56:08,597 DEBUG {conn-10005, pstmt-20003, rs-50082} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:56:08,598 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:56:08,598 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:56:08,598 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:56:08,598 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:56:08,598 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:56:08,598 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:56:08,598 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:56:08,599 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:56:08,599 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:56:08,599 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:56:08,599 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:56:08,599 DEBUG {conn-10005, pstmt-20003, rs-50082} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:56:08,599 DEBUG {conn-10005, pstmt-20003, rs-50082} closed
2019-08-15 01:56:08,600 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:56:08,600 DEBUG {conn-10005} pool-recycle
2019-08-15 01:56:08,612 DEBUG {conn-10005} pool-connect
2019-08-15 01:56:08,612 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:56:08,612 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:56:08,613 DEBUG {conn-10005, pstmt-20004} executed. 0.748465 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:56:08,613 DEBUG {conn-10005, pstmt-20004, rs-50083} open
2019-08-15 01:56:08,613 DEBUG {conn-10005, pstmt-20004, rs-50083} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:56:08,614 DEBUG {conn-10005, pstmt-20004, rs-50083} closed
2019-08-15 01:56:08,614 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:56:08,614 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:07,780 DEBUG {conn-10001,procId-1338} connected
2019-08-15 01:57:07,788 DEBUG {conn-10002,procId-1339} connected
2019-08-15 01:57:07,794 DEBUG {conn-10003,procId-1340} connected
2019-08-15 01:57:07,799 DEBUG {conn-10004,procId-1341} connected
2019-08-15 01:57:07,804 DEBUG {conn-10005,procId-1342} connected
2019-08-15 01:57:07,811 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:07,812 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:07,820 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:07,823 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:08,233 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:08,303 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:09,036 INFO [Kurse] modules [], plugins [], sites []
2019-08-15 01:57:09,047 DEBUG [Kurse] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 01:57:09,057 DEBUG [Kurse] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 01:57:09,067 DEBUG [Kurse] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:57:09,068 DEBUG [Kurse] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 01:57:09,068 DEBUG [Kurse] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 01:57:09,068 DEBUG [Kurse] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:57:09,068 DEBUG [Kurse] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 01:57:09,068 DEBUG [Kurse] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 01:57:09,069 DEBUG [Kurse] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:57:09,069 DEBUG [Kurse] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 01:57:09,069 DEBUG [Kurse] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:57:09,069 DEBUG [Kurse] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:57:09,069 DEBUG [Kurse] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 01:57:09,069 DEBUG [Kurse] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 01:57:09,069 DEBUG [Kurse] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 01:57:09,069 DEBUG [Kurse] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:57:10,562 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 01:57:10,580 DEBUG using gathering [true]
2019-08-15 01:57:10,599 DEBUG [Kurse] node_sampler_interval[5s]
2019-08-15 01:57:10,609 DEBUG Using select timeout of 500
2019-08-15 01:57:10,609 DEBUG Epoll-bug workaround enabled = false
2019-08-15 01:57:10,649 DEBUG [Kurse] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:57:10,673 DEBUG [Kurse] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:57:10,707 DEBUG [Kurse] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:57:11,432 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:11,432 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:13,900 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 01:57:14,094 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:14,287 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:57:14,297 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:57:14,297 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:57:14,299 DEBUG {conn-10005, pstmt-20000} executed. 5.194531 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:57:14,305 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 01:57:14,307 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:57:14,319 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:57:14,323 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:57:14,324 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 01:57:14,325 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:57:14,327 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:14,336 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:14,338 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:57:14,338 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:57:14,338 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:57:14,339 DEBUG {conn-10005, pstmt-20001} executed. 1.169476 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:57:14,340 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 01:57:14,340 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:57:14,341 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:57:14,341 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:57:14,342 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 01:57:14,342 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:57:14,342 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:14,343 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:14,351 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:57:14,352 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:57:14,352 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:57:14,354 DEBUG {conn-10005, pstmt-20002} executed. 1.802279 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:57:14,354 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 01:57:14,354 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:57:14,355 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:57:14,355 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:57:14,355 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 01:57:14,356 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 01:57:14,356 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:57:14,356 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:14,361 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:14,362 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:57:14,362 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:57:14,362 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:57:14,363 DEBUG {conn-10005, pstmt-20003} executed. 1.468142 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:57:14,364 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 01:57:14,364 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:57:14,364 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:14,365 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:14,366 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:14,366 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:14,367 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:14,367 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:14,368 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:14,369 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:14,369 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:14,369 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:57:14,370 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:57:14,370 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:57:14,371 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 01:57:14,371 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:57:14,371 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:14,426 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:14,427 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:57:14,428 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:57:14,428 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:57:14,429 DEBUG {conn-10005, pstmt-20004} executed. 1.18901 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:57:14,430 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 01:57:14,430 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:57:14,430 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 01:57:14,430 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:57:14,430 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:14,656 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:14,657 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:57:14,657 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:57:14,658 DEBUG {conn-10005, pstmt-20000} executed. 1.401315 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:57:14,658 DEBUG {conn-10005, pstmt-20000, rs-50005} open
2019-08-15 01:57:14,659 DEBUG {conn-10005, pstmt-20000, rs-50005} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:57:14,659 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:57:14,660 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:57:14,661 DEBUG {conn-10005, pstmt-20000, rs-50005} closed
2019-08-15 01:57:14,661 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:57:14,661 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:14,662 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:14,662 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:57:14,662 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:57:14,663 DEBUG {conn-10005, pstmt-20001} executed. 0.898569 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:57:14,663 DEBUG {conn-10005, pstmt-20001, rs-50006} open
2019-08-15 01:57:14,663 DEBUG {conn-10005, pstmt-20001, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:57:14,664 DEBUG {conn-10005, pstmt-20001, rs-50006} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:57:14,664 DEBUG {conn-10005, pstmt-20001, rs-50006} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:57:14,665 DEBUG {conn-10005, pstmt-20001, rs-50006} closed
2019-08-15 01:57:14,665 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:57:14,665 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:14,665 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:14,666 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:57:14,666 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:57:14,667 DEBUG {conn-10005, pstmt-20002} executed. 1.176673 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:57:14,667 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-15 01:57:14,667 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:57:14,667 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:57:14,668 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:57:14,668 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [139, 1, jqGrid]
2019-08-15 01:57:14,668 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-15 01:57:14,668 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:57:14,669 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:14,669 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:14,669 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:57:14,669 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:57:14,670 DEBUG {conn-10005, pstmt-20003} executed. 1.079003 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:57:14,670 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-15 01:57:14,670 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:57:14,671 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:14,671 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:14,671 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:14,672 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:14,674 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:14,674 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:14,675 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:14,675 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:14,675 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:14,676 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:57:14,676 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:57:14,676 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:57:14,677 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-15 01:57:14,677 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:57:14,677 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:14,691 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:14,691 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:57:14,691 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:57:14,692 DEBUG {conn-10005, pstmt-20004} executed. 0.735614 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:57:14,692 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-15 01:57:14,692 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:57:14,693 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-15 01:57:14,693 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:57:14,693 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:28,820 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:28,821 DEBUG {conn-10005, pstmt-20005} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:57:28,822 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 01:57:28,822 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 01:57:28,825 DEBUG {conn-10005, pstmt-20005} executed. 3.46422 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 01:57:28,825 DEBUG {conn-10005, pstmt-20005, rs-50010} open
2019-08-15 01:57:28,826 DEBUG {conn-10005, pstmt-20005, rs-50010} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 01:57:28,826 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 01:57:28,828 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 01:57:28,828 DEBUG {conn-10005, pstmt-20005, rs-50010} closed
2019-08-15 01:57:28,829 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 01:57:28,829 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:28,936 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:28,936 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:57:28,936 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:57:28,936 DEBUG {conn-10005, pstmt-20000} executed. 0.595277 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:57:28,936 DEBUG {conn-10005, pstmt-20000, rs-50011} open
2019-08-15 01:57:28,936 DEBUG {conn-10005, pstmt-20000, rs-50011} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:57:28,937 DEBUG {conn-10005, pstmt-20000, rs-50011} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:57:28,937 DEBUG {conn-10005, pstmt-20000, rs-50011} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:57:28,937 DEBUG {conn-10005, pstmt-20000, rs-50011} closed
2019-08-15 01:57:28,937 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:57:28,937 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:28,938 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:28,938 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:57:28,938 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:57:28,938 DEBUG {conn-10005, pstmt-20001} executed. 0.547469 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:57:28,938 DEBUG {conn-10005, pstmt-20001, rs-50012} open
2019-08-15 01:57:28,938 DEBUG {conn-10005, pstmt-20001, rs-50012} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:57:28,939 DEBUG {conn-10005, pstmt-20001, rs-50012} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:57:28,939 DEBUG {conn-10005, pstmt-20001, rs-50012} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:57:28,939 DEBUG {conn-10005, pstmt-20001, rs-50012} closed
2019-08-15 01:57:28,940 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:57:28,940 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:28,940 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:28,940 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:57:28,940 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:57:28,941 DEBUG {conn-10005, pstmt-20002} executed. 1.028625 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:57:28,941 DEBUG {conn-10005, pstmt-20002, rs-50013} open
2019-08-15 01:57:28,941 DEBUG {conn-10005, pstmt-20002, rs-50013} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:57:28,941 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:57:28,942 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:57:28,942 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [139, 1, jqGrid]
2019-08-15 01:57:28,942 DEBUG {conn-10005, pstmt-20002, rs-50013} closed
2019-08-15 01:57:28,942 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:57:28,942 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:28,942 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:28,942 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:57:28,943 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:57:28,943 DEBUG {conn-10005, pstmt-20003} executed. 0.744352 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:57:28,943 DEBUG {conn-10005, pstmt-20003, rs-50014} open
2019-08-15 01:57:28,943 DEBUG {conn-10005, pstmt-20003, rs-50014} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:57:28,944 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:28,944 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:28,944 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:28,944 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:28,945 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:57:28,945 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:28,945 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:28,945 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:28,945 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:57:28,945 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:57:28,945 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:57:28,946 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:57:28,946 DEBUG {conn-10005, pstmt-20003, rs-50014} closed
2019-08-15 01:57:28,946 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:57:28,946 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:28,959 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:28,959 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:57:28,959 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:57:28,960 DEBUG {conn-10005, pstmt-20004} executed. 0.655935 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:57:28,960 DEBUG {conn-10005, pstmt-20004, rs-50015} open
2019-08-15 01:57:28,960 DEBUG {conn-10005, pstmt-20004, rs-50015} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:57:28,960 DEBUG {conn-10005, pstmt-20004, rs-50015} closed
2019-08-15 01:57:28,960 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:57:28,960 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:33,304 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:33,304 DEBUG {conn-10005, pstmt-20006} created. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:57:33,304 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:57:33,304 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:57:33,305 DEBUG {conn-10005, pstmt-20006} executed. 0.667244 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:57:33,305 DEBUG {conn-10005, pstmt-20006, rs-50016} open
2019-08-15 01:57:33,305 DEBUG {conn-10005, pstmt-20006, rs-50016} Header: [count(*)]
2019-08-15 01:57:33,305 DEBUG {conn-10005, pstmt-20006, rs-50016} Result: [4]
2019-08-15 01:57:33,307 DEBUG {conn-10005, pstmt-20006, rs-50016} closed
2019-08-15 01:57:33,307 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:57:33,307 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:33,308 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:33,309 DEBUG {conn-10005, pstmt-20007} created. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:57:33,309 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:57:33,309 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:57:33,309 DEBUG {conn-10005, pstmt-20007} executed. 0.555694 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:57:33,309 DEBUG {conn-10005, pstmt-20007, rs-50017} open
2019-08-15 01:57:33,309 DEBUG {conn-10005, pstmt-20007, rs-50017} Header: [count(*)]
2019-08-15 01:57:33,310 DEBUG {conn-10005, pstmt-20007, rs-50017} Result: [2]
2019-08-15 01:57:33,310 DEBUG {conn-10005, pstmt-20007, rs-50017} closed
2019-08-15 01:57:33,310 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:57:33,310 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:33,314 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:33,314 DEBUG {conn-10005, pstmt-20008} created. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:57:33,315 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:57:33,315 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:57:33,315 DEBUG {conn-10005, pstmt-20008} executed. 0.892915 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:57:33,316 DEBUG {conn-10005, pstmt-20008, rs-50018} open
2019-08-15 01:57:33,316 DEBUG {conn-10005, pstmt-20008, rs-50018} Header: [count(*)]
2019-08-15 01:57:33,316 DEBUG {conn-10005, pstmt-20008, rs-50018} Result: [27]
2019-08-15 01:57:33,316 DEBUG {conn-10005, pstmt-20008, rs-50018} closed
2019-08-15 01:57:33,316 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:57:33,316 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:33,317 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:33,317 DEBUG {conn-10005, pstmt-20009} created. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:57:33,318 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:57:33,318 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:57:33,318 DEBUG {conn-10005, pstmt-20009} executed. 0.692433 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:57:33,318 DEBUG {conn-10005, pstmt-20009, rs-50019} open
2019-08-15 01:57:33,318 DEBUG {conn-10005, pstmt-20009, rs-50019} Header: [count(*)]
2019-08-15 01:57:33,319 DEBUG {conn-10005, pstmt-20009, rs-50019} Result: [14]
2019-08-15 01:57:33,319 DEBUG {conn-10005, pstmt-20009, rs-50019} closed
2019-08-15 01:57:33,319 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:57:33,319 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:33,319 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:33,320 DEBUG {conn-10005, pstmt-20010} created. select count(*)  from tb_admin_user
2019-08-15 01:57:33,320 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:57:33,320 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:57:33,321 DEBUG {conn-10005, pstmt-20010} executed. 0.76183 millis. select count(*)  from tb_admin_user
2019-08-15 01:57:33,321 DEBUG {conn-10005, pstmt-20010, rs-50020} open
2019-08-15 01:57:33,321 DEBUG {conn-10005, pstmt-20010, rs-50020} Header: [count(*)]
2019-08-15 01:57:33,321 DEBUG {conn-10005, pstmt-20010, rs-50020} Result: [10]
2019-08-15 01:57:33,321 DEBUG {conn-10005, pstmt-20010, rs-50020} closed
2019-08-15 01:57:33,321 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:57:33,322 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:33,323 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:33,324 DEBUG {conn-10005, pstmt-20011} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:57:33,324 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:57:33,324 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:57:33,325 DEBUG {conn-10005, pstmt-20011} executed. 0.757718 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:57:33,325 DEBUG {conn-10005, pstmt-20011, rs-50021} open
2019-08-15 01:57:33,325 DEBUG {conn-10005, pstmt-20011, rs-50021} Header: [count(*)]
2019-08-15 01:57:33,325 DEBUG {conn-10005, pstmt-20011, rs-50021} Result: [5]
2019-08-15 01:57:33,325 DEBUG {conn-10005, pstmt-20011, rs-50021} closed
2019-08-15 01:57:33,325 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:57:33,325 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:36,019 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:36,020 DEBUG {conn-10005, pstmt-20012} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:57:36,020 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 01:57:36,020 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 01:57:36,021 DEBUG {conn-10005, pstmt-20012} executed. 0.813236 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 01:57:36,021 DEBUG {conn-10005, pstmt-20012, rs-50022} open
2019-08-15 01:57:36,021 DEBUG {conn-10005, pstmt-20012, rs-50022} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:57:36,021 DEBUG {conn-10005, pstmt-20012, rs-50022} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:57:36,022 DEBUG {conn-10005, pstmt-20012, rs-50022} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:57:36,022 DEBUG {conn-10005, pstmt-20012, rs-50022} closed
2019-08-15 01:57:36,022 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 01:57:36,023 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:36,023 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:36,023 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 01:57:36,023 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 01:57:36,024 DEBUG {conn-10005, pstmt-20007} executed. 0.788047 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 01:57:36,024 DEBUG {conn-10005, pstmt-20007, rs-50023} open
2019-08-15 01:57:36,024 DEBUG {conn-10005, pstmt-20007, rs-50023} Header: [count(*)]
2019-08-15 01:57:36,024 DEBUG {conn-10005, pstmt-20007, rs-50023} Result: [2]
2019-08-15 01:57:36,024 DEBUG {conn-10005, pstmt-20007, rs-50023} closed
2019-08-15 01:57:36,024 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 01:57:36,025 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:37,733 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:37,733 DEBUG {conn-10005, pstmt-20013} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:57:37,733 DEBUG {conn-10005, pstmt-20013} Parameters : [0, 10]
2019-08-15 01:57:37,733 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER, INTEGER]
2019-08-15 01:57:37,734 DEBUG {conn-10005, pstmt-20013} executed. 0.725333 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 01:57:37,734 DEBUG {conn-10005, pstmt-20013, rs-50024} open
2019-08-15 01:57:37,734 DEBUG {conn-10005, pstmt-20013, rs-50024} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 01:57:37,735 DEBUG {conn-10005, pstmt-20013, rs-50024} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 01:57:37,735 DEBUG {conn-10005, pstmt-20013, rs-50024} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 01:57:37,735 DEBUG {conn-10005, pstmt-20013, rs-50024} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 01:57:37,735 DEBUG {conn-10005, pstmt-20013, rs-50024} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 01:57:37,735 DEBUG {conn-10005, pstmt-20013, rs-50024} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 01:57:37,736 DEBUG {conn-10005, pstmt-20013, rs-50024} closed
2019-08-15 01:57:37,736 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 01:57:37,736 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:37,736 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:37,736 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 01:57:37,736 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 01:57:37,737 DEBUG {conn-10005, pstmt-20011} executed. 0.668273 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 01:57:37,737 DEBUG {conn-10005, pstmt-20011, rs-50025} open
2019-08-15 01:57:37,737 DEBUG {conn-10005, pstmt-20011, rs-50025} Header: [count(*)]
2019-08-15 01:57:37,737 DEBUG {conn-10005, pstmt-20011, rs-50025} Result: [5]
2019-08-15 01:57:37,737 DEBUG {conn-10005, pstmt-20011, rs-50025} closed
2019-08-15 01:57:37,737 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 01:57:37,737 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:53,606 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:53,606 DEBUG {conn-10005, pstmt-20014} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:57:53,607 DEBUG {conn-10005, pstmt-20014} Parameters : [0, 10]
2019-08-15 01:57:53,607 DEBUG {conn-10005, pstmt-20014} Types : [INTEGER, INTEGER]
2019-08-15 01:57:53,607 DEBUG {conn-10005, pstmt-20014} executed. 0.618923 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 01:57:53,607 DEBUG {conn-10005, pstmt-20014, rs-50026} open
2019-08-15 01:57:53,607 DEBUG {conn-10005, pstmt-20014, rs-50026} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 01:57:53,607 DEBUG {conn-10005, pstmt-20014, rs-50026} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 01:57:53,608 DEBUG {conn-10005, pstmt-20014, rs-50026} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 01:57:53,608 DEBUG {conn-10005, pstmt-20014, rs-50026} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 01:57:53,608 DEBUG {conn-10005, pstmt-20014, rs-50026} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 01:57:53,608 DEBUG {conn-10005, pstmt-20014, rs-50026} closed
2019-08-15 01:57:53,608 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 01:57:53,608 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:53,608 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:53,608 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 01:57:53,608 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 01:57:53,609 DEBUG {conn-10005, pstmt-20006} executed. 0.439517 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 01:57:53,609 DEBUG {conn-10005, pstmt-20006, rs-50027} open
2019-08-15 01:57:53,609 DEBUG {conn-10005, pstmt-20006, rs-50027} Header: [count(*)]
2019-08-15 01:57:53,609 DEBUG {conn-10005, pstmt-20006, rs-50027} Result: [4]
2019-08-15 01:57:53,609 DEBUG {conn-10005, pstmt-20006, rs-50027} closed
2019-08-15 01:57:53,609 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 01:57:53,609 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:55,155 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:55,155 DEBUG {conn-10005, pstmt-20015} created. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where is_deleted=0
    order by tag_id desc
     
      limit ?,?
2019-08-15 01:57:55,155 DEBUG {conn-10005, pstmt-20015} Parameters : [0, 10]
2019-08-15 01:57:55,155 DEBUG {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]
2019-08-15 01:57:55,156 DEBUG {conn-10005, pstmt-20015} executed. 0.602987 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where is_deleted=0
    order by tag_id desc
     
      limit ?,?
2019-08-15 01:57:55,156 DEBUG {conn-10005, pstmt-20015, rs-50028} open
2019-08-15 01:57:55,156 DEBUG {conn-10005, pstmt-20015, rs-50028} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 01:57:55,156 DEBUG {conn-10005, pstmt-20015, rs-50028} Result: [139, jqGrid, 0, 2019-08-14 19:46:03.0]
2019-08-15 01:57:55,157 DEBUG {conn-10005, pstmt-20015, rs-50028} Result: [138, test, 0, 2019-08-14 01:59:43.0]
2019-08-15 01:57:55,157 DEBUG {conn-10005, pstmt-20015, rs-50028} Result: [133, spring-boot企业级开发, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:57:55,157 DEBUG {conn-10005, pstmt-20015, rs-50028} Result: [132, 实战教程, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:57:55,157 DEBUG {conn-10005, pstmt-20015, rs-50028} Result: [131, 入门教程, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:57:55,158 DEBUG {conn-10005, pstmt-20015, rs-50028} Result: [130, SpringBoot, 0, 2019-05-13 17:58:54.0]
2019-08-15 01:57:55,158 DEBUG {conn-10005, pstmt-20015, rs-50028} Result: [128, AdminLte3, 0, 2019-04-24 23:46:16.0]
2019-08-15 01:57:55,158 DEBUG {conn-10005, pstmt-20015, rs-50028} Result: [127, 目录, 0, 2019-04-24 23:41:39.0]
2019-08-15 01:57:55,158 DEBUG {conn-10005, pstmt-20015, rs-50028} Result: [69, easyUI, 0, 2018-11-12 18:55:14.0]
2019-08-15 01:57:55,159 DEBUG {conn-10005, pstmt-20015, rs-50028} Result: [68, MyBatis, 0, 2018-11-12 18:55:14.0]
2019-08-15 01:57:55,159 DEBUG {conn-10005, pstmt-20015, rs-50028} closed
2019-08-15 01:57:55,159 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 01:57:55,159 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:55,159 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:55,159 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 01:57:55,159 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 01:57:55,160 DEBUG {conn-10005, pstmt-20009} executed. 0.598361 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 01:57:55,160 DEBUG {conn-10005, pstmt-20009, rs-50029} open
2019-08-15 01:57:55,160 DEBUG {conn-10005, pstmt-20009, rs-50029} Header: [count(*)]
2019-08-15 01:57:55,160 DEBUG {conn-10005, pstmt-20009, rs-50029} Result: [14]
2019-08-15 01:57:55,161 DEBUG {conn-10005, pstmt-20009, rs-50029} closed
2019-08-15 01:57:55,161 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 01:57:55,161 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:56,726 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:56,727 DEBUG {conn-10005, pstmt-20016} created. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:57:56,728 DEBUG {conn-10005, pstmt-20016} Parameters : [0, 10]
2019-08-15 01:57:56,728 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER, INTEGER]
2019-08-15 01:57:56,729 DEBUG {conn-10005, pstmt-20016} executed. 0.993156 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:57:56,729 DEBUG {conn-10005, pstmt-20016, rs-50030} open
2019-08-15 01:57:56,729 DEBUG {conn-10005, pstmt-20016, rs-50030} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 01:57:56,729 DEBUG {conn-10005, pstmt-20016, rs-50030} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 01:57:56,730 DEBUG {conn-10005, pstmt-20016, rs-50030} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:57:56,730 DEBUG {conn-10005, pstmt-20016, rs-50030} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:57:56,731 DEBUG {conn-10005, pstmt-20016, rs-50030} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:57:56,731 DEBUG {conn-10005, pstmt-20016, rs-50030} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:57:56,731 DEBUG {conn-10005, pstmt-20016, rs-50030} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:57:56,732 DEBUG {conn-10005, pstmt-20016, rs-50030} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:57:56,733 DEBUG {conn-10005, pstmt-20016, rs-50030} Result: [337575483, oooo, 小灰, 0, null, 1158767965@qq.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:57:56,733 DEBUG {conn-10005, pstmt-20016, rs-50030} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:57:56,733 DEBUG {conn-10005, pstmt-20016, rs-50030} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:57:56,733 DEBUG {conn-10005, pstmt-20016, rs-50030} closed
2019-08-15 01:57:56,733 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 01:57:56,733 DEBUG {conn-10005} pool-recycle
2019-08-15 01:57:56,735 DEBUG {conn-10005} pool-connect
2019-08-15 01:57:56,735 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:57:56,735 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:57:56,736 DEBUG {conn-10005, pstmt-20010} executed. 0.617895 millis. select count(*)  from tb_admin_user
2019-08-15 01:57:56,736 DEBUG {conn-10005, pstmt-20010, rs-50031} open
2019-08-15 01:57:56,736 DEBUG {conn-10005, pstmt-20010, rs-50031} Header: [count(*)]
2019-08-15 01:57:56,736 DEBUG {conn-10005, pstmt-20010, rs-50031} Result: [10]
2019-08-15 01:57:56,737 DEBUG {conn-10005, pstmt-20010, rs-50031} closed
2019-08-15 01:57:56,737 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:57:56,737 DEBUG {conn-10005} pool-recycle
2019-08-15 01:58:02,040 DEBUG {conn-10005} pool-connect
2019-08-15 01:58:02,041 DEBUG {conn-10005, pstmt-20017} created. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
         
            limit ?,?
2019-08-15 01:58:02,041 DEBUG {conn-10005, pstmt-20017} Parameters : [0, 10]
2019-08-15 01:58:02,041 DEBUG {conn-10005, pstmt-20017} Types : [INTEGER, INTEGER]
2019-08-15 01:58:02,042 DEBUG {conn-10005, pstmt-20017} executed. 0.727389 millis. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
         
            limit ?,?
2019-08-15 01:58:02,042 DEBUG {conn-10005, pstmt-20017, rs-50032} open
2019-08-15 01:58:02,042 DEBUG {conn-10005, pstmt-20017, rs-50032} Header: [link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, create_time]
2019-08-15 01:58:02,042 DEBUG {conn-10005, pstmt-20017, rs-50032} Result: [32, 0, fh, 567457, sf, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:58:02,042 DEBUG {conn-10005, pstmt-20017, rs-50032} Result: [31, 0, dg, 658, 手动阀, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:58:02,043 DEBUG {conn-10005, pstmt-20017, rs-50032} Result: [30, 0, 接口, 090, 模拟, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 01:58:02,043 DEBUG {conn-10005, pstmt-20017, rs-50032} Result: [29, 0, 校验码, 745, 如果和人, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:58:02,044 DEBUG {conn-10005, pstmt-20017, rs-50032} Result: [28, 0, 很关键, 456, 天涯海角, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:58:02,044 DEBUG {conn-10005, pstmt-20017, rs-50032} Result: [27, 0, 染发膏, 456, 突然好几天, 1, 0, 2019-11-04 00:00:00.0]
2019-08-15 01:58:02,045 DEBUG {conn-10005, pstmt-20017, rs-50032} Result: [26, 0, 翻滚吧, 345, 姑获鸟, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 01:58:02,045 DEBUG {conn-10005, pstmt-20017, rs-50032} Result: [25, 0, 分别, 34534, 法国红酒, 1, 0, 2019-09-23 00:00:00.0]
2019-08-15 01:58:02,045 DEBUG {conn-10005, pstmt-20017, rs-50032} Result: [24, 0, 4356fg地方, 345, 儿童, 1, 0, 2019-06-05 00:00:00.0]
2019-08-15 01:58:02,045 DEBUG {conn-10005, pstmt-20017, rs-50032} Result: [23, 0, 后就开始的, 34534, 放电饭锅, 0, 0, 2019-04-04 00:00:00.0]
2019-08-15 01:58:02,045 DEBUG {conn-10005, pstmt-20017, rs-50032} closed
2019-08-15 01:58:02,046 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-15 01:58:02,046 DEBUG {conn-10005} pool-recycle
2019-08-15 01:58:02,046 DEBUG {conn-10005} pool-connect
2019-08-15 01:58:02,046 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 01:58:02,046 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 01:58:02,047 DEBUG {conn-10005, pstmt-20008} executed. 0.61481 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 01:58:02,047 DEBUG {conn-10005, pstmt-20008, rs-50033} open
2019-08-15 01:58:02,047 DEBUG {conn-10005, pstmt-20008, rs-50033} Header: [count(*)]
2019-08-15 01:58:02,047 DEBUG {conn-10005, pstmt-20008, rs-50033} Result: [27]
2019-08-15 01:58:02,047 DEBUG {conn-10005, pstmt-20008, rs-50033} closed
2019-08-15 01:58:02,047 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 01:58:02,047 DEBUG {conn-10005} pool-recycle
2019-08-15 01:58:04,239 DEBUG {conn-10005} pool-connect
2019-08-15 01:58:04,239 DEBUG {conn-10005, pstmt-20016} Parameters : [0, 10]
2019-08-15 01:58:04,239 DEBUG {conn-10005, pstmt-20016} Types : [INTEGER, INTEGER]
2019-08-15 01:58:04,240 DEBUG {conn-10005, pstmt-20016} executed. 0.806039 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 01:58:04,240 DEBUG {conn-10005, pstmt-20016, rs-50034} open
2019-08-15 01:58:04,240 DEBUG {conn-10005, pstmt-20016, rs-50034} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 01:58:04,240 DEBUG {conn-10005, pstmt-20016, rs-50034} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 01:58:04,240 DEBUG {conn-10005, pstmt-20016, rs-50034} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:58:04,241 DEBUG {conn-10005, pstmt-20016, rs-50034} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:58:04,241 DEBUG {conn-10005, pstmt-20016, rs-50034} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:58:04,242 DEBUG {conn-10005, pstmt-20016, rs-50034} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:58:04,243 DEBUG {conn-10005, pstmt-20016, rs-50034} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:58:04,244 DEBUG {conn-10005, pstmt-20016, rs-50034} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:58:04,245 DEBUG {conn-10005, pstmt-20016, rs-50034} Result: [337575483, oooo, 小灰, 0, null, 1158767965@qq.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:58:04,245 DEBUG {conn-10005, pstmt-20016, rs-50034} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:58:04,245 DEBUG {conn-10005, pstmt-20016, rs-50034} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 01:58:04,245 DEBUG {conn-10005, pstmt-20016, rs-50034} closed
2019-08-15 01:58:04,245 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 01:58:04,245 DEBUG {conn-10005} pool-recycle
2019-08-15 01:58:04,246 DEBUG {conn-10005} pool-connect
2019-08-15 01:58:04,247 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 01:58:04,247 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 01:58:04,247 DEBUG {conn-10005, pstmt-20010} executed. 0.681124 millis. select count(*)  from tb_admin_user
2019-08-15 01:58:04,247 DEBUG {conn-10005, pstmt-20010, rs-50035} open
2019-08-15 01:58:04,247 DEBUG {conn-10005, pstmt-20010, rs-50035} Header: [count(*)]
2019-08-15 01:58:04,247 DEBUG {conn-10005, pstmt-20010, rs-50035} Result: [10]
2019-08-15 01:58:04,248 DEBUG {conn-10005, pstmt-20010, rs-50035} closed
2019-08-15 01:58:04,248 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 01:58:04,249 DEBUG {conn-10005} pool-recycle
2019-08-15 01:59:48,898 DEBUG {conn-10001,procId-1343} connected
2019-08-15 01:59:48,904 DEBUG {conn-10002,procId-1344} connected
2019-08-15 01:59:48,908 DEBUG {conn-10003,procId-1345} connected
2019-08-15 01:59:48,912 DEBUG {conn-10004,procId-1346} connected
2019-08-15 01:59:48,916 DEBUG {conn-10005,procId-1347} connected
2019-08-15 01:59:48,920 DEBUG {conn-10005} pool-connect
2019-08-15 01:59:48,921 DEBUG {conn-10005} pool-recycle
2019-08-15 01:59:48,928 DEBUG {conn-10005} pool-connect
2019-08-15 01:59:48,930 DEBUG {conn-10005} pool-recycle
2019-08-15 01:59:49,207 DEBUG {conn-10005} pool-connect
2019-08-15 01:59:49,239 DEBUG {conn-10005} pool-recycle
2019-08-15 01:59:49,745 INFO [Thor] modules [], plugins [], sites []
2019-08-15 01:59:49,756 DEBUG [Thor] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 01:59:49,764 DEBUG [Thor] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 01:59:49,773 DEBUG [Thor] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:59:49,773 DEBUG [Thor] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 01:59:49,774 DEBUG [Thor] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 01:59:49,774 DEBUG [Thor] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:59:49,774 DEBUG [Thor] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 01:59:49,774 DEBUG [Thor] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 01:59:49,774 DEBUG [Thor] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:59:49,774 DEBUG [Thor] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 01:59:49,774 DEBUG [Thor] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:59:49,775 DEBUG [Thor] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 01:59:49,775 DEBUG [Thor] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 01:59:49,775 DEBUG [Thor] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 01:59:49,775 DEBUG [Thor] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 01:59:49,775 DEBUG [Thor] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 01:59:51,116 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 01:59:51,138 DEBUG using gathering [true]
2019-08-15 01:59:51,164 DEBUG [Thor] node_sampler_interval[5s]
2019-08-15 01:59:51,179 DEBUG Using select timeout of 500
2019-08-15 01:59:51,179 DEBUG Epoll-bug workaround enabled = false
2019-08-15 01:59:51,230 DEBUG [Thor] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:59:51,258 DEBUG [Thor] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:59:51,303 DEBUG [Thor] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 01:59:52,020 DEBUG {conn-10005} pool-connect
2019-08-15 01:59:52,020 DEBUG {conn-10005} pool-recycle
2019-08-15 01:59:58,190 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 01:59:58,278 DEBUG {conn-10005} pool-connect
2019-08-15 01:59:58,360 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:59:58,366 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 01:59:58,366 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 01:59:58,368 DEBUG {conn-10005, pstmt-20000} executed. 4.475882 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 01:59:58,371 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 01:59:58,372 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:59:58,377 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:59:58,378 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:59:58,379 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 01:59:58,379 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 01:59:58,380 DEBUG {conn-10005} pool-recycle
2019-08-15 01:59:58,383 DEBUG {conn-10005} pool-connect
2019-08-15 01:59:58,384 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:59:58,385 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 01:59:58,385 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 01:59:58,385 DEBUG {conn-10005, pstmt-20001} executed. 0.801926 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 01:59:58,386 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 01:59:58,386 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 01:59:58,386 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 01:59:58,386 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 01:59:58,387 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 01:59:58,387 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 01:59:58,387 DEBUG {conn-10005} pool-recycle
2019-08-15 01:59:58,387 DEBUG {conn-10005} pool-connect
2019-08-15 01:59:58,392 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:59:58,392 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 01:59:58,392 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 01:59:58,395 DEBUG {conn-10005, pstmt-20002} executed. 2.684398 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 01:59:58,395 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 01:59:58,395 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 01:59:58,395 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 01:59:58,396 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 01:59:58,396 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 01:59:58,396 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 01:59:58,396 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 01:59:58,396 DEBUG {conn-10005} pool-recycle
2019-08-15 01:59:58,399 DEBUG {conn-10005} pool-connect
2019-08-15 01:59:58,399 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:59:58,400 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 01:59:58,400 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 01:59:58,401 DEBUG {conn-10005, pstmt-20003} executed. 1.362247 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 01:59:58,401 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 01:59:58,401 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 01:59:58,401 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 01:59:58,401 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 01:59:58,402 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 01:59:58,402 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 01:59:58,402 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 01:59:58,402 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 01:59:58,403 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 01:59:58,403 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 01:59:58,403 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 01:59:58,403 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 01:59:58,403 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 01:59:58,404 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 01:59:58,404 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 01:59:58,404 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 01:59:58,404 DEBUG {conn-10005} pool-recycle
2019-08-15 01:59:58,432 DEBUG {conn-10005} pool-connect
2019-08-15 01:59:58,433 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:59:58,433 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 01:59:58,433 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 01:59:58,434 DEBUG {conn-10005, pstmt-20004} executed. 0.586023 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 01:59:58,434 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 01:59:58,434 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 01:59:58,434 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 01:59:58,434 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 01:59:58,434 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:11,071 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:11,072 DEBUG {conn-10005, pstmt-20005} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 02:00:11,072 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 02:00:11,072 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 02:00:11,076 DEBUG {conn-10005, pstmt-20005} executed. 3.752091 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 02:00:11,076 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-15 02:00:11,076 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 02:00:11,076 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 02:00:11,078 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 02:00:11,078 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-15 02:00:11,078 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 02:00:11,078 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:11,184 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:11,184 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 02:00:11,184 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 02:00:11,185 DEBUG {conn-10005, pstmt-20000} executed. 0.634345 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:00:11,185 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-15 02:00:11,185 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:00:11,185 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:00:11,185 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:00:11,186 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-15 02:00:11,186 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 02:00:11,186 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:11,186 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:11,186 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 02:00:11,186 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 02:00:11,187 DEBUG {conn-10005, pstmt-20001} executed. 0.526392 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:00:11,187 DEBUG {conn-10005, pstmt-20001, rs-50007} open
2019-08-15 02:00:11,187 DEBUG {conn-10005, pstmt-20001, rs-50007} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:00:11,187 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:00:11,187 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:00:11,188 DEBUG {conn-10005, pstmt-20001, rs-50007} closed
2019-08-15 02:00:11,188 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 02:00:11,188 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:11,188 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:11,188 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 02:00:11,188 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 02:00:11,189 DEBUG {conn-10005, pstmt-20002} executed. 0.567517 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:00:11,189 DEBUG {conn-10005, pstmt-20002, rs-50008} open
2019-08-15 02:00:11,189 DEBUG {conn-10005, pstmt-20002, rs-50008} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:00:11,189 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:00:11,189 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:00:11,189 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [139, 1, jqGrid]
2019-08-15 02:00:11,189 DEBUG {conn-10005, pstmt-20002, rs-50008} closed
2019-08-15 02:00:11,189 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 02:00:11,189 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:11,189 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:11,189 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 02:00:11,189 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 02:00:11,190 DEBUG {conn-10005, pstmt-20003} executed. 0.399935 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:00:11,190 DEBUG {conn-10005, pstmt-20003, rs-50009} open
2019-08-15 02:00:11,190 DEBUG {conn-10005, pstmt-20003, rs-50009} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:00:11,190 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:00:11,190 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:00:11,190 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:00:11,190 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:00:11,191 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:00:11,192 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:00:11,192 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:00:11,192 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:00:11,192 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:00:11,192 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 02:00:11,192 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 02:00:11,192 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 02:00:11,193 DEBUG {conn-10005, pstmt-20003, rs-50009} closed
2019-08-15 02:00:11,193 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 02:00:11,193 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:11,203 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:11,203 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 02:00:11,203 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 02:00:11,203 DEBUG {conn-10005, pstmt-20004} executed. 0.523822 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:00:11,204 DEBUG {conn-10005, pstmt-20004, rs-50010} open
2019-08-15 02:00:11,204 DEBUG {conn-10005, pstmt-20004, rs-50010} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 02:00:11,204 DEBUG {conn-10005, pstmt-20004, rs-50010} closed
2019-08-15 02:00:11,204 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 02:00:11,204 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:17,284 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:17,284 DEBUG {conn-10005, pstmt-20006} created. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 02:00:17,284 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 02:00:17,284 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 02:00:17,286 DEBUG {conn-10005, pstmt-20006} executed. 1.284625 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 02:00:17,286 DEBUG {conn-10005, pstmt-20006, rs-50011} open
2019-08-15 02:00:17,286 DEBUG {conn-10005, pstmt-20006, rs-50011} Header: [count(*)]
2019-08-15 02:00:17,286 DEBUG {conn-10005, pstmt-20006, rs-50011} Result: [4]
2019-08-15 02:00:17,287 DEBUG {conn-10005, pstmt-20006, rs-50011} closed
2019-08-15 02:00:17,287 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 02:00:17,287 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:17,288 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:17,288 DEBUG {conn-10005, pstmt-20007} created. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 02:00:17,288 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 02:00:17,288 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 02:00:17,289 DEBUG {conn-10005, pstmt-20007} executed. 0.642569 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 02:00:17,289 DEBUG {conn-10005, pstmt-20007, rs-50012} open
2019-08-15 02:00:17,289 DEBUG {conn-10005, pstmt-20007, rs-50012} Header: [count(*)]
2019-08-15 02:00:17,289 DEBUG {conn-10005, pstmt-20007, rs-50012} Result: [2]
2019-08-15 02:00:17,289 DEBUG {conn-10005, pstmt-20007, rs-50012} closed
2019-08-15 02:00:17,290 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 02:00:17,290 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:17,292 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:17,293 DEBUG {conn-10005, pstmt-20008} created. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 02:00:17,293 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 02:00:17,293 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 02:00:17,295 DEBUG {conn-10005, pstmt-20008} executed. 2.434567 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 02:00:17,296 DEBUG {conn-10005, pstmt-20008, rs-50013} open
2019-08-15 02:00:17,296 DEBUG {conn-10005, pstmt-20008, rs-50013} Header: [count(*)]
2019-08-15 02:00:17,296 DEBUG {conn-10005, pstmt-20008, rs-50013} Result: [27]
2019-08-15 02:00:17,296 DEBUG {conn-10005, pstmt-20008, rs-50013} closed
2019-08-15 02:00:17,296 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 02:00:17,296 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:17,297 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:17,297 DEBUG {conn-10005, pstmt-20009} created. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 02:00:17,297 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 02:00:17,297 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 02:00:17,298 DEBUG {conn-10005, pstmt-20009} executed. 0.51971 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 02:00:17,298 DEBUG {conn-10005, pstmt-20009, rs-50014} open
2019-08-15 02:00:17,298 DEBUG {conn-10005, pstmt-20009, rs-50014} Header: [count(*)]
2019-08-15 02:00:17,298 DEBUG {conn-10005, pstmt-20009, rs-50014} Result: [14]
2019-08-15 02:00:17,298 DEBUG {conn-10005, pstmt-20009, rs-50014} closed
2019-08-15 02:00:17,298 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 02:00:17,298 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:17,299 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:17,299 DEBUG {conn-10005, pstmt-20010} created. select count(*)  from tb_admin_user
2019-08-15 02:00:17,299 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:00:17,299 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:00:17,300 DEBUG {conn-10005, pstmt-20010} executed. 0.447742 millis. select count(*)  from tb_admin_user
2019-08-15 02:00:17,300 DEBUG {conn-10005, pstmt-20010, rs-50015} open
2019-08-15 02:00:17,300 DEBUG {conn-10005, pstmt-20010, rs-50015} Header: [count(*)]
2019-08-15 02:00:17,300 DEBUG {conn-10005, pstmt-20010, rs-50015} Result: [10]
2019-08-15 02:00:17,300 DEBUG {conn-10005, pstmt-20010, rs-50015} closed
2019-08-15 02:00:17,300 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:00:17,300 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:17,301 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:17,301 DEBUG {conn-10005, pstmt-20011} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 02:00:17,301 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 02:00:17,301 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 02:00:17,305 DEBUG {conn-10005, pstmt-20011} executed. 3.626148 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 02:00:17,305 DEBUG {conn-10005, pstmt-20011, rs-50016} open
2019-08-15 02:00:17,305 DEBUG {conn-10005, pstmt-20011, rs-50016} Header: [count(*)]
2019-08-15 02:00:17,305 DEBUG {conn-10005, pstmt-20011, rs-50016} Result: [5]
2019-08-15 02:00:17,305 DEBUG {conn-10005, pstmt-20011, rs-50016} closed
2019-08-15 02:00:17,305 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 02:00:17,305 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:20,087 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:20,088 DEBUG {conn-10005, pstmt-20012} created. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:00:20,089 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:00:20,089 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:00:20,090 DEBUG {conn-10005, pstmt-20012} executed. 0.945348 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:00:20,090 DEBUG {conn-10005, pstmt-20012, rs-50017} open
2019-08-15 02:00:20,090 DEBUG {conn-10005, pstmt-20012, rs-50017} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:00:20,090 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:00:20,091 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:20,091 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:20,091 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:20,092 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:20,092 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:20,093 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:20,094 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [337575483, oooo, 小灰, 0, null, 1158767965@qq.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:20,094 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:20,094 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:20,095 DEBUG {conn-10005, pstmt-20012, rs-50017} closed
2019-08-15 02:00:20,095 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:00:20,095 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:20,097 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:20,097 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:00:20,097 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:00:20,097 DEBUG {conn-10005, pstmt-20010} executed. 0.569574 millis. select count(*)  from tb_admin_user
2019-08-15 02:00:20,097 DEBUG {conn-10005, pstmt-20010, rs-50018} open
2019-08-15 02:00:20,097 DEBUG {conn-10005, pstmt-20010, rs-50018} Header: [count(*)]
2019-08-15 02:00:20,098 DEBUG {conn-10005, pstmt-20010, rs-50018} Result: [10]
2019-08-15 02:00:20,098 DEBUG {conn-10005, pstmt-20010, rs-50018} closed
2019-08-15 02:00:20,098 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:00:20,098 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:40,310 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:40,312 DEBUG {conn-10005, pstmt-20013} created. delete
    from tb_user_authority
    where user_id = ? and authority_id = ?
2019-08-15 02:00:40,313 DEBUG {conn-10005, pstmt-20013} Parameters : [337575483, 2]
2019-08-15 02:00:40,313 DEBUG {conn-10005, pstmt-20013} Types : [BIGINT, BIGINT]
2019-08-15 02:00:40,322 DEBUG {conn-10005, pstmt-20013} executed. 9.338333 millis. delete
    from tb_user_authority
    where user_id = ? and authority_id = ?
2019-08-15 02:00:40,322 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 02:00:40,322 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:40,335 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:40,335 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:00:40,335 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:00:40,336 DEBUG {conn-10005, pstmt-20012} executed. 0.781364 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:00:40,336 DEBUG {conn-10005, pstmt-20012, rs-50019} open
2019-08-15 02:00:40,336 DEBUG {conn-10005, pstmt-20012, rs-50019} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:00:40,337 DEBUG {conn-10005, pstmt-20012, rs-50019} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:00:40,337 DEBUG {conn-10005, pstmt-20012, rs-50019} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:40,337 DEBUG {conn-10005, pstmt-20012, rs-50019} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:40,338 DEBUG {conn-10005, pstmt-20012, rs-50019} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:40,339 DEBUG {conn-10005, pstmt-20012, rs-50019} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:40,339 DEBUG {conn-10005, pstmt-20012, rs-50019} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:40,342 DEBUG {conn-10005, pstmt-20012, rs-50019} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:40,342 DEBUG {conn-10005, pstmt-20012, rs-50019} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:40,343 DEBUG {conn-10005, pstmt-20012, rs-50019} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:40,343 DEBUG {conn-10005, pstmt-20012, rs-50019} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:00:40,343 DEBUG {conn-10005, pstmt-20012, rs-50019} closed
2019-08-15 02:00:40,343 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:00:40,344 DEBUG {conn-10005} pool-recycle
2019-08-15 02:00:40,344 DEBUG {conn-10005} pool-connect
2019-08-15 02:00:40,344 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:00:40,345 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:00:40,346 DEBUG {conn-10005, pstmt-20010} executed. 1.216769 millis. select count(*)  from tb_admin_user
2019-08-15 02:00:40,346 DEBUG {conn-10005, pstmt-20010, rs-50020} open
2019-08-15 02:00:40,346 DEBUG {conn-10005, pstmt-20010, rs-50020} Header: [count(*)]
2019-08-15 02:00:40,346 DEBUG {conn-10005, pstmt-20010, rs-50020} Result: [10]
2019-08-15 02:00:40,346 DEBUG {conn-10005, pstmt-20010, rs-50020} closed
2019-08-15 02:00:40,347 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:00:40,347 DEBUG {conn-10005} pool-recycle
2019-08-15 02:01:09,808 DEBUG {conn-10005} pool-connect
2019-08-15 02:01:09,808 DEBUG {conn-10005, pstmt-20013} Parameters : [139743389, 2]
2019-08-15 02:01:09,808 DEBUG {conn-10005, pstmt-20013} Types : [BIGINT, BIGINT]
2019-08-15 02:01:09,816 DEBUG {conn-10005, pstmt-20013} executed. 7.990994 millis. delete
    from tb_user_authority
    where user_id = ? and authority_id = ?
2019-08-15 02:01:09,816 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 02:01:09,816 DEBUG {conn-10005} pool-recycle
2019-08-15 02:01:09,825 DEBUG {conn-10005} pool-connect
2019-08-15 02:01:09,825 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:01:09,825 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:01:09,826 DEBUG {conn-10005, pstmt-20012} executed. 0.669815 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:01:09,826 DEBUG {conn-10005, pstmt-20012, rs-50021} open
2019-08-15 02:01:09,826 DEBUG {conn-10005, pstmt-20012, rs-50021} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:01:09,826 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:01:09,827 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:09,827 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:09,827 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:09,827 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:09,827 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:09,827 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:09,828 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:09,828 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:09,828 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:01:09,828 DEBUG {conn-10005, pstmt-20012, rs-50021} closed
2019-08-15 02:01:09,828 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:01:09,828 DEBUG {conn-10005} pool-recycle
2019-08-15 02:01:09,829 DEBUG {conn-10005} pool-connect
2019-08-15 02:01:09,830 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:01:09,830 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:01:09,830 DEBUG {conn-10005, pstmt-20010} executed. 0.62869 millis. select count(*)  from tb_admin_user
2019-08-15 02:01:09,831 DEBUG {conn-10005, pstmt-20010, rs-50022} open
2019-08-15 02:01:09,831 DEBUG {conn-10005, pstmt-20010, rs-50022} Header: [count(*)]
2019-08-15 02:01:09,831 DEBUG {conn-10005, pstmt-20010, rs-50022} Result: [10]
2019-08-15 02:01:09,831 DEBUG {conn-10005, pstmt-20010, rs-50022} closed
2019-08-15 02:01:09,831 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:01:09,831 DEBUG {conn-10005} pool-recycle
2019-08-15 02:01:49,278 DEBUG {conn-10005} pool-connect
2019-08-15 02:01:49,279 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:01:49,279 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:01:49,279 DEBUG {conn-10005, pstmt-20012} executed. 0.696545 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:01:49,279 DEBUG {conn-10005, pstmt-20012, rs-50023} open
2019-08-15 02:01:49,279 DEBUG {conn-10005, pstmt-20012, rs-50023} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:01:49,280 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:01:49,280 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:49,280 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:49,280 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:49,280 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:49,281 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:49,281 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:49,281 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:49,281 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:01:49,281 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:01:49,281 DEBUG {conn-10005, pstmt-20012, rs-50023} closed
2019-08-15 02:01:49,281 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:01:49,282 DEBUG {conn-10005} pool-recycle
2019-08-15 02:01:49,282 DEBUG {conn-10005} pool-connect
2019-08-15 02:01:49,282 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:01:49,282 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:01:49,283 DEBUG {conn-10005, pstmt-20010} executed. 0.528963 millis. select count(*)  from tb_admin_user
2019-08-15 02:01:49,283 DEBUG {conn-10005, pstmt-20010, rs-50024} open
2019-08-15 02:01:49,283 DEBUG {conn-10005, pstmt-20010, rs-50024} Header: [count(*)]
2019-08-15 02:01:49,283 DEBUG {conn-10005, pstmt-20010, rs-50024} Result: [10]
2019-08-15 02:01:49,283 DEBUG {conn-10005, pstmt-20010, rs-50024} closed
2019-08-15 02:01:49,283 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:01:49,283 DEBUG {conn-10005} pool-recycle
2019-08-15 02:02:23,687 DEBUG {conn-10005} pool-connect
2019-08-15 02:02:23,687 DEBUG {conn-10005, pstmt-20013} Parameters : [176101646, 2]
2019-08-15 02:02:23,687 DEBUG {conn-10005, pstmt-20013} Types : [BIGINT, BIGINT]
2019-08-15 02:02:23,694 DEBUG {conn-10005, pstmt-20013} executed. 8.111797 millis. delete
    from tb_user_authority
    where user_id = ? and authority_id = ?
2019-08-15 02:02:23,694 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 02:02:23,695 DEBUG {conn-10005} pool-recycle
2019-08-15 02:02:23,706 DEBUG {conn-10005} pool-connect
2019-08-15 02:02:23,706 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:02:23,706 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:02:23,707 DEBUG {conn-10005, pstmt-20012} executed. 0.705799 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:02:23,707 DEBUG {conn-10005, pstmt-20012, rs-50025} open
2019-08-15 02:02:23,707 DEBUG {conn-10005, pstmt-20012, rs-50025} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:02:23,707 DEBUG {conn-10005, pstmt-20012, rs-50025} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:02:23,707 DEBUG {conn-10005, pstmt-20012, rs-50025} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:23,707 DEBUG {conn-10005, pstmt-20012, rs-50025} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:23,707 DEBUG {conn-10005, pstmt-20012, rs-50025} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:23,707 DEBUG {conn-10005, pstmt-20012, rs-50025} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:23,708 DEBUG {conn-10005, pstmt-20012, rs-50025} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:23,708 DEBUG {conn-10005, pstmt-20012, rs-50025} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:23,708 DEBUG {conn-10005, pstmt-20012, rs-50025} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:23,708 DEBUG {conn-10005, pstmt-20012, rs-50025} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:02:23,708 DEBUG {conn-10005, pstmt-20012, rs-50025} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, null, null]
2019-08-15 02:02:23,709 DEBUG {conn-10005, pstmt-20012, rs-50025} closed
2019-08-15 02:02:23,709 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:02:23,709 DEBUG {conn-10005} pool-recycle
2019-08-15 02:02:23,710 DEBUG {conn-10005} pool-connect
2019-08-15 02:02:23,710 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:02:23,710 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:02:23,711 DEBUG {conn-10005, pstmt-20010} executed. 0.599389 millis. select count(*)  from tb_admin_user
2019-08-15 02:02:23,711 DEBUG {conn-10005, pstmt-20010, rs-50026} open
2019-08-15 02:02:23,711 DEBUG {conn-10005, pstmt-20010, rs-50026} Header: [count(*)]
2019-08-15 02:02:23,711 DEBUG {conn-10005, pstmt-20010, rs-50026} Result: [10]
2019-08-15 02:02:23,712 DEBUG {conn-10005, pstmt-20010, rs-50026} closed
2019-08-15 02:02:23,712 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:02:23,712 DEBUG {conn-10005} pool-recycle
2019-08-15 02:02:30,879 DEBUG {conn-10005} pool-connect
2019-08-15 02:02:30,879 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:02:30,879 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:02:30,880 DEBUG {conn-10005, pstmt-20012} executed. 0.947404 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:02:30,880 DEBUG {conn-10005, pstmt-20012, rs-50027} open
2019-08-15 02:02:30,880 DEBUG {conn-10005, pstmt-20012, rs-50027} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:02:30,880 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:02:30,881 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:30,881 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:30,881 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:30,881 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:30,881 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [384248648, test3, 小狗狗, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:30,882 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:30,882 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:30,882 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:02:30,882 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, null, null]
2019-08-15 02:02:30,884 DEBUG {conn-10005, pstmt-20012, rs-50027} closed
2019-08-15 02:02:30,884 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:02:30,884 DEBUG {conn-10005} pool-recycle
2019-08-15 02:02:30,885 DEBUG {conn-10005} pool-connect
2019-08-15 02:02:30,885 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:02:30,885 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:02:30,886 DEBUG {conn-10005, pstmt-20010} executed. 0.822489 millis. select count(*)  from tb_admin_user
2019-08-15 02:02:30,886 DEBUG {conn-10005, pstmt-20010, rs-50028} open
2019-08-15 02:02:30,886 DEBUG {conn-10005, pstmt-20010, rs-50028} Header: [count(*)]
2019-08-15 02:02:30,886 DEBUG {conn-10005, pstmt-20010, rs-50028} Result: [10]
2019-08-15 02:02:30,887 DEBUG {conn-10005, pstmt-20010, rs-50028} closed
2019-08-15 02:02:30,887 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:02:30,887 DEBUG {conn-10005} pool-recycle
2019-08-15 02:02:48,904 DEBUG {conn-10005} pool-connect
2019-08-15 02:02:48,904 DEBUG {conn-10005, pstmt-20013} Parameters : [384248648, 2]
2019-08-15 02:02:48,904 DEBUG {conn-10005, pstmt-20013} Types : [BIGINT, BIGINT]
2019-08-15 02:02:48,913 DEBUG {conn-10005, pstmt-20013} executed. 8.404808 millis. delete
    from tb_user_authority
    where user_id = ? and authority_id = ?
2019-08-15 02:02:48,913 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 02:02:48,913 DEBUG {conn-10005} pool-recycle
2019-08-15 02:02:48,924 DEBUG {conn-10005} pool-connect
2019-08-15 02:02:48,925 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:02:48,925 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:02:48,926 DEBUG {conn-10005, pstmt-20012} executed. 0.997781 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:02:48,926 DEBUG {conn-10005, pstmt-20012, rs-50029} open
2019-08-15 02:02:48,926 DEBUG {conn-10005, pstmt-20012, rs-50029} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:02:48,926 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:02:48,926 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:48,927 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:48,927 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:48,927 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:48,927 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:48,927 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:48,928 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:02:48,928 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, null, null]
2019-08-15 02:02:48,928 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, null, null]
2019-08-15 02:02:48,928 DEBUG {conn-10005, pstmt-20012, rs-50029} closed
2019-08-15 02:02:48,928 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:02:48,928 DEBUG {conn-10005} pool-recycle
2019-08-15 02:02:48,929 DEBUG {conn-10005} pool-connect
2019-08-15 02:02:48,930 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:02:48,930 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:02:48,930 DEBUG {conn-10005, pstmt-20010} executed. 0.673926 millis. select count(*)  from tb_admin_user
2019-08-15 02:02:48,930 DEBUG {conn-10005, pstmt-20010, rs-50030} open
2019-08-15 02:02:48,930 DEBUG {conn-10005, pstmt-20010, rs-50030} Header: [count(*)]
2019-08-15 02:02:48,930 DEBUG {conn-10005, pstmt-20010, rs-50030} Result: [10]
2019-08-15 02:02:48,931 DEBUG {conn-10005, pstmt-20010, rs-50030} closed
2019-08-15 02:02:48,931 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:02:48,931 DEBUG {conn-10005} pool-recycle
2019-08-15 02:02:55,000 DEBUG {conn-10005} pool-connect
2019-08-15 02:02:55,000 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:02:55,000 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:02:55,001 DEBUG {conn-10005, pstmt-20012} executed. 0.850248 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:02:55,001 DEBUG {conn-10005, pstmt-20012, rs-50031} open
2019-08-15 02:02:55,001 DEBUG {conn-10005, pstmt-20012, rs-50031} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:02:55,001 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:02:55,001 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:55,001 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:55,002 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:55,002 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:55,002 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:55,002 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:02:55,002 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:02:55,003 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, null, null]
2019-08-15 02:02:55,003 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, null, null]
2019-08-15 02:02:55,003 DEBUG {conn-10005, pstmt-20012, rs-50031} closed
2019-08-15 02:02:55,003 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:02:55,003 DEBUG {conn-10005} pool-recycle
2019-08-15 02:02:55,004 DEBUG {conn-10005} pool-connect
2019-08-15 02:02:55,005 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:02:55,005 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:02:55,005 DEBUG {conn-10005, pstmt-20010} executed. 0.553638 millis. select count(*)  from tb_admin_user
2019-08-15 02:02:55,005 DEBUG {conn-10005, pstmt-20010, rs-50032} open
2019-08-15 02:02:55,005 DEBUG {conn-10005, pstmt-20010, rs-50032} Header: [count(*)]
2019-08-15 02:02:55,005 DEBUG {conn-10005, pstmt-20010, rs-50032} Result: [10]
2019-08-15 02:02:55,006 DEBUG {conn-10005, pstmt-20010, rs-50032} closed
2019-08-15 02:02:55,006 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:02:55,006 DEBUG {conn-10005} pool-recycle
2019-08-15 02:03:01,129 DEBUG {conn-10005} pool-connect
2019-08-15 02:03:01,129 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:03:01,129 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:03:01,130 DEBUG {conn-10005, pstmt-20012} executed. 1.028111 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:03:01,130 DEBUG {conn-10005, pstmt-20012, rs-50033} open
2019-08-15 02:03:01,130 DEBUG {conn-10005, pstmt-20012, rs-50033} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:03:01,131 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:03:01,131 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:03:01,131 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [118103240, user2, 哈哈, 0, null, 7398723@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:03:01,131 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [129680565, user3, user, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:03:01,131 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [189959024, test5, 小黑, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:03:01,132 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:03:01,132 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:03:01,132 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:03:01,132 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [139743389, xiaomao, 小猫, 0, null, 13336470132@163.com, 17388657185, null, null, null]
2019-08-15 02:03:01,132 DEBUG {conn-10005, pstmt-20012, rs-50033} Result: [176101646, test2, 小白, 0, null, 13336470132@163.com, 17388657185, null, null, null]
2019-08-15 02:03:01,132 DEBUG {conn-10005, pstmt-20012, rs-50033} closed
2019-08-15 02:03:01,132 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:03:01,132 DEBUG {conn-10005} pool-recycle
2019-08-15 02:03:01,133 DEBUG {conn-10005} pool-connect
2019-08-15 02:03:01,133 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:03:01,133 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:03:01,134 DEBUG {conn-10005, pstmt-20010} executed. 0.592192 millis. select count(*)  from tb_admin_user
2019-08-15 02:03:01,134 DEBUG {conn-10005, pstmt-20010, rs-50034} open
2019-08-15 02:03:01,134 DEBUG {conn-10005, pstmt-20010, rs-50034} Header: [count(*)]
2019-08-15 02:03:01,134 DEBUG {conn-10005, pstmt-20010, rs-50034} Result: [10]
2019-08-15 02:03:01,134 DEBUG {conn-10005, pstmt-20010, rs-50034} closed
2019-08-15 02:03:01,135 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:03:01,135 DEBUG {conn-10005} pool-recycle
2019-08-15 02:04:34,832 DEBUG {conn-10005} pool-connect
2019-08-15 02:04:34,832 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:04:34,832 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:04:34,833 DEBUG {conn-10005, pstmt-20012} executed. 1.034279 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:04:34,833 DEBUG {conn-10005, pstmt-20012, rs-50035} open
2019-08-15 02:04:34,833 DEBUG {conn-10005, pstmt-20012, rs-50035} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:04:34,833 DEBUG {conn-10005, pstmt-20012, rs-50035} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:04:34,834 DEBUG {conn-10005, pstmt-20012, rs-50035} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:04:34,834 DEBUG {conn-10005, pstmt-20012, rs-50035} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:04:34,834 DEBUG {conn-10005, pstmt-20012, rs-50035} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:04:34,835 DEBUG {conn-10005, pstmt-20012, rs-50035} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:04:34,835 DEBUG {conn-10005, pstmt-20012, rs-50035} closed
2019-08-15 02:04:34,835 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:04:34,835 DEBUG {conn-10005} pool-recycle
2019-08-15 02:04:34,836 DEBUG {conn-10005} pool-connect
2019-08-15 02:04:34,836 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:04:34,836 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:04:34,837 DEBUG {conn-10005, pstmt-20010} executed. 0.765943 millis. select count(*)  from tb_admin_user
2019-08-15 02:04:34,837 DEBUG {conn-10005, pstmt-20010, rs-50036} open
2019-08-15 02:04:34,837 DEBUG {conn-10005, pstmt-20010, rs-50036} Header: [count(*)]
2019-08-15 02:04:34,837 DEBUG {conn-10005, pstmt-20010, rs-50036} Result: [3]
2019-08-15 02:04:34,838 DEBUG {conn-10005, pstmt-20010, rs-50036} closed
2019-08-15 02:04:34,838 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:04:34,838 DEBUG {conn-10005} pool-recycle
2019-08-15 02:04:41,944 DEBUG {conn-10005} pool-connect
2019-08-15 02:04:41,944 DEBUG {conn-10005, pstmt-20013} Parameters : [28305988, 2]
2019-08-15 02:04:41,944 DEBUG {conn-10005, pstmt-20013} Types : [BIGINT, BIGINT]
2019-08-15 02:04:41,953 DEBUG {conn-10005, pstmt-20013} executed. 8.543089 millis. delete
    from tb_user_authority
    where user_id = ? and authority_id = ?
2019-08-15 02:04:41,953 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 02:04:41,953 DEBUG {conn-10005} pool-recycle
2019-08-15 02:04:41,962 DEBUG {conn-10005} pool-connect
2019-08-15 02:04:41,962 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:04:41,962 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:04:41,963 DEBUG {conn-10005, pstmt-20012} executed. 0.586023 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:04:41,963 DEBUG {conn-10005, pstmt-20012, rs-50037} open
2019-08-15 02:04:41,963 DEBUG {conn-10005, pstmt-20012, rs-50037} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:04:41,963 DEBUG {conn-10005, pstmt-20012, rs-50037} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:04:41,963 DEBUG {conn-10005, pstmt-20012, rs-50037} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:04:41,963 DEBUG {conn-10005, pstmt-20012, rs-50037} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:04:41,964 DEBUG {conn-10005, pstmt-20012, rs-50037} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:04:41,964 DEBUG {conn-10005, pstmt-20012, rs-50037} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, null, null]
2019-08-15 02:04:41,964 DEBUG {conn-10005, pstmt-20012, rs-50037} closed
2019-08-15 02:04:41,964 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:04:41,964 DEBUG {conn-10005} pool-recycle
2019-08-15 02:04:41,964 DEBUG {conn-10005} pool-connect
2019-08-15 02:04:41,964 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:04:41,964 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:04:41,965 DEBUG {conn-10005, pstmt-20010} executed. 0.525879 millis. select count(*)  from tb_admin_user
2019-08-15 02:04:41,965 DEBUG {conn-10005, pstmt-20010, rs-50038} open
2019-08-15 02:04:41,965 DEBUG {conn-10005, pstmt-20010, rs-50038} Header: [count(*)]
2019-08-15 02:04:41,965 DEBUG {conn-10005, pstmt-20010, rs-50038} Result: [3]
2019-08-15 02:04:41,965 DEBUG {conn-10005, pstmt-20010, rs-50038} closed
2019-08-15 02:04:41,965 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:04:41,966 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:09,057 DEBUG {conn-10001,procId-1348} connected
2019-08-15 02:07:09,063 DEBUG {conn-10002,procId-1349} connected
2019-08-15 02:07:09,067 DEBUG {conn-10003,procId-1350} connected
2019-08-15 02:07:09,072 DEBUG {conn-10004,procId-1351} connected
2019-08-15 02:07:09,076 DEBUG {conn-10005,procId-1352} connected
2019-08-15 02:07:09,080 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:09,082 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:09,089 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:09,091 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:09,377 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:09,410 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:09,957 INFO [Sasquatch] modules [], plugins [], sites []
2019-08-15 02:07:09,968 DEBUG [Sasquatch] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 02:07:09,980 DEBUG [Sasquatch] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 02:07:09,992 DEBUG [Sasquatch] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 02:07:09,993 DEBUG [Sasquatch] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 02:07:09,993 DEBUG [Sasquatch] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 02:07:09,993 DEBUG [Sasquatch] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 02:07:09,993 DEBUG [Sasquatch] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 02:07:09,993 DEBUG [Sasquatch] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 02:07:09,994 DEBUG [Sasquatch] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 02:07:09,994 DEBUG [Sasquatch] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 02:07:09,994 DEBUG [Sasquatch] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 02:07:09,994 DEBUG [Sasquatch] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 02:07:09,994 DEBUG [Sasquatch] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 02:07:09,994 DEBUG [Sasquatch] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 02:07:09,995 DEBUG [Sasquatch] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 02:07:09,995 DEBUG [Sasquatch] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 02:07:11,279 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:258a:89c2:53a4:34c4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 02:07:11,295 DEBUG using gathering [true]
2019-08-15 02:07:11,313 DEBUG [Sasquatch] node_sampler_interval[5s]
2019-08-15 02:07:11,325 DEBUG Using select timeout of 500
2019-08-15 02:07:11,326 DEBUG Epoll-bug workaround enabled = false
2019-08-15 02:07:11,364 DEBUG [Sasquatch] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 02:07:11,391 DEBUG [Sasquatch] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 02:07:11,425 DEBUG [Sasquatch] connected to node [{Hawkshaw}{-7c8POvAS1W_vI-wu88JDw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 02:07:12,139 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:12,140 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:25,297 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 02:07:25,391 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:25,474 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:07:25,480 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 02:07:25,480 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 02:07:25,482 DEBUG {conn-10005, pstmt-20000} executed. 4.228107 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:07:25,486 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 02:07:25,486 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:07:25,491 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:07:25,492 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:07:25,493 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 02:07:25,493 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 02:07:25,493 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:25,497 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:25,497 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:07:25,498 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 02:07:25,498 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 02:07:25,499 DEBUG {conn-10005, pstmt-20001} executed. 0.789589 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:07:25,499 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 02:07:25,499 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:07:25,499 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:07:25,500 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:07:25,500 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 02:07:25,500 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 02:07:25,500 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:25,501 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:25,504 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:07:25,505 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 02:07:25,505 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 02:07:25,506 DEBUG {conn-10005, pstmt-20002} executed. 0.983903 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:07:25,506 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 02:07:25,506 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:07:25,506 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:07:25,506 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:07:25,506 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 02:07:25,506 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 02:07:25,506 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 02:07:25,507 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:25,509 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:25,509 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:07:25,509 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 02:07:25,509 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 02:07:25,510 DEBUG {conn-10005, pstmt-20003} executed. 0.69963 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:07:25,510 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 02:07:25,510 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:07:25,510 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:07:25,511 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:07:25,511 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:07:25,511 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:07:25,511 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:07:25,511 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:07:25,512 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:07:25,512 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:07:25,512 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:07:25,512 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 02:07:25,513 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 02:07:25,513 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 02:07:25,513 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 02:07:25,513 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 02:07:25,513 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:25,540 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:25,541 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:07:25,542 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 02:07:25,542 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 02:07:25,542 DEBUG {conn-10005, pstmt-20004} executed. 0.679067 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:07:25,542 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 02:07:25,542 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 02:07:25,543 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 02:07:25,543 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 02:07:25,543 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:39,972 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:39,974 DEBUG {conn-10005, pstmt-20005} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 02:07:39,974 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 02:07:39,974 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 02:07:39,977 DEBUG {conn-10005, pstmt-20005} executed. 3.163498 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 02:07:39,978 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-15 02:07:39,978 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 02:07:39,978 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 02:07:39,979 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 02:07:39,979 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-15 02:07:39,979 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 02:07:39,980 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:40,081 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:40,081 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 02:07:40,081 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 02:07:40,082 DEBUG {conn-10005, pstmt-20000} executed. 0.621494 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:07:40,082 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-15 02:07:40,082 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:07:40,082 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:07:40,082 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:07:40,083 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-15 02:07:40,083 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 02:07:40,083 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:40,083 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:40,083 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 02:07:40,083 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 02:07:40,084 DEBUG {conn-10005, pstmt-20001} executed. 0.542843 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:07:40,084 DEBUG {conn-10005, pstmt-20001, rs-50007} open
2019-08-15 02:07:40,084 DEBUG {conn-10005, pstmt-20001, rs-50007} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:07:40,084 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:07:40,084 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:07:40,084 DEBUG {conn-10005, pstmt-20001, rs-50007} closed
2019-08-15 02:07:40,084 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 02:07:40,085 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:40,085 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:40,085 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 02:07:40,085 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 02:07:40,085 DEBUG {conn-10005, pstmt-20002} executed. 0.564433 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:07:40,085 DEBUG {conn-10005, pstmt-20002, rs-50008} open
2019-08-15 02:07:40,085 DEBUG {conn-10005, pstmt-20002, rs-50008} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:07:40,085 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:07:40,086 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:07:40,086 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [139, 1, jqGrid]
2019-08-15 02:07:40,086 DEBUG {conn-10005, pstmt-20002, rs-50008} closed
2019-08-15 02:07:40,086 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 02:07:40,086 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:40,086 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:40,086 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 02:07:40,086 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 02:07:40,087 DEBUG {conn-10005, pstmt-20003} executed. 0.595277 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:07:40,087 DEBUG {conn-10005, pstmt-20003, rs-50009} open
2019-08-15 02:07:40,087 DEBUG {conn-10005, pstmt-20003, rs-50009} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:07:40,087 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:07:40,088 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:07:40,088 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:07:40,088 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:07:40,089 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:07:40,089 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:07:40,090 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:07:40,090 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:07:40,090 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:07:40,090 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 02:07:40,090 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 02:07:40,090 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 02:07:40,091 DEBUG {conn-10005, pstmt-20003, rs-50009} closed
2019-08-15 02:07:40,091 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 02:07:40,091 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:40,100 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:40,100 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 02:07:40,100 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 02:07:40,101 DEBUG {conn-10005, pstmt-20004} executed. 0.546441 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:07:40,101 DEBUG {conn-10005, pstmt-20004, rs-50010} open
2019-08-15 02:07:40,101 DEBUG {conn-10005, pstmt-20004, rs-50010} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 02:07:40,101 DEBUG {conn-10005, pstmt-20004, rs-50010} closed
2019-08-15 02:07:40,101 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 02:07:40,101 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:45,584 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:45,584 DEBUG {conn-10005, pstmt-20006} created. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 02:07:45,584 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 02:07:45,584 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 02:07:45,585 DEBUG {conn-10005, pstmt-20006} executed. 0.50583 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 02:07:45,585 DEBUG {conn-10005, pstmt-20006, rs-50011} open
2019-08-15 02:07:45,585 DEBUG {conn-10005, pstmt-20006, rs-50011} Header: [count(*)]
2019-08-15 02:07:45,585 DEBUG {conn-10005, pstmt-20006, rs-50011} Result: [4]
2019-08-15 02:07:45,587 DEBUG {conn-10005, pstmt-20006, rs-50011} closed
2019-08-15 02:07:45,587 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 02:07:45,588 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:45,589 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:45,589 DEBUG {conn-10005, pstmt-20007} created. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 02:07:45,589 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 02:07:45,589 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 02:07:45,589 DEBUG {conn-10005, pstmt-20007} executed. 0.599903 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 02:07:45,589 DEBUG {conn-10005, pstmt-20007, rs-50012} open
2019-08-15 02:07:45,589 DEBUG {conn-10005, pstmt-20007, rs-50012} Header: [count(*)]
2019-08-15 02:07:45,589 DEBUG {conn-10005, pstmt-20007, rs-50012} Result: [2]
2019-08-15 02:07:45,590 DEBUG {conn-10005, pstmt-20007, rs-50012} closed
2019-08-15 02:07:45,590 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 02:07:45,590 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:45,593 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:45,593 DEBUG {conn-10005, pstmt-20008} created. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 02:07:45,594 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 02:07:45,594 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 02:07:45,595 DEBUG {conn-10005, pstmt-20008} executed. 0.828144 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 02:07:45,595 DEBUG {conn-10005, pstmt-20008, rs-50013} open
2019-08-15 02:07:45,595 DEBUG {conn-10005, pstmt-20008, rs-50013} Header: [count(*)]
2019-08-15 02:07:45,595 DEBUG {conn-10005, pstmt-20008, rs-50013} Result: [27]
2019-08-15 02:07:45,595 DEBUG {conn-10005, pstmt-20008, rs-50013} closed
2019-08-15 02:07:45,595 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 02:07:45,595 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:45,596 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:45,596 DEBUG {conn-10005, pstmt-20009} created. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 02:07:45,596 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 02:07:45,596 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 02:07:45,597 DEBUG {conn-10005, pstmt-20009} executed. 0.529477 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 02:07:45,597 DEBUG {conn-10005, pstmt-20009, rs-50014} open
2019-08-15 02:07:45,597 DEBUG {conn-10005, pstmt-20009, rs-50014} Header: [count(*)]
2019-08-15 02:07:45,597 DEBUG {conn-10005, pstmt-20009, rs-50014} Result: [14]
2019-08-15 02:07:45,597 DEBUG {conn-10005, pstmt-20009, rs-50014} closed
2019-08-15 02:07:45,598 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 02:07:45,598 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:45,598 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:45,599 DEBUG {conn-10005, pstmt-20010} created. select count(*)  from tb_admin_user
2019-08-15 02:07:45,599 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:07:45,599 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:07:45,599 DEBUG {conn-10005, pstmt-20010} executed. 0.584481 millis. select count(*)  from tb_admin_user
2019-08-15 02:07:45,599 DEBUG {conn-10005, pstmt-20010, rs-50015} open
2019-08-15 02:07:45,600 DEBUG {conn-10005, pstmt-20010, rs-50015} Header: [count(*)]
2019-08-15 02:07:45,600 DEBUG {conn-10005, pstmt-20010, rs-50015} Result: [3]
2019-08-15 02:07:45,600 DEBUG {conn-10005, pstmt-20010, rs-50015} closed
2019-08-15 02:07:45,600 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:07:45,600 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:45,600 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:45,601 DEBUG {conn-10005, pstmt-20011} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 02:07:45,601 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 02:07:45,601 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 02:07:45,601 DEBUG {conn-10005, pstmt-20011} executed. 0.488867 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 02:07:45,601 DEBUG {conn-10005, pstmt-20011, rs-50016} open
2019-08-15 02:07:45,602 DEBUG {conn-10005, pstmt-20011, rs-50016} Header: [count(*)]
2019-08-15 02:07:45,602 DEBUG {conn-10005, pstmt-20011, rs-50016} Result: [5]
2019-08-15 02:07:45,602 DEBUG {conn-10005, pstmt-20011, rs-50016} closed
2019-08-15 02:07:45,602 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 02:07:45,602 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:48,202 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:48,203 DEBUG {conn-10005, pstmt-20012} created. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:07:48,203 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:07:48,203 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:07:48,204 DEBUG {conn-10005, pstmt-20012} executed. 0.64771 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:07:48,204 DEBUG {conn-10005, pstmt-20012, rs-50017} open
2019-08-15 02:07:48,204 DEBUG {conn-10005, pstmt-20012, rs-50017} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:07:48,204 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:07:48,204 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:07:48,204 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:07:48,205 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:07:48,205 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, null, null]
2019-08-15 02:07:48,205 DEBUG {conn-10005, pstmt-20012, rs-50017} closed
2019-08-15 02:07:48,205 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:07:48,205 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:48,207 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:48,207 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:07:48,207 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:07:48,208 DEBUG {conn-10005, pstmt-20010} executed. 0.890858 millis. select count(*)  from tb_admin_user
2019-08-15 02:07:48,208 DEBUG {conn-10005, pstmt-20010, rs-50018} open
2019-08-15 02:07:48,208 DEBUG {conn-10005, pstmt-20010, rs-50018} Header: [count(*)]
2019-08-15 02:07:48,208 DEBUG {conn-10005, pstmt-20010, rs-50018} Result: [3]
2019-08-15 02:07:48,208 DEBUG {conn-10005, pstmt-20010, rs-50018} closed
2019-08-15 02:07:48,208 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:07:48,209 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:58,943 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:58,945 DEBUG {conn-10005, pstmt-20013} created. SELECT authority_id,user_id

  FROM tb_user_authority

  WHERE EXISTS(

  SELECT authority_id,user_id

  FROM tb_user_authority

  WHERE
  authority_id =
    ? 
  AND
  user_id =
    ? 
  )
2019-08-15 02:07:58,947 DEBUG {conn-10005, pstmt-20013} Parameters : [2, 28305988]
2019-08-15 02:07:58,947 DEBUG {conn-10005, pstmt-20013} Types : [BIGINT, INTEGER]
2019-08-15 02:07:58,949 DEBUG {conn-10005, pstmt-20013} executed. 2.686969 millis. SELECT authority_id,user_id

  FROM tb_user_authority

  WHERE EXISTS(

  SELECT authority_id,user_id

  FROM tb_user_authority

  WHERE
  authority_id =
    ? 
  AND
  user_id =
    ? 
  )
2019-08-15 02:07:58,949 DEBUG {conn-10005, pstmt-20013, rs-50019} open
2019-08-15 02:07:58,950 DEBUG {conn-10005, pstmt-20013, rs-50019} Header: [authority_id, user_id]
2019-08-15 02:07:58,950 DEBUG {conn-10005, pstmt-20013, rs-50019} closed
2019-08-15 02:07:58,950 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 02:07:58,950 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:58,950 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:58,954 DEBUG {conn-10005, pstmt-20014} created. INSERT INTO tb_user_authority (authority_id,user_id) VALUE
      
      (?,?)
2019-08-15 02:07:58,955 DEBUG {conn-10005, pstmt-20014} Parameters : [2, 28305988]
2019-08-15 02:07:58,955 DEBUG {conn-10005, pstmt-20014} Types : [BIGINT, INTEGER]
2019-08-15 02:07:58,957 DEBUG {conn-10005, pstmt-20014} executed. 1.910745 millis. INSERT INTO tb_user_authority (authority_id,user_id) VALUE
      
      (?,?)
2019-08-15 02:07:58,957 DEBUG {conn-10005, pstmt-20014, rs-50020} open
2019-08-15 02:07:58,957 DEBUG {conn-10005, pstmt-20014, rs-50020} Header: [GENERATED_KEY]
2019-08-15 02:07:58,959 DEBUG {conn-10005, pstmt-20014, rs-50020} Result: [24]
2019-08-15 02:07:58,959 DEBUG {conn-10005, pstmt-20014, rs-50020} closed
2019-08-15 02:07:58,959 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 02:07:58,959 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:58,970 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:58,970 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:07:58,970 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:07:58,971 DEBUG {conn-10005, pstmt-20012} executed. 0.737669 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:07:58,971 DEBUG {conn-10005, pstmt-20012, rs-50021} open
2019-08-15 02:07:58,971 DEBUG {conn-10005, pstmt-20012, rs-50021} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:07:58,971 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:07:58,972 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:07:58,972 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:07:58,972 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:07:58,973 DEBUG {conn-10005, pstmt-20012, rs-50021} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:07:58,973 DEBUG {conn-10005, pstmt-20012, rs-50021} closed
2019-08-15 02:07:58,973 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:07:58,973 DEBUG {conn-10005} pool-recycle
2019-08-15 02:07:58,974 DEBUG {conn-10005} pool-connect
2019-08-15 02:07:58,974 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:07:58,974 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:07:58,975 DEBUG {conn-10005, pstmt-20010} executed. 1.064609 millis. select count(*)  from tb_admin_user
2019-08-15 02:07:58,975 DEBUG {conn-10005, pstmt-20010, rs-50022} open
2019-08-15 02:07:58,975 DEBUG {conn-10005, pstmt-20010, rs-50022} Header: [count(*)]
2019-08-15 02:07:58,975 DEBUG {conn-10005, pstmt-20010, rs-50022} Result: [3]
2019-08-15 02:07:58,975 DEBUG {conn-10005, pstmt-20010, rs-50022} closed
2019-08-15 02:07:58,976 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:07:58,976 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:07,872 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:07,874 DEBUG {conn-10005, pstmt-20015} created. delete
    from tb_user_authority
    where user_id = ? and authority_id = ?
2019-08-15 02:08:07,874 DEBUG {conn-10005, pstmt-20015} Parameters : [28305988, 2]
2019-08-15 02:08:07,874 DEBUG {conn-10005, pstmt-20015} Types : [BIGINT, BIGINT]
2019-08-15 02:08:07,878 DEBUG {conn-10005, pstmt-20015} executed. 3.340333 millis. delete
    from tb_user_authority
    where user_id = ? and authority_id = ?
2019-08-15 02:08:07,878 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 02:08:07,878 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:07,886 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:07,886 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:08:07,887 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:08:07,887 DEBUG {conn-10005, pstmt-20012} executed. 0.624064 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:08:07,887 DEBUG {conn-10005, pstmt-20012, rs-50023} open
2019-08-15 02:08:07,887 DEBUG {conn-10005, pstmt-20012, rs-50023} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:08:07,887 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:08:07,888 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:08:07,888 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:08:07,888 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:08:07,889 DEBUG {conn-10005, pstmt-20012, rs-50023} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, null, null]
2019-08-15 02:08:07,889 DEBUG {conn-10005, pstmt-20012, rs-50023} closed
2019-08-15 02:08:07,889 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:08:07,890 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:07,890 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:07,890 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:08:07,890 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:08:07,891 DEBUG {conn-10005, pstmt-20010} executed. 0.715566 millis. select count(*)  from tb_admin_user
2019-08-15 02:08:07,891 DEBUG {conn-10005, pstmt-20010, rs-50024} open
2019-08-15 02:08:07,891 DEBUG {conn-10005, pstmt-20010, rs-50024} Header: [count(*)]
2019-08-15 02:08:07,891 DEBUG {conn-10005, pstmt-20010, rs-50024} Result: [3]
2019-08-15 02:08:07,892 DEBUG {conn-10005, pstmt-20010, rs-50024} closed
2019-08-15 02:08:07,892 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:08:07,892 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:12,391 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:12,392 DEBUG {conn-10005, pstmt-20013} Parameters : [2, 28305988]
2019-08-15 02:08:12,392 DEBUG {conn-10005, pstmt-20013} Types : [BIGINT, INTEGER]
2019-08-15 02:08:12,392 DEBUG {conn-10005, pstmt-20013} executed. 0.558778 millis. SELECT authority_id,user_id

  FROM tb_user_authority

  WHERE EXISTS(

  SELECT authority_id,user_id

  FROM tb_user_authority

  WHERE
  authority_id =
    ? 
  AND
  user_id =
    ? 
  )
2019-08-15 02:08:12,392 DEBUG {conn-10005, pstmt-20013, rs-50025} open
2019-08-15 02:08:12,392 DEBUG {conn-10005, pstmt-20013, rs-50025} Header: [authority_id, user_id]
2019-08-15 02:08:12,393 DEBUG {conn-10005, pstmt-20013, rs-50025} closed
2019-08-15 02:08:12,393 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 02:08:12,393 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:12,393 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:12,393 DEBUG {conn-10005, pstmt-20014} Parameters : [2, 28305988]
2019-08-15 02:08:12,393 DEBUG {conn-10005, pstmt-20014} Types : [BIGINT, INTEGER]
2019-08-15 02:08:12,396 DEBUG {conn-10005, pstmt-20014} executed. 2.441764 millis. INSERT INTO tb_user_authority (authority_id,user_id) VALUE
      
      (?,?)
2019-08-15 02:08:12,396 DEBUG {conn-10005, pstmt-20014, rs-50026} open
2019-08-15 02:08:12,396 DEBUG {conn-10005, pstmt-20014, rs-50026} Header: [GENERATED_KEY]
2019-08-15 02:08:12,396 DEBUG {conn-10005, pstmt-20014, rs-50026} Result: [25]
2019-08-15 02:08:12,397 DEBUG {conn-10005, pstmt-20014, rs-50026} closed
2019-08-15 02:08:12,397 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 02:08:12,397 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:12,408 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:12,409 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:08:12,409 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:08:12,410 DEBUG {conn-10005, pstmt-20012} executed. 0.757204 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:08:12,410 DEBUG {conn-10005, pstmt-20012, rs-50027} open
2019-08-15 02:08:12,410 DEBUG {conn-10005, pstmt-20012, rs-50027} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:08:12,410 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:08:12,411 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:08:12,411 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:08:12,411 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:08:12,412 DEBUG {conn-10005, pstmt-20012, rs-50027} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:08:12,412 DEBUG {conn-10005, pstmt-20012, rs-50027} closed
2019-08-15 02:08:12,412 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:08:12,412 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:12,413 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:12,413 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:08:12,413 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:08:12,414 DEBUG {conn-10005, pstmt-20010} executed. 0.549526 millis. select count(*)  from tb_admin_user
2019-08-15 02:08:12,414 DEBUG {conn-10005, pstmt-20010, rs-50028} open
2019-08-15 02:08:12,414 DEBUG {conn-10005, pstmt-20010, rs-50028} Header: [count(*)]
2019-08-15 02:08:12,414 DEBUG {conn-10005, pstmt-20010, rs-50028} Result: [3]
2019-08-15 02:08:12,414 DEBUG {conn-10005, pstmt-20010, rs-50028} closed
2019-08-15 02:08:12,414 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:08:12,414 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:19,792 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:19,795 DEBUG {conn-10005, pstmt-20016} created. update tb_admin_user
    set locked=1 where id =?
2019-08-15 02:08:19,796 DEBUG {conn-10005, pstmt-20016} Parameters : [28305988]
2019-08-15 02:08:19,796 DEBUG {conn-10005, pstmt-20016} Types : [BIGINT]
2019-08-15 02:08:19,804 DEBUG {conn-10005, pstmt-20016} executed. 8.053708 millis. update tb_admin_user
    set locked=1 where id =?
2019-08-15 02:08:19,804 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 02:08:19,804 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:19,812 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:19,813 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:08:19,813 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:08:19,813 DEBUG {conn-10005, pstmt-20012} executed. 0.581397 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:08:19,813 DEBUG {conn-10005, pstmt-20012, rs-50029} open
2019-08-15 02:08:19,813 DEBUG {conn-10005, pstmt-20012, rs-50029} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:08:19,813 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:08:19,814 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:08:19,814 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:08:19,814 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [28305988, user, kuky, 1, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:08:19,816 DEBUG {conn-10005, pstmt-20012, rs-50029} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:08:19,816 DEBUG {conn-10005, pstmt-20012, rs-50029} closed
2019-08-15 02:08:19,817 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:08:19,817 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:19,817 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:19,817 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:08:19,817 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:08:19,818 DEBUG {conn-10005, pstmt-20010} executed. 0.537702 millis. select count(*)  from tb_admin_user
2019-08-15 02:08:19,818 DEBUG {conn-10005, pstmt-20010, rs-50030} open
2019-08-15 02:08:19,818 DEBUG {conn-10005, pstmt-20010, rs-50030} Header: [count(*)]
2019-08-15 02:08:19,818 DEBUG {conn-10005, pstmt-20010, rs-50030} Result: [3]
2019-08-15 02:08:19,818 DEBUG {conn-10005, pstmt-20010, rs-50030} closed
2019-08-15 02:08:19,818 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:08:19,818 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:23,625 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:23,626 DEBUG {conn-10005, pstmt-20017} created. update tb_admin_user
    set locked=0 where id = ?
2019-08-15 02:08:23,626 DEBUG {conn-10005, pstmt-20017} Parameters : [28305988]
2019-08-15 02:08:23,626 DEBUG {conn-10005, pstmt-20017} Types : [BIGINT]
2019-08-15 02:08:23,634 DEBUG {conn-10005, pstmt-20017} executed. 8.227973 millis. update tb_admin_user
    set locked=0 where id = ?
2019-08-15 02:08:23,634 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-15 02:08:23,634 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:23,644 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:23,644 DEBUG {conn-10005, pstmt-20012} Parameters : [0, 10]
2019-08-15 02:08:23,644 DEBUG {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]
2019-08-15 02:08:23,645 DEBUG {conn-10005, pstmt-20012} executed. 0.715051 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 02:08:23,645 DEBUG {conn-10005, pstmt-20012, rs-50031} open
2019-08-15 02:08:23,645 DEBUG {conn-10005, pstmt-20012, rs-50031} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 02:08:23,645 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 02:08:23,645 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:08:23,646 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:08:23,646 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 02:08:23,646 DEBUG {conn-10005, pstmt-20012, rs-50031} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 02:08:23,646 DEBUG {conn-10005, pstmt-20012, rs-50031} closed
2019-08-15 02:08:23,647 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 02:08:23,647 DEBUG {conn-10005} pool-recycle
2019-08-15 02:08:23,648 DEBUG {conn-10005} pool-connect
2019-08-15 02:08:23,648 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:08:23,648 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:08:23,648 DEBUG {conn-10005, pstmt-20010} executed. 0.620979 millis. select count(*)  from tb_admin_user
2019-08-15 02:08:23,648 DEBUG {conn-10005, pstmt-20010, rs-50032} open
2019-08-15 02:08:23,648 DEBUG {conn-10005, pstmt-20010, rs-50032} Header: [count(*)]
2019-08-15 02:08:23,649 DEBUG {conn-10005, pstmt-20010, rs-50032} Result: [3]
2019-08-15 02:08:23,649 DEBUG {conn-10005, pstmt-20010, rs-50032} closed
2019-08-15 02:08:23,649 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:08:23,649 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:04,758 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:04,760 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 02:12:04,760 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 02:12:04,760 DEBUG {conn-10005, pstmt-20006} executed. 0.607614 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 02:12:04,760 DEBUG {conn-10005, pstmt-20006, rs-50033} open
2019-08-15 02:12:04,760 DEBUG {conn-10005, pstmt-20006, rs-50033} Header: [count(*)]
2019-08-15 02:12:04,760 DEBUG {conn-10005, pstmt-20006, rs-50033} Result: [4]
2019-08-15 02:12:04,760 DEBUG {conn-10005, pstmt-20006, rs-50033} closed
2019-08-15 02:12:04,760 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 02:12:04,760 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:04,760 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:04,760 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 02:12:04,760 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 02:12:04,761 DEBUG {conn-10005, pstmt-20007} executed. 0.394795 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 02:12:04,761 DEBUG {conn-10005, pstmt-20007, rs-50034} open
2019-08-15 02:12:04,761 DEBUG {conn-10005, pstmt-20007, rs-50034} Header: [count(*)]
2019-08-15 02:12:04,761 DEBUG {conn-10005, pstmt-20007, rs-50034} Result: [2]
2019-08-15 02:12:04,761 DEBUG {conn-10005, pstmt-20007, rs-50034} closed
2019-08-15 02:12:04,761 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 02:12:04,761 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:04,762 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:04,762 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 02:12:04,762 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 02:12:04,762 DEBUG {conn-10005, pstmt-20008} executed. 0.537188 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 02:12:04,762 DEBUG {conn-10005, pstmt-20008, rs-50035} open
2019-08-15 02:12:04,762 DEBUG {conn-10005, pstmt-20008, rs-50035} Header: [count(*)]
2019-08-15 02:12:04,762 DEBUG {conn-10005, pstmt-20008, rs-50035} Result: [27]
2019-08-15 02:12:04,763 DEBUG {conn-10005, pstmt-20008, rs-50035} closed
2019-08-15 02:12:04,763 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 02:12:04,763 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:04,763 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:04,763 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 02:12:04,763 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 02:12:04,764 DEBUG {conn-10005, pstmt-20009} executed. 0.551068 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 02:12:04,764 DEBUG {conn-10005, pstmt-20009, rs-50036} open
2019-08-15 02:12:04,764 DEBUG {conn-10005, pstmt-20009, rs-50036} Header: [count(*)]
2019-08-15 02:12:04,764 DEBUG {conn-10005, pstmt-20009, rs-50036} Result: [14]
2019-08-15 02:12:04,764 DEBUG {conn-10005, pstmt-20009, rs-50036} closed
2019-08-15 02:12:04,764 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 02:12:04,764 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:04,764 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:04,764 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 02:12:04,764 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 02:12:04,765 DEBUG {conn-10005, pstmt-20010} executed. 0.468819 millis. select count(*)  from tb_admin_user
2019-08-15 02:12:04,765 DEBUG {conn-10005, pstmt-20010, rs-50037} open
2019-08-15 02:12:04,765 DEBUG {conn-10005, pstmt-20010, rs-50037} Header: [count(*)]
2019-08-15 02:12:04,765 DEBUG {conn-10005, pstmt-20010, rs-50037} Result: [3]
2019-08-15 02:12:04,765 DEBUG {conn-10005, pstmt-20010, rs-50037} closed
2019-08-15 02:12:04,765 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 02:12:04,765 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:04,766 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:04,766 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 02:12:04,766 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 02:12:04,766 DEBUG {conn-10005, pstmt-20011} executed. 0.549526 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 02:12:04,766 DEBUG {conn-10005, pstmt-20011, rs-50038} open
2019-08-15 02:12:04,767 DEBUG {conn-10005, pstmt-20011, rs-50038} Header: [count(*)]
2019-08-15 02:12:04,767 DEBUG {conn-10005, pstmt-20011, rs-50038} Result: [5]
2019-08-15 02:12:04,767 DEBUG {conn-10005, pstmt-20011, rs-50038} closed
2019-08-15 02:12:04,767 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 02:12:04,767 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:06,852 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:06,853 DEBUG {conn-10005, pstmt-20018} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 02:12:06,854 DEBUG {conn-10005, pstmt-20018} Parameters : [0, 10]
2019-08-15 02:12:06,854 DEBUG {conn-10005, pstmt-20018} Types : [INTEGER, INTEGER]
2019-08-15 02:12:06,854 DEBUG {conn-10005, pstmt-20018} executed. 0.706312 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 02:12:06,854 DEBUG {conn-10005, pstmt-20018, rs-50039} open
2019-08-15 02:12:06,855 DEBUG {conn-10005, pstmt-20018, rs-50039} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 02:12:06,855 DEBUG {conn-10005, pstmt-20018, rs-50039} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 0, 0]
2019-08-15 02:12:06,856 DEBUG {conn-10005, pstmt-20018, rs-50039} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 0, 0]
2019-08-15 02:12:06,856 DEBUG {conn-10005, pstmt-20018, rs-50039} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 0, 0]
2019-08-15 02:12:06,856 DEBUG {conn-10005, pstmt-20018, rs-50039} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 02:12:06,857 DEBUG {conn-10005, pstmt-20018, rs-50039} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 02:12:06,857 DEBUG {conn-10005, pstmt-20018, rs-50039} closed
2019-08-15 02:12:06,857 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 02:12:06,857 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:06,857 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:06,857 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 02:12:06,857 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 02:12:06,858 DEBUG {conn-10005, pstmt-20011} executed. 0.559806 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 02:12:06,858 DEBUG {conn-10005, pstmt-20011, rs-50040} open
2019-08-15 02:12:06,858 DEBUG {conn-10005, pstmt-20011, rs-50040} Header: [count(*)]
2019-08-15 02:12:06,858 DEBUG {conn-10005, pstmt-20011, rs-50040} Result: [5]
2019-08-15 02:12:06,858 DEBUG {conn-10005, pstmt-20011, rs-50040} closed
2019-08-15 02:12:06,858 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 02:12:06,858 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:16,746 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:16,746 DEBUG {conn-10005, pstmt-20019} created. update tb_blog_comment
    set comment_status=1 where comment_id in
     (  
      ?
     , 
      ?
     , 
      ?
     ) 
    and comment_status = 0
2019-08-15 02:12:16,747 DEBUG {conn-10005, pstmt-20019} Parameters : [28, 29, 30]
2019-08-15 02:12:16,747 DEBUG {conn-10005, pstmt-20019} Types : [INTEGER, INTEGER, INTEGER]
2019-08-15 02:12:16,755 DEBUG {conn-10005, pstmt-20019} executed. 8.365226 millis. update tb_blog_comment
    set comment_status=1 where comment_id in
     (  
      ?
     , 
      ?
     , 
      ?
     ) 
    and comment_status = 0
2019-08-15 02:12:16,755 DEBUG {conn-10005, pstmt-20019} clearParameters. 
2019-08-15 02:12:16,755 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:16,766 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:16,767 DEBUG {conn-10005, pstmt-20018} Parameters : [0, 10]
2019-08-15 02:12:16,767 DEBUG {conn-10005, pstmt-20018} Types : [INTEGER, INTEGER]
2019-08-15 02:12:16,767 DEBUG {conn-10005, pstmt-20018} executed. 0.567518 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 02:12:16,767 DEBUG {conn-10005, pstmt-20018, rs-50041} open
2019-08-15 02:12:16,767 DEBUG {conn-10005, pstmt-20018, rs-50041} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 02:12:16,768 DEBUG {conn-10005, pstmt-20018, rs-50041} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 1, 0]
2019-08-15 02:12:16,768 DEBUG {conn-10005, pstmt-20018, rs-50041} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 1, 0]
2019-08-15 02:12:16,768 DEBUG {conn-10005, pstmt-20018, rs-50041} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 1, 0]
2019-08-15 02:12:16,768 DEBUG {conn-10005, pstmt-20018, rs-50041} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 02:12:16,768 DEBUG {conn-10005, pstmt-20018, rs-50041} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 02:12:16,769 DEBUG {conn-10005, pstmt-20018, rs-50041} closed
2019-08-15 02:12:16,769 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 02:12:16,769 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:16,769 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:16,769 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 02:12:16,769 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 02:12:16,769 DEBUG {conn-10005, pstmt-20011} executed. 0.460079 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 02:12:16,770 DEBUG {conn-10005, pstmt-20011, rs-50042} open
2019-08-15 02:12:16,770 DEBUG {conn-10005, pstmt-20011, rs-50042} Header: [count(*)]
2019-08-15 02:12:16,770 DEBUG {conn-10005, pstmt-20011, rs-50042} Result: [5]
2019-08-15 02:12:16,770 DEBUG {conn-10005, pstmt-20011, rs-50042} closed
2019-08-15 02:12:16,770 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 02:12:16,770 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:40,481 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:40,482 DEBUG {conn-10005, pstmt-20020} created. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
         
            limit ?,?
2019-08-15 02:12:40,482 DEBUG {conn-10005, pstmt-20020} Parameters : [0, 10]
2019-08-15 02:12:40,482 DEBUG {conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
2019-08-15 02:12:40,483 DEBUG {conn-10005, pstmt-20020} executed. 0.771598 millis. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
         
            limit ?,?
2019-08-15 02:12:40,483 DEBUG {conn-10005, pstmt-20020, rs-50043} open
2019-08-15 02:12:40,483 DEBUG {conn-10005, pstmt-20020, rs-50043} Header: [link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, create_time]
2019-08-15 02:12:40,483 DEBUG {conn-10005, pstmt-20020, rs-50043} Result: [32, 0, fh, 567457, sf, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 02:12:40,483 DEBUG {conn-10005, pstmt-20020, rs-50043} Result: [31, 0, dg, 658, 手动阀, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 02:12:40,484 DEBUG {conn-10005, pstmt-20020, rs-50043} Result: [30, 0, 接口, 090, 模拟, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 02:12:40,484 DEBUG {conn-10005, pstmt-20020, rs-50043} Result: [29, 0, 校验码, 745, 如果和人, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 02:12:40,484 DEBUG {conn-10005, pstmt-20020, rs-50043} Result: [28, 0, 很关键, 456, 天涯海角, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 02:12:40,484 DEBUG {conn-10005, pstmt-20020, rs-50043} Result: [27, 0, 染发膏, 456, 突然好几天, 1, 0, 2019-11-04 00:00:00.0]
2019-08-15 02:12:40,484 DEBUG {conn-10005, pstmt-20020, rs-50043} Result: [26, 0, 翻滚吧, 345, 姑获鸟, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 02:12:40,485 DEBUG {conn-10005, pstmt-20020, rs-50043} Result: [25, 0, 分别, 34534, 法国红酒, 1, 0, 2019-09-23 00:00:00.0]
2019-08-15 02:12:40,485 DEBUG {conn-10005, pstmt-20020, rs-50043} Result: [24, 0, 4356fg地方, 345, 儿童, 1, 0, 2019-06-05 00:00:00.0]
2019-08-15 02:12:40,485 DEBUG {conn-10005, pstmt-20020, rs-50043} Result: [23, 0, 后就开始的, 34534, 放电饭锅, 0, 0, 2019-04-04 00:00:00.0]
2019-08-15 02:12:40,485 DEBUG {conn-10005, pstmt-20020, rs-50043} closed
2019-08-15 02:12:40,485 DEBUG {conn-10005, pstmt-20020} clearParameters. 
2019-08-15 02:12:40,486 DEBUG {conn-10005, pstmt-20005} closed
2019-08-15 02:12:40,486 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:40,486 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:40,486 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 02:12:40,486 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 02:12:40,487 DEBUG {conn-10005, pstmt-20008} executed. 0.560834 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 02:12:40,487 DEBUG {conn-10005, pstmt-20008, rs-50044} open
2019-08-15 02:12:40,487 DEBUG {conn-10005, pstmt-20008, rs-50044} Header: [count(*)]
2019-08-15 02:12:40,487 DEBUG {conn-10005, pstmt-20008, rs-50044} Result: [27]
2019-08-15 02:12:40,487 DEBUG {conn-10005, pstmt-20008, rs-50044} closed
2019-08-15 02:12:40,487 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 02:12:40,487 DEBUG {conn-10005} pool-recycle
2019-08-15 02:12:54,287 DEBUG {conn-10005} pool-connect
2019-08-15 02:12:54,287 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 02:12:54,287 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 02:12:54,288 DEBUG {conn-10005, pstmt-20003} executed. 0.482698 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:12:54,288 DEBUG {conn-10005, pstmt-20003, rs-50045} open
2019-08-15 02:12:54,288 DEBUG {conn-10005, pstmt-20003, rs-50045} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:12:54,288 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:12:54,288 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:12:54,288 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:12:54,289 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:12:54,289 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:12:54,289 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:12:54,289 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:12:54,289 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:12:54,289 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:12:54,289 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 02:12:54,289 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 02:12:54,289 DEBUG {conn-10005, pstmt-20003, rs-50045} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 02:12:54,290 DEBUG {conn-10005, pstmt-20003, rs-50045} closed
2019-08-15 02:12:54,290 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 02:12:54,290 DEBUG {conn-10005} pool-recycle
2019-08-15 02:13:35,037 DEBUG {conn-10005} pool-connect
2019-08-15 02:13:35,037 DEBUG {conn-10005, pstmt-20021} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
    where config_name = ?
2019-08-15 02:13:35,037 DEBUG {conn-10005, pstmt-20021} Parameters : [yourAvatar]
2019-08-15 02:13:35,037 DEBUG {conn-10005, pstmt-20021} Types : [VARCHAR]
2019-08-15 02:13:35,038 DEBUG {conn-10005, pstmt-20021} executed. 0.641541 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
    where config_name = ?
2019-08-15 02:13:35,038 DEBUG {conn-10005, pstmt-20021, rs-50046} open
2019-08-15 02:13:35,038 DEBUG {conn-10005, pstmt-20021, rs-50046} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:13:35,038 DEBUG {conn-10005, pstmt-20021, rs-50046} Result: [yourAvatar, /admin/dist/img/13.png, 2018-11-12 04:33:14.0, 2019-07-24 23:53:56.0]
2019-08-15 02:13:35,039 DEBUG {conn-10005, pstmt-20021, rs-50046} closed
2019-08-15 02:13:35,039 DEBUG {conn-10005, pstmt-20021} clearParameters. 
2019-08-15 02:13:35,039 DEBUG {conn-10005, pstmt-20000} closed
2019-08-15 02:13:35,039 DEBUG {conn-10005} pool-recycle
2019-08-15 02:13:35,041 DEBUG {conn-10005} pool-connect
2019-08-15 02:13:35,042 DEBUG {conn-10005, pstmt-20022} created. update tb_config
     SET config_value = ?,
      
      
        create_time = ?,
      
      
        update_time = ? 
    where config_name = ?
2019-08-15 02:13:35,044 DEBUG {conn-10005, pstmt-20022} Parameters : [/admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.039, yourAvatar]
2019-08-15 02:13:35,044 DEBUG {conn-10005, pstmt-20022} Types : [VARCHAR, TIMESTAMP, TIMESTAMP, VARCHAR]
2019-08-15 02:13:35,047 DEBUG {conn-10005, pstmt-20022} executed. 3.01288 millis. update tb_config
     SET config_value = ?,
      
      
        create_time = ?,
      
      
        update_time = ? 
    where config_name = ?
2019-08-15 02:13:35,047 DEBUG {conn-10005, pstmt-20022} clearParameters. 
2019-08-15 02:13:35,047 DEBUG {conn-10005, pstmt-20001} closed
2019-08-15 02:13:35,047 DEBUG {conn-10005} pool-recycle
2019-08-15 02:13:35,048 DEBUG {conn-10005} pool-connect
2019-08-15 02:13:35,048 DEBUG {conn-10005, pstmt-20021} Parameters : [yourName]
2019-08-15 02:13:35,048 DEBUG {conn-10005, pstmt-20021} Types : [VARCHAR]
2019-08-15 02:13:35,048 DEBUG {conn-10005, pstmt-20021} executed. 0.515083 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
    where config_name = ?
2019-08-15 02:13:35,048 DEBUG {conn-10005, pstmt-20021, rs-50047} open
2019-08-15 02:13:35,048 DEBUG {conn-10005, pstmt-20021, rs-50047} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:13:35,048 DEBUG {conn-10005, pstmt-20021, rs-50047} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-07-24 23:53:56.0]
2019-08-15 02:13:35,049 DEBUG {conn-10005, pstmt-20021, rs-50047} closed
2019-08-15 02:13:35,049 DEBUG {conn-10005, pstmt-20021} clearParameters. 
2019-08-15 02:13:35,049 DEBUG {conn-10005} pool-recycle
2019-08-15 02:13:35,049 DEBUG {conn-10005} pool-connect
2019-08-15 02:13:35,050 DEBUG {conn-10005, pstmt-20022} Parameters : [Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.049, yourName]
2019-08-15 02:13:35,050 DEBUG {conn-10005, pstmt-20022} Types : [VARCHAR, TIMESTAMP, TIMESTAMP, VARCHAR]
2019-08-15 02:13:35,052 DEBUG {conn-10005, pstmt-20022} executed. 2.214552 millis. update tb_config
     SET config_value = ?,
      
      
        create_time = ?,
      
      
        update_time = ? 
    where config_name = ?
2019-08-15 02:13:35,052 DEBUG {conn-10005, pstmt-20022} clearParameters. 
2019-08-15 02:13:35,052 DEBUG {conn-10005} pool-recycle
2019-08-15 02:13:35,052 DEBUG {conn-10005} pool-connect
2019-08-15 02:13:35,052 DEBUG {conn-10005, pstmt-20021} Parameters : [yourEmail]
2019-08-15 02:13:35,052 DEBUG {conn-10005, pstmt-20021} Types : [VARCHAR]
2019-08-15 02:13:35,053 DEBUG {conn-10005, pstmt-20021} executed. 0.490409 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
    where config_name = ?
2019-08-15 02:13:35,053 DEBUG {conn-10005, pstmt-20021, rs-50048} open
2019-08-15 02:13:35,053 DEBUG {conn-10005, pstmt-20021, rs-50048} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:13:35,053 DEBUG {conn-10005, pstmt-20021, rs-50048} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-07-24 23:53:56.0]
2019-08-15 02:13:35,053 DEBUG {conn-10005, pstmt-20021, rs-50048} closed
2019-08-15 02:13:35,054 DEBUG {conn-10005, pstmt-20021} clearParameters. 
2019-08-15 02:13:35,054 DEBUG {conn-10005} pool-recycle
2019-08-15 02:13:35,054 DEBUG {conn-10005} pool-connect
2019-08-15 02:13:35,054 DEBUG {conn-10005, pstmt-20022} Parameters : [13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.054, yourEmail]
2019-08-15 02:13:35,054 DEBUG {conn-10005, pstmt-20022} Types : [VARCHAR, TIMESTAMP, TIMESTAMP, VARCHAR]
2019-08-15 02:13:35,057 DEBUG {conn-10005, pstmt-20022} executed. 2.754824 millis. update tb_config
     SET config_value = ?,
      
      
        create_time = ?,
      
      
        update_time = ? 
    where config_name = ?
2019-08-15 02:13:35,057 DEBUG {conn-10005, pstmt-20022} clearParameters. 
2019-08-15 02:13:35,057 DEBUG {conn-10005} pool-recycle
2019-08-15 02:14:13,946 DEBUG {conn-10005} pool-connect
2019-08-15 02:14:13,946 DEBUG {conn-10005, pstmt-20023} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 02:14:13,946 DEBUG {conn-10005, pstmt-20023} Parameters : [0, 10]
2019-08-15 02:14:13,946 DEBUG {conn-10005, pstmt-20023} Types : [INTEGER, INTEGER]
2019-08-15 02:14:13,947 DEBUG {conn-10005, pstmt-20023} executed. 0.573172 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 02:14:13,947 DEBUG {conn-10005, pstmt-20023, rs-50049} open
2019-08-15 02:14:13,947 DEBUG {conn-10005, pstmt-20023, rs-50049} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:14:13,947 DEBUG {conn-10005, pstmt-20023, rs-50049} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:14:13,947 DEBUG {conn-10005, pstmt-20023, rs-50049} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:14:13,948 DEBUG {conn-10005, pstmt-20023, rs-50049} closed
2019-08-15 02:14:13,948 DEBUG {conn-10005, pstmt-20023} clearParameters. 
2019-08-15 02:14:13,948 DEBUG {conn-10005, pstmt-20002} closed
2019-08-15 02:14:13,948 DEBUG {conn-10005} pool-recycle
2019-08-15 02:14:13,948 DEBUG {conn-10005} pool-connect
2019-08-15 02:14:13,948 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 02:14:13,948 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 02:14:13,949 DEBUG {conn-10005, pstmt-20007} executed. 0.714537 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 02:14:13,949 DEBUG {conn-10005, pstmt-20007, rs-50050} open
2019-08-15 02:14:13,949 DEBUG {conn-10005, pstmt-20007, rs-50050} Header: [count(*)]
2019-08-15 02:14:13,949 DEBUG {conn-10005, pstmt-20007, rs-50050} Result: [2]
2019-08-15 02:14:13,950 DEBUG {conn-10005, pstmt-20007, rs-50050} closed
2019-08-15 02:14:13,950 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 02:14:13,950 DEBUG {conn-10005} pool-recycle
2019-08-15 02:14:18,362 DEBUG {conn-10005} pool-connect
2019-08-15 02:14:18,363 DEBUG {conn-10005, pstmt-20024} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 02:14:18,363 DEBUG {conn-10005, pstmt-20024} Parameters : []
2019-08-15 02:14:18,363 DEBUG {conn-10005, pstmt-20024} Types : []
2019-08-15 02:14:18,363 DEBUG {conn-10005, pstmt-20024} executed. 0.570088 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 02:14:18,363 DEBUG {conn-10005, pstmt-20024, rs-50051} open
2019-08-15 02:14:18,363 DEBUG {conn-10005, pstmt-20024, rs-50051} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 02:14:18,364 DEBUG {conn-10005, pstmt-20024, rs-50051} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 02:14:18,364 DEBUG {conn-10005, pstmt-20024, rs-50051} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 02:14:18,364 DEBUG {conn-10005, pstmt-20024, rs-50051} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 02:14:18,364 DEBUG {conn-10005, pstmt-20024, rs-50051} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 02:14:18,364 DEBUG {conn-10005, pstmt-20024, rs-50051} closed
2019-08-15 02:14:18,364 DEBUG {conn-10005, pstmt-20024} clearParameters. 
2019-08-15 02:14:18,365 DEBUG {conn-10005, pstmt-20004} closed
2019-08-15 02:14:18,365 DEBUG {conn-10005} pool-recycle
2019-08-15 02:14:30,565 DEBUG {conn-10005} pool-connect
2019-08-15 02:14:30,566 DEBUG {conn-10005, pstmt-20024} Parameters : []
2019-08-15 02:14:30,566 DEBUG {conn-10005, pstmt-20024} Types : []
2019-08-15 02:14:30,566 DEBUG {conn-10005, pstmt-20024} executed. 0.710939 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 02:14:30,566 DEBUG {conn-10005, pstmt-20024, rs-50052} open
2019-08-15 02:14:30,566 DEBUG {conn-10005, pstmt-20024, rs-50052} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 02:14:30,566 DEBUG {conn-10005, pstmt-20024, rs-50052} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 02:14:30,567 DEBUG {conn-10005, pstmt-20024, rs-50052} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 02:14:30,567 DEBUG {conn-10005, pstmt-20024, rs-50052} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 02:14:30,567 DEBUG {conn-10005, pstmt-20024, rs-50052} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 02:14:30,567 DEBUG {conn-10005, pstmt-20024, rs-50052} closed
2019-08-15 02:14:30,567 DEBUG {conn-10005, pstmt-20024} clearParameters. 
2019-08-15 02:14:30,567 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:02,620 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:02,620 DEBUG {conn-10005} setAutoCommit false
2019-08-15 02:34:02,630 DEBUG {conn-10005, pstmt-20025} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 02:34:02,630 DEBUG {conn-10005, pstmt-20025} Parameters : [24]
2019-08-15 02:34:02,630 DEBUG {conn-10005, pstmt-20025} Types : [INTEGER]
2019-08-15 02:34:02,630 DEBUG {conn-10005, pstmt-20025} executed. 0.615838 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 02:34:02,630 DEBUG {conn-10005, pstmt-20025, rs-50053} open
2019-08-15 02:34:02,630 DEBUG {conn-10005, pstmt-20025, rs-50053} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 02:34:02,631 DEBUG {conn-10005, pstmt-20025, rs-50053} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 25, 0, 2018-11-12 18:43:21.0]
2019-08-15 02:34:02,631 DEBUG {conn-10005, pstmt-20025, rs-50053} closed
2019-08-15 02:34:02,631 DEBUG {conn-10005, pstmt-20025} clearParameters. 
2019-08-15 02:34:02,631 DEBUG {conn-10005, pstmt-20015} closed
2019-08-15 02:34:02,635 DEBUG {conn-10005, pstmt-20026} created. insert into tb_blog
     ( blog_title,
      
      
        blog_sub_url,
      
      
        blog_cover_image,
      
      
        blog_category_id,
      
      
        blog_category_name,
      
      
        blog_tags,
      
      
        blog_status,
      
      
      
        enable_comment,
      
      
      
      
      
        blog_vote_size,
      
      
        blog_content,
      
       
         blog_summary ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
        ?,
      
      
      
      
      
        ?,
      
      
        ?,
      
       
        ? )
2019-08-15 02:34:02,636 DEBUG {conn-10005, pstmt-20026} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 0, 0, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:34:02,636 DEBUG {conn-10005, pstmt-20026} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, TINYINT, INTEGER, VARCHAR, VARCHAR]
2019-08-15 02:34:02,639 DEBUG {conn-10005, pstmt-20026} executed. 2.548687 millis. insert into tb_blog
     ( blog_title,
      
      
        blog_sub_url,
      
      
        blog_cover_image,
      
      
        blog_category_id,
      
      
        blog_category_name,
      
      
        blog_tags,
      
      
        blog_status,
      
      
      
        enable_comment,
      
      
      
      
      
        blog_vote_size,
      
      
        blog_content,
      
       
         blog_summary ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
        ?,
      
      
      
      
      
        ?,
      
      
        ?,
      
       
        ? )
2019-08-15 02:34:02,639 DEBUG {conn-10005, pstmt-20026, rs-50054} open
2019-08-15 02:34:02,639 DEBUG {conn-10005, pstmt-20026, rs-50054} Header: [GENERATED_KEY]
2019-08-15 02:34:02,639 DEBUG {conn-10005, pstmt-20026, rs-50054} Result: [24]
2019-08-15 02:34:02,639 DEBUG {conn-10005, pstmt-20026, rs-50054} closed
2019-08-15 02:34:02,639 DEBUG {conn-10005, pstmt-20026} clearParameters. 
2019-08-15 02:34:02,639 DEBUG {conn-10005, pstmt-20013} closed
2019-08-15 02:34:02,640 DEBUG {conn-10005, pstmt-20027} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   ,
     
    blog_content
   
    from tb_blog where blog_title = ?
2019-08-15 02:34:02,640 DEBUG {conn-10005, pstmt-20027} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息]
2019-08-15 02:34:02,640 DEBUG {conn-10005, pstmt-20027} Types : [VARCHAR]
2019-08-15 02:34:02,641 DEBUG {conn-10005, pstmt-20027} executed. 0.90371 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   ,
     
    blog_content
   
    from tb_blog where blog_title = ?
2019-08-15 02:34:02,641 DEBUG {conn-10005, pstmt-20027, rs-50055} open
2019-08-15 02:34:02,641 DEBUG {conn-10005, pstmt-20027, rs-50055} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 02:34:02,641 DEBUG {conn-10005, pstmt-20027, rs-50055} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 0, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 02:34:02,641 DEBUG {conn-10005, pstmt-20027, rs-50055} closed
2019-08-15 02:34:02,641 DEBUG {conn-10005, pstmt-20027} clearParameters. 
2019-08-15 02:34:02,642 DEBUG {conn-10005, pstmt-20014} closed
2019-08-15 02:34:02,642 DEBUG {conn-10005, pstmt-20028} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 02:34:02,642 DEBUG {conn-10005, pstmt-20028} Parameters : [admin]
2019-08-15 02:34:02,642 DEBUG {conn-10005, pstmt-20028} Types : [VARCHAR]
2019-08-15 02:34:02,643 DEBUG {conn-10005, pstmt-20028} executed. 0.51714 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 02:34:02,643 DEBUG {conn-10005, pstmt-20028, rs-50056} open
2019-08-15 02:34:02,643 DEBUG {conn-10005, pstmt-20028, rs-50056} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 02:34:02,643 DEBUG {conn-10005, pstmt-20028, rs-50056} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 02:34:02,643 DEBUG {conn-10005, pstmt-20028, rs-50056} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 02:34:02,643 DEBUG {conn-10005, pstmt-20028, rs-50056} closed
2019-08-15 02:34:02,643 DEBUG {conn-10005, pstmt-20028} clearParameters. 
2019-08-15 02:34:02,643 DEBUG {conn-10005, pstmt-20016} closed
2019-08-15 02:34:02,752 DEBUG {conn-10005, pstmt-20029} created. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 02:34:02,753 DEBUG {conn-10005, pstmt-20029} Parameters : [spring security]
2019-08-15 02:34:02,753 DEBUG {conn-10005, pstmt-20029} Types : [VARCHAR]
2019-08-15 02:34:02,753 DEBUG {conn-10005, pstmt-20029} executed. 0.511485 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 02:34:02,753 DEBUG {conn-10005, pstmt-20029, rs-50057} open
2019-08-15 02:34:02,753 DEBUG {conn-10005, pstmt-20029, rs-50057} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 02:34:02,753 DEBUG {conn-10005, pstmt-20029, rs-50057} closed
2019-08-15 02:34:02,754 DEBUG {conn-10005, pstmt-20029} clearParameters. 
2019-08-15 02:34:02,754 DEBUG {conn-10005, pstmt-20017} closed
2019-08-15 02:34:02,757 DEBUG {conn-10005, pstmt-20030} created. INSERT into tb_blog_tag(tag_name)
    VALUES
      
      (?)
2019-08-15 02:34:02,757 DEBUG {conn-10005, pstmt-20030} Parameters : [spring security]
2019-08-15 02:34:02,757 DEBUG {conn-10005, pstmt-20030} Types : [VARCHAR]
2019-08-15 02:34:02,758 DEBUG {conn-10005, pstmt-20030} executed. 0.866184 millis. INSERT into tb_blog_tag(tag_name)
    VALUES
      
      (?)
2019-08-15 02:34:02,758 DEBUG {conn-10005, pstmt-20030, rs-50058} open
2019-08-15 02:34:02,758 DEBUG {conn-10005, pstmt-20030, rs-50058} Header: [GENERATED_KEY]
2019-08-15 02:34:02,762 DEBUG {conn-10005, pstmt-20030, rs-50058} Result: [140]
2019-08-15 02:34:02,763 DEBUG {conn-10005, pstmt-20030, rs-50058} closed
2019-08-15 02:34:02,763 DEBUG {conn-10005, pstmt-20030} clearParameters. 
2019-08-15 02:34:02,763 DEBUG {conn-10005, pstmt-20012} closed
2019-08-15 02:34:02,763 DEBUG {conn-10005, pstmt-20031} created. update tb_blog_category
     SET category_name = ?,
      
      
        category_icon = ?,
      
      
        category_rank = ?,
      
      
        is_deleted = ?,
      
      
        create_time = ? 
    where category_id = ?
2019-08-15 02:34:02,764 DEBUG {conn-10005, pstmt-20031} Parameters : [日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0, 24]
2019-08-15 02:34:02,764 DEBUG {conn-10005, pstmt-20031} Types : [VARCHAR, VARCHAR, INTEGER, TINYINT, TIMESTAMP, INTEGER]
2019-08-15 02:34:02,769 DEBUG {conn-10005, pstmt-20031} executed. 5.575961 millis. update tb_blog_category
     SET category_name = ?,
      
      
        category_icon = ?,
      
      
        category_rank = ?,
      
      
        is_deleted = ?,
      
      
        create_time = ? 
    where category_id = ?
2019-08-15 02:34:02,769 DEBUG {conn-10005, pstmt-20031} clearParameters. 
2019-08-15 02:34:02,769 DEBUG {conn-10005, pstmt-20006} closed
2019-08-15 02:34:02,770 DEBUG {conn-10005, pstmt-20032} created. INSERT into tb_blog_tag_relation(blog_id,tag_id)
    VALUES
      
      (?,?)
2019-08-15 02:34:02,771 DEBUG {conn-10005, pstmt-20032} Parameters : [24, 140]
2019-08-15 02:34:02,771 DEBUG {conn-10005, pstmt-20032} Types : [BIGINT, INTEGER]
2019-08-15 02:34:02,771 DEBUG {conn-10005, pstmt-20032} executed. 0.743325 millis. INSERT into tb_blog_tag_relation(blog_id,tag_id)
    VALUES
      
      (?,?)
2019-08-15 02:34:02,771 DEBUG {conn-10005, pstmt-20032} clearParameters. 
2019-08-15 02:34:02,771 DEBUG {conn-10005, pstmt-20009} closed
2019-08-15 02:34:02,774 DEBUG {conn-10005} commited
2019-08-15 02:34:02,775 DEBUG {conn-10005} setAutoCommit true
2019-08-15 02:34:02,776 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:03,970 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:03,971 DEBUG {conn-10005, pstmt-20023} Parameters : [0, 10]
2019-08-15 02:34:03,971 DEBUG {conn-10005, pstmt-20023} Types : [INTEGER, INTEGER]
2019-08-15 02:34:03,971 DEBUG {conn-10005, pstmt-20023} executed. 0.815292 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 02:34:03,972 DEBUG {conn-10005, pstmt-20023, rs-50059} open
2019-08-15 02:34:03,972 DEBUG {conn-10005, pstmt-20023, rs-50059} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:34:03,972 DEBUG {conn-10005, pstmt-20023, rs-50059} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 0, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:34:03,972 DEBUG {conn-10005, pstmt-20023, rs-50059} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:34:03,972 DEBUG {conn-10005, pstmt-20023, rs-50059} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:34:03,973 DEBUG {conn-10005, pstmt-20023, rs-50059} closed
2019-08-15 02:34:03,973 DEBUG {conn-10005, pstmt-20023} clearParameters. 
2019-08-15 02:34:03,973 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:03,973 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:03,973 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 02:34:03,973 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 02:34:03,974 DEBUG {conn-10005, pstmt-20007} executed. 0.646682 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 02:34:03,974 DEBUG {conn-10005, pstmt-20007, rs-50060} open
2019-08-15 02:34:03,974 DEBUG {conn-10005, pstmt-20007, rs-50060} Header: [count(*)]
2019-08-15 02:34:03,974 DEBUG {conn-10005, pstmt-20007, rs-50060} Result: [3]
2019-08-15 02:34:03,975 DEBUG {conn-10005, pstmt-20007, rs-50060} closed
2019-08-15 02:34:03,975 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 02:34:03,975 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:13,546 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:13,546 DEBUG {conn-10005, pstmt-20018} Parameters : [0, 10]
2019-08-15 02:34:13,546 DEBUG {conn-10005, pstmt-20018} Types : [INTEGER, INTEGER]
2019-08-15 02:34:13,547 DEBUG {conn-10005, pstmt-20018} executed. 0.527421 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 02:34:13,547 DEBUG {conn-10005, pstmt-20018, rs-50061} open
2019-08-15 02:34:13,547 DEBUG {conn-10005, pstmt-20018, rs-50061} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 02:34:13,547 DEBUG {conn-10005, pstmt-20018, rs-50061} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 1, 0]
2019-08-15 02:34:13,547 DEBUG {conn-10005, pstmt-20018, rs-50061} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 1, 0]
2019-08-15 02:34:13,547 DEBUG {conn-10005, pstmt-20018, rs-50061} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 1, 0]
2019-08-15 02:34:13,547 DEBUG {conn-10005, pstmt-20018, rs-50061} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 02:34:13,548 DEBUG {conn-10005, pstmt-20018, rs-50061} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 02:34:13,548 DEBUG {conn-10005, pstmt-20018, rs-50061} closed
2019-08-15 02:34:13,548 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 02:34:13,548 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:13,548 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:13,549 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 02:34:13,549 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 02:34:13,549 DEBUG {conn-10005, pstmt-20011} executed. 0.662104 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 02:34:13,549 DEBUG {conn-10005, pstmt-20011, rs-50062} open
2019-08-15 02:34:13,549 DEBUG {conn-10005, pstmt-20011, rs-50062} Header: [count(*)]
2019-08-15 02:34:13,549 DEBUG {conn-10005, pstmt-20011, rs-50062} Result: [5]
2019-08-15 02:34:13,550 DEBUG {conn-10005, pstmt-20011, rs-50062} closed
2019-08-15 02:34:13,550 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 02:34:13,550 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:14,555 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:14,555 DEBUG {conn-10005, pstmt-20033} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 02:34:14,556 DEBUG {conn-10005, pstmt-20033} Parameters : [0, 10]
2019-08-15 02:34:14,556 DEBUG {conn-10005, pstmt-20033} Types : [INTEGER, INTEGER]
2019-08-15 02:34:14,556 DEBUG {conn-10005, pstmt-20033} executed. 0.468304 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
     
      limit ?,?
2019-08-15 02:34:14,556 DEBUG {conn-10005, pstmt-20033, rs-50063} open
2019-08-15 02:34:14,556 DEBUG {conn-10005, pstmt-20033, rs-50063} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 02:34:14,556 DEBUG {conn-10005, pstmt-20033, rs-50063} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 02:34:14,556 DEBUG {conn-10005, pstmt-20033, rs-50063} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 02:34:14,556 DEBUG {conn-10005, pstmt-20033, rs-50063} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 02:34:14,557 DEBUG {conn-10005, pstmt-20033, rs-50063} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 02:34:14,557 DEBUG {conn-10005, pstmt-20033, rs-50063} closed
2019-08-15 02:34:14,557 DEBUG {conn-10005, pstmt-20033} clearParameters. 
2019-08-15 02:34:14,557 DEBUG {conn-10005, pstmt-20010} closed
2019-08-15 02:34:14,557 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:14,557 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:14,557 DEBUG {conn-10005, pstmt-20034} created. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 02:34:14,557 DEBUG {conn-10005, pstmt-20034} Parameters : []
2019-08-15 02:34:14,557 DEBUG {conn-10005, pstmt-20034} Types : []
2019-08-15 02:34:14,560 DEBUG {conn-10005, pstmt-20034} executed. 0.373204 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 02:34:14,560 DEBUG {conn-10005, pstmt-20034, rs-50064} open
2019-08-15 02:34:14,560 DEBUG {conn-10005, pstmt-20034, rs-50064} Header: [count(*)]
2019-08-15 02:34:14,560 DEBUG {conn-10005, pstmt-20034, rs-50064} Result: [4]
2019-08-15 02:34:14,561 DEBUG {conn-10005, pstmt-20034, rs-50064} closed
2019-08-15 02:34:14,561 DEBUG {conn-10005, pstmt-20034} clearParameters. 
2019-08-15 02:34:14,561 DEBUG {conn-10005, pstmt-20019} closed
2019-08-15 02:34:14,561 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:15,260 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:15,260 DEBUG {conn-10005, pstmt-20035} created. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where is_deleted=0
    order by tag_id desc
     
      limit ?,?
2019-08-15 02:34:15,260 DEBUG {conn-10005, pstmt-20035} Parameters : [0, 10]
2019-08-15 02:34:15,260 DEBUG {conn-10005, pstmt-20035} Types : [INTEGER, INTEGER]
2019-08-15 02:34:15,261 DEBUG {conn-10005, pstmt-20035} executed. 0.625606 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where is_deleted=0
    order by tag_id desc
     
      limit ?,?
2019-08-15 02:34:15,261 DEBUG {conn-10005, pstmt-20035, rs-50065} open
2019-08-15 02:34:15,261 DEBUG {conn-10005, pstmt-20035, rs-50065} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 02:34:15,261 DEBUG {conn-10005, pstmt-20035, rs-50065} Result: [140, spring security, 0, 2019-08-15 10:34:02.0]
2019-08-15 02:34:15,261 DEBUG {conn-10005, pstmt-20035, rs-50065} Result: [139, jqGrid, 0, 2019-08-14 19:46:03.0]
2019-08-15 02:34:15,262 DEBUG {conn-10005, pstmt-20035, rs-50065} Result: [138, test, 0, 2019-08-14 01:59:43.0]
2019-08-15 02:34:15,262 DEBUG {conn-10005, pstmt-20035, rs-50065} Result: [133, spring-boot企业级开发, 0, 2019-05-13 17:58:54.0]
2019-08-15 02:34:15,262 DEBUG {conn-10005, pstmt-20035, rs-50065} Result: [132, 实战教程, 0, 2019-05-13 17:58:54.0]
2019-08-15 02:34:15,262 DEBUG {conn-10005, pstmt-20035, rs-50065} Result: [131, 入门教程, 0, 2019-05-13 17:58:54.0]
2019-08-15 02:34:15,262 DEBUG {conn-10005, pstmt-20035, rs-50065} Result: [130, SpringBoot, 0, 2019-05-13 17:58:54.0]
2019-08-15 02:34:15,263 DEBUG {conn-10005, pstmt-20035, rs-50065} Result: [128, AdminLte3, 0, 2019-04-24 23:46:16.0]
2019-08-15 02:34:15,263 DEBUG {conn-10005, pstmt-20035, rs-50065} Result: [127, 目录, 0, 2019-04-24 23:41:39.0]
2019-08-15 02:34:15,263 DEBUG {conn-10005, pstmt-20035, rs-50065} Result: [69, easyUI, 0, 2018-11-12 18:55:14.0]
2019-08-15 02:34:15,264 DEBUG {conn-10005, pstmt-20035, rs-50065} closed
2019-08-15 02:34:15,264 DEBUG {conn-10005, pstmt-20035} clearParameters. 
2019-08-15 02:34:15,264 DEBUG {conn-10005, pstmt-20020} closed
2019-08-15 02:34:15,264 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:15,264 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:15,264 DEBUG {conn-10005, pstmt-20036} created. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 02:34:15,265 DEBUG {conn-10005, pstmt-20036} Parameters : []
2019-08-15 02:34:15,265 DEBUG {conn-10005, pstmt-20036} Types : []
2019-08-15 02:34:15,265 DEBUG {conn-10005, pstmt-20036} executed. 0.776224 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 02:34:15,266 DEBUG {conn-10005, pstmt-20036, rs-50066} open
2019-08-15 02:34:15,266 DEBUG {conn-10005, pstmt-20036, rs-50066} Header: [count(*)]
2019-08-15 02:34:15,266 DEBUG {conn-10005, pstmt-20036, rs-50066} Result: [15]
2019-08-15 02:34:15,266 DEBUG {conn-10005, pstmt-20036, rs-50066} closed
2019-08-15 02:34:15,266 DEBUG {conn-10005, pstmt-20036} clearParameters. 
2019-08-15 02:34:15,266 DEBUG {conn-10005, pstmt-20008} closed
2019-08-15 02:34:15,266 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:54,911 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:54,911 DEBUG {conn-10005, pstmt-20037} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:34:54,911 DEBUG {conn-10005, pstmt-20037} Parameters : [9]
2019-08-15 02:34:54,911 DEBUG {conn-10005, pstmt-20037} Types : [INTEGER]
2019-08-15 02:34:54,912 DEBUG {conn-10005, pstmt-20037} executed. 0.644626 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:34:54,912 DEBUG {conn-10005, pstmt-20037, rs-50067} open
2019-08-15 02:34:54,912 DEBUG {conn-10005, pstmt-20037, rs-50067} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:34:54,912 DEBUG {conn-10005, pstmt-20037, rs-50067} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 0, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:34:54,912 DEBUG {conn-10005, pstmt-20037, rs-50067} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:34:54,915 DEBUG {conn-10005, pstmt-20037, rs-50067} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:34:54,915 DEBUG {conn-10005, pstmt-20037, rs-50067} closed
2019-08-15 02:34:54,915 DEBUG {conn-10005, pstmt-20037} clearParameters. 
2019-08-15 02:34:54,915 DEBUG {conn-10005, pstmt-20003} closed
2019-08-15 02:34:54,915 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:54,915 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:54,915 DEBUG {conn-10005, pstmt-20038} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:34:54,916 DEBUG {conn-10005, pstmt-20038} Parameters : [9]
2019-08-15 02:34:54,916 DEBUG {conn-10005, pstmt-20038} Types : [INTEGER]
2019-08-15 02:34:54,916 DEBUG {conn-10005, pstmt-20038} executed. 0.529992 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:34:54,916 DEBUG {conn-10005, pstmt-20038, rs-50068} open
2019-08-15 02:34:54,916 DEBUG {conn-10005, pstmt-20038, rs-50068} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:34:54,916 DEBUG {conn-10005, pstmt-20038, rs-50068} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:34:54,916 DEBUG {conn-10005, pstmt-20038, rs-50068} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:34:54,917 DEBUG {conn-10005, pstmt-20038, rs-50068} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 0, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:34:54,917 DEBUG {conn-10005, pstmt-20038, rs-50068} closed
2019-08-15 02:34:54,917 DEBUG {conn-10005, pstmt-20038} clearParameters. 
2019-08-15 02:34:54,917 DEBUG {conn-10005, pstmt-20021} closed
2019-08-15 02:34:54,917 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:54,917 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:54,917 DEBUG {conn-10005, pstmt-20039} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:34:54,918 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:34:54,918 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:34:54,918 DEBUG {conn-10005, pstmt-20039} executed. 0.704256 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:34:54,918 DEBUG {conn-10005, pstmt-20039, rs-50069} open
2019-08-15 02:34:54,918 DEBUG {conn-10005, pstmt-20039, rs-50069} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:34:54,918 DEBUG {conn-10005, pstmt-20039, rs-50069} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:34:54,919 DEBUG {conn-10005, pstmt-20039, rs-50069} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:34:54,919 DEBUG {conn-10005, pstmt-20039, rs-50069} Result: [139, 1, jqGrid]
2019-08-15 02:34:54,919 DEBUG {conn-10005, pstmt-20039, rs-50069} Result: [140, 1, spring security]
2019-08-15 02:34:54,919 DEBUG {conn-10005, pstmt-20039, rs-50069} closed
2019-08-15 02:34:54,919 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:34:54,919 DEBUG {conn-10005, pstmt-20022} closed
2019-08-15 02:34:54,919 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:54,919 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:54,919 DEBUG {conn-10005, pstmt-20040} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:34:54,919 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:34:54,919 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040} executed. 0.399935 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} open
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:34:54,920 DEBUG {conn-10005, pstmt-20040, rs-50070} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:34:54,921 DEBUG {conn-10005, pstmt-20040, rs-50070} closed
2019-08-15 02:34:54,921 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:34:54,921 DEBUG {conn-10005, pstmt-20024} closed
2019-08-15 02:34:54,921 DEBUG {conn-10005} pool-recycle
2019-08-15 02:34:54,943 DEBUG {conn-10005} pool-connect
2019-08-15 02:34:54,943 DEBUG {conn-10005, pstmt-20041} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:34:54,944 DEBUG {conn-10005, pstmt-20041} Parameters : [admin]
2019-08-15 02:34:54,944 DEBUG {conn-10005, pstmt-20041} Types : [VARCHAR]
2019-08-15 02:34:54,944 DEBUG {conn-10005, pstmt-20041} executed. 0.564433 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:34:54,944 DEBUG {conn-10005, pstmt-20041, rs-50071} open
2019-08-15 02:34:54,944 DEBUG {conn-10005, pstmt-20041, rs-50071} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 02:34:54,944 DEBUG {conn-10005, pstmt-20041, rs-50071} closed
2019-08-15 02:34:54,944 DEBUG {conn-10005, pstmt-20041} clearParameters. 
2019-08-15 02:34:54,944 DEBUG {conn-10005, pstmt-20025} closed
2019-08-15 02:34:54,945 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:03,361 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:03,362 DEBUG {conn-10005, pstmt-20042} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 02:35:03,362 DEBUG {conn-10005, pstmt-20042} Parameters : [24]
2019-08-15 02:35:03,362 DEBUG {conn-10005, pstmt-20042} Types : [BIGINT]
2019-08-15 02:35:03,362 DEBUG {conn-10005, pstmt-20042} executed. 0.478071 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 02:35:03,362 DEBUG {conn-10005, pstmt-20042, rs-50072} open
2019-08-15 02:35:03,362 DEBUG {conn-10005, pstmt-20042, rs-50072} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 02:35:03,363 DEBUG {conn-10005, pstmt-20042, rs-50072} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 0, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 02:35:03,363 DEBUG {conn-10005, pstmt-20042, rs-50072} closed
2019-08-15 02:35:03,363 DEBUG {conn-10005, pstmt-20042} clearParameters. 
2019-08-15 02:35:03,363 DEBUG {conn-10005, pstmt-20026} closed
2019-08-15 02:35:03,363 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:03,363 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:03,364 DEBUG {conn-10005, pstmt-20043} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 02:35:03,364 DEBUG {conn-10005, pstmt-20043} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 02:35:03,364 DEBUG {conn-10005, pstmt-20043} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 02:35:03,372 DEBUG {conn-10005, pstmt-20043} executed. 8.165773 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 02:35:03,372 DEBUG {conn-10005, pstmt-20043} clearParameters. 
2019-08-15 02:35:03,372 DEBUG {conn-10005, pstmt-20027} closed
2019-08-15 02:35:03,372 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:03,405 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:03,406 DEBUG {conn-10005, pstmt-20044} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 02:35:03,406 DEBUG {conn-10005, pstmt-20044} Parameters : [24]
2019-08-15 02:35:03,406 DEBUG {conn-10005, pstmt-20044} Types : [INTEGER]
2019-08-15 02:35:03,406 DEBUG {conn-10005, pstmt-20044} executed. 0.416385 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 02:35:03,406 DEBUG {conn-10005, pstmt-20044, rs-50073} open
2019-08-15 02:35:03,406 DEBUG {conn-10005, pstmt-20044, rs-50073} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 02:35:03,406 DEBUG {conn-10005, pstmt-20044, rs-50073} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 02:35:03,406 DEBUG {conn-10005, pstmt-20044, rs-50073} closed
2019-08-15 02:35:03,407 DEBUG {conn-10005, pstmt-20044} clearParameters. 
2019-08-15 02:35:03,407 DEBUG {conn-10005, pstmt-20028} closed
2019-08-15 02:35:03,407 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:03,407 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:03,408 DEBUG {conn-10005, pstmt-20045} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 02:35:03,408 DEBUG {conn-10005, pstmt-20045} Parameters : [24, 1]
2019-08-15 02:35:03,408 DEBUG {conn-10005, pstmt-20045} Types : [BIGINT, INTEGER]
2019-08-15 02:35:03,408 DEBUG {conn-10005, pstmt-20045} executed. 0.420498 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 02:35:03,408 DEBUG {conn-10005, pstmt-20045, rs-50074} open
2019-08-15 02:35:03,408 DEBUG {conn-10005, pstmt-20045, rs-50074} Header: [count(*)]
2019-08-15 02:35:03,409 DEBUG {conn-10005, pstmt-20045, rs-50074} Result: [0]
2019-08-15 02:35:03,409 DEBUG {conn-10005, pstmt-20045, rs-50074} closed
2019-08-15 02:35:03,409 DEBUG {conn-10005, pstmt-20045} clearParameters. 
2019-08-15 02:35:03,409 DEBUG {conn-10005, pstmt-20029} closed
2019-08-15 02:35:03,409 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:03,409 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:03,410 DEBUG {conn-10005, pstmt-20046} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 02:35:03,410 DEBUG {conn-10005, pstmt-20046} Parameters : [24, 1, 0, 8]
2019-08-15 02:35:03,410 DEBUG {conn-10005, pstmt-20046} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 02:35:03,410 DEBUG {conn-10005, pstmt-20046} executed. 0.45751 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 02:35:03,410 DEBUG {conn-10005, pstmt-20046, rs-50075} open
2019-08-15 02:35:03,410 DEBUG {conn-10005, pstmt-20046, rs-50075} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 02:35:03,411 DEBUG {conn-10005, pstmt-20046, rs-50075} closed
2019-08-15 02:35:03,411 DEBUG {conn-10005, pstmt-20046} clearParameters. 
2019-08-15 02:35:03,411 DEBUG {conn-10005, pstmt-20030} closed
2019-08-15 02:35:03,411 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:03,411 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:03,411 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:35:03,411 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:35:03,411 DEBUG {conn-10005, pstmt-20040} executed. 0.352642 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:35:03,411 DEBUG {conn-10005, pstmt-20040, rs-50076} open
2019-08-15 02:35:03,411 DEBUG {conn-10005, pstmt-20040, rs-50076} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:35:03,411 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040, rs-50076} closed
2019-08-15 02:35:03,412 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:35:03,412 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:25,193 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:25,194 DEBUG {conn-10005, pstmt-20037} Parameters : [9]
2019-08-15 02:35:25,194 DEBUG {conn-10005, pstmt-20037} Types : [INTEGER]
2019-08-15 02:35:25,194 DEBUG {conn-10005, pstmt-20037} executed. 0.568545 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:35:25,194 DEBUG {conn-10005, pstmt-20037, rs-50077} open
2019-08-15 02:35:25,194 DEBUG {conn-10005, pstmt-20037, rs-50077} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:25,195 DEBUG {conn-10005, pstmt-20037, rs-50077} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:25,195 DEBUG {conn-10005, pstmt-20037, rs-50077} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:25,195 DEBUG {conn-10005, pstmt-20037, rs-50077} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:25,195 DEBUG {conn-10005, pstmt-20037, rs-50077} closed
2019-08-15 02:35:25,195 DEBUG {conn-10005, pstmt-20037} clearParameters. 
2019-08-15 02:35:25,195 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:25,197 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:25,197 DEBUG {conn-10005, pstmt-20038} Parameters : [9]
2019-08-15 02:35:25,197 DEBUG {conn-10005, pstmt-20038} Types : [INTEGER]
2019-08-15 02:35:25,198 DEBUG {conn-10005, pstmt-20038} executed. 0.64514 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:35:25,198 DEBUG {conn-10005, pstmt-20038, rs-50078} open
2019-08-15 02:35:25,198 DEBUG {conn-10005, pstmt-20038, rs-50078} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:25,198 DEBUG {conn-10005, pstmt-20038, rs-50078} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:25,199 DEBUG {conn-10005, pstmt-20038, rs-50078} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:25,199 DEBUG {conn-10005, pstmt-20038, rs-50078} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:25,199 DEBUG {conn-10005, pstmt-20038, rs-50078} closed
2019-08-15 02:35:25,199 DEBUG {conn-10005, pstmt-20038} clearParameters. 
2019-08-15 02:35:25,199 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:25,200 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:25,200 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:35:25,200 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:35:25,200 DEBUG {conn-10005, pstmt-20039} executed. 0.708883 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:35:25,200 DEBUG {conn-10005, pstmt-20039, rs-50079} open
2019-08-15 02:35:25,201 DEBUG {conn-10005, pstmt-20039, rs-50079} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:35:25,201 DEBUG {conn-10005, pstmt-20039, rs-50079} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:35:25,201 DEBUG {conn-10005, pstmt-20039, rs-50079} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:35:25,201 DEBUG {conn-10005, pstmt-20039, rs-50079} Result: [139, 1, jqGrid]
2019-08-15 02:35:25,201 DEBUG {conn-10005, pstmt-20039, rs-50079} Result: [140, 1, spring security]
2019-08-15 02:35:25,201 DEBUG {conn-10005, pstmt-20039, rs-50079} closed
2019-08-15 02:35:25,201 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:35:25,201 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:25,201 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:25,201 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:35:25,201 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:35:25,202 DEBUG {conn-10005, pstmt-20040} executed. 0.468819 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:35:25,202 DEBUG {conn-10005, pstmt-20040, rs-50080} open
2019-08-15 02:35:25,202 DEBUG {conn-10005, pstmt-20040, rs-50080} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:35:25,202 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:25,202 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:25,202 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:25,202 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:25,203 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:25,203 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:25,203 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:25,203 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:25,203 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:25,203 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:25,204 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:25,204 DEBUG {conn-10005, pstmt-20040, rs-50080} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:25,204 DEBUG {conn-10005, pstmt-20040, rs-50080} closed
2019-08-15 02:35:25,204 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:35:25,204 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:29,305 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:29,305 DEBUG {conn-10005, pstmt-20037} Parameters : [9]
2019-08-15 02:35:29,305 DEBUG {conn-10005, pstmt-20037} Types : [INTEGER]
2019-08-15 02:35:29,306 DEBUG {conn-10005, pstmt-20037} executed. 0.67444 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:35:29,306 DEBUG {conn-10005, pstmt-20037, rs-50081} open
2019-08-15 02:35:29,306 DEBUG {conn-10005, pstmt-20037, rs-50081} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:29,306 DEBUG {conn-10005, pstmt-20037, rs-50081} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:29,306 DEBUG {conn-10005, pstmt-20037, rs-50081} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:29,306 DEBUG {conn-10005, pstmt-20037, rs-50081} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:29,307 DEBUG {conn-10005, pstmt-20037, rs-50081} closed
2019-08-15 02:35:29,307 DEBUG {conn-10005, pstmt-20037} clearParameters. 
2019-08-15 02:35:29,307 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:29,307 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:29,307 DEBUG {conn-10005, pstmt-20038} Parameters : [9]
2019-08-15 02:35:29,307 DEBUG {conn-10005, pstmt-20038} Types : [INTEGER]
2019-08-15 02:35:29,307 DEBUG {conn-10005, pstmt-20038} executed. 0.487839 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:35:29,308 DEBUG {conn-10005, pstmt-20038, rs-50082} open
2019-08-15 02:35:29,308 DEBUG {conn-10005, pstmt-20038, rs-50082} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:29,308 DEBUG {conn-10005, pstmt-20038, rs-50082} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:29,308 DEBUG {conn-10005, pstmt-20038, rs-50082} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:29,308 DEBUG {conn-10005, pstmt-20038, rs-50082} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:29,308 DEBUG {conn-10005, pstmt-20038, rs-50082} closed
2019-08-15 02:35:29,308 DEBUG {conn-10005, pstmt-20038} clearParameters. 
2019-08-15 02:35:29,308 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:29,308 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:29,308 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:35:29,308 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:35:29,309 DEBUG {conn-10005, pstmt-20039} executed. 0.576256 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:35:29,309 DEBUG {conn-10005, pstmt-20039, rs-50083} open
2019-08-15 02:35:29,309 DEBUG {conn-10005, pstmt-20039, rs-50083} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:35:29,309 DEBUG {conn-10005, pstmt-20039, rs-50083} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:35:29,309 DEBUG {conn-10005, pstmt-20039, rs-50083} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:35:29,310 DEBUG {conn-10005, pstmt-20039, rs-50083} Result: [139, 1, jqGrid]
2019-08-15 02:35:29,310 DEBUG {conn-10005, pstmt-20039, rs-50083} Result: [140, 1, spring security]
2019-08-15 02:35:29,310 DEBUG {conn-10005, pstmt-20039, rs-50083} closed
2019-08-15 02:35:29,310 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:35:29,310 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:29,310 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:29,310 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:35:29,310 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:35:29,310 DEBUG {conn-10005, pstmt-20040} executed. 0.378859 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:35:29,310 DEBUG {conn-10005, pstmt-20040, rs-50084} open
2019-08-15 02:35:29,310 DEBUG {conn-10005, pstmt-20040, rs-50084} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040, rs-50084} closed
2019-08-15 02:35:29,311 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:35:29,311 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:29,324 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:29,325 DEBUG {conn-10005, pstmt-20041} Parameters : [admin]
2019-08-15 02:35:29,325 DEBUG {conn-10005, pstmt-20041} Types : [VARCHAR]
2019-08-15 02:35:29,325 DEBUG {conn-10005, pstmt-20041} executed. 0.777766 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:35:29,325 DEBUG {conn-10005, pstmt-20041, rs-50085} open
2019-08-15 02:35:29,325 DEBUG {conn-10005, pstmt-20041, rs-50085} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 02:35:29,326 DEBUG {conn-10005, pstmt-20041, rs-50085} closed
2019-08-15 02:35:29,326 DEBUG {conn-10005, pstmt-20041} clearParameters. 
2019-08-15 02:35:29,326 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:34,958 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:34,959 DEBUG {conn-10005, pstmt-20042} Parameters : [23]
2019-08-15 02:35:34,959 DEBUG {conn-10005, pstmt-20042} Types : [BIGINT]
2019-08-15 02:35:34,959 DEBUG {conn-10005, pstmt-20042} executed. 0.506345 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 02:35:34,959 DEBUG {conn-10005, pstmt-20042, rs-50086} open
2019-08-15 02:35:34,959 DEBUG {conn-10005, pstmt-20042, rs-50086} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 02:35:34,959 DEBUG {conn-10005, pstmt-20042, rs-50086} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 17, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 02:35:34,960 DEBUG {conn-10005, pstmt-20042, rs-50086} closed
2019-08-15 02:35:34,960 DEBUG {conn-10005, pstmt-20042} clearParameters. 
2019-08-15 02:35:34,960 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:34,960 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:34,960 DEBUG {conn-10005, pstmt-20043} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 18, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 02:35:34,960 DEBUG {conn-10005, pstmt-20043} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 02:35:34,968 DEBUG {conn-10005, pstmt-20043} executed. 7.704151 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 02:35:34,968 DEBUG {conn-10005, pstmt-20043} clearParameters. 
2019-08-15 02:35:34,968 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:34,969 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:34,970 DEBUG {conn-10005, pstmt-20044} Parameters : [25]
2019-08-15 02:35:34,970 DEBUG {conn-10005, pstmt-20044} Types : [INTEGER]
2019-08-15 02:35:34,970 DEBUG {conn-10005, pstmt-20044} executed. 0.534618 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 02:35:34,970 DEBUG {conn-10005, pstmt-20044, rs-50087} open
2019-08-15 02:35:34,970 DEBUG {conn-10005, pstmt-20044, rs-50087} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 02:35:34,970 DEBUG {conn-10005, pstmt-20044, rs-50087} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 02:35:34,971 DEBUG {conn-10005, pstmt-20044, rs-50087} closed
2019-08-15 02:35:34,971 DEBUG {conn-10005, pstmt-20044} clearParameters. 
2019-08-15 02:35:34,971 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:34,971 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:34,971 DEBUG {conn-10005, pstmt-20045} Parameters : [23, 1]
2019-08-15 02:35:34,971 DEBUG {conn-10005, pstmt-20045} Types : [BIGINT, INTEGER]
2019-08-15 02:35:34,972 DEBUG {conn-10005, pstmt-20045} executed. 0.46008 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 02:35:34,972 DEBUG {conn-10005, pstmt-20045, rs-50088} open
2019-08-15 02:35:34,972 DEBUG {conn-10005, pstmt-20045, rs-50088} Header: [count(*)]
2019-08-15 02:35:34,972 DEBUG {conn-10005, pstmt-20045, rs-50088} Result: [1]
2019-08-15 02:35:34,972 DEBUG {conn-10005, pstmt-20045, rs-50088} closed
2019-08-15 02:35:34,972 DEBUG {conn-10005, pstmt-20045} clearParameters. 
2019-08-15 02:35:34,972 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:34,972 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:34,972 DEBUG {conn-10005, pstmt-20046} Parameters : [23, 1, 0, 8]
2019-08-15 02:35:34,972 DEBUG {conn-10005, pstmt-20046} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 02:35:34,973 DEBUG {conn-10005, pstmt-20046} executed. 0.435405 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 02:35:34,973 DEBUG {conn-10005, pstmt-20046, rs-50089} open
2019-08-15 02:35:34,973 DEBUG {conn-10005, pstmt-20046, rs-50089} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 02:35:34,973 DEBUG {conn-10005, pstmt-20046, rs-50089} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 1, 0]
2019-08-15 02:35:34,975 DEBUG {conn-10005, pstmt-20046, rs-50089} closed
2019-08-15 02:35:34,975 DEBUG {conn-10005, pstmt-20046} clearParameters. 
2019-08-15 02:35:34,975 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:34,975 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:34,975 DEBUG {conn-10005, pstmt-20045} Parameters : [23, 1]
2019-08-15 02:35:34,975 DEBUG {conn-10005, pstmt-20045} Types : [BIGINT, INTEGER]
2019-08-15 02:35:34,975 DEBUG {conn-10005, pstmt-20045} executed. 0.437461 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 02:35:34,976 DEBUG {conn-10005, pstmt-20045, rs-50090} open
2019-08-15 02:35:34,976 DEBUG {conn-10005, pstmt-20045, rs-50090} Header: [count(*)]
2019-08-15 02:35:34,976 DEBUG {conn-10005, pstmt-20045, rs-50090} Result: [1]
2019-08-15 02:35:34,976 DEBUG {conn-10005, pstmt-20045, rs-50090} closed
2019-08-15 02:35:34,976 DEBUG {conn-10005, pstmt-20045} clearParameters. 
2019-08-15 02:35:34,976 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:34,976 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:34,976 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:35:34,976 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040} executed. 0.393766 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} open
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:34,977 DEBUG {conn-10005, pstmt-20040, rs-50091} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:34,978 DEBUG {conn-10005, pstmt-20040, rs-50091} closed
2019-08-15 02:35:34,978 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:35:34,978 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:36,867 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:36,868 DEBUG {conn-10005, pstmt-20047} created. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 02:35:36,868 DEBUG {conn-10005, pstmt-20047} Parameters : [jqGrid]
2019-08-15 02:35:36,868 DEBUG {conn-10005, pstmt-20047} Types : [VARCHAR]
2019-08-15 02:35:36,868 DEBUG {conn-10005, pstmt-20047} executed. 0.393767 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 02:35:36,868 DEBUG {conn-10005, pstmt-20047, rs-50092} open
2019-08-15 02:35:36,868 DEBUG {conn-10005, pstmt-20047, rs-50092} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 02:35:36,868 DEBUG {conn-10005, pstmt-20047, rs-50092} Result: [139, jqGrid, 0, 2019-08-14 19:46:03.0]
2019-08-15 02:35:36,869 DEBUG {conn-10005, pstmt-20047, rs-50092} closed
2019-08-15 02:35:36,869 DEBUG {conn-10005, pstmt-20047} clearParameters. 
2019-08-15 02:35:36,869 DEBUG {conn-10005, pstmt-20031} closed
2019-08-15 02:35:36,869 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:36,869 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:36,870 DEBUG {conn-10005, pstmt-20048} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
    AND blog_status =1 AND is_deleted=0
    order by blog_id desc
     
      limit ?,?
2019-08-15 02:35:36,870 DEBUG {conn-10005, pstmt-20048} Parameters : [139, 0, 9]
2019-08-15 02:35:36,870 DEBUG {conn-10005, pstmt-20048} Types : [INTEGER, INTEGER, INTEGER]
2019-08-15 02:35:36,871 DEBUG {conn-10005, pstmt-20048} executed. 0.578826 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
    AND blog_status =1 AND is_deleted=0
    order by blog_id desc
     
      limit ?,?
2019-08-15 02:35:36,871 DEBUG {conn-10005, pstmt-20048, rs-50093} open
2019-08-15 02:35:36,871 DEBUG {conn-10005, pstmt-20048, rs-50093} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:36,871 DEBUG {conn-10005, pstmt-20048, rs-50093} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 18, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:36,871 DEBUG {conn-10005, pstmt-20048, rs-50093} closed
2019-08-15 02:35:36,871 DEBUG {conn-10005, pstmt-20048} clearParameters. 
2019-08-15 02:35:36,871 DEBUG {conn-10005, pstmt-20032} closed
2019-08-15 02:35:36,872 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:36,872 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:36,873 DEBUG {conn-10005, pstmt-20049} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     ) 
    AND is_deleted = 0
2019-08-15 02:35:36,873 DEBUG {conn-10005, pstmt-20049} Parameters : [25]
2019-08-15 02:35:36,873 DEBUG {conn-10005, pstmt-20049} Types : [INTEGER]
2019-08-15 02:35:36,873 DEBUG {conn-10005, pstmt-20049} executed. 0.488866 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id IN
     (  ?
     ) 
    AND is_deleted = 0
2019-08-15 02:35:36,873 DEBUG {conn-10005, pstmt-20049, rs-50094} open
2019-08-15 02:35:36,873 DEBUG {conn-10005, pstmt-20049, rs-50094} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 02:35:36,873 DEBUG {conn-10005, pstmt-20049, rs-50094} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 02:35:36,874 DEBUG {conn-10005, pstmt-20049, rs-50094} closed
2019-08-15 02:35:36,875 DEBUG {conn-10005, pstmt-20049} clearParameters. 
2019-08-15 02:35:36,875 DEBUG {conn-10005, pstmt-20023} closed
2019-08-15 02:35:36,875 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:36,876 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:36,877 DEBUG {conn-10005, pstmt-20050} created. select count(*)
        from tb_blog
        where  blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
        AND blog_status =1 AND is_deleted=0
2019-08-15 02:35:36,877 DEBUG {conn-10005, pstmt-20050} Parameters : [139]
2019-08-15 02:35:36,877 DEBUG {conn-10005, pstmt-20050} Types : [INTEGER]
2019-08-15 02:35:36,877 DEBUG {conn-10005, pstmt-20050} executed. 0.501204 millis. select count(*)
        from tb_blog
        where  blog_id IN (SELECT blog_id FROM tb_blog_tag_relation WHERE tag_id = ?)
        AND blog_status =1 AND is_deleted=0
2019-08-15 02:35:36,877 DEBUG {conn-10005, pstmt-20050, rs-50095} open
2019-08-15 02:35:36,878 DEBUG {conn-10005, pstmt-20050, rs-50095} Header: [count(*)]
2019-08-15 02:35:36,878 DEBUG {conn-10005, pstmt-20050, rs-50095} Result: [1]
2019-08-15 02:35:36,878 DEBUG {conn-10005, pstmt-20050, rs-50095} closed
2019-08-15 02:35:36,878 DEBUG {conn-10005, pstmt-20050} clearParameters. 
2019-08-15 02:35:36,878 DEBUG {conn-10005, pstmt-20007} closed
2019-08-15 02:35:36,878 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:36,878 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:36,878 DEBUG {conn-10005, pstmt-20037} Parameters : [9]
2019-08-15 02:35:36,878 DEBUG {conn-10005, pstmt-20037} Types : [INTEGER]
2019-08-15 02:35:36,878 DEBUG {conn-10005, pstmt-20037} executed. 0.362409 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:35:36,878 DEBUG {conn-10005, pstmt-20037, rs-50096} open
2019-08-15 02:35:36,879 DEBUG {conn-10005, pstmt-20037, rs-50096} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:36,879 DEBUG {conn-10005, pstmt-20037, rs-50096} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:36,879 DEBUG {conn-10005, pstmt-20037, rs-50096} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 18, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:36,879 DEBUG {conn-10005, pstmt-20037, rs-50096} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:36,879 DEBUG {conn-10005, pstmt-20037, rs-50096} closed
2019-08-15 02:35:36,879 DEBUG {conn-10005, pstmt-20037} clearParameters. 
2019-08-15 02:35:36,879 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:36,879 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:36,879 DEBUG {conn-10005, pstmt-20038} Parameters : [9]
2019-08-15 02:35:36,879 DEBUG {conn-10005, pstmt-20038} Types : [INTEGER]
2019-08-15 02:35:36,880 DEBUG {conn-10005, pstmt-20038} executed. 0.491951 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:35:36,880 DEBUG {conn-10005, pstmt-20038, rs-50097} open
2019-08-15 02:35:36,880 DEBUG {conn-10005, pstmt-20038, rs-50097} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:36,880 DEBUG {conn-10005, pstmt-20038, rs-50097} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:36,880 DEBUG {conn-10005, pstmt-20038, rs-50097} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 18, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:36,881 DEBUG {conn-10005, pstmt-20038, rs-50097} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:36,881 DEBUG {conn-10005, pstmt-20038, rs-50097} closed
2019-08-15 02:35:36,881 DEBUG {conn-10005, pstmt-20038} clearParameters. 
2019-08-15 02:35:36,881 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:36,881 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:36,881 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:35:36,881 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:35:36,882 DEBUG {conn-10005, pstmt-20039} executed. 0.600417 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:35:36,882 DEBUG {conn-10005, pstmt-20039, rs-50098} open
2019-08-15 02:35:36,882 DEBUG {conn-10005, pstmt-20039, rs-50098} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:35:36,882 DEBUG {conn-10005, pstmt-20039, rs-50098} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:35:36,882 DEBUG {conn-10005, pstmt-20039, rs-50098} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:35:36,882 DEBUG {conn-10005, pstmt-20039, rs-50098} Result: [139, 1, jqGrid]
2019-08-15 02:35:36,882 DEBUG {conn-10005, pstmt-20039, rs-50098} Result: [140, 1, spring security]
2019-08-15 02:35:36,883 DEBUG {conn-10005, pstmt-20039, rs-50098} closed
2019-08-15 02:35:36,883 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:35:36,883 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:36,883 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:36,883 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:35:36,883 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:35:36,883 DEBUG {conn-10005, pstmt-20040} executed. 0.430779 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:35:36,883 DEBUG {conn-10005, pstmt-20040, rs-50099} open
2019-08-15 02:35:36,884 DEBUG {conn-10005, pstmt-20040, rs-50099} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:35:36,884 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:36,884 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:36,884 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:36,884 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:36,884 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:36,884 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:36,884 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:36,884 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:36,884 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:36,884 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:36,885 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:36,885 DEBUG {conn-10005, pstmt-20040, rs-50099} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:36,885 DEBUG {conn-10005, pstmt-20040, rs-50099} closed
2019-08-15 02:35:36,885 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:35:36,885 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:40,460 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:40,461 DEBUG {conn-10005, pstmt-20042} Parameters : [23]
2019-08-15 02:35:40,461 DEBUG {conn-10005, pstmt-20042} Types : [BIGINT]
2019-08-15 02:35:40,461 DEBUG {conn-10005, pstmt-20042} executed. 0.575742 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 02:35:40,461 DEBUG {conn-10005, pstmt-20042, rs-50100} open
2019-08-15 02:35:40,461 DEBUG {conn-10005, pstmt-20042, rs-50100} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 02:35:40,462 DEBUG {conn-10005, pstmt-20042, rs-50100} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 18, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 02:35:40,462 DEBUG {conn-10005, pstmt-20042, rs-50100} closed
2019-08-15 02:35:40,462 DEBUG {conn-10005, pstmt-20042} clearParameters. 
2019-08-15 02:35:40,462 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:40,462 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:40,462 DEBUG {conn-10005, pstmt-20043} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 19, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 02:35:40,462 DEBUG {conn-10005, pstmt-20043} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 02:35:40,470 DEBUG {conn-10005, pstmt-20043} executed. 7.649147 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 02:35:40,470 DEBUG {conn-10005, pstmt-20043} clearParameters. 
2019-08-15 02:35:40,470 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:40,472 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:40,472 DEBUG {conn-10005, pstmt-20044} Parameters : [25]
2019-08-15 02:35:40,472 DEBUG {conn-10005, pstmt-20044} Types : [INTEGER]
2019-08-15 02:35:40,473 DEBUG {conn-10005, pstmt-20044} executed. 0.47396 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 02:35:40,473 DEBUG {conn-10005, pstmt-20044, rs-50101} open
2019-08-15 02:35:40,473 DEBUG {conn-10005, pstmt-20044, rs-50101} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 02:35:40,473 DEBUG {conn-10005, pstmt-20044, rs-50101} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 02:35:40,473 DEBUG {conn-10005, pstmt-20044, rs-50101} closed
2019-08-15 02:35:40,473 DEBUG {conn-10005, pstmt-20044} clearParameters. 
2019-08-15 02:35:40,473 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:40,474 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:40,474 DEBUG {conn-10005, pstmt-20045} Parameters : [23, 1]
2019-08-15 02:35:40,474 DEBUG {conn-10005, pstmt-20045} Types : [BIGINT, INTEGER]
2019-08-15 02:35:40,474 DEBUG {conn-10005, pstmt-20045} executed. 0.407132 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 02:35:40,474 DEBUG {conn-10005, pstmt-20045, rs-50102} open
2019-08-15 02:35:40,474 DEBUG {conn-10005, pstmt-20045, rs-50102} Header: [count(*)]
2019-08-15 02:35:40,474 DEBUG {conn-10005, pstmt-20045, rs-50102} Result: [1]
2019-08-15 02:35:40,474 DEBUG {conn-10005, pstmt-20045, rs-50102} closed
2019-08-15 02:35:40,474 DEBUG {conn-10005, pstmt-20045} clearParameters. 
2019-08-15 02:35:40,474 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:40,475 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:40,475 DEBUG {conn-10005, pstmt-20046} Parameters : [23, 1, 0, 8]
2019-08-15 02:35:40,475 DEBUG {conn-10005, pstmt-20046} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 02:35:40,475 DEBUG {conn-10005, pstmt-20046} executed. 0.567003 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 02:35:40,475 DEBUG {conn-10005, pstmt-20046, rs-50103} open
2019-08-15 02:35:40,476 DEBUG {conn-10005, pstmt-20046, rs-50103} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 02:35:40,476 DEBUG {conn-10005, pstmt-20046, rs-50103} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 1, 0]
2019-08-15 02:35:40,477 DEBUG {conn-10005, pstmt-20046, rs-50103} closed
2019-08-15 02:35:40,477 DEBUG {conn-10005, pstmt-20046} clearParameters. 
2019-08-15 02:35:40,477 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:40,477 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:40,477 DEBUG {conn-10005, pstmt-20045} Parameters : [23, 1]
2019-08-15 02:35:40,477 DEBUG {conn-10005, pstmt-20045} Types : [BIGINT, INTEGER]
2019-08-15 02:35:40,477 DEBUG {conn-10005, pstmt-20045} executed. 0.440545 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 02:35:40,477 DEBUG {conn-10005, pstmt-20045, rs-50104} open
2019-08-15 02:35:40,477 DEBUG {conn-10005, pstmt-20045, rs-50104} Header: [count(*)]
2019-08-15 02:35:40,477 DEBUG {conn-10005, pstmt-20045, rs-50104} Result: [1]
2019-08-15 02:35:40,478 DEBUG {conn-10005, pstmt-20045, rs-50104} closed
2019-08-15 02:35:40,478 DEBUG {conn-10005, pstmt-20045} clearParameters. 
2019-08-15 02:35:40,478 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:40,478 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:40,478 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:35:40,478 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:35:40,478 DEBUG {conn-10005, pstmt-20040} executed. 0.46265 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:35:40,478 DEBUG {conn-10005, pstmt-20040, rs-50105} open
2019-08-15 02:35:40,478 DEBUG {conn-10005, pstmt-20040, rs-50105} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:35:40,478 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040, rs-50105} closed
2019-08-15 02:35:40,479 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:35:40,479 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:42,333 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:42,333 DEBUG {conn-10005, pstmt-20037} Parameters : [9]
2019-08-15 02:35:42,333 DEBUG {conn-10005, pstmt-20037} Types : [INTEGER]
2019-08-15 02:35:42,333 DEBUG {conn-10005, pstmt-20037} executed. 0.475502 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:35:42,334 DEBUG {conn-10005, pstmt-20037, rs-50106} open
2019-08-15 02:35:42,334 DEBUG {conn-10005, pstmt-20037, rs-50106} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:42,334 DEBUG {conn-10005, pstmt-20037, rs-50106} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:42,334 DEBUG {conn-10005, pstmt-20037, rs-50106} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 19, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:42,334 DEBUG {conn-10005, pstmt-20037, rs-50106} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:42,334 DEBUG {conn-10005, pstmt-20037, rs-50106} closed
2019-08-15 02:35:42,334 DEBUG {conn-10005, pstmt-20037} clearParameters. 
2019-08-15 02:35:42,334 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:42,334 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:42,334 DEBUG {conn-10005, pstmt-20038} Parameters : [9]
2019-08-15 02:35:42,334 DEBUG {conn-10005, pstmt-20038} Types : [INTEGER]
2019-08-15 02:35:42,335 DEBUG {conn-10005, pstmt-20038} executed. 0.363437 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:35:42,335 DEBUG {conn-10005, pstmt-20038, rs-50107} open
2019-08-15 02:35:42,335 DEBUG {conn-10005, pstmt-20038, rs-50107} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:42,335 DEBUG {conn-10005, pstmt-20038, rs-50107} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:42,335 DEBUG {conn-10005, pstmt-20038, rs-50107} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 19, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:42,335 DEBUG {conn-10005, pstmt-20038, rs-50107} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:42,335 DEBUG {conn-10005, pstmt-20038, rs-50107} closed
2019-08-15 02:35:42,335 DEBUG {conn-10005, pstmt-20038} clearParameters. 
2019-08-15 02:35:42,335 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:42,335 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:42,335 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:35:42,335 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20039} executed. 0.488867 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20039, rs-50108} open
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20039, rs-50108} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20039, rs-50108} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20039, rs-50108} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20039, rs-50108} Result: [139, 1, jqGrid]
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20039, rs-50108} Result: [140, 1, spring security]
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20039, rs-50108} closed
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:35:42,336 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:42,336 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:35:42,336 DEBUG {conn-10005, pstmt-20040} executed. 0.312546 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} open
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040, rs-50109} closed
2019-08-15 02:35:42,337 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:35:42,337 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:42,352 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:42,352 DEBUG {conn-10005, pstmt-20041} Parameters : [admin]
2019-08-15 02:35:42,352 DEBUG {conn-10005, pstmt-20041} Types : [VARCHAR]
2019-08-15 02:35:42,352 DEBUG {conn-10005, pstmt-20041} executed. 0.401991 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:35:42,352 DEBUG {conn-10005, pstmt-20041, rs-50110} open
2019-08-15 02:35:42,353 DEBUG {conn-10005, pstmt-20041, rs-50110} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 02:35:42,353 DEBUG {conn-10005, pstmt-20041, rs-50110} closed
2019-08-15 02:35:42,353 DEBUG {conn-10005, pstmt-20041} clearParameters. 
2019-08-15 02:35:42,353 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:47,175 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:47,175 DEBUG {conn-10005, pstmt-20037} Parameters : [9]
2019-08-15 02:35:47,175 DEBUG {conn-10005, pstmt-20037} Types : [INTEGER]
2019-08-15 02:35:47,176 DEBUG {conn-10005, pstmt-20037} executed. 0.63126 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:35:47,176 DEBUG {conn-10005, pstmt-20037, rs-50111} open
2019-08-15 02:35:47,176 DEBUG {conn-10005, pstmt-20037, rs-50111} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:47,176 DEBUG {conn-10005, pstmt-20037, rs-50111} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:47,176 DEBUG {conn-10005, pstmt-20037, rs-50111} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 19, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:47,176 DEBUG {conn-10005, pstmt-20037, rs-50111} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:47,176 DEBUG {conn-10005, pstmt-20037, rs-50111} closed
2019-08-15 02:35:47,176 DEBUG {conn-10005, pstmt-20037} clearParameters. 
2019-08-15 02:35:47,176 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:47,177 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:47,177 DEBUG {conn-10005, pstmt-20038} Parameters : [9]
2019-08-15 02:35:47,177 DEBUG {conn-10005, pstmt-20038} Types : [INTEGER]
2019-08-15 02:35:47,177 DEBUG {conn-10005, pstmt-20038} executed. 0.494521 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:35:47,178 DEBUG {conn-10005, pstmt-20038, rs-50112} open
2019-08-15 02:35:47,178 DEBUG {conn-10005, pstmt-20038, rs-50112} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:47,178 DEBUG {conn-10005, pstmt-20038, rs-50112} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:47,178 DEBUG {conn-10005, pstmt-20038, rs-50112} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 19, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:47,178 DEBUG {conn-10005, pstmt-20038, rs-50112} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:47,178 DEBUG {conn-10005, pstmt-20038, rs-50112} closed
2019-08-15 02:35:47,178 DEBUG {conn-10005, pstmt-20038} clearParameters. 
2019-08-15 02:35:47,178 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:47,178 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:47,178 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:35:47,178 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:35:47,179 DEBUG {conn-10005, pstmt-20039} executed. 0.59579 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:35:47,179 DEBUG {conn-10005, pstmt-20039, rs-50113} open
2019-08-15 02:35:47,179 DEBUG {conn-10005, pstmt-20039, rs-50113} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:35:47,179 DEBUG {conn-10005, pstmt-20039, rs-50113} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:35:47,179 DEBUG {conn-10005, pstmt-20039, rs-50113} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:35:47,179 DEBUG {conn-10005, pstmt-20039, rs-50113} Result: [139, 1, jqGrid]
2019-08-15 02:35:47,179 DEBUG {conn-10005, pstmt-20039, rs-50113} Result: [140, 1, spring security]
2019-08-15 02:35:47,179 DEBUG {conn-10005, pstmt-20039, rs-50113} closed
2019-08-15 02:35:47,179 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:35:47,179 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:47,179 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:47,179 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:35:47,179 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040} executed. 0.32334 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} open
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040, rs-50114} closed
2019-08-15 02:35:47,180 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:35:47,180 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:50,340 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:50,341 DEBUG {conn-10005, pstmt-20037} Parameters : [9]
2019-08-15 02:35:50,341 DEBUG {conn-10005, pstmt-20037} Types : [INTEGER]
2019-08-15 02:35:50,341 DEBUG {conn-10005, pstmt-20037} executed. 0.614811 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:35:50,341 DEBUG {conn-10005, pstmt-20037, rs-50115} open
2019-08-15 02:35:50,341 DEBUG {conn-10005, pstmt-20037, rs-50115} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:50,341 DEBUG {conn-10005, pstmt-20037, rs-50115} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:50,342 DEBUG {conn-10005, pstmt-20037, rs-50115} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 19, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:50,342 DEBUG {conn-10005, pstmt-20037, rs-50115} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:50,342 DEBUG {conn-10005, pstmt-20037, rs-50115} closed
2019-08-15 02:35:50,342 DEBUG {conn-10005, pstmt-20037} clearParameters. 
2019-08-15 02:35:50,342 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:50,342 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:50,342 DEBUG {conn-10005, pstmt-20038} Parameters : [9]
2019-08-15 02:35:50,342 DEBUG {conn-10005, pstmt-20038} Types : [INTEGER]
2019-08-15 02:35:50,343 DEBUG {conn-10005, pstmt-20038} executed. 0.420497 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:35:50,343 DEBUG {conn-10005, pstmt-20038, rs-50116} open
2019-08-15 02:35:50,343 DEBUG {conn-10005, pstmt-20038, rs-50116} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:35:50,343 DEBUG {conn-10005, pstmt-20038, rs-50116} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:35:50,343 DEBUG {conn-10005, pstmt-20038, rs-50116} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 19, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:35:50,343 DEBUG {conn-10005, pstmt-20038, rs-50116} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:35:50,343 DEBUG {conn-10005, pstmt-20038, rs-50116} closed
2019-08-15 02:35:50,343 DEBUG {conn-10005, pstmt-20038} clearParameters. 
2019-08-15 02:35:50,343 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:50,343 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:50,343 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:35:50,343 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:35:50,344 DEBUG {conn-10005, pstmt-20039} executed. 0.604529 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:35:50,344 DEBUG {conn-10005, pstmt-20039, rs-50117} open
2019-08-15 02:35:50,344 DEBUG {conn-10005, pstmt-20039, rs-50117} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:35:50,344 DEBUG {conn-10005, pstmt-20039, rs-50117} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:35:50,344 DEBUG {conn-10005, pstmt-20039, rs-50117} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:35:50,344 DEBUG {conn-10005, pstmt-20039, rs-50117} Result: [139, 1, jqGrid]
2019-08-15 02:35:50,344 DEBUG {conn-10005, pstmt-20039, rs-50117} Result: [140, 1, spring security]
2019-08-15 02:35:50,344 DEBUG {conn-10005, pstmt-20039, rs-50117} closed
2019-08-15 02:35:50,344 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:35:50,344 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:50,344 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:50,344 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:35:50,344 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040} executed. 0.355212 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} open
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:50,345 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:50,346 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:50,346 DEBUG {conn-10005, pstmt-20040, rs-50118} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:50,346 DEBUG {conn-10005, pstmt-20040, rs-50118} closed
2019-08-15 02:35:50,346 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:35:50,346 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:50,357 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:50,357 DEBUG {conn-10005, pstmt-20041} Parameters : [admin]
2019-08-15 02:35:50,357 DEBUG {conn-10005, pstmt-20041} Types : [VARCHAR]
2019-08-15 02:35:50,358 DEBUG {conn-10005, pstmt-20041} executed. 0.464706 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:35:50,358 DEBUG {conn-10005, pstmt-20041, rs-50119} open
2019-08-15 02:35:50,358 DEBUG {conn-10005, pstmt-20041, rs-50119} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 02:35:50,358 DEBUG {conn-10005, pstmt-20041, rs-50119} closed
2019-08-15 02:35:50,358 DEBUG {conn-10005, pstmt-20041} clearParameters. 
2019-08-15 02:35:50,358 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:54,234 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:54,234 DEBUG {conn-10005, pstmt-20042} Parameters : [23]
2019-08-15 02:35:54,234 DEBUG {conn-10005, pstmt-20042} Types : [BIGINT]
2019-08-15 02:35:54,234 DEBUG {conn-10005, pstmt-20042} executed. 0.480127 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 02:35:54,234 DEBUG {conn-10005, pstmt-20042, rs-50120} open
2019-08-15 02:35:54,234 DEBUG {conn-10005, pstmt-20042, rs-50120} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 02:35:54,235 DEBUG {conn-10005, pstmt-20042, rs-50120} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 19, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 02:35:54,235 DEBUG {conn-10005, pstmt-20042, rs-50120} closed
2019-08-15 02:35:54,235 DEBUG {conn-10005, pstmt-20042} clearParameters. 
2019-08-15 02:35:54,235 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:54,235 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:54,235 DEBUG {conn-10005, pstmt-20043} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 02:35:54,235 DEBUG {conn-10005, pstmt-20043} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 02:35:54,243 DEBUG {conn-10005, pstmt-20043} executed. 7.414737 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 02:35:54,243 DEBUG {conn-10005, pstmt-20043} clearParameters. 
2019-08-15 02:35:54,243 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:54,244 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:54,244 DEBUG {conn-10005, pstmt-20044} Parameters : [25]
2019-08-15 02:35:54,244 DEBUG {conn-10005, pstmt-20044} Types : [INTEGER]
2019-08-15 02:35:54,245 DEBUG {conn-10005, pstmt-20044} executed. 0.506859 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 02:35:54,245 DEBUG {conn-10005, pstmt-20044, rs-50121} open
2019-08-15 02:35:54,245 DEBUG {conn-10005, pstmt-20044, rs-50121} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 02:35:54,245 DEBUG {conn-10005, pstmt-20044, rs-50121} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 02:35:54,245 DEBUG {conn-10005, pstmt-20044, rs-50121} closed
2019-08-15 02:35:54,245 DEBUG {conn-10005, pstmt-20044} clearParameters. 
2019-08-15 02:35:54,245 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:54,245 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:54,246 DEBUG {conn-10005, pstmt-20045} Parameters : [23, 1]
2019-08-15 02:35:54,246 DEBUG {conn-10005, pstmt-20045} Types : [BIGINT, INTEGER]
2019-08-15 02:35:54,246 DEBUG {conn-10005, pstmt-20045} executed. 0.351614 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 02:35:54,246 DEBUG {conn-10005, pstmt-20045, rs-50122} open
2019-08-15 02:35:54,246 DEBUG {conn-10005, pstmt-20045, rs-50122} Header: [count(*)]
2019-08-15 02:35:54,246 DEBUG {conn-10005, pstmt-20045, rs-50122} Result: [1]
2019-08-15 02:35:54,246 DEBUG {conn-10005, pstmt-20045, rs-50122} closed
2019-08-15 02:35:54,246 DEBUG {conn-10005, pstmt-20045} clearParameters. 
2019-08-15 02:35:54,246 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:54,246 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:54,247 DEBUG {conn-10005, pstmt-20046} Parameters : [23, 1, 0, 8]
2019-08-15 02:35:54,247 DEBUG {conn-10005, pstmt-20046} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 02:35:54,247 DEBUG {conn-10005, pstmt-20046} executed. 0.743325 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 02:35:54,247 DEBUG {conn-10005, pstmt-20046, rs-50123} open
2019-08-15 02:35:54,247 DEBUG {conn-10005, pstmt-20046, rs-50123} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 02:35:54,248 DEBUG {conn-10005, pstmt-20046, rs-50123} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 1, 0]
2019-08-15 02:35:54,248 DEBUG {conn-10005, pstmt-20046, rs-50123} closed
2019-08-15 02:35:54,248 DEBUG {conn-10005, pstmt-20046} clearParameters. 
2019-08-15 02:35:54,248 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:54,248 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:54,248 DEBUG {conn-10005, pstmt-20045} Parameters : [23, 1]
2019-08-15 02:35:54,248 DEBUG {conn-10005, pstmt-20045} Types : [BIGINT, INTEGER]
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20045} executed. 0.448256 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20045, rs-50124} open
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20045, rs-50124} Header: [count(*)]
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20045, rs-50124} Result: [1]
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20045, rs-50124} closed
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20045} clearParameters. 
2019-08-15 02:35:54,249 DEBUG {conn-10005} pool-recycle
2019-08-15 02:35:54,249 DEBUG {conn-10005} pool-connect
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20040} executed. 0.30175 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20040, rs-50125} open
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20040, rs-50125} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:54,249 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:54,250 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:54,250 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:35:54,250 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:54,250 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:54,250 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:54,250 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:35:54,250 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:54,250 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:54,250 DEBUG {conn-10005, pstmt-20040, rs-50125} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:35:54,250 DEBUG {conn-10005, pstmt-20040, rs-50125} closed
2019-08-15 02:35:54,250 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:35:54,250 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:09,548 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:09,548 DEBUG {conn-10005, pstmt-20037} Parameters : [9]
2019-08-15 02:36:09,548 DEBUG {conn-10005, pstmt-20037} Types : [INTEGER]
2019-08-15 02:36:09,548 DEBUG {conn-10005, pstmt-20037} executed. 0.453911 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:36:09,549 DEBUG {conn-10005, pstmt-20037, rs-50126} open
2019-08-15 02:36:09,549 DEBUG {conn-10005, pstmt-20037, rs-50126} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:36:09,549 DEBUG {conn-10005, pstmt-20037, rs-50126} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:36:09,549 DEBUG {conn-10005, pstmt-20037, rs-50126} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:36:09,549 DEBUG {conn-10005, pstmt-20037, rs-50126} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:36:09,549 DEBUG {conn-10005, pstmt-20037, rs-50126} closed
2019-08-15 02:36:09,549 DEBUG {conn-10005, pstmt-20037} clearParameters. 
2019-08-15 02:36:09,549 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:09,549 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:09,549 DEBUG {conn-10005, pstmt-20038} Parameters : [9]
2019-08-15 02:36:09,549 DEBUG {conn-10005, pstmt-20038} Types : [INTEGER]
2019-08-15 02:36:09,550 DEBUG {conn-10005, pstmt-20038} executed. 0.435919 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:36:09,550 DEBUG {conn-10005, pstmt-20038, rs-50127} open
2019-08-15 02:36:09,550 DEBUG {conn-10005, pstmt-20038, rs-50127} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:36:09,550 DEBUG {conn-10005, pstmt-20038, rs-50127} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:36:09,550 DEBUG {conn-10005, pstmt-20038, rs-50127} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:36:09,550 DEBUG {conn-10005, pstmt-20038, rs-50127} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:36:09,550 DEBUG {conn-10005, pstmt-20038, rs-50127} closed
2019-08-15 02:36:09,550 DEBUG {conn-10005, pstmt-20038} clearParameters. 
2019-08-15 02:36:09,550 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:09,551 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:09,551 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:36:09,551 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:36:09,551 DEBUG {conn-10005, pstmt-20039} executed. 0.423582 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:36:09,551 DEBUG {conn-10005, pstmt-20039, rs-50128} open
2019-08-15 02:36:09,551 DEBUG {conn-10005, pstmt-20039, rs-50128} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:36:09,551 DEBUG {conn-10005, pstmt-20039, rs-50128} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:36:09,551 DEBUG {conn-10005, pstmt-20039, rs-50128} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:36:09,551 DEBUG {conn-10005, pstmt-20039, rs-50128} Result: [139, 1, jqGrid]
2019-08-15 02:36:09,551 DEBUG {conn-10005, pstmt-20039, rs-50128} Result: [140, 1, spring security]
2019-08-15 02:36:09,551 DEBUG {conn-10005, pstmt-20039, rs-50128} closed
2019-08-15 02:36:09,551 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:36:09,551 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:09,551 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040} executed. 0.230811 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} open
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040, rs-50129} closed
2019-08-15 02:36:09,552 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:36:09,552 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:09,565 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:09,565 DEBUG {conn-10005, pstmt-20041} Parameters : [admin]
2019-08-15 02:36:09,565 DEBUG {conn-10005, pstmt-20041} Types : [VARCHAR]
2019-08-15 02:36:09,565 DEBUG {conn-10005, pstmt-20041} executed. 0.419984 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:36:09,565 DEBUG {conn-10005, pstmt-20041, rs-50130} open
2019-08-15 02:36:09,565 DEBUG {conn-10005, pstmt-20041, rs-50130} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 02:36:09,565 DEBUG {conn-10005, pstmt-20041, rs-50130} closed
2019-08-15 02:36:09,565 DEBUG {conn-10005, pstmt-20041} clearParameters. 
2019-08-15 02:36:09,565 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:11,370 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:11,370 DEBUG {conn-10005, pstmt-20051} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 02:36:11,370 DEBUG {conn-10005, pstmt-20051} Parameters : [admin]
2019-08-15 02:36:11,370 DEBUG {conn-10005, pstmt-20051} Types : [VARCHAR]
2019-08-15 02:36:11,371 DEBUG {conn-10005, pstmt-20051} executed. 0.582939 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 02:36:11,371 DEBUG {conn-10005, pstmt-20051, rs-50131} open
2019-08-15 02:36:11,371 DEBUG {conn-10005, pstmt-20051, rs-50131} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 02:36:11,371 DEBUG {conn-10005, pstmt-20051, rs-50131} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 02:36:11,371 DEBUG {conn-10005, pstmt-20051, rs-50131} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 02:36:11,371 DEBUG {conn-10005, pstmt-20051, rs-50131} closed
2019-08-15 02:36:11,371 DEBUG {conn-10005, pstmt-20051} clearParameters. 
2019-08-15 02:36:11,371 DEBUG {conn-10005, pstmt-20018} closed
2019-08-15 02:36:11,371 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:11,372 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:11,372 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:36:11,372 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:36:11,372 DEBUG {conn-10005, pstmt-20040} executed. 0.500176 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} open
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040, rs-50132} closed
2019-08-15 02:36:11,373 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:36:11,373 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:20,820 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:20,820 DEBUG {conn-10005, pstmt-20037} Parameters : [9]
2019-08-15 02:36:20,820 DEBUG {conn-10005, pstmt-20037} Types : [INTEGER]
2019-08-15 02:36:20,821 DEBUG {conn-10005, pstmt-20037} executed. 0.614811 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:36:20,821 DEBUG {conn-10005, pstmt-20037, rs-50133} open
2019-08-15 02:36:20,821 DEBUG {conn-10005, pstmt-20037, rs-50133} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:36:20,821 DEBUG {conn-10005, pstmt-20037, rs-50133} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:36:20,822 DEBUG {conn-10005, pstmt-20037, rs-50133} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:36:20,822 DEBUG {conn-10005, pstmt-20037, rs-50133} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:36:20,822 DEBUG {conn-10005, pstmt-20037, rs-50133} closed
2019-08-15 02:36:20,822 DEBUG {conn-10005, pstmt-20037} clearParameters. 
2019-08-15 02:36:20,822 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:20,822 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:20,822 DEBUG {conn-10005, pstmt-20038} Parameters : [9]
2019-08-15 02:36:20,822 DEBUG {conn-10005, pstmt-20038} Types : [INTEGER]
2019-08-15 02:36:20,823 DEBUG {conn-10005, pstmt-20038} executed. 0.521253 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:36:20,823 DEBUG {conn-10005, pstmt-20038, rs-50134} open
2019-08-15 02:36:20,823 DEBUG {conn-10005, pstmt-20038, rs-50134} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:36:20,823 DEBUG {conn-10005, pstmt-20038, rs-50134} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:36:20,823 DEBUG {conn-10005, pstmt-20038, rs-50134} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:36:20,823 DEBUG {conn-10005, pstmt-20038, rs-50134} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:36:20,823 DEBUG {conn-10005, pstmt-20038, rs-50134} closed
2019-08-15 02:36:20,823 DEBUG {conn-10005, pstmt-20038} clearParameters. 
2019-08-15 02:36:20,823 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:20,824 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:20,824 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:36:20,824 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:36:20,824 DEBUG {conn-10005, pstmt-20039} executed. 0.531019 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:36:20,824 DEBUG {conn-10005, pstmt-20039, rs-50135} open
2019-08-15 02:36:20,824 DEBUG {conn-10005, pstmt-20039, rs-50135} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:36:20,824 DEBUG {conn-10005, pstmt-20039, rs-50135} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:36:20,824 DEBUG {conn-10005, pstmt-20039, rs-50135} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:36:20,824 DEBUG {conn-10005, pstmt-20039, rs-50135} Result: [139, 1, jqGrid]
2019-08-15 02:36:20,824 DEBUG {conn-10005, pstmt-20039, rs-50135} Result: [140, 1, spring security]
2019-08-15 02:36:20,824 DEBUG {conn-10005, pstmt-20039, rs-50135} closed
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:36:20,825 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:20,825 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040} executed. 0.297638 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040, rs-50136} open
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040, rs-50136} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:20,825 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:20,826 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:20,826 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:20,826 DEBUG {conn-10005, pstmt-20040, rs-50136} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:20,826 DEBUG {conn-10005, pstmt-20040, rs-50136} closed
2019-08-15 02:36:20,826 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:36:20,826 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:20,841 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:20,841 DEBUG {conn-10005, pstmt-20041} Parameters : [admin]
2019-08-15 02:36:20,841 DEBUG {conn-10005, pstmt-20041} Types : [VARCHAR]
2019-08-15 02:36:20,842 DEBUG {conn-10005, pstmt-20041} executed. 0.544385 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:36:20,842 DEBUG {conn-10005, pstmt-20041, rs-50137} open
2019-08-15 02:36:20,842 DEBUG {conn-10005, pstmt-20041, rs-50137} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 02:36:20,842 DEBUG {conn-10005, pstmt-20041, rs-50137} closed
2019-08-15 02:36:20,842 DEBUG {conn-10005, pstmt-20041} clearParameters. 
2019-08-15 02:36:20,842 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:24,131 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:24,131 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:36:24,131 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:36:24,132 DEBUG {conn-10005, pstmt-20039} executed. 0.570602 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:36:24,132 DEBUG {conn-10005, pstmt-20039, rs-50138} open
2019-08-15 02:36:24,132 DEBUG {conn-10005, pstmt-20039, rs-50138} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:36:24,132 DEBUG {conn-10005, pstmt-20039, rs-50138} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:36:24,132 DEBUG {conn-10005, pstmt-20039, rs-50138} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:36:24,132 DEBUG {conn-10005, pstmt-20039, rs-50138} Result: [139, 1, jqGrid]
2019-08-15 02:36:24,132 DEBUG {conn-10005, pstmt-20039, rs-50138} Result: [140, 1, spring security]
2019-08-15 02:36:24,132 DEBUG {conn-10005, pstmt-20039, rs-50138} closed
2019-08-15 02:36:24,132 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:36:24,132 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:24,133 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:24,133 DEBUG {conn-10005, pstmt-20052} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 02:36:24,133 DEBUG {conn-10005, pstmt-20052} Parameters : []
2019-08-15 02:36:24,133 DEBUG {conn-10005, pstmt-20052} Types : []
2019-08-15 02:36:24,133 DEBUG {conn-10005, pstmt-20052} executed. 0.40559 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 02:36:24,133 DEBUG {conn-10005, pstmt-20052, rs-50139} open
2019-08-15 02:36:24,133 DEBUG {conn-10005, pstmt-20052, rs-50139} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 02:36:24,133 DEBUG {conn-10005, pstmt-20052, rs-50139} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 02:36:24,134 DEBUG {conn-10005, pstmt-20052, rs-50139} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 02:36:24,134 DEBUG {conn-10005, pstmt-20052, rs-50139} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 02:36:24,134 DEBUG {conn-10005, pstmt-20052, rs-50139} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 02:36:24,134 DEBUG {conn-10005, pstmt-20052, rs-50139} closed
2019-08-15 02:36:24,134 DEBUG {conn-10005, pstmt-20052} clearParameters. 
2019-08-15 02:36:24,134 DEBUG {conn-10005, pstmt-20011} closed
2019-08-15 02:36:24,134 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:24,134 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:24,134 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:36:24,134 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:36:24,134 DEBUG {conn-10005, pstmt-20040} executed. 0.398393 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:36:24,134 DEBUG {conn-10005, pstmt-20040, rs-50140} open
2019-08-15 02:36:24,134 DEBUG {conn-10005, pstmt-20040, rs-50140} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040, rs-50140} closed
2019-08-15 02:36:24,135 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:36:24,135 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:30,520 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:30,520 DEBUG {conn-10005, pstmt-20037} Parameters : [9]
2019-08-15 02:36:30,520 DEBUG {conn-10005, pstmt-20037} Types : [INTEGER]
2019-08-15 02:36:30,520 DEBUG {conn-10005, pstmt-20037} executed. 0.59065 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:36:30,521 DEBUG {conn-10005, pstmt-20037, rs-50141} open
2019-08-15 02:36:30,521 DEBUG {conn-10005, pstmt-20037, rs-50141} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:36:30,521 DEBUG {conn-10005, pstmt-20037, rs-50141} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:36:30,521 DEBUG {conn-10005, pstmt-20037, rs-50141} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:36:30,521 DEBUG {conn-10005, pstmt-20037, rs-50141} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:36:30,521 DEBUG {conn-10005, pstmt-20037, rs-50141} closed
2019-08-15 02:36:30,521 DEBUG {conn-10005, pstmt-20037} clearParameters. 
2019-08-15 02:36:30,521 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:30,521 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:30,521 DEBUG {conn-10005, pstmt-20038} Parameters : [9]
2019-08-15 02:36:30,521 DEBUG {conn-10005, pstmt-20038} Types : [INTEGER]
2019-08-15 02:36:30,522 DEBUG {conn-10005, pstmt-20038} executed. 0.450313 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:36:30,522 DEBUG {conn-10005, pstmt-20038, rs-50142} open
2019-08-15 02:36:30,522 DEBUG {conn-10005, pstmt-20038, rs-50142} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:36:30,522 DEBUG {conn-10005, pstmt-20038, rs-50142} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:36:30,522 DEBUG {conn-10005, pstmt-20038, rs-50142} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:36:30,522 DEBUG {conn-10005, pstmt-20038, rs-50142} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:36:30,522 DEBUG {conn-10005, pstmt-20038, rs-50142} closed
2019-08-15 02:36:30,522 DEBUG {conn-10005, pstmt-20038} clearParameters. 
2019-08-15 02:36:30,522 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:30,522 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:30,522 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:36:30,522 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:36:30,523 DEBUG {conn-10005, pstmt-20039} executed. 0.469846 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:36:30,523 DEBUG {conn-10005, pstmt-20039, rs-50143} open
2019-08-15 02:36:30,523 DEBUG {conn-10005, pstmt-20039, rs-50143} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:36:30,523 DEBUG {conn-10005, pstmt-20039, rs-50143} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:36:30,523 DEBUG {conn-10005, pstmt-20039, rs-50143} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:36:30,523 DEBUG {conn-10005, pstmt-20039, rs-50143} Result: [139, 1, jqGrid]
2019-08-15 02:36:30,523 DEBUG {conn-10005, pstmt-20039, rs-50143} Result: [140, 1, spring security]
2019-08-15 02:36:30,523 DEBUG {conn-10005, pstmt-20039, rs-50143} closed
2019-08-15 02:36:30,523 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:36:30,523 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:30,523 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:30,523 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:36:30,523 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040} executed. 0.348016 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} open
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040, rs-50144} closed
2019-08-15 02:36:30,524 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:36:30,524 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:30,538 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:30,538 DEBUG {conn-10005, pstmt-20041} Parameters : [admin]
2019-08-15 02:36:30,538 DEBUG {conn-10005, pstmt-20041} Types : [VARCHAR]
2019-08-15 02:36:30,539 DEBUG {conn-10005, pstmt-20041} executed. 0.431806 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:36:30,539 DEBUG {conn-10005, pstmt-20041, rs-50145} open
2019-08-15 02:36:30,539 DEBUG {conn-10005, pstmt-20041, rs-50145} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 02:36:30,539 DEBUG {conn-10005, pstmt-20041, rs-50145} closed
2019-08-15 02:36:30,539 DEBUG {conn-10005, pstmt-20041} clearParameters. 
2019-08-15 02:36:30,539 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:34,332 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:34,332 DEBUG {conn-10005, pstmt-20053} created. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
2019-08-15 02:36:34,332 DEBUG {conn-10005, pstmt-20053} Parameters : []
2019-08-15 02:36:34,332 DEBUG {conn-10005, pstmt-20053} Types : []
2019-08-15 02:36:34,333 DEBUG {conn-10005, pstmt-20053} executed. 0.490923 millis. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
2019-08-15 02:36:34,333 DEBUG {conn-10005, pstmt-20053, rs-50146} open
2019-08-15 02:36:34,333 DEBUG {conn-10005, pstmt-20053, rs-50146} Header: [link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, create_time]
2019-08-15 02:36:34,333 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [32, 0, fh, 567457, sf, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 02:36:34,333 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [31, 0, dg, 658, 手动阀, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 02:36:34,333 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [30, 0, 接口, 090, 模拟, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 02:36:34,333 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [29, 0, 校验码, 745, 如果和人, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 02:36:34,333 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [28, 0, 很关键, 456, 天涯海角, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 02:36:34,333 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [27, 0, 染发膏, 456, 突然好几天, 1, 0, 2019-11-04 00:00:00.0]
2019-08-15 02:36:34,334 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [26, 0, 翻滚吧, 345, 姑获鸟, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 02:36:34,334 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [25, 0, 分别, 34534, 法国红酒, 1, 0, 2019-09-23 00:00:00.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [24, 0, 4356fg地方, 345, 儿童, 1, 0, 2019-06-05 00:00:00.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [23, 0, 后就开始的, 34534, 放电饭锅, 0, 0, 2019-04-04 00:00:00.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [22, 0, 托尔斯泰, 34534, 的双方各是地方, 1, 0, 2019-04-05 00:00:00.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [21, 0, test2, 2222222222222222, sdgsfgdg, 0, 0, 2019-03-14 00:00:00.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [20, 0, test1, 1111111111, dfgs, 0, 0, 2019-04-03 00:00:00.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [19, 2, 《玩转Spring Boot 系列》, https://www.shiyanlou.com/courses/1274, SpringBoot实战课程, 20, 0, 2019-04-25 00:10:30.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [18, 2, 谷歌浏览器Chrome插件打包下载, https://www.crx4chrome.com/, 垂直专业的资源网站, 19, 0, 2019-07-25 00:07:27.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [17, 2, 《SSM 搭建精美实用的管理系统》, https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9, Spring+SpringMVC+MyBatis实战课程, 18, 0, 2019-04-25 00:06:52.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [16, 1, 实验楼, https://www.shiyanlou.com/, 一家专注于IT技术的在线实训平台, 17, 0, 2019-04-25 00:03:48.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [14, 0, dalaoyang, https://www.dalaoyang.cn/, dalaoyang, 0, 0, 2019-04-24 23:31:50.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [13, 0, 郭赵晖, http://guozh.net/, 老郭三分地, 0, 0, 2019-04-24 23:30:19.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [9, 0, 纯洁的微笑, http://www.ityouknow.com, 分享技术，分享生活, 3, 0, 2018-10-23 04:27:16.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [8, 0, Giraffe Home, https://yemengying.com/, Giraffe Home, 0, 0, 2018-10-23 04:27:04.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [7, 0, 猿天地, http://cxytiandi.com, 一个综合性的网站,以程序猿用户为主,提供各种开发相关的内容, 12, 0, 2018-10-23 04:02:41.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [6, 0, 梁桂钊的博客, http://blog.720ui.com, 后端攻城狮, 1, 0, 2018-10-23 04:01:38.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [5, 1, CSDN, https://www.csdn.net/, CSDN-专业IT技术社区官网, 4, 0, 2018-10-23 03:56:47.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [4, 1, CSDN 图文课, https://gitchat.csdn.net, IT优质内容平台, 6, 0, 2019-07-25 03:55:55.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [3, 2, Kuky的博客, http://321kuky.com, 个人独立博客13blog, 14, 0, 2019-07-25 03:53:34.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} Result: [2, 2, Kuky的GitHub, https://github.com/Kukyhmy, 分享代码的地方, 1, 0, 2019-07-25 03:41:04.0]
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053, rs-50146} closed
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20053} clearParameters. 
2019-08-15 02:36:34,335 DEBUG {conn-10005, pstmt-20033} closed
2019-08-15 02:36:34,335 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:34,337 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:34,337 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:36:34,337 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:36:34,337 DEBUG {conn-10005, pstmt-20040} executed. 0.396851 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:36:34,337 DEBUG {conn-10005, pstmt-20040, rs-50147} open
2019-08-15 02:36:34,337 DEBUG {conn-10005, pstmt-20040, rs-50147} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:36:34,337 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:34,337 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040, rs-50147} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040, rs-50147} closed
2019-08-15 02:36:34,338 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:36:34,338 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:36,593 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:36,593 DEBUG {conn-10005, pstmt-20037} Parameters : [9]
2019-08-15 02:36:36,593 DEBUG {conn-10005, pstmt-20037} Types : [INTEGER]
2019-08-15 02:36:36,594 DEBUG {conn-10005, pstmt-20037} executed. 0.492979 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 02:36:36,594 DEBUG {conn-10005, pstmt-20037, rs-50148} open
2019-08-15 02:36:36,594 DEBUG {conn-10005, pstmt-20037, rs-50148} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:36:36,594 DEBUG {conn-10005, pstmt-20037, rs-50148} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:36:36,594 DEBUG {conn-10005, pstmt-20037, rs-50148} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:36:36,594 DEBUG {conn-10005, pstmt-20037, rs-50148} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:36:36,594 DEBUG {conn-10005, pstmt-20037, rs-50148} closed
2019-08-15 02:36:36,594 DEBUG {conn-10005, pstmt-20037} clearParameters. 
2019-08-15 02:36:36,594 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:36,595 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:36,595 DEBUG {conn-10005, pstmt-20038} Parameters : [9]
2019-08-15 02:36:36,595 DEBUG {conn-10005, pstmt-20038} Types : [INTEGER]
2019-08-15 02:36:36,595 DEBUG {conn-10005, pstmt-20038} executed. 0.422039 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 02:36:36,595 DEBUG {conn-10005, pstmt-20038, rs-50149} open
2019-08-15 02:36:36,595 DEBUG {conn-10005, pstmt-20038, rs-50149} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 02:36:36,595 DEBUG {conn-10005, pstmt-20038, rs-50149} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 02:36:36,595 DEBUG {conn-10005, pstmt-20038, rs-50149} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 02:36:36,595 DEBUG {conn-10005, pstmt-20038, rs-50149} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 02:36:36,595 DEBUG {conn-10005, pstmt-20038, rs-50149} closed
2019-08-15 02:36:36,595 DEBUG {conn-10005, pstmt-20038} clearParameters. 
2019-08-15 02:36:36,596 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:36,596 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:36,596 DEBUG {conn-10005, pstmt-20039} Parameters : []
2019-08-15 02:36:36,596 DEBUG {conn-10005, pstmt-20039} Types : []
2019-08-15 02:36:36,596 DEBUG {conn-10005, pstmt-20039} executed. 0.496064 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 02:36:36,596 DEBUG {conn-10005, pstmt-20039, rs-50150} open
2019-08-15 02:36:36,596 DEBUG {conn-10005, pstmt-20039, rs-50150} Header: [tag_id, tag_count, tag_name]
2019-08-15 02:36:36,596 DEBUG {conn-10005, pstmt-20039, rs-50150} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 02:36:36,596 DEBUG {conn-10005, pstmt-20039, rs-50150} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 02:36:36,596 DEBUG {conn-10005, pstmt-20039, rs-50150} Result: [139, 1, jqGrid]
2019-08-15 02:36:36,596 DEBUG {conn-10005, pstmt-20039, rs-50150} Result: [140, 1, spring security]
2019-08-15 02:36:36,596 DEBUG {conn-10005, pstmt-20039, rs-50150} closed
2019-08-15 02:36:36,596 DEBUG {conn-10005, pstmt-20039} clearParameters. 
2019-08-15 02:36:36,597 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:36,597 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040} Parameters : []
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040} Types : []
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040} executed. 0.29147 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} open
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Header: [config_name, config_value, create_time, update_time]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040, rs-50151} closed
2019-08-15 02:36:36,597 DEBUG {conn-10005, pstmt-20040} clearParameters. 
2019-08-15 02:36:36,598 DEBUG {conn-10005} pool-recycle
2019-08-15 02:36:36,615 DEBUG {conn-10005} pool-connect
2019-08-15 02:36:36,615 DEBUG {conn-10005, pstmt-20041} Parameters : [admin]
2019-08-15 02:36:36,615 DEBUG {conn-10005, pstmt-20041} Types : [VARCHAR]
2019-08-15 02:36:36,615 DEBUG {conn-10005, pstmt-20041} executed. 0.378345 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 02:36:36,615 DEBUG {conn-10005, pstmt-20041, rs-50152} open
2019-08-15 02:36:36,615 DEBUG {conn-10005, pstmt-20041, rs-50152} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 02:36:36,615 DEBUG {conn-10005, pstmt-20041, rs-50152} closed
2019-08-15 02:36:36,616 DEBUG {conn-10005, pstmt-20041} clearParameters. 
2019-08-15 02:36:36,616 DEBUG {conn-10005} pool-recycle
2019-08-15 13:17:21,725 DEBUG {conn-10001,procId-2} connected
2019-08-15 13:17:21,735 DEBUG {conn-10002,procId-3} connected
2019-08-15 13:17:21,744 DEBUG {conn-10003,procId-4} connected
2019-08-15 13:17:21,751 DEBUG {conn-10004,procId-5} connected
2019-08-15 13:17:21,758 DEBUG {conn-10005,procId-6} connected
2019-08-15 13:17:21,765 DEBUG {conn-10005} pool-connect
2019-08-15 13:17:21,767 DEBUG {conn-10005} pool-recycle
2019-08-15 13:17:21,779 DEBUG {conn-10005} pool-connect
2019-08-15 13:17:21,782 DEBUG {conn-10005} pool-recycle
2019-08-15 13:17:22,377 DEBUG {conn-10005} pool-connect
2019-08-15 13:17:22,435 DEBUG {conn-10005} pool-recycle
2019-08-15 13:17:23,724 INFO [Xorr the God-Jewel] modules [], plugins [], sites []
2019-08-15 13:17:23,751 DEBUG [Xorr the God-Jewel] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 13:17:23,772 DEBUG [Xorr the God-Jewel] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 13:17:23,793 DEBUG [Xorr the God-Jewel] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 13:17:23,796 DEBUG [Xorr the God-Jewel] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 13:17:23,796 DEBUG [Xorr the God-Jewel] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 13:17:23,796 DEBUG [Xorr the God-Jewel] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:17:23,796 DEBUG [Xorr the God-Jewel] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 13:17:23,797 DEBUG [Xorr the God-Jewel] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 13:17:23,797 DEBUG [Xorr the God-Jewel] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:17:23,797 DEBUG [Xorr the God-Jewel] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 13:17:23,797 DEBUG [Xorr the God-Jewel] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:17:23,797 DEBUG [Xorr the God-Jewel] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 13:17:23,797 DEBUG [Xorr the God-Jewel] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 13:17:23,797 DEBUG [Xorr the God-Jewel] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 13:17:23,798 DEBUG [Xorr the God-Jewel] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 13:17:23,798 DEBUG [Xorr the God-Jewel] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:17:26,627 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:e1e2:3cd9:5c75:e9b3 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 13:17:26,680 DEBUG using gathering [true]
2019-08-15 13:17:26,741 DEBUG [Xorr the God-Jewel] node_sampler_interval[5s]
2019-08-15 13:17:26,776 DEBUG Using select timeout of 500
2019-08-15 13:17:26,777 DEBUG Epoll-bug workaround enabled = false
2019-08-15 13:17:26,895 DEBUG [Xorr the God-Jewel] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 13:18:10,494 DEBUG {conn-10001,procId-7} connected
2019-08-15 13:18:10,503 DEBUG {conn-10002,procId-8} connected
2019-08-15 13:18:10,509 DEBUG {conn-10003,procId-9} connected
2019-08-15 13:18:10,514 DEBUG {conn-10004,procId-10} connected
2019-08-15 13:18:10,523 DEBUG {conn-10005,procId-11} connected
2019-08-15 13:18:10,530 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:10,532 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:10,540 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:10,542 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:10,901 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:10,939 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:11,635 INFO [Ape] modules [], plugins [], sites []
2019-08-15 13:18:11,647 DEBUG [Ape] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 13:18:11,661 DEBUG [Ape] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 13:18:11,672 DEBUG [Ape] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 13:18:11,673 DEBUG [Ape] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 13:18:11,673 DEBUG [Ape] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 13:18:11,674 DEBUG [Ape] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:18:11,674 DEBUG [Ape] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 13:18:11,674 DEBUG [Ape] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 13:18:11,674 DEBUG [Ape] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:18:11,674 DEBUG [Ape] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 13:18:11,674 DEBUG [Ape] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:18:11,674 DEBUG [Ape] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 13:18:11,674 DEBUG [Ape] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 13:18:11,674 DEBUG [Ape] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 13:18:11,674 DEBUG [Ape] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 13:18:11,675 DEBUG [Ape] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:18:13,307 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:e1e2:3cd9:5c75:e9b3 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 13:18:13,327 DEBUG using gathering [true]
2019-08-15 13:18:13,350 DEBUG [Ape] node_sampler_interval[5s]
2019-08-15 13:18:13,358 DEBUG Using select timeout of 500
2019-08-15 13:18:13,358 DEBUG Epoll-bug workaround enabled = false
2019-08-15 13:18:13,407 DEBUG [Ape] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 13:18:13,440 DEBUG [Ape] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 13:18:13,487 DEBUG [Ape] connected to node [{Zeus}{vlb-6GmtRvC8LVWdZoKxVw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 13:18:14,272 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:14,272 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:26,501 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 13:18:26,613 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:26,734 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 13:18:26,741 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 13:18:26,742 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 13:18:26,761 DEBUG {conn-10005, pstmt-20000} executed. 22.031919 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 13:18:26,764 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 13:18:26,765 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 13:18:26,771 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 13:18:26,773 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 13:18:26,773 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 13:18:26,773 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 13:18:26,773 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 13:18:26,774 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:26,779 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:26,779 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 13:18:26,779 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 13:18:26,780 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 13:18:26,782 DEBUG {conn-10005, pstmt-20001} executed. 2.416577 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 13:18:26,782 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 13:18:26,782 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 13:18:26,782 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 13:18:26,783 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 13:18:26,783 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 13:18:26,783 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 13:18:26,783 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 13:18:26,783 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:26,784 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:26,788 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 13:18:26,789 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 13:18:26,789 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 13:18:26,803 DEBUG {conn-10005, pstmt-20002} executed. 14.887057 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 13:18:26,803 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 13:18:26,803 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 13:18:26,803 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 13:18:26,803 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 13:18:26,803 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 13:18:26,803 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [140, 1, spring security]
2019-08-15 13:18:26,803 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 13:18:26,804 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 13:18:26,804 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:26,806 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:26,807 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 13:18:26,807 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 13:18:26,807 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 13:18:26,812 DEBUG {conn-10005, pstmt-20003} executed. 4.118615 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 13:18:26,812 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 13:18:26,812 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 13:18:26,812 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 13:18:26,812 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 13:18:26,812 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 13:18:26,812 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 13:18:26,813 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 13:18:26,813 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 13:18:26,813 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 13:18:26,813 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 13:18:26,814 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 13:18:26,814 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 13:18:26,814 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 13:18:26,814 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 13:18:26,815 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 13:18:26,815 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:18:26,815 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:26,957 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:26,958 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 13:18:26,958 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 13:18:26,959 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 13:18:26,963 DEBUG {conn-10005, pstmt-20004} executed. 4.257411 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 13:18:26,963 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 13:18:26,963 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 13:18:26,963 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 13:18:26,963 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 13:18:26,963 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:31,821 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:31,823 DEBUG {conn-10005, pstmt-20005} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:18:31,825 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 13:18:31,825 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 13:18:31,827 DEBUG {conn-10005, pstmt-20005} executed. 2.878198 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:18:31,828 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-15 13:18:31,828 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:18:31,828 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 1, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 13:18:31,829 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-15 13:18:31,829 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:18:31,829 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:31,829 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:31,835 DEBUG {conn-10005, pstmt-20006} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:18:31,839 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 2, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 13:18:31,839 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:18:31,856 DEBUG {conn-10005, pstmt-20006} executed. 17.093384 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:18:31,856 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:18:31,856 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:31,910 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:31,911 DEBUG {conn-10005, pstmt-20007} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:18:31,911 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 13:18:31,911 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:18:31,916 DEBUG {conn-10005, pstmt-20007} executed. 5.163691 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:18:31,916 DEBUG {conn-10005, pstmt-20007, rs-50006} open
2019-08-15 13:18:31,916 DEBUG {conn-10005, pstmt-20007, rs-50006} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:18:31,917 DEBUG {conn-10005, pstmt-20007, rs-50006} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 13:18:31,917 DEBUG {conn-10005, pstmt-20007, rs-50006} closed
2019-08-15 13:18:31,917 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:18:31,918 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:31,919 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:31,921 DEBUG {conn-10005, pstmt-20008} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:18:31,921 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 13:18:31,921 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:18:31,926 DEBUG {conn-10005, pstmt-20008} executed. 4.964237 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:18:31,926 DEBUG {conn-10005, pstmt-20008, rs-50007} open
2019-08-15 13:18:31,926 DEBUG {conn-10005, pstmt-20008, rs-50007} Header: [count(*)]
2019-08-15 13:18:31,926 DEBUG {conn-10005, pstmt-20008, rs-50007} Result: [0]
2019-08-15 13:18:31,928 DEBUG {conn-10005, pstmt-20008, rs-50007} closed
2019-08-15 13:18:31,928 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:18:31,928 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:31,928 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:31,929 DEBUG {conn-10005, pstmt-20009} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 13:18:31,929 DEBUG {conn-10005, pstmt-20009} Parameters : [24, 1, 0, 8]
2019-08-15 13:18:31,929 DEBUG {conn-10005, pstmt-20009} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 13:18:31,930 DEBUG {conn-10005, pstmt-20009} executed. 0.754634 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 13:18:31,930 DEBUG {conn-10005, pstmt-20009, rs-50008} open
2019-08-15 13:18:31,930 DEBUG {conn-10005, pstmt-20009, rs-50008} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 13:18:31,930 DEBUG {conn-10005, pstmt-20009, rs-50008} closed
2019-08-15 13:18:31,931 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 13:18:31,931 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:31,931 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:31,931 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 13:18:31,931 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 13:18:31,932 DEBUG {conn-10005, pstmt-20003} executed. 0.906794 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 13:18:31,932 DEBUG {conn-10005, pstmt-20003, rs-50009} open
2019-08-15 13:18:31,932 DEBUG {conn-10005, pstmt-20003, rs-50009} Header: [config_name, config_value, create_time, update_time]
2019-08-15 13:18:31,932 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 13:18:31,932 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 13:18:31,933 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 13:18:31,933 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 13:18:31,934 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 13:18:31,934 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 13:18:31,934 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 13:18:31,934 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 13:18:31,934 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 13:18:31,934 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 13:18:31,935 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 13:18:31,935 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 13:18:31,935 DEBUG {conn-10005, pstmt-20003, rs-50009} closed
2019-08-15 13:18:31,935 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:18:31,935 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:35,336 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:35,336 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 13:18:35,336 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 13:18:35,337 DEBUG {conn-10005, pstmt-20005} executed. 0.652851 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:18:35,337 DEBUG {conn-10005, pstmt-20005, rs-50010} open
2019-08-15 13:18:35,337 DEBUG {conn-10005, pstmt-20005, rs-50010} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:18:35,337 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 2, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 13:18:35,338 DEBUG {conn-10005, pstmt-20005, rs-50010} closed
2019-08-15 13:18:35,338 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:18:35,338 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:35,338 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:35,338 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 3, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 0, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 13:18:35,338 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:18:35,347 DEBUG {conn-10005, pstmt-20006} executed. 8.256765 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:18:35,347 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:18:35,347 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:35,348 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:35,348 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 13:18:35,348 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:18:35,349 DEBUG {conn-10005, pstmt-20007} executed. 0.601445 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:18:35,349 DEBUG {conn-10005, pstmt-20007, rs-50011} open
2019-08-15 13:18:35,349 DEBUG {conn-10005, pstmt-20007, rs-50011} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:18:35,349 DEBUG {conn-10005, pstmt-20007, rs-50011} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 13:18:35,349 DEBUG {conn-10005, pstmt-20007, rs-50011} closed
2019-08-15 13:18:35,349 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:18:35,349 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:35,349 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:35,350 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 13:18:35,350 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:18:35,350 DEBUG {conn-10005, pstmt-20008} executed. 0.493494 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:18:35,350 DEBUG {conn-10005, pstmt-20008, rs-50012} open
2019-08-15 13:18:35,350 DEBUG {conn-10005, pstmt-20008, rs-50012} Header: [count(*)]
2019-08-15 13:18:35,350 DEBUG {conn-10005, pstmt-20008, rs-50012} Result: [0]
2019-08-15 13:18:35,350 DEBUG {conn-10005, pstmt-20008, rs-50012} closed
2019-08-15 13:18:35,350 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:18:35,350 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:35,351 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:35,351 DEBUG {conn-10005, pstmt-20010} created. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:18:35,351 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 13:18:35,351 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 13:18:35,354 DEBUG {conn-10005, pstmt-20010} executed. 2.373909 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:18:35,354 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 13:18:35,354 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:39,508 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:39,509 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 13:18:39,509 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 13:18:39,509 DEBUG {conn-10005, pstmt-20005} executed. 0.784963 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:18:39,509 DEBUG {conn-10005, pstmt-20005, rs-50013} open
2019-08-15 13:18:39,510 DEBUG {conn-10005, pstmt-20005, rs-50013} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:18:39,510 DEBUG {conn-10005, pstmt-20005, rs-50013} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 3, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 1, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 13:18:39,510 DEBUG {conn-10005, pstmt-20005, rs-50013} closed
2019-08-15 13:18:39,511 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:18:39,511 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:39,511 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:39,511 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 4, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 1, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 13:18:39,511 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:18:39,520 DEBUG {conn-10005, pstmt-20006} executed. 8.756941 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:18:39,520 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:18:39,520 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:39,522 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:39,522 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 13:18:39,522 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:18:39,523 DEBUG {conn-10005, pstmt-20007} executed. 0.904738 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:18:39,523 DEBUG {conn-10005, pstmt-20007, rs-50014} open
2019-08-15 13:18:39,523 DEBUG {conn-10005, pstmt-20007, rs-50014} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:18:39,524 DEBUG {conn-10005, pstmt-20007, rs-50014} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 13:18:39,524 DEBUG {conn-10005, pstmt-20007, rs-50014} closed
2019-08-15 13:18:39,524 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:18:39,524 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:39,525 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:39,525 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 13:18:39,525 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:18:39,525 DEBUG {conn-10005, pstmt-20008} executed. 0.75412 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:18:39,526 DEBUG {conn-10005, pstmt-20008, rs-50015} open
2019-08-15 13:18:39,526 DEBUG {conn-10005, pstmt-20008, rs-50015} Header: [count(*)]
2019-08-15 13:18:39,526 DEBUG {conn-10005, pstmt-20008, rs-50015} Result: [0]
2019-08-15 13:18:39,526 DEBUG {conn-10005, pstmt-20008, rs-50015} closed
2019-08-15 13:18:39,527 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:18:39,527 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:39,527 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:39,527 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 13:18:39,527 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 13:18:39,530 DEBUG {conn-10005, pstmt-20010} executed. 2.737861 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:18:39,530 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 13:18:39,530 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:39,880 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:39,881 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 13:18:39,881 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 13:18:39,882 DEBUG {conn-10005, pstmt-20005} executed. 0.695004 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:18:39,882 DEBUG {conn-10005, pstmt-20005, rs-50016} open
2019-08-15 13:18:39,882 DEBUG {conn-10005, pstmt-20005, rs-50016} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:18:39,882 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 4, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 2, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 13:18:39,882 DEBUG {conn-10005, pstmt-20005, rs-50016} closed
2019-08-15 13:18:39,882 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:18:39,882 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:39,882 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:39,883 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 5, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 2, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 13:18:39,883 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:18:39,891 DEBUG {conn-10005, pstmt-20006} executed. 7.781263 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:18:39,891 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:18:39,891 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:39,892 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:39,892 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 13:18:39,892 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:18:39,892 DEBUG {conn-10005, pstmt-20007} executed. 0.529991 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:18:39,892 DEBUG {conn-10005, pstmt-20007, rs-50017} open
2019-08-15 13:18:39,893 DEBUG {conn-10005, pstmt-20007, rs-50017} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:18:39,893 DEBUG {conn-10005, pstmt-20007, rs-50017} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 13:18:39,893 DEBUG {conn-10005, pstmt-20007, rs-50017} closed
2019-08-15 13:18:39,893 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:18:39,893 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:39,893 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:39,893 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 13:18:39,893 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:18:39,894 DEBUG {conn-10005, pstmt-20008} executed. 0.4791 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:18:39,894 DEBUG {conn-10005, pstmt-20008, rs-50018} open
2019-08-15 13:18:39,894 DEBUG {conn-10005, pstmt-20008, rs-50018} Header: [count(*)]
2019-08-15 13:18:39,894 DEBUG {conn-10005, pstmt-20008, rs-50018} Result: [0]
2019-08-15 13:18:39,894 DEBUG {conn-10005, pstmt-20008, rs-50018} closed
2019-08-15 13:18:39,894 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:18:39,894 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:39,894 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:39,895 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 13:18:39,895 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 13:18:39,896 DEBUG {conn-10005, pstmt-20010} executed. 1.798168 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:18:39,896 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 13:18:39,897 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:40,427 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:40,428 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 13:18:40,428 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 13:18:40,429 DEBUG {conn-10005, pstmt-20005} executed. 0.931469 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:18:40,429 DEBUG {conn-10005, pstmt-20005, rs-50019} open
2019-08-15 13:18:40,429 DEBUG {conn-10005, pstmt-20005, rs-50019} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:18:40,429 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 5, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 3, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 13:18:40,429 DEBUG {conn-10005, pstmt-20005, rs-50019} closed
2019-08-15 13:18:40,430 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:18:40,430 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:40,430 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:40,430 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 6, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 3, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 13:18:40,430 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:18:40,433 DEBUG {conn-10005, pstmt-20006} executed. 2.80109 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:18:40,433 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:18:40,433 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:40,434 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:40,435 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 13:18:40,435 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:18:40,435 DEBUG {conn-10005, pstmt-20007} executed. 0.497606 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:18:40,435 DEBUG {conn-10005, pstmt-20007, rs-50020} open
2019-08-15 13:18:40,435 DEBUG {conn-10005, pstmt-20007, rs-50020} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:18:40,435 DEBUG {conn-10005, pstmt-20007, rs-50020} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 13:18:40,436 DEBUG {conn-10005, pstmt-20007, rs-50020} closed
2019-08-15 13:18:40,436 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:18:40,436 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:40,436 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:40,436 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 13:18:40,436 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:18:40,436 DEBUG {conn-10005, pstmt-20008} executed. 0.348015 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:18:40,436 DEBUG {conn-10005, pstmt-20008, rs-50021} open
2019-08-15 13:18:40,436 DEBUG {conn-10005, pstmt-20008, rs-50021} Header: [count(*)]
2019-08-15 13:18:40,436 DEBUG {conn-10005, pstmt-20008, rs-50021} Result: [0]
2019-08-15 13:18:40,437 DEBUG {conn-10005, pstmt-20008, rs-50021} closed
2019-08-15 13:18:40,437 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:18:40,437 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:40,437 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:40,437 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 13:18:40,437 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 13:18:40,439 DEBUG {conn-10005, pstmt-20010} executed. 1.854199 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:18:40,439 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 13:18:40,439 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:40,725 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:40,726 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 13:18:40,726 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 13:18:40,730 DEBUG {conn-10005, pstmt-20005} executed. 4.52472 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:18:40,730 DEBUG {conn-10005, pstmt-20005, rs-50022} open
2019-08-15 13:18:40,730 DEBUG {conn-10005, pstmt-20005, rs-50022} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:18:40,730 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 6, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 4, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 13:18:40,731 DEBUG {conn-10005, pstmt-20005, rs-50022} closed
2019-08-15 13:18:40,731 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:18:40,731 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:40,731 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:40,731 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 7, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 4, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 13:18:40,731 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:18:40,735 DEBUG {conn-10005, pstmt-20006} executed. 3.742841 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:18:40,735 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:18:40,735 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:40,736 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:40,736 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 13:18:40,736 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:18:40,737 DEBUG {conn-10005, pstmt-20007} executed. 0.572658 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:18:40,737 DEBUG {conn-10005, pstmt-20007, rs-50023} open
2019-08-15 13:18:40,737 DEBUG {conn-10005, pstmt-20007, rs-50023} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:18:40,737 DEBUG {conn-10005, pstmt-20007, rs-50023} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 13:18:40,737 DEBUG {conn-10005, pstmt-20007, rs-50023} closed
2019-08-15 13:18:40,737 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:18:40,737 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:40,738 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:40,738 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 13:18:40,738 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:18:40,738 DEBUG {conn-10005, pstmt-20008} executed. 0.446201 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:18:40,738 DEBUG {conn-10005, pstmt-20008, rs-50024} open
2019-08-15 13:18:40,738 DEBUG {conn-10005, pstmt-20008, rs-50024} Header: [count(*)]
2019-08-15 13:18:40,738 DEBUG {conn-10005, pstmt-20008, rs-50024} Result: [0]
2019-08-15 13:18:40,739 DEBUG {conn-10005, pstmt-20008, rs-50024} closed
2019-08-15 13:18:40,739 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:18:40,739 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:40,739 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:40,739 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 13:18:40,739 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 13:18:40,742 DEBUG {conn-10005, pstmt-20010} executed. 3.281218 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:18:40,742 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 13:18:40,742 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,297 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,298 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 13:18:41,298 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 13:18:41,298 DEBUG {conn-10005, pstmt-20005} executed. 0.528963 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:18:41,298 DEBUG {conn-10005, pstmt-20005, rs-50025} open
2019-08-15 13:18:41,298 DEBUG {conn-10005, pstmt-20005, rs-50025} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:18:41,299 DEBUG {conn-10005, pstmt-20005, rs-50025} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 7, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 5, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 13:18:41,299 DEBUG {conn-10005, pstmt-20005, rs-50025} closed
2019-08-15 13:18:41,299 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:18:41,299 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,299 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,299 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 8, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 5, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 13:18:41,299 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:18:41,302 DEBUG {conn-10005, pstmt-20006} executed. 2.555371 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:18:41,302 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:18:41,302 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,303 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,303 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 13:18:41,303 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:18:41,303 DEBUG {conn-10005, pstmt-20007} executed. 0.414843 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:18:41,303 DEBUG {conn-10005, pstmt-20007, rs-50026} open
2019-08-15 13:18:41,303 DEBUG {conn-10005, pstmt-20007, rs-50026} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:18:41,304 DEBUG {conn-10005, pstmt-20007, rs-50026} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 13:18:41,304 DEBUG {conn-10005, pstmt-20007, rs-50026} closed
2019-08-15 13:18:41,304 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:18:41,304 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,304 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,304 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 13:18:41,304 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:18:41,305 DEBUG {conn-10005, pstmt-20008} executed. 0.409702 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:18:41,305 DEBUG {conn-10005, pstmt-20008, rs-50027} open
2019-08-15 13:18:41,305 DEBUG {conn-10005, pstmt-20008, rs-50027} Header: [count(*)]
2019-08-15 13:18:41,305 DEBUG {conn-10005, pstmt-20008, rs-50027} Result: [0]
2019-08-15 13:18:41,305 DEBUG {conn-10005, pstmt-20008, rs-50027} closed
2019-08-15 13:18:41,305 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:18:41,305 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,305 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,305 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 13:18:41,305 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 13:18:41,309 DEBUG {conn-10005, pstmt-20010} executed. 3.880093 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:18:41,309 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 13:18:41,309 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,515 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,515 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 13:18:41,515 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 13:18:41,516 DEBUG {conn-10005, pstmt-20005} executed. 0.518168 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:18:41,516 DEBUG {conn-10005, pstmt-20005, rs-50028} open
2019-08-15 13:18:41,516 DEBUG {conn-10005, pstmt-20005, rs-50028} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:18:41,516 DEBUG {conn-10005, pstmt-20005, rs-50028} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 8, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 6, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 13:18:41,517 DEBUG {conn-10005, pstmt-20005, rs-50028} closed
2019-08-15 13:18:41,517 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:18:41,517 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,517 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,517 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 9, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 6, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 13:18:41,517 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:18:41,525 DEBUG {conn-10005, pstmt-20006} executed. 8.183255 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:18:41,525 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:18:41,526 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,527 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,527 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 13:18:41,527 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:18:41,528 DEBUG {conn-10005, pstmt-20007} executed. 0.821461 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:18:41,528 DEBUG {conn-10005, pstmt-20007, rs-50029} open
2019-08-15 13:18:41,528 DEBUG {conn-10005, pstmt-20007, rs-50029} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:18:41,528 DEBUG {conn-10005, pstmt-20007, rs-50029} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 13:18:41,529 DEBUG {conn-10005, pstmt-20007, rs-50029} closed
2019-08-15 13:18:41,529 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:18:41,529 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,529 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,530 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 13:18:41,530 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:18:41,530 DEBUG {conn-10005, pstmt-20008} executed. 0.655935 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:18:41,530 DEBUG {conn-10005, pstmt-20008, rs-50030} open
2019-08-15 13:18:41,530 DEBUG {conn-10005, pstmt-20008, rs-50030} Header: [count(*)]
2019-08-15 13:18:41,530 DEBUG {conn-10005, pstmt-20008, rs-50030} Result: [0]
2019-08-15 13:18:41,530 DEBUG {conn-10005, pstmt-20008, rs-50030} closed
2019-08-15 13:18:41,530 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:18:41,531 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,531 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,531 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 13:18:41,531 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 13:18:41,533 DEBUG {conn-10005, pstmt-20010} executed. 1.779148 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:18:41,533 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 13:18:41,533 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,726 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,727 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 13:18:41,727 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 13:18:41,727 DEBUG {conn-10005, pstmt-20005} executed. 0.591165 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:18:41,727 DEBUG {conn-10005, pstmt-20005, rs-50031} open
2019-08-15 13:18:41,727 DEBUG {conn-10005, pstmt-20005, rs-50031} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:18:41,728 DEBUG {conn-10005, pstmt-20005, rs-50031} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 9, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 7, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 13:18:41,728 DEBUG {conn-10005, pstmt-20005, rs-50031} closed
2019-08-15 13:18:41,728 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:18:41,728 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,729 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,729 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 10, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 7, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 13:18:41,729 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:18:41,732 DEBUG {conn-10005, pstmt-20006} executed. 2.624255 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:18:41,732 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:18:41,732 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,732 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,733 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 13:18:41,733 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:18:41,733 DEBUG {conn-10005, pstmt-20007} executed. 0.464192 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:18:41,733 DEBUG {conn-10005, pstmt-20007, rs-50032} open
2019-08-15 13:18:41,733 DEBUG {conn-10005, pstmt-20007, rs-50032} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:18:41,733 DEBUG {conn-10005, pstmt-20007, rs-50032} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 13:18:41,734 DEBUG {conn-10005, pstmt-20007, rs-50032} closed
2019-08-15 13:18:41,734 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:18:41,734 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,734 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,734 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 13:18:41,734 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:18:41,734 DEBUG {conn-10005, pstmt-20008} executed. 0.357783 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:18:41,734 DEBUG {conn-10005, pstmt-20008, rs-50033} open
2019-08-15 13:18:41,734 DEBUG {conn-10005, pstmt-20008, rs-50033} Header: [count(*)]
2019-08-15 13:18:41,734 DEBUG {conn-10005, pstmt-20008, rs-50033} Result: [0]
2019-08-15 13:18:41,735 DEBUG {conn-10005, pstmt-20008, rs-50033} closed
2019-08-15 13:18:41,735 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:18:41,735 DEBUG {conn-10005} pool-recycle
2019-08-15 13:18:41,735 DEBUG {conn-10005} pool-connect
2019-08-15 13:18:41,735 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 13:18:41,735 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 13:18:41,736 DEBUG {conn-10005, pstmt-20010} executed. 1.568384 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:18:41,737 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 13:18:41,737 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:07,557 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:07,558 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 13:19:07,558 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 13:19:07,558 DEBUG {conn-10005, pstmt-20000} executed. 0.958714 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 13:19:07,558 DEBUG {conn-10005, pstmt-20000, rs-50034} open
2019-08-15 13:19:07,559 DEBUG {conn-10005, pstmt-20000, rs-50034} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 13:19:07,559 DEBUG {conn-10005, pstmt-20000, rs-50034} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 10, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 8, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 13:19:07,562 DEBUG {conn-10005, pstmt-20000, rs-50034} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 13:19:07,562 DEBUG {conn-10005, pstmt-20000, rs-50034} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 13:19:07,562 DEBUG {conn-10005, pstmt-20000, rs-50034} closed
2019-08-15 13:19:07,562 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 13:19:07,562 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:07,563 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:07,563 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 13:19:07,563 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 13:19:07,564 DEBUG {conn-10005, pstmt-20001} executed. 0.746923 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 13:19:07,564 DEBUG {conn-10005, pstmt-20001, rs-50035} open
2019-08-15 13:19:07,564 DEBUG {conn-10005, pstmt-20001, rs-50035} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 13:19:07,564 DEBUG {conn-10005, pstmt-20001, rs-50035} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 13:19:07,565 DEBUG {conn-10005, pstmt-20001, rs-50035} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 13:19:07,565 DEBUG {conn-10005, pstmt-20001, rs-50035} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 10, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 8, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 13:19:07,565 DEBUG {conn-10005, pstmt-20001, rs-50035} closed
2019-08-15 13:19:07,565 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 13:19:07,565 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:07,566 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:07,566 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 13:19:07,566 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 13:19:07,567 DEBUG {conn-10005, pstmt-20002} executed. 0.994184 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 13:19:07,567 DEBUG {conn-10005, pstmt-20002, rs-50036} open
2019-08-15 13:19:07,567 DEBUG {conn-10005, pstmt-20002, rs-50036} Header: [tag_id, tag_count, tag_name]
2019-08-15 13:19:07,567 DEBUG {conn-10005, pstmt-20002, rs-50036} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 13:19:07,567 DEBUG {conn-10005, pstmt-20002, rs-50036} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 13:19:07,567 DEBUG {conn-10005, pstmt-20002, rs-50036} Result: [139, 1, jqGrid]
2019-08-15 13:19:07,567 DEBUG {conn-10005, pstmt-20002, rs-50036} Result: [140, 1, spring security]
2019-08-15 13:19:07,567 DEBUG {conn-10005, pstmt-20002, rs-50036} closed
2019-08-15 13:19:07,567 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 13:19:07,567 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:07,567 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:07,568 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 13:19:07,568 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 13:19:07,568 DEBUG {conn-10005, pstmt-20003} executed. 0.624064 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 13:19:07,568 DEBUG {conn-10005, pstmt-20003, rs-50037} open
2019-08-15 13:19:07,568 DEBUG {conn-10005, pstmt-20003, rs-50037} Header: [config_name, config_value, create_time, update_time]
2019-08-15 13:19:07,568 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 13:19:07,569 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 13:19:07,569 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 13:19:07,569 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 13:19:07,569 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 13:19:07,569 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 13:19:07,569 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 13:19:07,569 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 13:19:07,569 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 13:19:07,569 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 13:19:07,569 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 13:19:07,570 DEBUG {conn-10005, pstmt-20003, rs-50037} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 13:19:07,570 DEBUG {conn-10005, pstmt-20003, rs-50037} closed
2019-08-15 13:19:07,570 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:19:07,570 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:07,605 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:07,606 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 13:19:07,606 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 13:19:07,606 DEBUG {conn-10005, pstmt-20004} executed. 0.556722 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 13:19:07,606 DEBUG {conn-10005, pstmt-20004, rs-50038} open
2019-08-15 13:19:07,606 DEBUG {conn-10005, pstmt-20004, rs-50038} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 13:19:07,606 DEBUG {conn-10005, pstmt-20004, rs-50038} closed
2019-08-15 13:19:07,606 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 13:19:07,606 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:11,400 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:11,400 DEBUG {conn-10005, pstmt-20005} Parameters : [23]
2019-08-15 13:19:11,400 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 13:19:11,401 DEBUG {conn-10005, pstmt-20005} executed. 0.888803 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:19:11,401 DEBUG {conn-10005, pstmt-20005, rs-50039} open
2019-08-15 13:19:11,401 DEBUG {conn-10005, pstmt-20005, rs-50039} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:19:11,401 DEBUG {conn-10005, pstmt-20005, rs-50039} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 20, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 13:19:11,402 DEBUG {conn-10005, pstmt-20005, rs-50039} closed
2019-08-15 13:19:11,402 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:19:11,403 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:11,403 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:11,403 DEBUG {conn-10005, pstmt-20006} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 21, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 13:19:11,403 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:19:11,406 DEBUG {conn-10005, pstmt-20006} executed. 2.787725 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:19:11,406 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:19:11,406 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:11,408 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:11,408 DEBUG {conn-10005, pstmt-20007} Parameters : [25]
2019-08-15 13:19:11,408 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:19:11,409 DEBUG {conn-10005, pstmt-20007} executed. 0.829172 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:19:11,409 DEBUG {conn-10005, pstmt-20007, rs-50040} open
2019-08-15 13:19:11,409 DEBUG {conn-10005, pstmt-20007, rs-50040} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:19:11,409 DEBUG {conn-10005, pstmt-20007, rs-50040} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 13:19:11,409 DEBUG {conn-10005, pstmt-20007, rs-50040} closed
2019-08-15 13:19:11,409 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:19:11,410 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:11,410 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:11,410 DEBUG {conn-10005, pstmt-20008} Parameters : [23, 1]
2019-08-15 13:19:11,410 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:19:11,410 DEBUG {conn-10005, pstmt-20008} executed. 0.501204 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:19:11,411 DEBUG {conn-10005, pstmt-20008, rs-50041} open
2019-08-15 13:19:11,411 DEBUG {conn-10005, pstmt-20008, rs-50041} Header: [count(*)]
2019-08-15 13:19:11,411 DEBUG {conn-10005, pstmt-20008, rs-50041} Result: [1]
2019-08-15 13:19:11,411 DEBUG {conn-10005, pstmt-20008, rs-50041} closed
2019-08-15 13:19:11,411 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:19:11,411 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:11,411 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:11,411 DEBUG {conn-10005, pstmt-20009} Parameters : [23, 1, 0, 8]
2019-08-15 13:19:11,411 DEBUG {conn-10005, pstmt-20009} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 13:19:11,412 DEBUG {conn-10005, pstmt-20009} executed. 0.479614 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 13:19:11,412 DEBUG {conn-10005, pstmt-20009, rs-50042} open
2019-08-15 13:19:11,412 DEBUG {conn-10005, pstmt-20009, rs-50042} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 13:19:11,412 DEBUG {conn-10005, pstmt-20009, rs-50042} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 1, 0]
2019-08-15 13:19:11,412 DEBUG {conn-10005, pstmt-20009, rs-50042} closed
2019-08-15 13:19:11,412 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 13:19:11,413 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:11,413 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:11,413 DEBUG {conn-10005, pstmt-20008} Parameters : [23, 1]
2019-08-15 13:19:11,413 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:19:11,413 DEBUG {conn-10005, pstmt-20008} executed. 0.451855 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:19:11,413 DEBUG {conn-10005, pstmt-20008, rs-50043} open
2019-08-15 13:19:11,413 DEBUG {conn-10005, pstmt-20008, rs-50043} Header: [count(*)]
2019-08-15 13:19:11,413 DEBUG {conn-10005, pstmt-20008, rs-50043} Result: [1]
2019-08-15 13:19:11,414 DEBUG {conn-10005, pstmt-20008, rs-50043} closed
2019-08-15 13:19:11,414 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:19:11,414 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:11,414 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:11,414 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 13:19:11,414 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 13:19:11,414 DEBUG {conn-10005, pstmt-20003} executed. 0.537703 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 13:19:11,415 DEBUG {conn-10005, pstmt-20003, rs-50044} open
2019-08-15 13:19:11,415 DEBUG {conn-10005, pstmt-20003, rs-50044} Header: [config_name, config_value, create_time, update_time]
2019-08-15 13:19:11,415 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 13:19:11,415 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 13:19:11,415 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 13:19:11,415 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 13:19:11,415 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 13:19:11,416 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 13:19:11,416 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 13:19:11,416 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 13:19:11,416 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 13:19:11,416 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 13:19:11,416 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 13:19:11,416 DEBUG {conn-10005, pstmt-20003, rs-50044} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 13:19:11,417 DEBUG {conn-10005, pstmt-20003, rs-50044} closed
2019-08-15 13:19:11,417 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:19:11,417 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:14,720 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:14,720 DEBUG {conn-10005, pstmt-20005} Parameters : [23]
2019-08-15 13:19:14,721 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 13:19:14,726 DEBUG {conn-10005, pstmt-20005} executed. 5.862807 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:19:14,726 DEBUG {conn-10005, pstmt-20005, rs-50045} open
2019-08-15 13:19:14,726 DEBUG {conn-10005, pstmt-20005, rs-50045} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:19:14,727 DEBUG {conn-10005, pstmt-20005, rs-50045} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 21, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 13:19:14,727 DEBUG {conn-10005, pstmt-20005, rs-50045} closed
2019-08-15 13:19:14,727 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:19:14,727 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:14,727 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:14,727 DEBUG {conn-10005, pstmt-20006} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 22, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 2, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 13:19:14,727 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:19:14,736 DEBUG {conn-10005, pstmt-20006} executed. 8.290178 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:19:14,736 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:19:14,736 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:14,737 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:14,737 DEBUG {conn-10005, pstmt-20007} Parameters : [25]
2019-08-15 13:19:14,737 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:19:14,738 DEBUG {conn-10005, pstmt-20007} executed. 0.684723 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:19:14,738 DEBUG {conn-10005, pstmt-20007, rs-50046} open
2019-08-15 13:19:14,738 DEBUG {conn-10005, pstmt-20007, rs-50046} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:19:14,738 DEBUG {conn-10005, pstmt-20007, rs-50046} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 13:19:14,738 DEBUG {conn-10005, pstmt-20007, rs-50046} closed
2019-08-15 13:19:14,739 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:19:14,739 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:14,739 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:14,739 DEBUG {conn-10005, pstmt-20008} Parameters : [23, 1]
2019-08-15 13:19:14,739 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 13:19:14,739 DEBUG {conn-10005, pstmt-20008} executed. 0.599389 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:19:14,739 DEBUG {conn-10005, pstmt-20008, rs-50047} open
2019-08-15 13:19:14,740 DEBUG {conn-10005, pstmt-20008, rs-50047} Header: [count(*)]
2019-08-15 13:19:14,740 DEBUG {conn-10005, pstmt-20008, rs-50047} Result: [1]
2019-08-15 13:19:14,740 DEBUG {conn-10005, pstmt-20008, rs-50047} closed
2019-08-15 13:19:14,740 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:19:14,740 DEBUG {conn-10005} pool-recycle
2019-08-15 13:19:14,740 DEBUG {conn-10005} pool-connect
2019-08-15 13:19:14,740 DEBUG {conn-10005, pstmt-20010} Parameters : [23]
2019-08-15 13:19:14,740 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 13:19:14,742 DEBUG {conn-10005, pstmt-20010} executed. 2.134874 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:19:14,742 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 13:19:14,742 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:15,000 DEBUG {conn-10001,procId-12} connected
2019-08-15 13:21:15,009 DEBUG {conn-10002,procId-13} connected
2019-08-15 13:21:15,015 DEBUG {conn-10003,procId-14} connected
2019-08-15 13:21:15,023 DEBUG {conn-10004,procId-15} connected
2019-08-15 13:21:15,030 DEBUG {conn-10005,procId-16} connected
2019-08-15 13:21:15,045 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:15,047 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:15,055 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:15,057 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:15,415 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:15,453 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:16,111 INFO [Ecstasy] modules [], plugins [], sites []
2019-08-15 13:21:16,123 DEBUG [Ecstasy] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 13:21:16,132 DEBUG [Ecstasy] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 13:21:16,142 DEBUG [Ecstasy] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 13:21:16,143 DEBUG [Ecstasy] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 13:21:16,143 DEBUG [Ecstasy] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 13:21:16,143 DEBUG [Ecstasy] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:21:16,143 DEBUG [Ecstasy] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 13:21:16,143 DEBUG [Ecstasy] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 13:21:16,143 DEBUG [Ecstasy] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:21:16,144 DEBUG [Ecstasy] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 13:21:16,144 DEBUG [Ecstasy] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:21:16,144 DEBUG [Ecstasy] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 13:21:16,144 DEBUG [Ecstasy] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 13:21:16,144 DEBUG [Ecstasy] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 13:21:16,144 DEBUG [Ecstasy] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 13:21:16,144 DEBUG [Ecstasy] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 13:21:17,926 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:e1e2:3cd9:5c75:e9b3 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 13:21:17,943 DEBUG using gathering [true]
2019-08-15 13:21:17,967 DEBUG [Ecstasy] node_sampler_interval[5s]
2019-08-15 13:21:17,978 DEBUG Using select timeout of 500
2019-08-15 13:21:17,978 DEBUG Epoll-bug workaround enabled = false
2019-08-15 13:21:18,035 DEBUG [Ecstasy] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 13:21:18,059 DEBUG [Ecstasy] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 13:21:18,100 DEBUG [Ecstasy] connected to node [{Zeus}{vlb-6GmtRvC8LVWdZoKxVw}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 13:21:18,764 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:18,764 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:25,109 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:25,323 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:21:25,337 DEBUG {conn-10005, pstmt-20000} Parameters : [23]
2019-08-15 13:21:25,337 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 13:21:25,344 DEBUG {conn-10005, pstmt-20000} executed. 11.795011 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:21:25,351 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 13:21:25,354 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:21:25,365 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 22, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 3, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 13:21:25,369 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 13:21:25,369 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 13:21:25,371 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:25,371 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:25,378 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:21:25,385 DEBUG {conn-10005, pstmt-20001} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 23, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 3, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 13:21:25,385 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:21:25,388 DEBUG {conn-10005, pstmt-20001} executed. 3.672414 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:21:25,389 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 13:21:25,389 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:25,462 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:25,464 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:21:25,464 DEBUG {conn-10005, pstmt-20002} Parameters : [25]
2019-08-15 13:21:25,464 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 13:21:25,467 DEBUG {conn-10005, pstmt-20002} executed. 2.522472 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:21:25,467 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-15 13:21:25,467 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:21:25,467 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 13:21:25,468 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-15 13:21:25,468 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 13:21:25,469 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:25,496 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:25,499 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:21:25,500 DEBUG {conn-10005, pstmt-20003} Parameters : [23, 1]
2019-08-15 13:21:25,500 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 13:21:25,503 DEBUG {conn-10005, pstmt-20003} executed. 2.609861 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:21:25,503 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-15 13:21:25,503 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-15 13:21:25,503 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [1]
2019-08-15 13:21:25,506 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-15 13:21:25,506 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:21:25,506 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:25,509 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:25,513 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 13:21:25,513 DEBUG {conn-10005, pstmt-20004} Parameters : [23, 1, 0, 8]
2019-08-15 13:21:25,513 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 13:21:25,514 DEBUG {conn-10005, pstmt-20004} executed. 0.965911 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 13:21:25,515 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-15 13:21:25,515 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 13:21:25,515 DEBUG {conn-10005, pstmt-20004, rs-50003} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 1, 0]
2019-08-15 13:21:25,516 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-15 13:21:25,516 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 13:21:25,516 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:25,516 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:25,517 DEBUG {conn-10005, pstmt-20003} Parameters : [23, 1]
2019-08-15 13:21:25,517 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 13:21:25,517 DEBUG {conn-10005, pstmt-20003} executed. 0.761317 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:21:25,518 DEBUG {conn-10005, pstmt-20003, rs-50004} open
2019-08-15 13:21:25,518 DEBUG {conn-10005, pstmt-20003, rs-50004} Header: [count(*)]
2019-08-15 13:21:25,518 DEBUG {conn-10005, pstmt-20003, rs-50004} Result: [1]
2019-08-15 13:21:25,518 DEBUG {conn-10005, pstmt-20003, rs-50004} closed
2019-08-15 13:21:25,518 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:21:25,518 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:25,523 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:25,523 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 13:21:25,524 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 13:21:25,524 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 13:21:25,526 DEBUG {conn-10005, pstmt-20005} executed. 2.181138 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 13:21:25,526 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-15 13:21:25,526 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [config_name, config_value, create_time, update_time]
2019-08-15 13:21:25,526 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:25,527 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:25,528 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:25,528 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:25,529 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:25,529 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:25,530 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:25,530 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:25,531 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:25,531 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 13:21:25,532 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 13:21:25,532 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 13:21:25,532 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-15 13:21:25,533 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:21:25,533 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:28,205 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:28,205 DEBUG {conn-10005, pstmt-20000} Parameters : [23]
2019-08-15 13:21:28,206 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 13:21:28,206 DEBUG {conn-10005, pstmt-20000} executed. 0.881606 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:21:28,206 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-15 13:21:28,206 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:21:28,207 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 23, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 3, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 13:21:28,207 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-15 13:21:28,207 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 13:21:28,207 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:28,208 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:28,208 DEBUG {conn-10005, pstmt-20001} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 24, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 3, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 13:21:28,208 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:21:28,210 DEBUG {conn-10005, pstmt-20001} executed. 2.153894 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:21:28,210 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 13:21:28,210 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:28,212 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:28,212 DEBUG {conn-10005, pstmt-20002} Parameters : [25]
2019-08-15 13:21:28,213 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 13:21:28,213 DEBUG {conn-10005, pstmt-20002} executed. 0.698088 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:21:28,213 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-15 13:21:28,213 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:21:28,214 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 13:21:28,214 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-15 13:21:28,214 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 13:21:28,214 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:28,214 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:28,214 DEBUG {conn-10005, pstmt-20003} Parameters : [23, 1]
2019-08-15 13:21:28,214 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 13:21:28,215 DEBUG {conn-10005, pstmt-20003} executed. 0.726361 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:21:28,215 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-15 13:21:28,215 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [count(*)]
2019-08-15 13:21:28,215 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [1]
2019-08-15 13:21:28,215 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-15 13:21:28,216 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:21:28,216 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:28,216 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:28,217 DEBUG {conn-10005, pstmt-20006} created. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:21:28,218 DEBUG {conn-10005, pstmt-20006} Parameters : [23]
2019-08-15 13:21:28,218 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT]
2019-08-15 13:21:28,220 DEBUG {conn-10005, pstmt-20006} executed. 2.766649 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:21:28,221 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:21:28,221 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:32,708 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:32,708 DEBUG {conn-10005, pstmt-20000} Parameters : [23]
2019-08-15 13:21:32,708 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 13:21:32,709 DEBUG {conn-10005, pstmt-20000} executed. 0.595791 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:21:32,709 DEBUG {conn-10005, pstmt-20000, rs-50009} open
2019-08-15 13:21:32,709 DEBUG {conn-10005, pstmt-20000, rs-50009} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:21:32,709 DEBUG {conn-10005, pstmt-20000, rs-50009} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 24, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 4, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 13:21:32,710 DEBUG {conn-10005, pstmt-20000, rs-50009} closed
2019-08-15 13:21:32,710 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 13:21:32,710 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:32,710 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:32,710 DEBUG {conn-10005, pstmt-20001} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 25, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 4, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 13:21:32,710 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:21:32,712 DEBUG {conn-10005, pstmt-20001} executed. 2.022295 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:21:32,712 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 13:21:32,712 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:32,714 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:32,714 DEBUG {conn-10005, pstmt-20002} Parameters : [25]
2019-08-15 13:21:32,714 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 13:21:32,715 DEBUG {conn-10005, pstmt-20002} executed. 0.65902 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:21:32,715 DEBUG {conn-10005, pstmt-20002, rs-50010} open
2019-08-15 13:21:32,715 DEBUG {conn-10005, pstmt-20002, rs-50010} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:21:32,715 DEBUG {conn-10005, pstmt-20002, rs-50010} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 13:21:32,715 DEBUG {conn-10005, pstmt-20002, rs-50010} closed
2019-08-15 13:21:32,715 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 13:21:32,715 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:32,715 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:32,716 DEBUG {conn-10005, pstmt-20003} Parameters : [23, 1]
2019-08-15 13:21:32,716 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 13:21:32,716 DEBUG {conn-10005, pstmt-20003} executed. 0.454939 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:21:32,716 DEBUG {conn-10005, pstmt-20003, rs-50011} open
2019-08-15 13:21:32,716 DEBUG {conn-10005, pstmt-20003, rs-50011} Header: [count(*)]
2019-08-15 13:21:32,716 DEBUG {conn-10005, pstmt-20003, rs-50011} Result: [1]
2019-08-15 13:21:32,716 DEBUG {conn-10005, pstmt-20003, rs-50011} closed
2019-08-15 13:21:32,716 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:21:32,716 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:32,716 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:32,716 DEBUG {conn-10005, pstmt-20006} Parameters : [23]
2019-08-15 13:21:32,717 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT]
2019-08-15 13:21:32,719 DEBUG {conn-10005, pstmt-20006} executed. 2.046456 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:21:32,719 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:21:32,719 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:32,902 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:32,902 DEBUG {conn-10005, pstmt-20000} Parameters : [23]
2019-08-15 13:21:32,902 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 13:21:32,903 DEBUG {conn-10005, pstmt-20000} executed. 0.931469 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:21:32,903 DEBUG {conn-10005, pstmt-20000, rs-50012} open
2019-08-15 13:21:32,903 DEBUG {conn-10005, pstmt-20000, rs-50012} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:21:32,904 DEBUG {conn-10005, pstmt-20000, rs-50012} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 25, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 5, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 13:21:32,904 DEBUG {conn-10005, pstmt-20000, rs-50012} closed
2019-08-15 13:21:32,904 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 13:21:32,904 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:32,904 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:32,904 DEBUG {conn-10005, pstmt-20001} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 26, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 5, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 13:21:32,905 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:21:32,907 DEBUG {conn-10005, pstmt-20001} executed. 2.500881 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:21:32,907 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 13:21:32,907 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:32,908 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:32,909 DEBUG {conn-10005, pstmt-20002} Parameters : [25]
2019-08-15 13:21:32,909 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 13:21:32,909 DEBUG {conn-10005, pstmt-20002} executed. 0.538217 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:21:32,909 DEBUG {conn-10005, pstmt-20002, rs-50013} open
2019-08-15 13:21:32,909 DEBUG {conn-10005, pstmt-20002, rs-50013} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:21:32,909 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 13:21:32,910 DEBUG {conn-10005, pstmt-20002, rs-50013} closed
2019-08-15 13:21:32,910 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 13:21:32,910 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:32,910 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:32,910 DEBUG {conn-10005, pstmt-20003} Parameters : [23, 1]
2019-08-15 13:21:32,910 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 13:21:32,911 DEBUG {conn-10005, pstmt-20003} executed. 0.40816 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:21:32,911 DEBUG {conn-10005, pstmt-20003, rs-50014} open
2019-08-15 13:21:32,911 DEBUG {conn-10005, pstmt-20003, rs-50014} Header: [count(*)]
2019-08-15 13:21:32,911 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [1]
2019-08-15 13:21:32,911 DEBUG {conn-10005, pstmt-20003, rs-50014} closed
2019-08-15 13:21:32,911 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:21:32,911 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:32,911 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:32,911 DEBUG {conn-10005, pstmt-20006} Parameters : [23]
2019-08-15 13:21:32,911 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT]
2019-08-15 13:21:32,913 DEBUG {conn-10005, pstmt-20006} executed. 1.700497 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:21:32,913 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:21:32,913 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:33,116 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:33,117 DEBUG {conn-10005, pstmt-20000} Parameters : [23]
2019-08-15 13:21:33,117 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 13:21:33,117 DEBUG {conn-10005, pstmt-20000} executed. 0.681124 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:21:33,117 DEBUG {conn-10005, pstmt-20000, rs-50015} open
2019-08-15 13:21:33,118 DEBUG {conn-10005, pstmt-20000, rs-50015} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:21:33,118 DEBUG {conn-10005, pstmt-20000, rs-50015} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 26, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 6, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 13:21:33,118 DEBUG {conn-10005, pstmt-20000, rs-50015} closed
2019-08-15 13:21:33,118 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 13:21:33,119 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:33,119 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:33,119 DEBUG {conn-10005, pstmt-20001} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 27, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 6, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 13:21:33,119 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:21:33,127 DEBUG {conn-10005, pstmt-20001} executed. 7.977632 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:21:33,127 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 13:21:33,127 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:33,128 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:33,128 DEBUG {conn-10005, pstmt-20002} Parameters : [25]
2019-08-15 13:21:33,128 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 13:21:33,129 DEBUG {conn-10005, pstmt-20002} executed. 0.592192 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:21:33,129 DEBUG {conn-10005, pstmt-20002, rs-50016} open
2019-08-15 13:21:33,129 DEBUG {conn-10005, pstmt-20002, rs-50016} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:21:33,129 DEBUG {conn-10005, pstmt-20002, rs-50016} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 13:21:33,129 DEBUG {conn-10005, pstmt-20002, rs-50016} closed
2019-08-15 13:21:33,130 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 13:21:33,130 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:33,130 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:33,130 DEBUG {conn-10005, pstmt-20003} Parameters : [23, 1]
2019-08-15 13:21:33,130 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 13:21:33,131 DEBUG {conn-10005, pstmt-20003} executed. 0.509429 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:21:33,131 DEBUG {conn-10005, pstmt-20003, rs-50017} open
2019-08-15 13:21:33,131 DEBUG {conn-10005, pstmt-20003, rs-50017} Header: [count(*)]
2019-08-15 13:21:33,131 DEBUG {conn-10005, pstmt-20003, rs-50017} Result: [1]
2019-08-15 13:21:33,131 DEBUG {conn-10005, pstmt-20003, rs-50017} closed
2019-08-15 13:21:33,131 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:21:33,131 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:33,131 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:33,131 DEBUG {conn-10005, pstmt-20006} Parameters : [23]
2019-08-15 13:21:33,131 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT]
2019-08-15 13:21:33,133 DEBUG {conn-10005, pstmt-20006} executed. 1.978601 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:21:33,133 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:21:33,133 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:33,330 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:33,331 DEBUG {conn-10005, pstmt-20000} Parameters : [23]
2019-08-15 13:21:33,331 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 13:21:33,331 DEBUG {conn-10005, pstmt-20000} executed. 0.637943 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:21:33,331 DEBUG {conn-10005, pstmt-20000, rs-50018} open
2019-08-15 13:21:33,331 DEBUG {conn-10005, pstmt-20000, rs-50018} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:21:33,332 DEBUG {conn-10005, pstmt-20000, rs-50018} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 27, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 7, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, ####  formatter主要是设置格式化类型(integer、email等以及函数来支持自定义类型),formatoptions用来设置对应formatter的参数，jqGrid中预定义了常见的格式及其options：
###### integer 
thousandsSeparator： //千分位分隔符, 
defaulValue 
###### number 
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue 
###### currency
decimalSeparator, //小数分隔符，如"."
thousandsSeparator, //千分位分隔符，如","
decimalPlaces, //小数保留位数
defaulValue, 
prefix //前缀，如加上"$"
suffix//后缀
###### date
srcformat, //source的本来格式
newformat //新格式
###### email
没有参数，会在该cell是email加上： mailto:name@domain.com
###### showlink
baseLinkUrl, //在当前cell中加入link的url，如"jq/query.action"
showAction, //在baseLinkUrl后加入&action=actionName
addParam, //在baseLinkUrl后加入额外的参数，如"&name=aaaa"
target,
idName     //默认会在baseLinkUrl后加入,如".action?id=1"。改如果设置idName="name",那么".action?name=1"。其中取值为当前rowid
###### checkbox
disabled     //true/false 默认为true此时的checkbox不能编辑，如当前cell的值是1、0会将1选中
###### select
设置下拉框，没有参数，需要和colModel里的editoptions配合使用
##### 当然，根据项目具体需求，jqGrid还支持自定义formatter函数，可以对表格中的值cellvalue进行改造，如数据格式化、自定义按钮等，只需要在formatter:customFmatter设置formatter函数，该函数有三个签名,
例：

```java
function customFmatter(cellvalue, options, rowObject){  
      
}  
//cellvalue - 当前cell的值  
//options - 该cell的options设置，包括{rowId, colModel,pos,gid}  
//rowObject - 当前cell所在row的值，如{ id=1, name="name1", price=123.1, ...}
```
对于自定义formatter，在修改时需要获取原来的值，需要用到unformat函数，这里见官网的例子：
```java
jQuery("#grid_id").jqGrid({  
...  
   colModel: [   
      ...   
      {name:'price', index:'price', width:60, align:"center", editable: true, formatter:imageFormat, unformat:imageUnFormat},  
      ...  
   ]  
...  
});  
   
function imageFormat( cellvalue, options, rowObject ){  
    return '<img src="'+cellvalue+'" />';  
}  
function imageUnFormat( cellvalue, options, cell){  
    return $('img', cell).attr('src');  
}  
```]
2019-08-15 13:21:33,332 DEBUG {conn-10005, pstmt-20000, rs-50018} closed
2019-08-15 13:21:33,332 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 13:21:33,332 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:33,332 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:33,332 DEBUG {conn-10005, pstmt-20001} Parameters : [jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 7, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置, 23]
2019-08-15 13:21:33,332 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:21:33,335 DEBUG {conn-10005, pstmt-20001} executed. 2.445878 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:21:33,335 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 13:21:33,335 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:33,336 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:33,336 DEBUG {conn-10005, pstmt-20002} Parameters : [25]
2019-08-15 13:21:33,336 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 13:21:33,337 DEBUG {conn-10005, pstmt-20002} executed. 0.539245 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:21:33,337 DEBUG {conn-10005, pstmt-20002, rs-50019} open
2019-08-15 13:21:33,337 DEBUG {conn-10005, pstmt-20002, rs-50019} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:21:33,337 DEBUG {conn-10005, pstmt-20002, rs-50019} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 13:21:33,337 DEBUG {conn-10005, pstmt-20002, rs-50019} closed
2019-08-15 13:21:33,337 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 13:21:33,337 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:33,337 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:33,337 DEBUG {conn-10005, pstmt-20003} Parameters : [23, 1]
2019-08-15 13:21:33,337 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 13:21:33,338 DEBUG {conn-10005, pstmt-20003} executed. 0.488353 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:21:33,338 DEBUG {conn-10005, pstmt-20003, rs-50020} open
2019-08-15 13:21:33,338 DEBUG {conn-10005, pstmt-20003, rs-50020} Header: [count(*)]
2019-08-15 13:21:33,338 DEBUG {conn-10005, pstmt-20003, rs-50020} Result: [1]
2019-08-15 13:21:33,338 DEBUG {conn-10005, pstmt-20003, rs-50020} closed
2019-08-15 13:21:33,338 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:21:33,338 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:33,338 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:33,338 DEBUG {conn-10005, pstmt-20006} Parameters : [23]
2019-08-15 13:21:33,338 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT]
2019-08-15 13:21:33,340 DEBUG {conn-10005, pstmt-20006} executed. 1.827982 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:21:33,340 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:21:33,340 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:42,026 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 13:21:42,079 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:42,080 DEBUG {conn-10005, pstmt-20007} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 13:21:42,080 DEBUG {conn-10005, pstmt-20007} Parameters : [9]
2019-08-15 13:21:42,080 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 13:21:42,081 DEBUG {conn-10005, pstmt-20007} executed. 0.818377 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 13:21:42,081 DEBUG {conn-10005, pstmt-20007, rs-50021} open
2019-08-15 13:21:42,081 DEBUG {conn-10005, pstmt-20007, rs-50021} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 13:21:42,081 DEBUG {conn-10005, pstmt-20007, rs-50021} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 10, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 8, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 13:21:42,082 DEBUG {conn-10005, pstmt-20007, rs-50021} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 13:21:42,082 DEBUG {conn-10005, pstmt-20007, rs-50021} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 13:21:42,082 DEBUG {conn-10005, pstmt-20007, rs-50021} closed
2019-08-15 13:21:42,083 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 13:21:42,083 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:42,086 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:42,086 DEBUG {conn-10005, pstmt-20008} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 13:21:42,086 DEBUG {conn-10005, pstmt-20008} Parameters : [9]
2019-08-15 13:21:42,086 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER]
2019-08-15 13:21:42,087 DEBUG {conn-10005, pstmt-20008} executed. 0.751035 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 13:21:42,087 DEBUG {conn-10005, pstmt-20008, rs-50022} open
2019-08-15 13:21:42,087 DEBUG {conn-10005, pstmt-20008, rs-50022} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 13:21:42,087 DEBUG {conn-10005, pstmt-20008, rs-50022} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 13:21:42,088 DEBUG {conn-10005, pstmt-20008, rs-50022} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 13:21:42,088 DEBUG {conn-10005, pstmt-20008, rs-50022} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 10, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 8, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 13:21:42,088 DEBUG {conn-10005, pstmt-20008, rs-50022} closed
2019-08-15 13:21:42,088 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 13:21:42,088 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:42,089 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:42,093 DEBUG {conn-10005, pstmt-20009} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 13:21:42,094 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 13:21:42,094 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 13:21:42,096 DEBUG {conn-10005, pstmt-20009} executed. 2.43354 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 13:21:42,096 DEBUG {conn-10005, pstmt-20009, rs-50023} open
2019-08-15 13:21:42,096 DEBUG {conn-10005, pstmt-20009, rs-50023} Header: [tag_id, tag_count, tag_name]
2019-08-15 13:21:42,096 DEBUG {conn-10005, pstmt-20009, rs-50023} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 13:21:42,097 DEBUG {conn-10005, pstmt-20009, rs-50023} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 13:21:42,097 DEBUG {conn-10005, pstmt-20009, rs-50023} Result: [139, 1, jqGrid]
2019-08-15 13:21:42,097 DEBUG {conn-10005, pstmt-20009, rs-50023} Result: [140, 1, spring security]
2019-08-15 13:21:42,097 DEBUG {conn-10005, pstmt-20009, rs-50023} closed
2019-08-15 13:21:42,097 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 13:21:42,097 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:42,097 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:42,097 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 13:21:42,097 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 13:21:42,098 DEBUG {conn-10005, pstmt-20005} executed. 0.861044 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 13:21:42,098 DEBUG {conn-10005, pstmt-20005, rs-50024} open
2019-08-15 13:21:42,098 DEBUG {conn-10005, pstmt-20005, rs-50024} Header: [config_name, config_value, create_time, update_time]
2019-08-15 13:21:42,099 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:42,099 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:42,099 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:42,099 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:42,100 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:42,101 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:42,101 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:42,101 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:42,101 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:42,101 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 13:21:42,101 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 13:21:42,102 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 13:21:42,102 DEBUG {conn-10005, pstmt-20005, rs-50024} closed
2019-08-15 13:21:42,102 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:21:42,102 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:42,160 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:42,161 DEBUG {conn-10005, pstmt-20010} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 13:21:42,161 DEBUG {conn-10005, pstmt-20010} Parameters : [admin]
2019-08-15 13:21:42,161 DEBUG {conn-10005, pstmt-20010} Types : [VARCHAR]
2019-08-15 13:21:42,162 DEBUG {conn-10005, pstmt-20010} executed. 1.263035 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 13:21:42,162 DEBUG {conn-10005, pstmt-20010, rs-50025} open
2019-08-15 13:21:42,162 DEBUG {conn-10005, pstmt-20010, rs-50025} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 13:21:42,162 DEBUG {conn-10005, pstmt-20010, rs-50025} closed
2019-08-15 13:21:42,162 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 13:21:42,162 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:44,888 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:44,889 DEBUG {conn-10005, pstmt-20000} Parameters : [24]
2019-08-15 13:21:44,889 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 13:21:44,889 DEBUG {conn-10005, pstmt-20000} executed. 0.640513 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:21:44,889 DEBUG {conn-10005, pstmt-20000, rs-50026} open
2019-08-15 13:21:44,889 DEBUG {conn-10005, pstmt-20000, rs-50026} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:21:44,890 DEBUG {conn-10005, pstmt-20000, rs-50026} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 10, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 8, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 13:21:44,890 DEBUG {conn-10005, pstmt-20000, rs-50026} closed
2019-08-15 13:21:44,890 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 13:21:44,890 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:44,890 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:44,890 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 11, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 8, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 13:21:44,890 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:21:44,892 DEBUG {conn-10005, pstmt-20001} executed. 1.972432 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:21:44,892 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 13:21:44,893 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:44,895 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:44,895 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-15 13:21:44,895 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 13:21:44,895 DEBUG {conn-10005, pstmt-20002} executed. 0.616353 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:21:44,895 DEBUG {conn-10005, pstmt-20002, rs-50027} open
2019-08-15 13:21:44,896 DEBUG {conn-10005, pstmt-20002, rs-50027} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:21:44,896 DEBUG {conn-10005, pstmt-20002, rs-50027} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 13:21:44,896 DEBUG {conn-10005, pstmt-20002, rs-50027} closed
2019-08-15 13:21:44,896 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 13:21:44,896 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:44,896 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:44,897 DEBUG {conn-10005, pstmt-20003} Parameters : [24, 1]
2019-08-15 13:21:44,897 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 13:21:44,897 DEBUG {conn-10005, pstmt-20003} executed. 0.591164 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:21:44,897 DEBUG {conn-10005, pstmt-20003, rs-50028} open
2019-08-15 13:21:44,897 DEBUG {conn-10005, pstmt-20003, rs-50028} Header: [count(*)]
2019-08-15 13:21:44,897 DEBUG {conn-10005, pstmt-20003, rs-50028} Result: [0]
2019-08-15 13:21:44,897 DEBUG {conn-10005, pstmt-20003, rs-50028} closed
2019-08-15 13:21:44,897 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:21:44,898 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:44,898 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:44,898 DEBUG {conn-10005, pstmt-20004} Parameters : [24, 1, 0, 8]
2019-08-15 13:21:44,898 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 13:21:44,899 DEBUG {conn-10005, pstmt-20004} executed. 0.78959 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 13:21:44,899 DEBUG {conn-10005, pstmt-20004, rs-50029} open
2019-08-15 13:21:44,899 DEBUG {conn-10005, pstmt-20004, rs-50029} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 13:21:44,899 DEBUG {conn-10005, pstmt-20004, rs-50029} closed
2019-08-15 13:21:44,899 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 13:21:44,899 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:44,900 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:44,900 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 13:21:44,900 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 13:21:44,901 DEBUG {conn-10005, pstmt-20005} executed. 0.670843 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 13:21:44,901 DEBUG {conn-10005, pstmt-20005, rs-50030} open
2019-08-15 13:21:44,901 DEBUG {conn-10005, pstmt-20005, rs-50030} Header: [config_name, config_value, create_time, update_time]
2019-08-15 13:21:44,901 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:44,901 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:44,901 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:44,902 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:44,902 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 13:21:44,902 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:44,902 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:44,902 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:44,902 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 13:21:44,903 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 13:21:44,903 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 13:21:44,903 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 13:21:44,903 DEBUG {conn-10005, pstmt-20005, rs-50030} closed
2019-08-15 13:21:44,903 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 13:21:44,903 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:51,365 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:51,366 DEBUG {conn-10005, pstmt-20000} Parameters : [24]
2019-08-15 13:21:51,366 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 13:21:51,367 DEBUG {conn-10005, pstmt-20000} executed. 1.628015 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 13:21:51,367 DEBUG {conn-10005, pstmt-20000, rs-50031} open
2019-08-15 13:21:51,367 DEBUG {conn-10005, pstmt-20000, rs-50031} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 13:21:51,368 DEBUG {conn-10005, pstmt-20000, rs-50031} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 11, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 8, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 13:21:51,368 DEBUG {conn-10005, pstmt-20000, rs-50031} closed
2019-08-15 13:21:51,368 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 13:21:51,368 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:51,369 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:51,369 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 12, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 8, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 13:21:51,369 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 13:21:51,385 DEBUG {conn-10005, pstmt-20001} executed. 14.977016 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 13:21:51,385 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 13:21:51,385 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:51,385 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:51,385 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-15 13:21:51,385 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 13:21:51,386 DEBUG {conn-10005, pstmt-20002} executed. 0.77314 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 13:21:51,386 DEBUG {conn-10005, pstmt-20002, rs-50032} open
2019-08-15 13:21:51,386 DEBUG {conn-10005, pstmt-20002, rs-50032} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 13:21:51,386 DEBUG {conn-10005, pstmt-20002, rs-50032} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 13:21:51,386 DEBUG {conn-10005, pstmt-20002, rs-50032} closed
2019-08-15 13:21:51,387 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 13:21:51,387 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:51,387 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:51,387 DEBUG {conn-10005, pstmt-20003} Parameters : [24, 1]
2019-08-15 13:21:51,387 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 13:21:51,388 DEBUG {conn-10005, pstmt-20003} executed. 0.900626 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 13:21:51,388 DEBUG {conn-10005, pstmt-20003, rs-50033} open
2019-08-15 13:21:51,388 DEBUG {conn-10005, pstmt-20003, rs-50033} Header: [count(*)]
2019-08-15 13:21:51,388 DEBUG {conn-10005, pstmt-20003, rs-50033} Result: [0]
2019-08-15 13:21:51,389 DEBUG {conn-10005, pstmt-20003, rs-50033} closed
2019-08-15 13:21:51,389 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 13:21:51,389 DEBUG {conn-10005} pool-recycle
2019-08-15 13:21:51,389 DEBUG {conn-10005} pool-connect
2019-08-15 13:21:51,389 DEBUG {conn-10005, pstmt-20006} Parameters : [24]
2019-08-15 13:21:51,389 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT]
2019-08-15 13:21:51,390 DEBUG {conn-10005, pstmt-20006} executed. 1.577123 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 13:21:51,391 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 13:21:51,391 DEBUG {conn-10005} pool-recycle
2019-08-15 16:00:52,496 DEBUG {conn-10001,procId-4} connected
2019-08-15 16:00:52,508 DEBUG {conn-10002,procId-5} connected
2019-08-15 16:00:52,518 DEBUG {conn-10003,procId-6} connected
2019-08-15 16:00:52,525 DEBUG {conn-10004,procId-7} connected
2019-08-15 16:00:52,532 DEBUG {conn-10005,procId-8} connected
2019-08-15 16:00:52,541 DEBUG {conn-10005} pool-connect
2019-08-15 16:00:52,543 DEBUG {conn-10005} pool-recycle
2019-08-15 16:00:52,557 DEBUG {conn-10005} pool-connect
2019-08-15 16:00:52,561 DEBUG {conn-10005} pool-recycle
2019-08-15 16:00:53,194 DEBUG {conn-10005} pool-connect
2019-08-15 16:00:53,268 DEBUG {conn-10005} pool-recycle
2019-08-15 16:00:54,222 INFO [Supreme Intelligence] modules [], plugins [], sites []
2019-08-15 16:00:54,242 DEBUG [Supreme Intelligence] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 16:00:54,259 DEBUG [Supreme Intelligence] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 16:00:54,278 DEBUG [Supreme Intelligence] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 16:00:54,280 DEBUG [Supreme Intelligence] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 16:00:54,280 DEBUG [Supreme Intelligence] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 16:00:54,281 DEBUG [Supreme Intelligence] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:00:54,281 DEBUG [Supreme Intelligence] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 16:00:54,281 DEBUG [Supreme Intelligence] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 16:00:54,281 DEBUG [Supreme Intelligence] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:00:54,281 DEBUG [Supreme Intelligence] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 16:00:54,281 DEBUG [Supreme Intelligence] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:00:54,281 DEBUG [Supreme Intelligence] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 16:00:54,281 DEBUG [Supreme Intelligence] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 16:00:54,281 DEBUG [Supreme Intelligence] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 16:00:54,281 DEBUG [Supreme Intelligence] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 16:00:54,281 DEBUG [Supreme Intelligence] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:00:55,940 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:51d9:691:64d9:afc4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 16:00:55,971 DEBUG using gathering [true]
2019-08-15 16:00:56,013 DEBUG [Supreme Intelligence] node_sampler_interval[5s]
2019-08-15 16:00:56,033 DEBUG Using select timeout of 500
2019-08-15 16:00:56,033 DEBUG Epoll-bug workaround enabled = false
2019-08-15 16:00:56,090 DEBUG [Supreme Intelligence] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:15:49,013 DEBUG {conn-10001,procId-9} connected
2019-08-15 16:15:49,021 DEBUG {conn-10002,procId-10} connected
2019-08-15 16:15:49,027 DEBUG {conn-10003,procId-11} connected
2019-08-15 16:15:49,033 DEBUG {conn-10004,procId-12} connected
2019-08-15 16:15:49,038 DEBUG {conn-10005,procId-13} connected
2019-08-15 16:15:49,046 DEBUG {conn-10005} pool-connect
2019-08-15 16:15:49,048 DEBUG {conn-10005} pool-recycle
2019-08-15 16:15:49,057 DEBUG {conn-10005} pool-connect
2019-08-15 16:15:49,059 DEBUG {conn-10005} pool-recycle
2019-08-15 16:15:49,473 DEBUG {conn-10005} pool-connect
2019-08-15 16:15:49,518 DEBUG {conn-10005} pool-recycle
2019-08-15 16:15:50,360 INFO [Defensor] modules [], plugins [], sites []
2019-08-15 16:15:50,389 DEBUG [Defensor] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 16:15:50,400 DEBUG [Defensor] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 16:15:50,412 DEBUG [Defensor] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 16:15:50,413 DEBUG [Defensor] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 16:15:50,413 DEBUG [Defensor] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 16:15:50,413 DEBUG [Defensor] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:15:50,414 DEBUG [Defensor] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 16:15:50,414 DEBUG [Defensor] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 16:15:50,414 DEBUG [Defensor] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:15:50,414 DEBUG [Defensor] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 16:15:50,414 DEBUG [Defensor] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:15:50,414 DEBUG [Defensor] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 16:15:50,414 DEBUG [Defensor] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 16:15:50,415 DEBUG [Defensor] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 16:15:50,415 DEBUG [Defensor] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 16:15:50,415 DEBUG [Defensor] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:15:51,854 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:51d9:691:64d9:afc4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 16:15:51,873 DEBUG using gathering [true]
2019-08-15 16:15:51,895 DEBUG [Defensor] node_sampler_interval[5s]
2019-08-15 16:15:51,908 DEBUG Using select timeout of 500
2019-08-15 16:15:51,908 DEBUG Epoll-bug workaround enabled = false
2019-08-15 16:15:51,955 DEBUG [Defensor] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:15:51,978 DEBUG [Defensor] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:15:52,027 DEBUG [Defensor] connected to node [{Maximus}{qvkqYeT2R3qndm3-HpsGMQ}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:15:52,789 DEBUG {conn-10005} pool-connect
2019-08-15 16:15:52,789 DEBUG {conn-10005} pool-recycle
2019-08-15 16:17:33,643 DEBUG {conn-10001,procId-14} connected
2019-08-15 16:17:33,655 DEBUG {conn-10002,procId-15} connected
2019-08-15 16:17:33,662 DEBUG {conn-10003,procId-16} connected
2019-08-15 16:17:33,671 DEBUG {conn-10004,procId-17} connected
2019-08-15 16:17:33,677 DEBUG {conn-10005,procId-18} connected
2019-08-15 16:17:33,685 DEBUG {conn-10005} pool-connect
2019-08-15 16:17:33,688 DEBUG {conn-10005} pool-recycle
2019-08-15 16:17:33,703 DEBUG {conn-10005} pool-connect
2019-08-15 16:17:33,706 DEBUG {conn-10005} pool-recycle
2019-08-15 16:17:34,287 DEBUG {conn-10005} pool-connect
2019-08-15 16:17:34,353 DEBUG {conn-10005} pool-recycle
2019-08-15 16:17:35,195 INFO [Mosha] modules [], plugins [], sites []
2019-08-15 16:17:35,210 DEBUG [Mosha] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 16:17:35,222 DEBUG [Mosha] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 16:17:35,235 DEBUG [Mosha] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 16:17:35,236 DEBUG [Mosha] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 16:17:35,236 DEBUG [Mosha] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 16:17:35,236 DEBUG [Mosha] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:17:35,237 DEBUG [Mosha] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 16:17:35,237 DEBUG [Mosha] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 16:17:35,237 DEBUG [Mosha] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:17:35,237 DEBUG [Mosha] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 16:17:35,237 DEBUG [Mosha] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:17:35,237 DEBUG [Mosha] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 16:17:35,238 DEBUG [Mosha] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 16:17:35,238 DEBUG [Mosha] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 16:17:35,238 DEBUG [Mosha] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 16:17:35,238 DEBUG [Mosha] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:17:36,638 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:51d9:691:64d9:afc4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 16:17:36,658 DEBUG using gathering [true]
2019-08-15 16:17:36,680 DEBUG [Mosha] node_sampler_interval[5s]
2019-08-15 16:17:36,693 DEBUG Using select timeout of 500
2019-08-15 16:17:36,693 DEBUG Epoll-bug workaround enabled = false
2019-08-15 16:17:36,735 DEBUG [Mosha] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:17:36,760 DEBUG [Mosha] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:17:36,793 DEBUG [Mosha] connected to node [{Maximus}{qvkqYeT2R3qndm3-HpsGMQ}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:17:37,551 DEBUG {conn-10005} pool-connect
2019-08-15 16:17:37,551 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:01,444 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 16:18:01,543 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:01,648 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 16:18:01,656 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 16:18:01,656 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 16:18:01,666 DEBUG {conn-10005, pstmt-20000} executed. 12.208807 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 16:18:01,670 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 16:18:01,671 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 16:18:01,675 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 12, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 9, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 16:18:01,676 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 16:18:01,677 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 16:18:01,677 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 16:18:01,677 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 16:18:01,678 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:01,681 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:01,682 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 16:18:01,682 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 16:18:01,682 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 16:18:01,683 DEBUG {conn-10005, pstmt-20001} executed. 1.18901 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 16:18:01,683 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 16:18:01,683 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 16:18:01,684 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 16:18:01,684 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 16:18:01,684 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 12, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 9, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 16:18:01,685 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 16:18:01,685 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 16:18:01,685 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:01,685 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:01,689 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 16:18:01,689 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 16:18:01,689 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 16:18:01,696 DEBUG {conn-10005, pstmt-20002} executed. 6.544949 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 16:18:01,696 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 16:18:01,696 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 16:18:01,696 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 16:18:01,696 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 16:18:01,696 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 16:18:01,696 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [140, 1, spring security]
2019-08-15 16:18:01,696 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 16:18:01,697 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 16:18:01,697 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:01,699 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:01,700 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:18:01,700 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 16:18:01,700 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 16:18:01,702 DEBUG {conn-10005, pstmt-20003} executed. 1.973457 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:18:01,702 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 16:18:01,702 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:18:01,702 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:01,703 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:01,703 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:01,703 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:01,703 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:01,704 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:01,704 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:01,704 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:01,704 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:01,704 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:18:01,704 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:18:01,705 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:18:01,705 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 16:18:01,705 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 16:18:01,705 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:01,863 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:01,863 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 16:18:01,864 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 16:18:01,864 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 16:18:01,867 DEBUG {conn-10005, pstmt-20004} executed. 2.69776 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 16:18:01,867 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 16:18:01,867 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 16:18:01,867 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 16:18:01,867 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 16:18:01,867 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:05,451 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:05,452 DEBUG {conn-10005, pstmt-20005} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:18:05,453 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 16:18:05,453 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 16:18:05,456 DEBUG {conn-10005, pstmt-20005} executed. 2.412974 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:18:05,456 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-15 16:18:05,456 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:18:05,457 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 12, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 9, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:18:05,457 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-15 16:18:05,457 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:18:05,457 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:05,457 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:05,468 DEBUG {conn-10005, pstmt-20006} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:18:05,471 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 13, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 9, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:18:05,471 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:18:05,476 DEBUG {conn-10005, pstmt-20006} executed. 5.114333 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:18:05,476 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:18:05,476 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:05,517 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:05,518 DEBUG {conn-10005, pstmt-20007} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:18:05,518 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 16:18:05,518 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:18:05,520 DEBUG {conn-10005, pstmt-20007} executed. 2.000188 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:18:05,520 DEBUG {conn-10005, pstmt-20007, rs-50006} open
2019-08-15 16:18:05,520 DEBUG {conn-10005, pstmt-20007, rs-50006} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:18:05,520 DEBUG {conn-10005, pstmt-20007, rs-50006} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:18:05,521 DEBUG {conn-10005, pstmt-20007, rs-50006} closed
2019-08-15 16:18:05,521 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:18:05,521 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:05,521 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:05,522 DEBUG {conn-10005, pstmt-20008} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:18:05,523 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 16:18:05,523 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 16:18:05,525 DEBUG {conn-10005, pstmt-20008} executed. 2.079353 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:18:05,525 DEBUG {conn-10005, pstmt-20008, rs-50007} open
2019-08-15 16:18:05,525 DEBUG {conn-10005, pstmt-20008, rs-50007} Header: [count(*)]
2019-08-15 16:18:05,525 DEBUG {conn-10005, pstmt-20008, rs-50007} Result: [0]
2019-08-15 16:18:05,526 DEBUG {conn-10005, pstmt-20008, rs-50007} closed
2019-08-15 16:18:05,526 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:18:05,526 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:05,527 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:05,527 DEBUG {conn-10005, pstmt-20009} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:18:05,528 DEBUG {conn-10005, pstmt-20009} Parameters : [24, 1, 0, 8]
2019-08-15 16:18:05,528 DEBUG {conn-10005, pstmt-20009} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 16:18:05,528 DEBUG {conn-10005, pstmt-20009} executed. 0.496577 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:18:05,528 DEBUG {conn-10005, pstmt-20009, rs-50008} open
2019-08-15 16:18:05,528 DEBUG {conn-10005, pstmt-20009, rs-50008} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 16:18:05,528 DEBUG {conn-10005, pstmt-20009, rs-50008} closed
2019-08-15 16:18:05,529 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 16:18:05,529 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:05,529 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:05,529 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 16:18:05,529 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 16:18:05,529 DEBUG {conn-10005, pstmt-20003} executed. 0.458537 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:18:05,529 DEBUG {conn-10005, pstmt-20003, rs-50009} open
2019-08-15 16:18:05,529 DEBUG {conn-10005, pstmt-20003, rs-50009} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:18:05,530 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:05,530 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:05,530 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:05,530 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:05,532 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:05,532 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:05,532 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:05,532 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:05,533 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:05,533 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:18:05,533 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:18:05,533 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:18:05,533 DEBUG {conn-10005, pstmt-20003, rs-50009} closed
2019-08-15 16:18:05,533 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 16:18:05,533 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:07,957 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:07,957 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 16:18:07,957 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 16:18:07,958 DEBUG {conn-10005, pstmt-20005} executed. 0.929411 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:18:07,958 DEBUG {conn-10005, pstmt-20005, rs-50010} open
2019-08-15 16:18:07,958 DEBUG {conn-10005, pstmt-20005, rs-50010} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:18:07,959 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 13, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 9, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:18:07,960 DEBUG {conn-10005, pstmt-20005, rs-50010} closed
2019-08-15 16:18:07,960 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:18:07,960 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:07,960 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:07,961 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 14, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 9, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:18:07,961 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:18:07,965 DEBUG {conn-10005, pstmt-20006} executed. 3.823027 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:18:07,965 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:18:07,965 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:07,967 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:07,967 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 16:18:07,967 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:18:07,968 DEBUG {conn-10005, pstmt-20007} executed. 0.899083 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:18:07,968 DEBUG {conn-10005, pstmt-20007, rs-50011} open
2019-08-15 16:18:07,968 DEBUG {conn-10005, pstmt-20007, rs-50011} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:18:07,968 DEBUG {conn-10005, pstmt-20007, rs-50011} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:18:07,969 DEBUG {conn-10005, pstmt-20007, rs-50011} closed
2019-08-15 16:18:07,969 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:18:07,969 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:07,969 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:07,969 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 16:18:07,969 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 16:18:07,970 DEBUG {conn-10005, pstmt-20008} executed. 0.599902 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:18:07,970 DEBUG {conn-10005, pstmt-20008, rs-50012} open
2019-08-15 16:18:07,970 DEBUG {conn-10005, pstmt-20008, rs-50012} Header: [count(*)]
2019-08-15 16:18:07,970 DEBUG {conn-10005, pstmt-20008, rs-50012} Result: [0]
2019-08-15 16:18:07,970 DEBUG {conn-10005, pstmt-20008, rs-50012} closed
2019-08-15 16:18:07,970 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:18:07,970 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:07,971 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:07,971 DEBUG {conn-10005, pstmt-20010} created. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:18:07,972 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 16:18:07,972 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 16:18:07,974 DEBUG {conn-10005, pstmt-20010} executed. 2.568219 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:18:07,974 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 16:18:07,974 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:11,573 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:11,573 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 16:18:11,574 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 16:18:11,574 DEBUG {conn-10005, pstmt-20005} executed. 0.572143 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:18:11,574 DEBUG {conn-10005, pstmt-20005, rs-50013} open
2019-08-15 16:18:11,574 DEBUG {conn-10005, pstmt-20005, rs-50013} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:18:11,575 DEBUG {conn-10005, pstmt-20005, rs-50013} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 14, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 10, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:18:11,575 DEBUG {conn-10005, pstmt-20005, rs-50013} closed
2019-08-15 16:18:11,575 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:18:11,575 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:11,575 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:11,576 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 15, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 10, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:18:11,576 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:18:11,578 DEBUG {conn-10005, pstmt-20006} executed. 2.867399 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:18:11,579 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:18:11,579 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:11,580 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:11,581 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 16:18:11,581 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:18:11,581 DEBUG {conn-10005, pstmt-20007} executed. 0.593734 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:18:11,581 DEBUG {conn-10005, pstmt-20007, rs-50014} open
2019-08-15 16:18:11,581 DEBUG {conn-10005, pstmt-20007, rs-50014} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:18:11,582 DEBUG {conn-10005, pstmt-20007, rs-50014} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:18:11,582 DEBUG {conn-10005, pstmt-20007, rs-50014} closed
2019-08-15 16:18:11,582 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:18:11,582 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:11,582 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:11,582 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 16:18:11,583 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 16:18:11,583 DEBUG {conn-10005, pstmt-20008} executed. 0.457509 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:18:11,583 DEBUG {conn-10005, pstmt-20008, rs-50015} open
2019-08-15 16:18:11,583 DEBUG {conn-10005, pstmt-20008, rs-50015} Header: [count(*)]
2019-08-15 16:18:11,583 DEBUG {conn-10005, pstmt-20008, rs-50015} Result: [0]
2019-08-15 16:18:11,584 DEBUG {conn-10005, pstmt-20008, rs-50015} closed
2019-08-15 16:18:11,584 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:18:11,584 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:11,584 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:11,584 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 16:18:11,584 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 16:18:11,586 DEBUG {conn-10005, pstmt-20010} executed. 1.732366 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:18:11,586 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 16:18:11,586 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:12,199 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:12,199 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 16:18:12,199 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 16:18:12,200 DEBUG {conn-10005, pstmt-20005} executed. 0.718135 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:18:12,200 DEBUG {conn-10005, pstmt-20005, rs-50016} open
2019-08-15 16:18:12,200 DEBUG {conn-10005, pstmt-20005, rs-50016} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:18:12,201 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 15, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 11, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:18:12,201 DEBUG {conn-10005, pstmt-20005, rs-50016} closed
2019-08-15 16:18:12,201 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:18:12,201 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:12,201 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:12,202 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 16, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 11, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:18:12,202 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:18:12,210 DEBUG {conn-10005, pstmt-20006} executed. 7.833685 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:18:12,210 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:18:12,210 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:12,211 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:12,211 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 16:18:12,211 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:18:12,211 DEBUG {conn-10005, pstmt-20007} executed. 0.426152 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:18:12,211 DEBUG {conn-10005, pstmt-20007, rs-50017} open
2019-08-15 16:18:12,211 DEBUG {conn-10005, pstmt-20007, rs-50017} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:18:12,211 DEBUG {conn-10005, pstmt-20007, rs-50017} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:18:12,211 DEBUG {conn-10005, pstmt-20007, rs-50017} closed
2019-08-15 16:18:12,212 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:18:12,212 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:12,212 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:12,212 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 16:18:12,212 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 16:18:12,212 DEBUG {conn-10005, pstmt-20008} executed. 0.342361 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:18:12,212 DEBUG {conn-10005, pstmt-20008, rs-50018} open
2019-08-15 16:18:12,212 DEBUG {conn-10005, pstmt-20008, rs-50018} Header: [count(*)]
2019-08-15 16:18:12,212 DEBUG {conn-10005, pstmt-20008, rs-50018} Result: [0]
2019-08-15 16:18:12,212 DEBUG {conn-10005, pstmt-20008, rs-50018} closed
2019-08-15 16:18:12,212 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:18:12,212 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:12,213 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:12,213 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 16:18:12,213 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 16:18:12,215 DEBUG {conn-10005, pstmt-20010} executed. 1.78737 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:18:12,215 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 16:18:12,215 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:20,492 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:20,492 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 16:18:20,492 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 16:18:20,493 DEBUG {conn-10005, pstmt-20005} executed. 0.660046 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:18:20,493 DEBUG {conn-10005, pstmt-20005, rs-50019} open
2019-08-15 16:18:20,493 DEBUG {conn-10005, pstmt-20005, rs-50019} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:18:20,493 DEBUG {conn-10005, pstmt-20005, rs-50019} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 16, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 12, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:18:20,494 DEBUG {conn-10005, pstmt-20005, rs-50019} closed
2019-08-15 16:18:20,494 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:18:20,494 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:20,494 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:20,495 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 17, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 12, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:18:20,495 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:18:20,497 DEBUG {conn-10005, pstmt-20006} executed. 2.755335 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:18:20,497 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:18:20,497 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:20,498 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:20,498 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 16:18:20,498 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:18:20,499 DEBUG {conn-10005, pstmt-20007} executed. 0.502746 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:18:20,499 DEBUG {conn-10005, pstmt-20007, rs-50020} open
2019-08-15 16:18:20,499 DEBUG {conn-10005, pstmt-20007, rs-50020} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:18:20,499 DEBUG {conn-10005, pstmt-20007, rs-50020} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:18:20,499 DEBUG {conn-10005, pstmt-20007, rs-50020} closed
2019-08-15 16:18:20,500 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:18:20,500 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:20,500 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:20,500 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 16:18:20,500 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 16:18:20,500 DEBUG {conn-10005, pstmt-20008} executed. 0.403019 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:18:20,500 DEBUG {conn-10005, pstmt-20008, rs-50021} open
2019-08-15 16:18:20,500 DEBUG {conn-10005, pstmt-20008, rs-50021} Header: [count(*)]
2019-08-15 16:18:20,500 DEBUG {conn-10005, pstmt-20008, rs-50021} Result: [0]
2019-08-15 16:18:20,501 DEBUG {conn-10005, pstmt-20008, rs-50021} closed
2019-08-15 16:18:20,501 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:18:20,501 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:20,501 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:20,501 DEBUG {conn-10005, pstmt-20009} Parameters : [24, 1, 0, 8]
2019-08-15 16:18:20,501 DEBUG {conn-10005, pstmt-20009} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 16:18:20,501 DEBUG {conn-10005, pstmt-20009} executed. 0.44877 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:18:20,502 DEBUG {conn-10005, pstmt-20009, rs-50022} open
2019-08-15 16:18:20,502 DEBUG {conn-10005, pstmt-20009, rs-50022} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 16:18:20,502 DEBUG {conn-10005, pstmt-20009, rs-50022} closed
2019-08-15 16:18:20,502 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 16:18:20,502 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:20,502 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:20,502 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 16:18:20,502 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 16:18:20,503 DEBUG {conn-10005, pstmt-20003} executed. 0.575742 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:18:20,503 DEBUG {conn-10005, pstmt-20003, rs-50023} open
2019-08-15 16:18:20,503 DEBUG {conn-10005, pstmt-20003, rs-50023} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:18:20,503 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:20,503 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:20,503 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:20,504 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:20,504 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:18:20,504 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:20,504 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:20,504 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:20,504 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:18:20,505 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:18:20,505 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:18:20,505 DEBUG {conn-10005, pstmt-20003, rs-50023} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:18:20,505 DEBUG {conn-10005, pstmt-20003, rs-50023} closed
2019-08-15 16:18:20,505 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 16:18:20,505 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,219 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,219 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 16:18:56,219 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 16:18:56,220 DEBUG {conn-10005, pstmt-20005} executed. 0.578312 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:18:56,220 DEBUG {conn-10005, pstmt-20005, rs-50024} open
2019-08-15 16:18:56,220 DEBUG {conn-10005, pstmt-20005, rs-50024} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:18:56,220 DEBUG {conn-10005, pstmt-20005, rs-50024} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 17, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 12, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:18:56,220 DEBUG {conn-10005, pstmt-20005, rs-50024} closed
2019-08-15 16:18:56,220 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:18:56,221 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,221 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,221 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 18, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 12, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:18:56,221 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:18:56,230 DEBUG {conn-10005, pstmt-20006} executed. 8.517378 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:18:56,230 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:18:56,230 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,231 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,231 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 16:18:56,231 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:18:56,231 DEBUG {conn-10005, pstmt-20007} executed. 0.363437 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:18:56,231 DEBUG {conn-10005, pstmt-20007, rs-50025} open
2019-08-15 16:18:56,231 DEBUG {conn-10005, pstmt-20007, rs-50025} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:18:56,231 DEBUG {conn-10005, pstmt-20007, rs-50025} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:18:56,232 DEBUG {conn-10005, pstmt-20007, rs-50025} closed
2019-08-15 16:18:56,232 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:18:56,232 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,232 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,232 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 16:18:56,232 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 16:18:56,232 DEBUG {conn-10005, pstmt-20008} executed. 0.371661 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:18:56,232 DEBUG {conn-10005, pstmt-20008, rs-50026} open
2019-08-15 16:18:56,232 DEBUG {conn-10005, pstmt-20008, rs-50026} Header: [count(*)]
2019-08-15 16:18:56,232 DEBUG {conn-10005, pstmt-20008, rs-50026} Result: [0]
2019-08-15 16:18:56,233 DEBUG {conn-10005, pstmt-20008, rs-50026} closed
2019-08-15 16:18:56,233 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:18:56,233 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,233 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,233 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 16:18:56,233 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 16:18:56,234 DEBUG {conn-10005, pstmt-20010} executed. 1.603852 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:18:56,235 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 16:18:56,235 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,404 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,404 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 16:18:56,404 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 16:18:56,405 DEBUG {conn-10005, pstmt-20005} executed. 0.533589 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:18:56,405 DEBUG {conn-10005, pstmt-20005, rs-50027} open
2019-08-15 16:18:56,405 DEBUG {conn-10005, pstmt-20005, rs-50027} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:18:56,405 DEBUG {conn-10005, pstmt-20005, rs-50027} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 18, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 13, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:18:56,405 DEBUG {conn-10005, pstmt-20005, rs-50027} closed
2019-08-15 16:18:56,405 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:18:56,406 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,406 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,406 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 19, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 13, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:18:56,406 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:18:56,409 DEBUG {conn-10005, pstmt-20006} executed. 2.776925 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:18:56,409 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:18:56,409 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,410 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,410 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 16:18:56,410 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:18:56,411 DEBUG {conn-10005, pstmt-20007} executed. 0.750521 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:18:56,411 DEBUG {conn-10005, pstmt-20007, rs-50028} open
2019-08-15 16:18:56,411 DEBUG {conn-10005, pstmt-20007, rs-50028} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:18:56,411 DEBUG {conn-10005, pstmt-20007, rs-50028} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:18:56,412 DEBUG {conn-10005, pstmt-20007, rs-50028} closed
2019-08-15 16:18:56,412 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:18:56,412 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,412 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,412 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 16:18:56,412 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 16:18:56,413 DEBUG {conn-10005, pstmt-20008} executed. 0.611212 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:18:56,413 DEBUG {conn-10005, pstmt-20008, rs-50029} open
2019-08-15 16:18:56,413 DEBUG {conn-10005, pstmt-20008, rs-50029} Header: [count(*)]
2019-08-15 16:18:56,413 DEBUG {conn-10005, pstmt-20008, rs-50029} Result: [0]
2019-08-15 16:18:56,413 DEBUG {conn-10005, pstmt-20008, rs-50029} closed
2019-08-15 16:18:56,413 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:18:56,414 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,414 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,414 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 16:18:56,414 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 16:18:56,416 DEBUG {conn-10005, pstmt-20010} executed. 2.22483 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:18:56,416 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 16:18:56,416 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,612 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,612 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 16:18:56,612 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 16:18:56,613 DEBUG {conn-10005, pstmt-20005} executed. 0.490409 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:18:56,613 DEBUG {conn-10005, pstmt-20005, rs-50030} open
2019-08-15 16:18:56,613 DEBUG {conn-10005, pstmt-20005, rs-50030} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:18:56,613 DEBUG {conn-10005, pstmt-20005, rs-50030} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 19, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 14, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:18:56,613 DEBUG {conn-10005, pstmt-20005, rs-50030} closed
2019-08-15 16:18:56,613 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:18:56,613 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,614 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,614 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 20, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 14, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:18:56,614 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:18:56,616 DEBUG {conn-10005, pstmt-20006} executed. 2.52658 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:18:56,616 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:18:56,616 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,617 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,617 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 16:18:56,617 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:18:56,618 DEBUG {conn-10005, pstmt-20007} executed. 0.454425 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:18:56,618 DEBUG {conn-10005, pstmt-20007, rs-50031} open
2019-08-15 16:18:56,618 DEBUG {conn-10005, pstmt-20007, rs-50031} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:18:56,618 DEBUG {conn-10005, pstmt-20007, rs-50031} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:18:56,618 DEBUG {conn-10005, pstmt-20007, rs-50031} closed
2019-08-15 16:18:56,618 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:18:56,618 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,618 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,618 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 16:18:56,618 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 16:18:56,619 DEBUG {conn-10005, pstmt-20008} executed. 0.364979 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:18:56,619 DEBUG {conn-10005, pstmt-20008, rs-50032} open
2019-08-15 16:18:56,619 DEBUG {conn-10005, pstmt-20008, rs-50032} Header: [count(*)]
2019-08-15 16:18:56,619 DEBUG {conn-10005, pstmt-20008, rs-50032} Result: [0]
2019-08-15 16:18:56,619 DEBUG {conn-10005, pstmt-20008, rs-50032} closed
2019-08-15 16:18:56,619 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:18:56,619 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,619 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,619 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 16:18:56,619 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 16:18:56,621 DEBUG {conn-10005, pstmt-20010} executed. 1.657314 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:18:56,621 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 16:18:56,621 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,816 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,816 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 16:18:56,816 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 16:18:56,816 DEBUG {conn-10005, pstmt-20005} executed. 0.559291 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:18:56,816 DEBUG {conn-10005, pstmt-20005, rs-50033} open
2019-08-15 16:18:56,816 DEBUG {conn-10005, pstmt-20005, rs-50033} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:18:56,817 DEBUG {conn-10005, pstmt-20005, rs-50033} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 20, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 15, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:18:56,817 DEBUG {conn-10005, pstmt-20005, rs-50033} closed
2019-08-15 16:18:56,817 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:18:56,817 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,817 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,818 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 21, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 15, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:18:56,818 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:18:56,820 DEBUG {conn-10005, pstmt-20006} executed. 2.472604 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:18:56,820 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:18:56,820 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,821 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,821 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 16:18:56,821 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:18:56,821 DEBUG {conn-10005, pstmt-20007} executed. 0.446714 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:18:56,821 DEBUG {conn-10005, pstmt-20007, rs-50034} open
2019-08-15 16:18:56,821 DEBUG {conn-10005, pstmt-20007, rs-50034} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:18:56,822 DEBUG {conn-10005, pstmt-20007, rs-50034} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:18:56,822 DEBUG {conn-10005, pstmt-20007, rs-50034} closed
2019-08-15 16:18:56,822 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:18:56,822 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,822 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,822 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 16:18:56,822 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 16:18:56,822 DEBUG {conn-10005, pstmt-20008} executed. 0.364465 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:18:56,822 DEBUG {conn-10005, pstmt-20008, rs-50035} open
2019-08-15 16:18:56,822 DEBUG {conn-10005, pstmt-20008, rs-50035} Header: [count(*)]
2019-08-15 16:18:56,823 DEBUG {conn-10005, pstmt-20008, rs-50035} Result: [0]
2019-08-15 16:18:56,823 DEBUG {conn-10005, pstmt-20008, rs-50035} closed
2019-08-15 16:18:56,823 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:18:56,823 DEBUG {conn-10005} pool-recycle
2019-08-15 16:18:56,823 DEBUG {conn-10005} pool-connect
2019-08-15 16:18:56,823 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 16:18:56,823 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 16:18:56,825 DEBUG {conn-10005, pstmt-20010} executed. 2.184734 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:18:56,825 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 16:18:56,825 DEBUG {conn-10005} pool-recycle
2019-08-15 16:19:05,605 DEBUG {conn-10005} pool-connect
2019-08-15 16:19:05,605 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 16:19:05,605 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 16:19:05,606 DEBUG {conn-10005, pstmt-20005} executed. 0.523309 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:19:05,606 DEBUG {conn-10005, pstmt-20005, rs-50036} open
2019-08-15 16:19:05,606 DEBUG {conn-10005, pstmt-20005, rs-50036} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:19:05,606 DEBUG {conn-10005, pstmt-20005, rs-50036} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 21, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 16, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:19:05,609 DEBUG {conn-10005, pstmt-20005, rs-50036} closed
2019-08-15 16:19:05,609 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:19:05,609 DEBUG {conn-10005} pool-recycle
2019-08-15 16:19:05,609 DEBUG {conn-10005} pool-connect
2019-08-15 16:19:05,610 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 22, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 16, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:19:05,610 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:19:05,614 DEBUG {conn-10005, pstmt-20006} executed. 4.214223 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:19:05,614 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:19:05,614 DEBUG {conn-10005} pool-recycle
2019-08-15 16:19:05,615 DEBUG {conn-10005} pool-connect
2019-08-15 16:19:05,615 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 16:19:05,615 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:19:05,616 DEBUG {conn-10005, pstmt-20007} executed. 0.536673 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:19:05,616 DEBUG {conn-10005, pstmt-20007, rs-50037} open
2019-08-15 16:19:05,616 DEBUG {conn-10005, pstmt-20007, rs-50037} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:19:05,616 DEBUG {conn-10005, pstmt-20007, rs-50037} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:19:05,616 DEBUG {conn-10005, pstmt-20007, rs-50037} closed
2019-08-15 16:19:05,616 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:19:05,617 DEBUG {conn-10005} pool-recycle
2019-08-15 16:19:05,617 DEBUG {conn-10005} pool-connect
2019-08-15 16:19:05,617 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 16:19:05,617 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 16:19:05,617 DEBUG {conn-10005, pstmt-20008} executed. 0.564947 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:19:05,618 DEBUG {conn-10005, pstmt-20008, rs-50038} open
2019-08-15 16:19:05,618 DEBUG {conn-10005, pstmt-20008, rs-50038} Header: [count(*)]
2019-08-15 16:19:05,618 DEBUG {conn-10005, pstmt-20008, rs-50038} Result: [0]
2019-08-15 16:19:05,618 DEBUG {conn-10005, pstmt-20008, rs-50038} closed
2019-08-15 16:19:05,618 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:19:05,618 DEBUG {conn-10005} pool-recycle
2019-08-15 16:19:05,618 DEBUG {conn-10005} pool-connect
2019-08-15 16:19:05,618 DEBUG {conn-10005, pstmt-20009} Parameters : [24, 1, 0, 8]
2019-08-15 16:19:05,618 DEBUG {conn-10005, pstmt-20009} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 16:19:05,619 DEBUG {conn-10005, pstmt-20009} executed. 0.750006 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:19:05,619 DEBUG {conn-10005, pstmt-20009, rs-50039} open
2019-08-15 16:19:05,619 DEBUG {conn-10005, pstmt-20009, rs-50039} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 16:19:05,620 DEBUG {conn-10005, pstmt-20009, rs-50039} closed
2019-08-15 16:19:05,620 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 16:19:05,620 DEBUG {conn-10005} pool-recycle
2019-08-15 16:19:05,621 DEBUG {conn-10005} pool-connect
2019-08-15 16:19:05,621 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 16:19:05,621 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 16:19:05,621 DEBUG {conn-10005, pstmt-20003} executed. 0.48681 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:19:05,621 DEBUG {conn-10005, pstmt-20003, rs-50040} open
2019-08-15 16:19:05,621 DEBUG {conn-10005, pstmt-20003, rs-50040} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:19:05,621 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:19:05,622 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:19:05,622 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:19:05,622 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:19:05,622 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:19:05,622 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:19:05,622 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:19:05,622 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:19:05,622 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:19:05,622 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:19:05,622 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:19:05,623 DEBUG {conn-10005, pstmt-20003, rs-50040} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:19:05,623 DEBUG {conn-10005, pstmt-20003, rs-50040} closed
2019-08-15 16:19:05,623 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 16:19:05,623 DEBUG {conn-10005} pool-recycle
2019-08-15 16:19:10,083 DEBUG {conn-10005} pool-connect
2019-08-15 16:19:10,083 DEBUG {conn-10005, pstmt-20005} Parameters : [24]
2019-08-15 16:19:10,083 DEBUG {conn-10005, pstmt-20005} Types : [BIGINT]
2019-08-15 16:19:10,084 DEBUG {conn-10005, pstmt-20005} executed. 0.686264 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:19:10,084 DEBUG {conn-10005, pstmt-20005, rs-50041} open
2019-08-15 16:19:10,084 DEBUG {conn-10005, pstmt-20005, rs-50041} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:19:10,084 DEBUG {conn-10005, pstmt-20005, rs-50041} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 22, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 16, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:19:10,085 DEBUG {conn-10005, pstmt-20005, rs-50041} closed
2019-08-15 16:19:10,085 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:19:10,085 DEBUG {conn-10005} pool-recycle
2019-08-15 16:19:10,085 DEBUG {conn-10005} pool-connect
2019-08-15 16:19:10,085 DEBUG {conn-10005, pstmt-20006} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 23, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 16, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:19:10,085 DEBUG {conn-10005, pstmt-20006} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:19:10,088 DEBUG {conn-10005, pstmt-20006} executed. 2.283946 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:19:10,088 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:19:10,088 DEBUG {conn-10005} pool-recycle
2019-08-15 16:19:10,089 DEBUG {conn-10005} pool-connect
2019-08-15 16:19:10,089 DEBUG {conn-10005, pstmt-20007} Parameters : [24]
2019-08-15 16:19:10,089 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:19:10,089 DEBUG {conn-10005, pstmt-20007} executed. 0.540785 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:19:10,089 DEBUG {conn-10005, pstmt-20007, rs-50042} open
2019-08-15 16:19:10,089 DEBUG {conn-10005, pstmt-20007, rs-50042} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:19:10,090 DEBUG {conn-10005, pstmt-20007, rs-50042} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:19:10,090 DEBUG {conn-10005, pstmt-20007, rs-50042} closed
2019-08-15 16:19:10,090 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:19:10,090 DEBUG {conn-10005} pool-recycle
2019-08-15 16:19:10,091 DEBUG {conn-10005} pool-connect
2019-08-15 16:19:10,091 DEBUG {conn-10005, pstmt-20008} Parameters : [24, 1]
2019-08-15 16:19:10,091 DEBUG {conn-10005, pstmt-20008} Types : [BIGINT, INTEGER]
2019-08-15 16:19:10,091 DEBUG {conn-10005, pstmt-20008} executed. 0.575227 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:19:10,091 DEBUG {conn-10005, pstmt-20008, rs-50043} open
2019-08-15 16:19:10,091 DEBUG {conn-10005, pstmt-20008, rs-50043} Header: [count(*)]
2019-08-15 16:19:10,091 DEBUG {conn-10005, pstmt-20008, rs-50043} Result: [0]
2019-08-15 16:19:10,092 DEBUG {conn-10005, pstmt-20008, rs-50043} closed
2019-08-15 16:19:10,092 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:19:10,092 DEBUG {conn-10005} pool-recycle
2019-08-15 16:19:10,092 DEBUG {conn-10005} pool-connect
2019-08-15 16:19:10,092 DEBUG {conn-10005, pstmt-20010} Parameters : [24]
2019-08-15 16:19:10,092 DEBUG {conn-10005, pstmt-20010} Types : [BIGINT]
2019-08-15 16:19:10,101 DEBUG {conn-10005, pstmt-20010} executed. 8.94867 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:19:10,101 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 16:19:10,101 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:15,704 DEBUG {conn-10001,procId-19} connected
2019-08-15 16:20:15,712 DEBUG {conn-10002,procId-20} connected
2019-08-15 16:20:15,719 DEBUG {conn-10003,procId-21} connected
2019-08-15 16:20:15,725 DEBUG {conn-10004,procId-22} connected
2019-08-15 16:20:15,731 DEBUG {conn-10005,procId-23} connected
2019-08-15 16:20:15,738 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:15,739 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:15,750 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:15,752 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:16,176 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:16,223 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:17,013 INFO [Phyla-Vell] modules [], plugins [], sites []
2019-08-15 16:20:17,027 DEBUG [Phyla-Vell] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 16:20:17,041 DEBUG [Phyla-Vell] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 16:20:17,055 DEBUG [Phyla-Vell] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 16:20:17,056 DEBUG [Phyla-Vell] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 16:20:17,056 DEBUG [Phyla-Vell] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 16:20:17,056 DEBUG [Phyla-Vell] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:20:17,057 DEBUG [Phyla-Vell] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 16:20:17,057 DEBUG [Phyla-Vell] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 16:20:17,057 DEBUG [Phyla-Vell] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:20:17,057 DEBUG [Phyla-Vell] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 16:20:17,057 DEBUG [Phyla-Vell] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:20:17,057 DEBUG [Phyla-Vell] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 16:20:17,058 DEBUG [Phyla-Vell] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 16:20:17,058 DEBUG [Phyla-Vell] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 16:20:17,058 DEBUG [Phyla-Vell] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 16:20:17,058 DEBUG [Phyla-Vell] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:20:18,697 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:51d9:691:64d9:afc4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 16:20:18,717 DEBUG using gathering [true]
2019-08-15 16:20:18,741 DEBUG [Phyla-Vell] node_sampler_interval[5s]
2019-08-15 16:20:18,754 DEBUG Using select timeout of 500
2019-08-15 16:20:18,755 DEBUG Epoll-bug workaround enabled = false
2019-08-15 16:20:18,801 DEBUG [Phyla-Vell] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:20:18,826 DEBUG [Phyla-Vell] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:20:18,862 DEBUG [Phyla-Vell] connected to node [{Maximus}{qvkqYeT2R3qndm3-HpsGMQ}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:20:19,645 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:19,645 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:24,107 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:24,345 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:20:24,363 DEBUG {conn-10005, pstmt-20000} Parameters : [24]
2019-08-15 16:20:24,363 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 16:20:24,370 DEBUG {conn-10005, pstmt-20000} executed. 14.161188 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:20:24,378 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 16:20:24,380 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:20:24,394 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 23, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 17, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:20:24,400 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 16:20:24,401 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 16:20:24,402 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:24,403 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:24,410 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:20:24,420 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 24, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 17, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:20:24,420 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:20:24,424 DEBUG {conn-10005, pstmt-20001} executed. 4.475877 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:20:24,424 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 16:20:24,424 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:24,516 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:24,518 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:20:24,519 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-15 16:20:24,519 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 16:20:24,534 DEBUG {conn-10005, pstmt-20002} executed. 14.409991 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:20:24,534 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-15 16:20:24,534 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:20:24,534 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:20:24,536 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-15 16:20:24,536 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 16:20:24,536 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:24,574 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:24,578 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:20:24,578 DEBUG {conn-10005, pstmt-20003} Parameters : [24, 1]
2019-08-15 16:20:24,579 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 16:20:24,581 DEBUG {conn-10005, pstmt-20003} executed. 2.831929 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:20:24,582 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-15 16:20:24,582 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-15 16:20:24,582 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-15 16:20:24,585 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-15 16:20:24,585 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 16:20:24,585 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:24,588 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:24,594 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:20:24,595 DEBUG {conn-10005, pstmt-20004} Parameters : [24, 1, 0, 8]
2019-08-15 16:20:24,595 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 16:20:24,597 DEBUG {conn-10005, pstmt-20004} executed. 1.480993 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:20:24,597 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-15 16:20:24,597 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 16:20:24,597 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-15 16:20:24,598 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 16:20:24,598 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:24,605 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:24,606 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:20:24,606 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 16:20:24,606 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 16:20:24,609 DEBUG {conn-10005, pstmt-20005} executed. 3.07045 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:20:24,609 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-15 16:20:24,610 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:20:24,610 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:24,611 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:24,612 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:24,612 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:24,613 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:24,614 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:24,614 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:24,615 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:24,616 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:24,617 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:24,618 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:24,618 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:24,619 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-15 16:20:24,619 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:20:24,619 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:25,253 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:25,254 DEBUG {conn-10005, pstmt-20000} Parameters : [24]
2019-08-15 16:20:25,255 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 16:20:25,256 DEBUG {conn-10005, pstmt-20000} executed. 1.767836 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:20:25,256 DEBUG {conn-10005, pstmt-20000, rs-50005} open
2019-08-15 16:20:25,257 DEBUG {conn-10005, pstmt-20000, rs-50005} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:20:25,258 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 24, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 17, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:20:25,259 DEBUG {conn-10005, pstmt-20000, rs-50005} closed
2019-08-15 16:20:25,259 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 16:20:25,260 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:25,260 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:25,261 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 25, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 17, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:20:25,261 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:20:25,270 DEBUG {conn-10005, pstmt-20001} executed. 9.120879 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:20:25,270 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 16:20:25,270 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:25,274 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:25,275 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-15 16:20:25,275 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 16:20:25,276 DEBUG {conn-10005, pstmt-20002} executed. 1.069749 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:20:25,276 DEBUG {conn-10005, pstmt-20002, rs-50006} open
2019-08-15 16:20:25,276 DEBUG {conn-10005, pstmt-20002, rs-50006} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:20:25,276 DEBUG {conn-10005, pstmt-20002, rs-50006} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:20:25,277 DEBUG {conn-10005, pstmt-20002, rs-50006} closed
2019-08-15 16:20:25,277 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 16:20:25,277 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:25,278 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:25,278 DEBUG {conn-10005, pstmt-20003} Parameters : [24, 1]
2019-08-15 16:20:25,278 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 16:20:25,279 DEBUG {conn-10005, pstmt-20003} executed. 0.961283 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:20:25,279 DEBUG {conn-10005, pstmt-20003, rs-50007} open
2019-08-15 16:20:25,279 DEBUG {conn-10005, pstmt-20003, rs-50007} Header: [count(*)]
2019-08-15 16:20:25,280 DEBUG {conn-10005, pstmt-20003, rs-50007} Result: [0]
2019-08-15 16:20:25,280 DEBUG {conn-10005, pstmt-20003, rs-50007} closed
2019-08-15 16:20:25,280 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 16:20:25,280 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:25,281 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:25,281 DEBUG {conn-10005, pstmt-20004} Parameters : [24, 1, 0, 8]
2019-08-15 16:20:25,281 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 16:20:25,282 DEBUG {conn-10005, pstmt-20004} executed. 1.112929 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:20:25,282 DEBUG {conn-10005, pstmt-20004, rs-50008} open
2019-08-15 16:20:25,283 DEBUG {conn-10005, pstmt-20004, rs-50008} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 16:20:25,283 DEBUG {conn-10005, pstmt-20004, rs-50008} closed
2019-08-15 16:20:25,283 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 16:20:25,283 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:25,284 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:25,284 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 16:20:25,284 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 16:20:25,285 DEBUG {conn-10005, pstmt-20005} executed. 1.079516 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:20:25,285 DEBUG {conn-10005, pstmt-20005, rs-50009} open
2019-08-15 16:20:25,285 DEBUG {conn-10005, pstmt-20005, rs-50009} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:20:25,286 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:25,286 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:25,287 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:25,287 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:25,289 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:25,290 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:25,290 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:25,291 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:25,291 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:25,292 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:25,292 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:25,293 DEBUG {conn-10005, pstmt-20005, rs-50009} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:25,293 DEBUG {conn-10005, pstmt-20005, rs-50009} closed
2019-08-15 16:20:25,293 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:20:25,294 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:29,326 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:29,326 DEBUG {conn-10005, pstmt-20000} Parameters : [24]
2019-08-15 16:20:29,326 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 16:20:29,327 DEBUG {conn-10005, pstmt-20000} executed. 1.126295 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:20:29,328 DEBUG {conn-10005, pstmt-20000, rs-50010} open
2019-08-15 16:20:29,328 DEBUG {conn-10005, pstmt-20000, rs-50010} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:20:29,328 DEBUG {conn-10005, pstmt-20000, rs-50010} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 25, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 17, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:20:29,329 DEBUG {conn-10005, pstmt-20000, rs-50010} closed
2019-08-15 16:20:29,329 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 16:20:29,329 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:29,329 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:29,329 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 26, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 17, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:20:29,329 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:20:29,338 DEBUG {conn-10005, pstmt-20001} executed. 8.347225 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:20:29,338 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 16:20:29,338 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:29,340 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:29,340 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-15 16:20:29,340 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 16:20:29,341 DEBUG {conn-10005, pstmt-20002} executed. 0.90011 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:20:29,341 DEBUG {conn-10005, pstmt-20002, rs-50011} open
2019-08-15 16:20:29,341 DEBUG {conn-10005, pstmt-20002, rs-50011} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:20:29,341 DEBUG {conn-10005, pstmt-20002, rs-50011} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:20:29,342 DEBUG {conn-10005, pstmt-20002, rs-50011} closed
2019-08-15 16:20:29,342 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 16:20:29,342 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:29,342 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:29,342 DEBUG {conn-10005, pstmt-20003} Parameters : [24, 1]
2019-08-15 16:20:29,343 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 16:20:29,343 DEBUG {conn-10005, pstmt-20003} executed. 0.65542 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:20:29,343 DEBUG {conn-10005, pstmt-20003, rs-50012} open
2019-08-15 16:20:29,343 DEBUG {conn-10005, pstmt-20003, rs-50012} Header: [count(*)]
2019-08-15 16:20:29,344 DEBUG {conn-10005, pstmt-20003, rs-50012} Result: [0]
2019-08-15 16:20:29,344 DEBUG {conn-10005, pstmt-20003, rs-50012} closed
2019-08-15 16:20:29,344 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 16:20:29,344 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:29,344 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:29,345 DEBUG {conn-10005, pstmt-20006} created. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:20:29,345 DEBUG {conn-10005, pstmt-20006} Parameters : [24]
2019-08-15 16:20:29,345 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT]
2019-08-15 16:20:29,347 DEBUG {conn-10005, pstmt-20006} executed. 2.225344 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:20:29,347 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:20:29,347 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:47,838 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 16:20:47,877 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:47,878 DEBUG {conn-10005, pstmt-20007} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 16:20:47,878 DEBUG {conn-10005, pstmt-20007} Parameters : [9]
2019-08-15 16:20:47,878 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:20:47,879 DEBUG {conn-10005, pstmt-20007} executed. 0.615838 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 16:20:47,879 DEBUG {conn-10005, pstmt-20007, rs-50013} open
2019-08-15 16:20:47,879 DEBUG {conn-10005, pstmt-20007, rs-50013} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 16:20:47,879 DEBUG {conn-10005, pstmt-20007, rs-50013} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 26, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 18, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 16:20:47,879 DEBUG {conn-10005, pstmt-20007, rs-50013} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 16:20:47,879 DEBUG {conn-10005, pstmt-20007, rs-50013} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 16:20:47,880 DEBUG {conn-10005, pstmt-20007, rs-50013} closed
2019-08-15 16:20:47,880 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:20:47,880 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:47,882 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:47,883 DEBUG {conn-10005, pstmt-20008} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 16:20:47,883 DEBUG {conn-10005, pstmt-20008} Parameters : [9]
2019-08-15 16:20:47,883 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER]
2019-08-15 16:20:47,884 DEBUG {conn-10005, pstmt-20008} executed. 0.628176 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 16:20:47,884 DEBUG {conn-10005, pstmt-20008, rs-50014} open
2019-08-15 16:20:47,884 DEBUG {conn-10005, pstmt-20008, rs-50014} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 16:20:47,884 DEBUG {conn-10005, pstmt-20008, rs-50014} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 16:20:47,884 DEBUG {conn-10005, pstmt-20008, rs-50014} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 16:20:47,885 DEBUG {conn-10005, pstmt-20008, rs-50014} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 26, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 18, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 16:20:47,885 DEBUG {conn-10005, pstmt-20008, rs-50014} closed
2019-08-15 16:20:47,885 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:20:47,885 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:47,885 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:47,888 DEBUG {conn-10005, pstmt-20009} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 16:20:47,889 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 16:20:47,889 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 16:20:47,891 DEBUG {conn-10005, pstmt-20009} executed. 1.945184 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 16:20:47,891 DEBUG {conn-10005, pstmt-20009, rs-50015} open
2019-08-15 16:20:47,891 DEBUG {conn-10005, pstmt-20009, rs-50015} Header: [tag_id, tag_count, tag_name]
2019-08-15 16:20:47,891 DEBUG {conn-10005, pstmt-20009, rs-50015} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 16:20:47,891 DEBUG {conn-10005, pstmt-20009, rs-50015} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 16:20:47,891 DEBUG {conn-10005, pstmt-20009, rs-50015} Result: [139, 1, jqGrid]
2019-08-15 16:20:47,891 DEBUG {conn-10005, pstmt-20009, rs-50015} Result: [140, 1, spring security]
2019-08-15 16:20:47,892 DEBUG {conn-10005, pstmt-20009, rs-50015} closed
2019-08-15 16:20:47,892 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 16:20:47,892 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:47,892 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:47,892 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 16:20:47,892 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 16:20:47,892 DEBUG {conn-10005, pstmt-20005} executed. 0.52742 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:20:47,893 DEBUG {conn-10005, pstmt-20005, rs-50016} open
2019-08-15 16:20:47,893 DEBUG {conn-10005, pstmt-20005, rs-50016} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:20:47,893 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:47,893 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:47,893 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:47,893 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:47,893 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:47,893 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:47,893 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:47,894 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:47,894 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:47,894 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:47,894 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:47,894 DEBUG {conn-10005, pstmt-20005, rs-50016} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:47,894 DEBUG {conn-10005, pstmt-20005, rs-50016} closed
2019-08-15 16:20:47,894 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:20:47,895 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:47,972 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:47,973 DEBUG {conn-10005, pstmt-20010} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 16:20:47,973 DEBUG {conn-10005, pstmt-20010} Parameters : [admin]
2019-08-15 16:20:47,973 DEBUG {conn-10005, pstmt-20010} Types : [VARCHAR]
2019-08-15 16:20:47,974 DEBUG {conn-10005, pstmt-20010} executed. 1.467113 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 16:20:47,975 DEBUG {conn-10005, pstmt-20010, rs-50017} open
2019-08-15 16:20:47,975 DEBUG {conn-10005, pstmt-20010, rs-50017} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 16:20:47,975 DEBUG {conn-10005, pstmt-20010, rs-50017} closed
2019-08-15 16:20:47,975 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 16:20:47,975 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:54,621 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:54,621 DEBUG {conn-10005, pstmt-20000} Parameters : [24]
2019-08-15 16:20:54,621 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 16:20:54,622 DEBUG {conn-10005, pstmt-20000} executed. 0.606071 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:20:54,622 DEBUG {conn-10005, pstmt-20000, rs-50018} open
2019-08-15 16:20:54,622 DEBUG {conn-10005, pstmt-20000, rs-50018} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:20:54,622 DEBUG {conn-10005, pstmt-20000, rs-50018} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 26, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 18, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:20:54,622 DEBUG {conn-10005, pstmt-20000, rs-50018} closed
2019-08-15 16:20:54,622 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 16:20:54,622 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:54,623 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:54,623 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 27, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 18, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:20:54,623 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:20:54,631 DEBUG {conn-10005, pstmt-20001} executed. 7.85219 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:20:54,631 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 16:20:54,631 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:54,632 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:54,632 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-15 16:20:54,632 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 16:20:54,633 DEBUG {conn-10005, pstmt-20002} executed. 0.4133 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:20:54,633 DEBUG {conn-10005, pstmt-20002, rs-50019} open
2019-08-15 16:20:54,633 DEBUG {conn-10005, pstmt-20002, rs-50019} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:20:54,633 DEBUG {conn-10005, pstmt-20002, rs-50019} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:20:54,633 DEBUG {conn-10005, pstmt-20002, rs-50019} closed
2019-08-15 16:20:54,633 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 16:20:54,633 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:54,633 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:54,634 DEBUG {conn-10005, pstmt-20003} Parameters : [24, 1]
2019-08-15 16:20:54,634 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 16:20:54,634 DEBUG {conn-10005, pstmt-20003} executed. 0.374232 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:20:54,634 DEBUG {conn-10005, pstmt-20003, rs-50020} open
2019-08-15 16:20:54,634 DEBUG {conn-10005, pstmt-20003, rs-50020} Header: [count(*)]
2019-08-15 16:20:54,634 DEBUG {conn-10005, pstmt-20003, rs-50020} Result: [0]
2019-08-15 16:20:54,634 DEBUG {conn-10005, pstmt-20003, rs-50020} closed
2019-08-15 16:20:54,634 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 16:20:54,634 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:54,635 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:54,635 DEBUG {conn-10005, pstmt-20004} Parameters : [24, 1, 0, 8]
2019-08-15 16:20:54,635 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 16:20:54,635 DEBUG {conn-10005, pstmt-20004} executed. 0.499662 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:20:54,635 DEBUG {conn-10005, pstmt-20004, rs-50021} open
2019-08-15 16:20:54,635 DEBUG {conn-10005, pstmt-20004, rs-50021} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 16:20:54,635 DEBUG {conn-10005, pstmt-20004, rs-50021} closed
2019-08-15 16:20:54,636 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 16:20:54,636 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:54,636 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:54,636 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 16:20:54,636 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 16:20:54,636 DEBUG {conn-10005, pstmt-20005} executed. 0.476015 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:20:54,636 DEBUG {conn-10005, pstmt-20005, rs-50022} open
2019-08-15 16:20:54,636 DEBUG {conn-10005, pstmt-20005, rs-50022} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:20:54,637 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:54,637 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:54,637 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:54,637 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:54,637 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:20:54,637 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:54,637 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:54,638 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:54,638 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:20:54,638 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:54,638 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:54,638 DEBUG {conn-10005, pstmt-20005, rs-50022} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:20:54,638 DEBUG {conn-10005, pstmt-20005, rs-50022} closed
2019-08-15 16:20:54,638 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:20:54,639 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:59,844 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:59,844 DEBUG {conn-10005, pstmt-20000} Parameters : [24]
2019-08-15 16:20:59,844 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 16:20:59,845 DEBUG {conn-10005, pstmt-20000} executed. 0.521252 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:20:59,845 DEBUG {conn-10005, pstmt-20000, rs-50023} open
2019-08-15 16:20:59,845 DEBUG {conn-10005, pstmt-20000, rs-50023} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:20:59,845 DEBUG {conn-10005, pstmt-20000, rs-50023} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 27, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 18, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:20:59,846 DEBUG {conn-10005, pstmt-20000, rs-50023} closed
2019-08-15 16:20:59,846 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 16:20:59,846 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:59,846 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:59,847 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 28, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 18, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:20:59,847 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:20:59,850 DEBUG {conn-10005, pstmt-20001} executed. 2.841696 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:20:59,850 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 16:20:59,850 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:59,851 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:59,851 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-15 16:20:59,851 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 16:20:59,852 DEBUG {conn-10005, pstmt-20002} executed. 0.664673 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:20:59,852 DEBUG {conn-10005, pstmt-20002, rs-50024} open
2019-08-15 16:20:59,852 DEBUG {conn-10005, pstmt-20002, rs-50024} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:20:59,852 DEBUG {conn-10005, pstmt-20002, rs-50024} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:20:59,852 DEBUG {conn-10005, pstmt-20002, rs-50024} closed
2019-08-15 16:20:59,853 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 16:20:59,853 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:59,853 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:59,853 DEBUG {conn-10005, pstmt-20003} Parameters : [24, 1]
2019-08-15 16:20:59,853 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 16:20:59,854 DEBUG {conn-10005, pstmt-20003} executed. 0.480127 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:20:59,854 DEBUG {conn-10005, pstmt-20003, rs-50025} open
2019-08-15 16:20:59,854 DEBUG {conn-10005, pstmt-20003, rs-50025} Header: [count(*)]
2019-08-15 16:20:59,854 DEBUG {conn-10005, pstmt-20003, rs-50025} Result: [0]
2019-08-15 16:20:59,854 DEBUG {conn-10005, pstmt-20003, rs-50025} closed
2019-08-15 16:20:59,854 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 16:20:59,854 DEBUG {conn-10005} pool-recycle
2019-08-15 16:20:59,854 DEBUG {conn-10005} pool-connect
2019-08-15 16:20:59,854 DEBUG {conn-10005, pstmt-20006} Parameters : [24]
2019-08-15 16:20:59,854 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT]
2019-08-15 16:20:59,856 DEBUG {conn-10005, pstmt-20006} executed. 1.845972 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:20:59,856 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:20:59,856 DEBUG {conn-10005} pool-recycle
2019-08-15 16:23:36,625 DEBUG {conn-10001,procId-24} connected
2019-08-15 16:23:36,636 DEBUG {conn-10002,procId-25} connected
2019-08-15 16:23:36,644 DEBUG {conn-10003,procId-26} connected
2019-08-15 16:23:36,651 DEBUG {conn-10004,procId-27} connected
2019-08-15 16:23:36,660 DEBUG {conn-10005,procId-28} connected
2019-08-15 16:23:36,669 DEBUG {conn-10005} pool-connect
2019-08-15 16:23:36,672 DEBUG {conn-10005} pool-recycle
2019-08-15 16:23:36,683 DEBUG {conn-10005} pool-connect
2019-08-15 16:23:36,686 DEBUG {conn-10005} pool-recycle
2019-08-15 16:23:37,181 DEBUG {conn-10005} pool-connect
2019-08-15 16:23:37,233 DEBUG {conn-10005} pool-recycle
2019-08-15 16:23:38,051 INFO [Shellshock] modules [], plugins [], sites []
2019-08-15 16:23:38,068 DEBUG [Shellshock] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 16:23:38,081 DEBUG [Shellshock] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 16:23:38,094 DEBUG [Shellshock] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 16:23:38,095 DEBUG [Shellshock] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 16:23:38,096 DEBUG [Shellshock] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 16:23:38,096 DEBUG [Shellshock] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:23:38,096 DEBUG [Shellshock] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 16:23:38,096 DEBUG [Shellshock] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 16:23:38,096 DEBUG [Shellshock] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:23:38,096 DEBUG [Shellshock] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 16:23:38,096 DEBUG [Shellshock] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:23:38,096 DEBUG [Shellshock] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 16:23:38,097 DEBUG [Shellshock] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 16:23:38,097 DEBUG [Shellshock] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 16:23:38,097 DEBUG [Shellshock] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 16:23:38,097 DEBUG [Shellshock] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 16:23:39,650 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:51d9:691:64d9:afc4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 16:23:39,678 DEBUG using gathering [true]
2019-08-15 16:23:39,704 DEBUG [Shellshock] node_sampler_interval[5s]
2019-08-15 16:23:39,719 DEBUG Using select timeout of 500
2019-08-15 16:23:39,719 DEBUG Epoll-bug workaround enabled = false
2019-08-15 16:23:39,770 DEBUG [Shellshock] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:23:39,796 DEBUG [Shellshock] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:23:39,832 DEBUG [Shellshock] connected to node [{Maximus}{qvkqYeT2R3qndm3-HpsGMQ}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 16:23:40,669 DEBUG {conn-10005} pool-connect
2019-08-15 16:23:40,669 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:17,886 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:18,015 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:24:18,024 DEBUG {conn-10005, pstmt-20000} Parameters : [24]
2019-08-15 16:24:18,025 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 16:24:18,029 DEBUG {conn-10005, pstmt-20000} executed. 7.726247 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:24:18,033 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 16:24:18,034 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:24:18,041 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 28, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 19, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:24:18,044 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 16:24:18,044 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 16:24:18,045 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:18,046 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:18,050 DEBUG {conn-10005, pstmt-20001} created. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:24:18,054 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 29, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 19, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:24:18,054 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:24:18,063 DEBUG {conn-10005, pstmt-20001} executed. 9.15018 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:24:18,063 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 16:24:18,063 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:18,108 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:18,109 DEBUG {conn-10005, pstmt-20002} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:24:18,109 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-15 16:24:18,109 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 16:24:18,111 DEBUG {conn-10005, pstmt-20002} executed. 2.0701 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:24:18,111 DEBUG {conn-10005, pstmt-20002, rs-50001} open
2019-08-15 16:24:18,111 DEBUG {conn-10005, pstmt-20002, rs-50001} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:24:18,112 DEBUG {conn-10005, pstmt-20002, rs-50001} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:24:18,112 DEBUG {conn-10005, pstmt-20002, rs-50001} closed
2019-08-15 16:24:18,112 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 16:24:18,112 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:18,130 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:18,131 DEBUG {conn-10005, pstmt-20003} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:24:18,132 DEBUG {conn-10005, pstmt-20003} Parameters : [24, 1]
2019-08-15 16:24:18,132 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 16:24:18,133 DEBUG {conn-10005, pstmt-20003} executed. 1.535483 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:24:18,133 DEBUG {conn-10005, pstmt-20003, rs-50002} open
2019-08-15 16:24:18,133 DEBUG {conn-10005, pstmt-20003, rs-50002} Header: [count(*)]
2019-08-15 16:24:18,133 DEBUG {conn-10005, pstmt-20003, rs-50002} Result: [0]
2019-08-15 16:24:18,135 DEBUG {conn-10005, pstmt-20003, rs-50002} closed
2019-08-15 16:24:18,135 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 16:24:18,135 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:18,137 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:18,141 DEBUG {conn-10005, pstmt-20004} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:24:18,141 DEBUG {conn-10005, pstmt-20004} Parameters : [24, 1, 0, 8]
2019-08-15 16:24:18,142 DEBUG {conn-10005, pstmt-20004} Types : [BIGINT, INTEGER, INTEGER, INTEGER]
2019-08-15 16:24:18,142 DEBUG {conn-10005, pstmt-20004} executed. 0.801412 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:24:18,142 DEBUG {conn-10005, pstmt-20004, rs-50003} open
2019-08-15 16:24:18,142 DEBUG {conn-10005, pstmt-20004, rs-50003} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 16:24:18,143 DEBUG {conn-10005, pstmt-20004, rs-50003} closed
2019-08-15 16:24:18,143 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 16:24:18,143 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:18,146 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:18,147 DEBUG {conn-10005, pstmt-20005} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:24:18,147 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 16:24:18,147 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 16:24:18,149 DEBUG {conn-10005, pstmt-20005} executed. 1.628527 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:24:18,149 DEBUG {conn-10005, pstmt-20005, rs-50004} open
2019-08-15 16:24:18,149 DEBUG {conn-10005, pstmt-20005, rs-50004} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:24:18,149 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:18,150 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:18,150 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:18,150 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:18,150 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:18,151 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:18,151 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:18,151 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:18,152 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:18,152 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:24:18,152 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:24:18,152 DEBUG {conn-10005, pstmt-20005, rs-50004} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:24:18,153 DEBUG {conn-10005, pstmt-20005, rs-50004} closed
2019-08-15 16:24:18,153 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:24:18,153 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:20,220 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:20,220 DEBUG {conn-10005, pstmt-20000} Parameters : [24]
2019-08-15 16:24:20,220 DEBUG {conn-10005, pstmt-20000} Types : [BIGINT]
2019-08-15 16:24:20,221 DEBUG {conn-10005, pstmt-20000} executed. 1.03068 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    ,
     
    blog_content
   
    from tb_blog
    where blog_id = ? and is_deleted = 0
2019-08-15 16:24:20,222 DEBUG {conn-10005, pstmt-20000, rs-50005} open
2019-08-15 16:24:20,222 DEBUG {conn-10005, pstmt-20000, rs-50005} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 16:24:20,222 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 29, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 19, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, ##### 当登录表单验证失败时，会该用户显示”用户名或密码错误，请重试”，这当然是比较好的，但是验证失败的情况不仅仅是用户名或密码错误吧，应该还有其它的情形，比较常见的就有，该用户已被锁定，该用户不存在，请先注册等。
Spring boot提供了比较完美的解决方案，就在Spring Security的配置中。
在Spring boot +Spring Security + Thymeleaf框架下，通过用户名/密码表单提交，在登录界面获取异常信息的步骤，主要有以下两点：

其一：将登录失败的url设置为”/login?error=true”(即后缀带?error=true),使前端的thymleaf可以读取Session；

其二：Thymeleaf提供的读取缓存中信息的方法${session.SPRING_SECURITY_LAST_EXCEPTION.message}，两者缺一不可。
###### 前端登录页面代码
```java
 <!-- 以下为显示认证失败等提示信息（th:if=""一定要写 ） -->
                                            <span class="help-block" style="color: red" th:if="${param.error}" th:text="${session?.SPRING_SECURITY_LAST_EXCEPTION?.message}"></span>
```

###### spring security配置文件
```java
protected void applyPasswordAuthenticationConfig(HttpSecurity http) throws Exception {
		http.formLogin()
			.loginPage(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL).failureUrl("/login?error=true")
				.loginProcessingUrl(DEFAULT_LOGIN_PROCESSING_URL_FORM)
			.successHandler(imoocAuthenticationSuccessHandler)
			.failureHandler(imoocAuthenticationFailureHandler);
	}
```

##### 登录错误时返回自定义的消息
##### 写一个消息配置文件
```java
@Configuration
public class MySecurityMessages {

    /** 注册bean */
    @Bean
    public MessageSource messageSource() {
        Locale.setDefault(Locale.CHINA);
        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
        /**
         *	下面为加载自定义消息的properties文件，放在了resources下，里面的提示消息可以自己定义，
         *	比如：密码错误是，原文件中提示的是，坏的凭证，可以找到它对应的key，修改它的值为 用户名或密码错误。
         */
        messageSource.addBasenames("classpath:messages_zh_CN");

        return messageSource;
    }

}
```

##### 自定义messages_zh_CN.properties中的内容]
2019-08-15 16:24:20,223 DEBUG {conn-10005, pstmt-20000, rs-50005} closed
2019-08-15 16:24:20,223 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 16:24:20,223 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:20,223 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:20,223 DEBUG {conn-10005, pstmt-20001} Parameters : [Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 19, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？, 24]
2019-08-15 16:24:20,224 DEBUG {conn-10005, pstmt-20001} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, BIGINT, TINYINT, TINYINT, TIMESTAMP, TIMESTAMP, INTEGER, VARCHAR, BIGINT]
2019-08-15 16:24:20,227 DEBUG {conn-10005, pstmt-20001} executed. 3.186113 millis. update tb_blog
    set blog_title = ?,
      blog_sub_url = ?,
      blog_cover_image = ?,
      blog_category_id = ?,
      blog_category_name = ?,
      blog_tags = ?,
      blog_status = ?,
      blog_views = ?,
      enable_comment = ?,
      is_deleted = ?,
      create_time = ?,
      update_time = ?,
       blog_vote_size=? ,
        blog_summary=?
    where blog_id = ?
2019-08-15 16:24:20,227 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 16:24:20,227 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:20,228 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:20,229 DEBUG {conn-10005, pstmt-20002} Parameters : [24]
2019-08-15 16:24:20,229 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 16:24:20,229 DEBUG {conn-10005, pstmt-20002} executed. 0.778279 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 16:24:20,230 DEBUG {conn-10005, pstmt-20002, rs-50006} open
2019-08-15 16:24:20,230 DEBUG {conn-10005, pstmt-20002, rs-50006} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:24:20,230 DEBUG {conn-10005, pstmt-20002, rs-50006} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:24:20,230 DEBUG {conn-10005, pstmt-20002, rs-50006} closed
2019-08-15 16:24:20,230 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 16:24:20,231 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:20,231 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:20,231 DEBUG {conn-10005, pstmt-20003} Parameters : [24, 1]
2019-08-15 16:24:20,231 DEBUG {conn-10005, pstmt-20003} Types : [BIGINT, INTEGER]
2019-08-15 16:24:20,232 DEBUG {conn-10005, pstmt-20003} executed. 0.756689 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
     
      AND blog_id = ?
     
     
      AND comment_status = ?
2019-08-15 16:24:20,232 DEBUG {conn-10005, pstmt-20003, rs-50007} open
2019-08-15 16:24:20,232 DEBUG {conn-10005, pstmt-20003, rs-50007} Header: [count(*)]
2019-08-15 16:24:20,232 DEBUG {conn-10005, pstmt-20003, rs-50007} Result: [0]
2019-08-15 16:24:20,232 DEBUG {conn-10005, pstmt-20003, rs-50007} closed
2019-08-15 16:24:20,232 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 16:24:20,232 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:20,232 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:20,233 DEBUG {conn-10005, pstmt-20006} created. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:24:20,233 DEBUG {conn-10005, pstmt-20006} Parameters : [24]
2019-08-15 16:24:20,233 DEBUG {conn-10005, pstmt-20006} Types : [BIGINT]
2019-08-15 16:24:20,235 DEBUG {conn-10005, pstmt-20006} executed. 2.229456 millis. UPDATE tb_blog
    SET blog_vote_size = blog_vote_size+1 WHERE blog_id = ?
2019-08-15 16:24:20,235 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 16:24:20,236 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:28,449 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 16:24:28,490 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:28,490 DEBUG {conn-10005, pstmt-20007} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 16:24:28,491 DEBUG {conn-10005, pstmt-20007} Parameters : [9]
2019-08-15 16:24:28,491 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:24:28,492 DEBUG {conn-10005, pstmt-20007} executed. 0.635372 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 16:24:28,492 DEBUG {conn-10005, pstmt-20007, rs-50008} open
2019-08-15 16:24:28,492 DEBUG {conn-10005, pstmt-20007, rs-50008} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 16:24:28,492 DEBUG {conn-10005, pstmt-20007, rs-50008} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 16:24:28,493 DEBUG {conn-10005, pstmt-20007, rs-50008} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 16:24:28,493 DEBUG {conn-10005, pstmt-20007, rs-50008} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 16:24:28,493 DEBUG {conn-10005, pstmt-20007, rs-50008} closed
2019-08-15 16:24:28,493 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:24:28,494 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:28,496 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:28,496 DEBUG {conn-10005, pstmt-20008} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 16:24:28,497 DEBUG {conn-10005, pstmt-20008} Parameters : [9]
2019-08-15 16:24:28,497 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER]
2019-08-15 16:24:28,497 DEBUG {conn-10005, pstmt-20008} executed. 0.669814 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 16:24:28,497 DEBUG {conn-10005, pstmt-20008, rs-50009} open
2019-08-15 16:24:28,498 DEBUG {conn-10005, pstmt-20008, rs-50009} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 16:24:28,498 DEBUG {conn-10005, pstmt-20008, rs-50009} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 16:24:28,498 DEBUG {conn-10005, pstmt-20008, rs-50009} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 16:24:28,499 DEBUG {conn-10005, pstmt-20008, rs-50009} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 16:24:28,499 DEBUG {conn-10005, pstmt-20008, rs-50009} closed
2019-08-15 16:24:28,499 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:24:28,499 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:28,500 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:28,503 DEBUG {conn-10005, pstmt-20009} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 16:24:28,503 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 16:24:28,503 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 16:24:28,505 DEBUG {conn-10005, pstmt-20009} executed. 1.782743 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 16:24:28,505 DEBUG {conn-10005, pstmt-20009, rs-50010} open
2019-08-15 16:24:28,505 DEBUG {conn-10005, pstmt-20009, rs-50010} Header: [tag_id, tag_count, tag_name]
2019-08-15 16:24:28,505 DEBUG {conn-10005, pstmt-20009, rs-50010} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 16:24:28,505 DEBUG {conn-10005, pstmt-20009, rs-50010} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 16:24:28,505 DEBUG {conn-10005, pstmt-20009, rs-50010} Result: [139, 1, jqGrid]
2019-08-15 16:24:28,506 DEBUG {conn-10005, pstmt-20009, rs-50010} Result: [140, 1, spring security]
2019-08-15 16:24:28,506 DEBUG {conn-10005, pstmt-20009, rs-50010} closed
2019-08-15 16:24:28,506 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 16:24:28,506 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:28,506 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:28,506 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 16:24:28,506 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 16:24:28,507 DEBUG {conn-10005, pstmt-20005} executed. 0.513541 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:24:28,507 DEBUG {conn-10005, pstmt-20005, rs-50011} open
2019-08-15 16:24:28,507 DEBUG {conn-10005, pstmt-20005, rs-50011} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:24:28,507 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:28,507 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:28,507 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:28,507 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:28,508 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:28,508 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:28,508 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:28,509 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:28,509 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:28,509 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:24:28,509 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:24:28,509 DEBUG {conn-10005, pstmt-20005, rs-50011} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:24:28,509 DEBUG {conn-10005, pstmt-20005, rs-50011} closed
2019-08-15 16:24:28,509 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:24:28,509 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:28,565 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:28,566 DEBUG {conn-10005, pstmt-20010} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 16:24:28,566 DEBUG {conn-10005, pstmt-20010} Parameters : [admin]
2019-08-15 16:24:28,566 DEBUG {conn-10005, pstmt-20010} Types : [VARCHAR]
2019-08-15 16:24:28,567 DEBUG {conn-10005, pstmt-20010} executed. 1.116527 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 16:24:28,567 DEBUG {conn-10005, pstmt-20010, rs-50012} open
2019-08-15 16:24:28,567 DEBUG {conn-10005, pstmt-20010, rs-50012} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 16:24:28,567 DEBUG {conn-10005, pstmt-20010, rs-50012} closed
2019-08-15 16:24:28,567 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 16:24:28,567 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:29,679 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:29,680 DEBUG {conn-10005, pstmt-20011} created. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
2019-08-15 16:24:29,680 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 16:24:29,680 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 16:24:29,685 DEBUG {conn-10005, pstmt-20011} executed. 4.824921 millis. select
         
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
   
        from tb_link
        where is_deleted=0
        order by link_id desc
2019-08-15 16:24:29,685 DEBUG {conn-10005, pstmt-20011, rs-50013} open
2019-08-15 16:24:29,685 DEBUG {conn-10005, pstmt-20011, rs-50013} Header: [link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, create_time]
2019-08-15 16:24:29,685 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [32, 0, fh, 567457, sf, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 16:24:29,686 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [31, 0, dg, 658, 手动阀, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 16:24:29,686 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [30, 0, 接口, 090, 模拟, 1, 0, 2019-03-14 00:00:00.0]
2019-08-15 16:24:29,686 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [29, 0, 校验码, 745, 如果和人, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 16:24:29,687 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [28, 0, 很关键, 456, 天涯海角, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 16:24:29,687 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [27, 0, 染发膏, 456, 突然好几天, 1, 0, 2019-11-04 00:00:00.0]
2019-08-15 16:24:29,687 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [26, 0, 翻滚吧, 345, 姑获鸟, 1, 0, 2019-05-06 00:00:00.0]
2019-08-15 16:24:29,688 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [25, 0, 分别, 34534, 法国红酒, 1, 0, 2019-09-23 00:00:00.0]
2019-08-15 16:24:29,688 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [24, 0, 4356fg地方, 345, 儿童, 1, 0, 2019-06-05 00:00:00.0]
2019-08-15 16:24:29,688 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [23, 0, 后就开始的, 34534, 放电饭锅, 0, 0, 2019-04-04 00:00:00.0]
2019-08-15 16:24:29,688 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [22, 0, 托尔斯泰, 34534, 的双方各是地方, 1, 0, 2019-04-05 00:00:00.0]
2019-08-15 16:24:29,689 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [21, 0, test2, 2222222222222222, sdgsfgdg, 0, 0, 2019-03-14 00:00:00.0]
2019-08-15 16:24:29,689 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [20, 0, test1, 1111111111, dfgs, 0, 0, 2019-04-03 00:00:00.0]
2019-08-15 16:24:29,689 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [19, 2, 《玩转Spring Boot 系列》, https://www.shiyanlou.com/courses/1274, SpringBoot实战课程, 20, 0, 2019-04-25 00:10:30.0]
2019-08-15 16:24:29,690 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [18, 2, 谷歌浏览器Chrome插件打包下载, https://www.crx4chrome.com/, 垂直专业的资源网站, 19, 0, 2019-07-25 00:07:27.0]
2019-08-15 16:24:29,690 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [17, 2, 《SSM 搭建精美实用的管理系统》, https://gitbook.cn/gitchat/column/5b4dae389bcda53d07056bc9, Spring+SpringMVC+MyBatis实战课程, 18, 0, 2019-04-25 00:06:52.0]
2019-08-15 16:24:29,692 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [16, 1, 实验楼, https://www.shiyanlou.com/, 一家专注于IT技术的在线实训平台, 17, 0, 2019-04-25 00:03:48.0]
2019-08-15 16:24:29,692 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [14, 0, dalaoyang, https://www.dalaoyang.cn/, dalaoyang, 0, 0, 2019-04-24 23:31:50.0]
2019-08-15 16:24:29,693 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [13, 0, 郭赵晖, http://guozh.net/, 老郭三分地, 0, 0, 2019-04-24 23:30:19.0]
2019-08-15 16:24:29,693 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [9, 0, 纯洁的微笑, http://www.ityouknow.com, 分享技术，分享生活, 3, 0, 2018-10-23 04:27:16.0]
2019-08-15 16:24:29,693 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [8, 0, Giraffe Home, https://yemengying.com/, Giraffe Home, 0, 0, 2018-10-23 04:27:04.0]
2019-08-15 16:24:29,693 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [7, 0, 猿天地, http://cxytiandi.com, 一个综合性的网站,以程序猿用户为主,提供各种开发相关的内容, 12, 0, 2018-10-23 04:02:41.0]
2019-08-15 16:24:29,693 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [6, 0, 梁桂钊的博客, http://blog.720ui.com, 后端攻城狮, 1, 0, 2018-10-23 04:01:38.0]
2019-08-15 16:24:29,693 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [5, 1, CSDN, https://www.csdn.net/, CSDN-专业IT技术社区官网, 4, 0, 2018-10-23 03:56:47.0]
2019-08-15 16:24:29,694 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [4, 1, CSDN 图文课, https://gitchat.csdn.net, IT优质内容平台, 6, 0, 2019-07-25 03:55:55.0]
2019-08-15 16:24:29,694 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [3, 2, Kuky的博客, http://321kuky.com, 个人独立博客13blog, 14, 0, 2019-07-25 03:53:34.0]
2019-08-15 16:24:29,694 DEBUG {conn-10005, pstmt-20011, rs-50013} Result: [2, 2, Kuky的GitHub, https://github.com/Kukyhmy, 分享代码的地方, 1, 0, 2019-07-25 03:41:04.0]
2019-08-15 16:24:29,695 DEBUG {conn-10005, pstmt-20011, rs-50013} closed
2019-08-15 16:24:29,695 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 16:24:29,695 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:29,698 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:29,698 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 16:24:29,698 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 16:24:29,698 DEBUG {conn-10005, pstmt-20005} executed. 0.72893 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:24:29,699 DEBUG {conn-10005, pstmt-20005, rs-50014} open
2019-08-15 16:24:29,699 DEBUG {conn-10005, pstmt-20005, rs-50014} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:24:29,699 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:29,699 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:29,699 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:29,700 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:29,700 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:24:29,700 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:29,700 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:29,701 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:29,701 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:24:29,701 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:24:29,701 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:24:29,701 DEBUG {conn-10005, pstmt-20005, rs-50014} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:24:29,701 DEBUG {conn-10005, pstmt-20005, rs-50014} closed
2019-08-15 16:24:29,701 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:24:29,702 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:47,434 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:47,434 DEBUG {conn-10005, pstmt-20012} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 16:24:47,435 DEBUG {conn-10005, pstmt-20012} Parameters : [admin]
2019-08-15 16:24:47,435 DEBUG {conn-10005, pstmt-20012} Types : [VARCHAR]
2019-08-15 16:24:47,442 DEBUG {conn-10005, pstmt-20012} executed. 7.100642 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 16:24:47,442 DEBUG {conn-10005, pstmt-20012, rs-50015} open
2019-08-15 16:24:47,442 DEBUG {conn-10005, pstmt-20012, rs-50015} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 16:24:47,442 DEBUG {conn-10005, pstmt-20012, rs-50015} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 16:24:47,443 DEBUG {conn-10005, pstmt-20012, rs-50015} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 16:24:47,443 DEBUG {conn-10005, pstmt-20012, rs-50015} closed
2019-08-15 16:24:47,443 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 16:24:47,444 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:47,545 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:47,546 DEBUG {conn-10005, pstmt-20013} created. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 16:24:47,546 DEBUG {conn-10005, pstmt-20013} Parameters : []
2019-08-15 16:24:47,546 DEBUG {conn-10005, pstmt-20013} Types : []
2019-08-15 16:24:47,547 DEBUG {conn-10005, pstmt-20013} executed. 0.594248 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 16:24:47,547 DEBUG {conn-10005, pstmt-20013, rs-50016} open
2019-08-15 16:24:47,547 DEBUG {conn-10005, pstmt-20013, rs-50016} Header: [count(*)]
2019-08-15 16:24:47,547 DEBUG {conn-10005, pstmt-20013, rs-50016} Result: [4]
2019-08-15 16:24:47,548 DEBUG {conn-10005, pstmt-20013, rs-50016} closed
2019-08-15 16:24:47,548 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 16:24:47,548 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:47,548 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:47,549 DEBUG {conn-10005, pstmt-20014} created. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 16:24:47,549 DEBUG {conn-10005, pstmt-20014} Parameters : []
2019-08-15 16:24:47,549 DEBUG {conn-10005, pstmt-20014} Types : []
2019-08-15 16:24:47,549 DEBUG {conn-10005, pstmt-20014} executed. 0.488352 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 16:24:47,549 DEBUG {conn-10005, pstmt-20014, rs-50017} open
2019-08-15 16:24:47,549 DEBUG {conn-10005, pstmt-20014, rs-50017} Header: [count(*)]
2019-08-15 16:24:47,549 DEBUG {conn-10005, pstmt-20014, rs-50017} Result: [3]
2019-08-15 16:24:47,550 DEBUG {conn-10005, pstmt-20014, rs-50017} closed
2019-08-15 16:24:47,550 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 16:24:47,550 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:47,550 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:47,551 DEBUG {conn-10005, pstmt-20015} created. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 16:24:47,551 DEBUG {conn-10005, pstmt-20015} Parameters : []
2019-08-15 16:24:47,551 DEBUG {conn-10005, pstmt-20015} Types : []
2019-08-15 16:24:47,551 DEBUG {conn-10005, pstmt-20015} executed. 0.50326 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 16:24:47,551 DEBUG {conn-10005, pstmt-20015, rs-50018} open
2019-08-15 16:24:47,551 DEBUG {conn-10005, pstmt-20015, rs-50018} Header: [count(*)]
2019-08-15 16:24:47,551 DEBUG {conn-10005, pstmt-20015, rs-50018} Result: [27]
2019-08-15 16:24:47,552 DEBUG {conn-10005, pstmt-20015, rs-50018} closed
2019-08-15 16:24:47,552 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 16:24:47,552 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:47,552 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:47,552 DEBUG {conn-10005, pstmt-20016} created. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 16:24:47,552 DEBUG {conn-10005, pstmt-20016} Parameters : []
2019-08-15 16:24:47,552 DEBUG {conn-10005, pstmt-20016} Types : []
2019-08-15 16:24:47,553 DEBUG {conn-10005, pstmt-20016} executed. 0.498119 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 16:24:47,553 DEBUG {conn-10005, pstmt-20016, rs-50019} open
2019-08-15 16:24:47,553 DEBUG {conn-10005, pstmt-20016, rs-50019} Header: [count(*)]
2019-08-15 16:24:47,553 DEBUG {conn-10005, pstmt-20016, rs-50019} Result: [15]
2019-08-15 16:24:47,553 DEBUG {conn-10005, pstmt-20016, rs-50019} closed
2019-08-15 16:24:47,553 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 16:24:47,553 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:47,554 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:47,554 DEBUG {conn-10005, pstmt-20017} created. select count(*)  from tb_admin_user
2019-08-15 16:24:47,554 DEBUG {conn-10005, pstmt-20017} Parameters : []
2019-08-15 16:24:47,554 DEBUG {conn-10005, pstmt-20017} Types : []
2019-08-15 16:24:47,554 DEBUG {conn-10005, pstmt-20017} executed. 0.352127 millis. select count(*)  from tb_admin_user
2019-08-15 16:24:47,554 DEBUG {conn-10005, pstmt-20017, rs-50020} open
2019-08-15 16:24:47,554 DEBUG {conn-10005, pstmt-20017, rs-50020} Header: [count(*)]
2019-08-15 16:24:47,554 DEBUG {conn-10005, pstmt-20017, rs-50020} Result: [3]
2019-08-15 16:24:47,554 DEBUG {conn-10005, pstmt-20017, rs-50020} closed
2019-08-15 16:24:47,554 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-15 16:24:47,554 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:47,555 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:47,555 DEBUG {conn-10005, pstmt-20018} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 16:24:47,555 DEBUG {conn-10005, pstmt-20018} Parameters : []
2019-08-15 16:24:47,555 DEBUG {conn-10005, pstmt-20018} Types : []
2019-08-15 16:24:47,556 DEBUG {conn-10005, pstmt-20018} executed. 0.463163 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 16:24:47,556 DEBUG {conn-10005, pstmt-20018, rs-50021} open
2019-08-15 16:24:47,556 DEBUG {conn-10005, pstmt-20018, rs-50021} Header: [count(*)]
2019-08-15 16:24:47,556 DEBUG {conn-10005, pstmt-20018, rs-50021} Result: [5]
2019-08-15 16:24:47,556 DEBUG {conn-10005, pstmt-20018, rs-50021} closed
2019-08-15 16:24:47,556 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 16:24:47,556 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:49,567 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:49,568 DEBUG {conn-10005, pstmt-20019} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 16:24:49,568 DEBUG {conn-10005, pstmt-20019} Parameters : []
2019-08-15 16:24:49,568 DEBUG {conn-10005, pstmt-20019} Types : []
2019-08-15 16:24:49,574 DEBUG {conn-10005, pstmt-20019} executed. 7.000401 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 16:24:49,574 DEBUG {conn-10005, pstmt-20019, rs-50022} open
2019-08-15 16:24:49,575 DEBUG {conn-10005, pstmt-20019, rs-50022} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:24:49,575 DEBUG {conn-10005, pstmt-20019, rs-50022} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:24:49,575 DEBUG {conn-10005, pstmt-20019, rs-50022} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 16:24:49,575 DEBUG {conn-10005, pstmt-20019, rs-50022} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 16:24:49,575 DEBUG {conn-10005, pstmt-20019, rs-50022} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 16:24:49,576 DEBUG {conn-10005, pstmt-20019, rs-50022} closed
2019-08-15 16:24:49,576 DEBUG {conn-10005, pstmt-20019} clearParameters. 
2019-08-15 16:24:49,576 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:51,977 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:51,978 DEBUG {conn-10005, pstmt-20020} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 16:24:51,978 DEBUG {conn-10005, pstmt-20020} Parameters : [0, 10]
2019-08-15 16:24:51,978 DEBUG {conn-10005, pstmt-20020} Types : [INTEGER, INTEGER]
2019-08-15 16:24:51,979 DEBUG {conn-10005, pstmt-20020} executed. 0.963339 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 16:24:51,980 DEBUG {conn-10005, pstmt-20020, rs-50023} open
2019-08-15 16:24:51,980 DEBUG {conn-10005, pstmt-20020, rs-50023} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 16:24:51,980 DEBUG {conn-10005, pstmt-20020, rs-50023} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 16:24:51,980 DEBUG {conn-10005, pstmt-20020, rs-50023} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 16:24:51,981 DEBUG {conn-10005, pstmt-20020, rs-50023} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 16:24:51,981 DEBUG {conn-10005, pstmt-20020, rs-50023} closed
2019-08-15 16:24:51,982 DEBUG {conn-10005, pstmt-20020} clearParameters. 
2019-08-15 16:24:51,982 DEBUG {conn-10005, pstmt-20004} closed
2019-08-15 16:24:51,982 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:51,982 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:51,983 DEBUG {conn-10005, pstmt-20014} Parameters : []
2019-08-15 16:24:51,983 DEBUG {conn-10005, pstmt-20014} Types : []
2019-08-15 16:24:51,983 DEBUG {conn-10005, pstmt-20014} executed. 0.700657 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 16:24:51,983 DEBUG {conn-10005, pstmt-20014, rs-50024} open
2019-08-15 16:24:51,983 DEBUG {conn-10005, pstmt-20014, rs-50024} Header: [count(*)]
2019-08-15 16:24:51,983 DEBUG {conn-10005, pstmt-20014, rs-50024} Result: [3]
2019-08-15 16:24:51,984 DEBUG {conn-10005, pstmt-20014, rs-50024} closed
2019-08-15 16:24:51,984 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 16:24:51,984 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:52,564 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:52,565 DEBUG {conn-10005, pstmt-20021} created. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:24:52,565 DEBUG {conn-10005, pstmt-20021} Parameters : [0, 10]
2019-08-15 16:24:52,565 DEBUG {conn-10005, pstmt-20021} Types : [INTEGER, INTEGER]
2019-08-15 16:24:52,566 DEBUG {conn-10005, pstmt-20021} executed. 0.920672 millis. SELECT
     
    comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, 
    commentator_ip, reply_body, reply_create_time, comment_status, is_deleted
   
    FROM tb_blog_comment
    where is_deleted=0
     
     
    ORDER BY comment_id DESC
     
      limit ?,?
2019-08-15 16:24:52,566 DEBUG {conn-10005, pstmt-20021, rs-50025} open
2019-08-15 16:24:52,567 DEBUG {conn-10005, pstmt-20021, rs-50025} Header: [comment_id, blog_id, commentator, email, website_url, comment_body, comment_create_time, commentator_ip, reply_body, reply_create_time, comment_status, is_deleted]
2019-08-15 16:24:52,567 DEBUG {conn-10005, pstmt-20021, rs-50025} Result: [30, 23, test, 13336470132@163.com, , test, 2019-08-14 23:05:41.0, , , 2019-08-14 23:05:41.0, 1, 0]
2019-08-15 16:24:52,567 DEBUG {conn-10005, pstmt-20021, rs-50025} Result: [29, 4, kuky, 13336470132@163.com, , test2, 2019-08-13 22:44:27.0, , , 2019-08-13 22:44:27.0, 1, 0]
2019-08-15 16:24:52,567 DEBUG {conn-10005, pstmt-20021, rs-50025} Result: [28, 2, kuky, 13336470132@163.com, , test, 2019-08-13 22:43:00.0, , , 2019-08-13 22:43:00.0, 1, 0]
2019-08-15 16:24:52,568 DEBUG {conn-10005, pstmt-20021, rs-50025} Result: [27, 4, kuky, 13336470132@163.com, , werwer, 2019-07-25 05:05:34.0, , 加油, 2019-07-24 23:48:45.0, 1, 0]
2019-08-15 16:24:52,568 DEBUG {conn-10005, pstmt-20021, rs-50025} Result: [26, 4, 十三, 224683568@qq.com, , 第一条评论, 2019-05-13 18:12:19.0, , , 2019-05-13 05:13:31.0, 1, 0]
2019-08-15 16:24:52,568 DEBUG {conn-10005, pstmt-20021, rs-50025} closed
2019-08-15 16:24:52,568 DEBUG {conn-10005, pstmt-20021} clearParameters. 
2019-08-15 16:24:52,568 DEBUG {conn-10005, pstmt-20000} closed
2019-08-15 16:24:52,569 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:52,569 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:52,569 DEBUG {conn-10005, pstmt-20018} Parameters : []
2019-08-15 16:24:52,569 DEBUG {conn-10005, pstmt-20018} Types : []
2019-08-15 16:24:52,570 DEBUG {conn-10005, pstmt-20018} executed. 0.626119 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 16:24:52,570 DEBUG {conn-10005, pstmt-20018, rs-50026} open
2019-08-15 16:24:52,570 DEBUG {conn-10005, pstmt-20018, rs-50026} Header: [count(*)]
2019-08-15 16:24:52,570 DEBUG {conn-10005, pstmt-20018, rs-50026} Result: [5]
2019-08-15 16:24:52,570 DEBUG {conn-10005, pstmt-20018, rs-50026} closed
2019-08-15 16:24:52,570 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 16:24:52,570 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:54,712 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:54,713 DEBUG {conn-10005, pstmt-20022} created. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 16:24:54,713 DEBUG {conn-10005, pstmt-20022} Parameters : [0, 10]
2019-08-15 16:24:54,713 DEBUG {conn-10005, pstmt-20022} Types : [INTEGER, INTEGER]
2019-08-15 16:24:54,714 DEBUG {conn-10005, pstmt-20022} executed. 0.76183 millis. select
    u.id,u.login_user_name,u.nick_name,u.locked,u.avatar,u.email,u.phone,u.detail,a.id,a.name
    from tb_admin_user u
    left join tb_user_authority ua on u.id= ua.user_id
    left join tb_authority a on a.id=ua.authority_id
     
      limit ?,?
2019-08-15 16:24:54,714 DEBUG {conn-10005, pstmt-20022, rs-50027} open
2019-08-15 16:24:54,714 DEBUG {conn-10005, pstmt-20022, rs-50027} Header: [id, login_user_name, nick_name, locked, avatar, email, phone, detail, id, name]
2019-08-15 16:24:54,714 DEBUG {conn-10005, pstmt-20022, rs-50027} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 16:24:54,715 DEBUG {conn-10005, pstmt-20022, rs-50027} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 16:24:54,715 DEBUG {conn-10005, pstmt-20022, rs-50027} Result: [568563328, test, kuky, 0, null, 739663514@163.com, 17388657185, null, 3, ROLE_VIP]
2019-08-15 16:24:54,715 DEBUG {conn-10005, pstmt-20022, rs-50027} Result: [545927266, admin, kuky, 0, null, 13336470132@163.com, 17388657185, null, 1, ROLE_ADMIN]
2019-08-15 16:24:54,716 DEBUG {conn-10005, pstmt-20022, rs-50027} Result: [28305988, user, kuky, 0, null, 7235235@163.com, 17388657185, null, 2, ROLE_USER]
2019-08-15 16:24:54,716 DEBUG {conn-10005, pstmt-20022, rs-50027} closed
2019-08-15 16:24:54,716 DEBUG {conn-10005, pstmt-20022} clearParameters. 
2019-08-15 16:24:54,716 DEBUG {conn-10005, pstmt-20001} closed
2019-08-15 16:24:54,716 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:54,718 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:54,718 DEBUG {conn-10005, pstmt-20017} Parameters : []
2019-08-15 16:24:54,718 DEBUG {conn-10005, pstmt-20017} Types : []
2019-08-15 16:24:54,718 DEBUG {conn-10005, pstmt-20017} executed. 0.496577 millis. select count(*)  from tb_admin_user
2019-08-15 16:24:54,718 DEBUG {conn-10005, pstmt-20017, rs-50028} open
2019-08-15 16:24:54,718 DEBUG {conn-10005, pstmt-20017, rs-50028} Header: [count(*)]
2019-08-15 16:24:54,718 DEBUG {conn-10005, pstmt-20017, rs-50028} Result: [3]
2019-08-15 16:24:54,719 DEBUG {conn-10005, pstmt-20017, rs-50028} closed
2019-08-15 16:24:54,719 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-15 16:24:54,719 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:57,287 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:57,287 DEBUG {conn-10005, pstmt-20013} Parameters : []
2019-08-15 16:24:57,287 DEBUG {conn-10005, pstmt-20013} Types : []
2019-08-15 16:24:57,287 DEBUG {conn-10005, pstmt-20013} executed. 0.569059 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 16:24:57,287 DEBUG {conn-10005, pstmt-20013, rs-50029} open
2019-08-15 16:24:57,287 DEBUG {conn-10005, pstmt-20013, rs-50029} Header: [count(*)]
2019-08-15 16:24:57,288 DEBUG {conn-10005, pstmt-20013, rs-50029} Result: [4]
2019-08-15 16:24:57,288 DEBUG {conn-10005, pstmt-20013, rs-50029} closed
2019-08-15 16:24:57,288 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 16:24:57,288 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:57,288 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:57,288 DEBUG {conn-10005, pstmt-20014} Parameters : []
2019-08-15 16:24:57,288 DEBUG {conn-10005, pstmt-20014} Types : []
2019-08-15 16:24:57,288 DEBUG {conn-10005, pstmt-20014} executed. 0.341332 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 16:24:57,288 DEBUG {conn-10005, pstmt-20014, rs-50030} open
2019-08-15 16:24:57,288 DEBUG {conn-10005, pstmt-20014, rs-50030} Header: [count(*)]
2019-08-15 16:24:57,289 DEBUG {conn-10005, pstmt-20014, rs-50030} Result: [3]
2019-08-15 16:24:57,289 DEBUG {conn-10005, pstmt-20014, rs-50030} closed
2019-08-15 16:24:57,289 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 16:24:57,289 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:57,289 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:57,289 DEBUG {conn-10005, pstmt-20015} Parameters : []
2019-08-15 16:24:57,289 DEBUG {conn-10005, pstmt-20015} Types : []
2019-08-15 16:24:57,289 DEBUG {conn-10005, pstmt-20015} executed. 0.33465 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 16:24:57,289 DEBUG {conn-10005, pstmt-20015, rs-50031} open
2019-08-15 16:24:57,289 DEBUG {conn-10005, pstmt-20015, rs-50031} Header: [count(*)]
2019-08-15 16:24:57,289 DEBUG {conn-10005, pstmt-20015, rs-50031} Result: [27]
2019-08-15 16:24:57,289 DEBUG {conn-10005, pstmt-20015, rs-50031} closed
2019-08-15 16:24:57,290 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 16:24:57,290 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:57,290 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:57,290 DEBUG {conn-10005, pstmt-20016} Parameters : []
2019-08-15 16:24:57,290 DEBUG {conn-10005, pstmt-20016} Types : []
2019-08-15 16:24:57,290 DEBUG {conn-10005, pstmt-20016} executed. 0.3511 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 16:24:57,290 DEBUG {conn-10005, pstmt-20016, rs-50032} open
2019-08-15 16:24:57,290 DEBUG {conn-10005, pstmt-20016, rs-50032} Header: [count(*)]
2019-08-15 16:24:57,290 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [15]
2019-08-15 16:24:57,290 DEBUG {conn-10005, pstmt-20016, rs-50032} closed
2019-08-15 16:24:57,290 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 16:24:57,290 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:57,290 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:57,290 DEBUG {conn-10005, pstmt-20017} Parameters : []
2019-08-15 16:24:57,290 DEBUG {conn-10005, pstmt-20017} Types : []
2019-08-15 16:24:57,291 DEBUG {conn-10005, pstmt-20017} executed. 0.335678 millis. select count(*)  from tb_admin_user
2019-08-15 16:24:57,291 DEBUG {conn-10005, pstmt-20017, rs-50033} open
2019-08-15 16:24:57,291 DEBUG {conn-10005, pstmt-20017, rs-50033} Header: [count(*)]
2019-08-15 16:24:57,291 DEBUG {conn-10005, pstmt-20017, rs-50033} Result: [3]
2019-08-15 16:24:57,291 DEBUG {conn-10005, pstmt-20017, rs-50033} closed
2019-08-15 16:24:57,291 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-15 16:24:57,291 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:57,291 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:57,291 DEBUG {conn-10005, pstmt-20018} Parameters : []
2019-08-15 16:24:57,291 DEBUG {conn-10005, pstmt-20018} Types : []
2019-08-15 16:24:57,292 DEBUG {conn-10005, pstmt-20018} executed. 0.33208 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 16:24:57,292 DEBUG {conn-10005, pstmt-20018, rs-50034} open
2019-08-15 16:24:57,292 DEBUG {conn-10005, pstmt-20018, rs-50034} Header: [count(*)]
2019-08-15 16:24:57,292 DEBUG {conn-10005, pstmt-20018, rs-50034} Result: [5]
2019-08-15 16:24:57,292 DEBUG {conn-10005, pstmt-20018, rs-50034} closed
2019-08-15 16:24:57,292 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 16:24:57,292 DEBUG {conn-10005} pool-recycle
2019-08-15 16:24:59,016 DEBUG {conn-10005} pool-connect
2019-08-15 16:24:59,016 DEBUG {conn-10005, pstmt-20019} Parameters : []
2019-08-15 16:24:59,016 DEBUG {conn-10005, pstmt-20019} Types : []
2019-08-15 16:24:59,017 DEBUG {conn-10005, pstmt-20019} executed. 0.687292 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 16:24:59,017 DEBUG {conn-10005, pstmt-20019, rs-50035} open
2019-08-15 16:24:59,017 DEBUG {conn-10005, pstmt-20019, rs-50035} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:24:59,017 DEBUG {conn-10005, pstmt-20019, rs-50035} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:24:59,018 DEBUG {conn-10005, pstmt-20019, rs-50035} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 16:24:59,018 DEBUG {conn-10005, pstmt-20019, rs-50035} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 16:24:59,018 DEBUG {conn-10005, pstmt-20019, rs-50035} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 16:24:59,018 DEBUG {conn-10005, pstmt-20019, rs-50035} closed
2019-08-15 16:24:59,018 DEBUG {conn-10005, pstmt-20019} clearParameters. 
2019-08-15 16:24:59,018 DEBUG {conn-10005} pool-recycle
2019-08-15 16:25:30,699 DEBUG {conn-10005} pool-connect
2019-08-15 16:25:30,699 DEBUG {conn-10005, pstmt-20012} Parameters : [admin]
2019-08-15 16:25:30,699 DEBUG {conn-10005, pstmt-20012} Types : [VARCHAR]
2019-08-15 16:25:30,700 DEBUG {conn-10005, pstmt-20012} executed. 0.607099 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 16:25:30,700 DEBUG {conn-10005, pstmt-20012, rs-50036} open
2019-08-15 16:25:30,700 DEBUG {conn-10005, pstmt-20012, rs-50036} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 16:25:30,700 DEBUG {conn-10005, pstmt-20012, rs-50036} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 16:25:30,700 DEBUG {conn-10005, pstmt-20012, rs-50036} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 16:25:30,701 DEBUG {conn-10005, pstmt-20012, rs-50036} closed
2019-08-15 16:25:30,701 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 16:25:30,701 DEBUG {conn-10005} pool-recycle
2019-08-15 16:25:30,789 DEBUG {conn-10005} pool-connect
2019-08-15 16:25:30,790 DEBUG {conn-10005, pstmt-20013} Parameters : []
2019-08-15 16:25:30,790 DEBUG {conn-10005, pstmt-20013} Types : []
2019-08-15 16:25:30,790 DEBUG {conn-10005, pstmt-20013} executed. 0.569573 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 16:25:30,790 DEBUG {conn-10005, pstmt-20013, rs-50037} open
2019-08-15 16:25:30,790 DEBUG {conn-10005, pstmt-20013, rs-50037} Header: [count(*)]
2019-08-15 16:25:30,790 DEBUG {conn-10005, pstmt-20013, rs-50037} Result: [4]
2019-08-15 16:25:30,790 DEBUG {conn-10005, pstmt-20013, rs-50037} closed
2019-08-15 16:25:30,791 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 16:25:30,791 DEBUG {conn-10005} pool-recycle
2019-08-15 16:25:30,791 DEBUG {conn-10005} pool-connect
2019-08-15 16:25:30,791 DEBUG {conn-10005, pstmt-20014} Parameters : []
2019-08-15 16:25:30,791 DEBUG {conn-10005, pstmt-20014} Types : []
2019-08-15 16:25:30,792 DEBUG {conn-10005, pstmt-20014} executed. 0.791644 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 16:25:30,792 DEBUG {conn-10005, pstmt-20014, rs-50038} open
2019-08-15 16:25:30,792 DEBUG {conn-10005, pstmt-20014, rs-50038} Header: [count(*)]
2019-08-15 16:25:30,792 DEBUG {conn-10005, pstmt-20014, rs-50038} Result: [3]
2019-08-15 16:25:30,792 DEBUG {conn-10005, pstmt-20014, rs-50038} closed
2019-08-15 16:25:30,792 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 16:25:30,792 DEBUG {conn-10005} pool-recycle
2019-08-15 16:25:30,792 DEBUG {conn-10005} pool-connect
2019-08-15 16:25:30,793 DEBUG {conn-10005, pstmt-20015} Parameters : []
2019-08-15 16:25:30,793 DEBUG {conn-10005, pstmt-20015} Types : []
2019-08-15 16:25:30,793 DEBUG {conn-10005, pstmt-20015} executed. 0.596818 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 16:25:30,793 DEBUG {conn-10005, pstmt-20015, rs-50039} open
2019-08-15 16:25:30,793 DEBUG {conn-10005, pstmt-20015, rs-50039} Header: [count(*)]
2019-08-15 16:25:30,793 DEBUG {conn-10005, pstmt-20015, rs-50039} Result: [27]
2019-08-15 16:25:30,794 DEBUG {conn-10005, pstmt-20015, rs-50039} closed
2019-08-15 16:25:30,794 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 16:25:30,794 DEBUG {conn-10005} pool-recycle
2019-08-15 16:25:30,794 DEBUG {conn-10005} pool-connect
2019-08-15 16:25:30,794 DEBUG {conn-10005, pstmt-20016} Parameters : []
2019-08-15 16:25:30,794 DEBUG {conn-10005, pstmt-20016} Types : []
2019-08-15 16:25:30,794 DEBUG {conn-10005, pstmt-20016} executed. 0.363951 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 16:25:30,794 DEBUG {conn-10005, pstmt-20016, rs-50040} open
2019-08-15 16:25:30,794 DEBUG {conn-10005, pstmt-20016, rs-50040} Header: [count(*)]
2019-08-15 16:25:30,794 DEBUG {conn-10005, pstmt-20016, rs-50040} Result: [15]
2019-08-15 16:25:30,794 DEBUG {conn-10005, pstmt-20016, rs-50040} closed
2019-08-15 16:25:30,794 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 16:25:30,794 DEBUG {conn-10005} pool-recycle
2019-08-15 16:25:30,795 DEBUG {conn-10005} pool-connect
2019-08-15 16:25:30,795 DEBUG {conn-10005, pstmt-20017} Parameters : []
2019-08-15 16:25:30,795 DEBUG {conn-10005, pstmt-20017} Types : []
2019-08-15 16:25:30,795 DEBUG {conn-10005, pstmt-20017} executed. 0.306376 millis. select count(*)  from tb_admin_user
2019-08-15 16:25:30,795 DEBUG {conn-10005, pstmt-20017, rs-50041} open
2019-08-15 16:25:30,795 DEBUG {conn-10005, pstmt-20017, rs-50041} Header: [count(*)]
2019-08-15 16:25:30,795 DEBUG {conn-10005, pstmt-20017, rs-50041} Result: [3]
2019-08-15 16:25:30,795 DEBUG {conn-10005, pstmt-20017, rs-50041} closed
2019-08-15 16:25:30,795 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-15 16:25:30,795 DEBUG {conn-10005} pool-recycle
2019-08-15 16:25:30,795 DEBUG {conn-10005} pool-connect
2019-08-15 16:25:30,795 DEBUG {conn-10005, pstmt-20018} Parameters : []
2019-08-15 16:25:30,795 DEBUG {conn-10005, pstmt-20018} Types : []
2019-08-15 16:25:30,796 DEBUG {conn-10005, pstmt-20018} executed. 0.324883 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 16:25:30,796 DEBUG {conn-10005, pstmt-20018, rs-50042} open
2019-08-15 16:25:30,796 DEBUG {conn-10005, pstmt-20018, rs-50042} Header: [count(*)]
2019-08-15 16:25:30,796 DEBUG {conn-10005, pstmt-20018, rs-50042} Result: [5]
2019-08-15 16:25:30,796 DEBUG {conn-10005, pstmt-20018, rs-50042} closed
2019-08-15 16:25:30,796 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 16:25:30,796 DEBUG {conn-10005} pool-recycle
2019-08-15 16:25:31,967 DEBUG {conn-10005} pool-connect
2019-08-15 16:25:31,967 DEBUG {conn-10005, pstmt-20019} Parameters : []
2019-08-15 16:25:31,967 DEBUG {conn-10005, pstmt-20019} Types : []
2019-08-15 16:25:31,967 DEBUG {conn-10005, pstmt-20019} executed. 0.50583 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 16:25:31,967 DEBUG {conn-10005, pstmt-20019, rs-50043} open
2019-08-15 16:25:31,967 DEBUG {conn-10005, pstmt-20019, rs-50043} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:25:31,968 DEBUG {conn-10005, pstmt-20019, rs-50043} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:25:31,968 DEBUG {conn-10005, pstmt-20019, rs-50043} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 16:25:31,968 DEBUG {conn-10005, pstmt-20019, rs-50043} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 16:25:31,968 DEBUG {conn-10005, pstmt-20019, rs-50043} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 16:25:31,968 DEBUG {conn-10005, pstmt-20019, rs-50043} closed
2019-08-15 16:25:31,968 DEBUG {conn-10005, pstmt-20019} clearParameters. 
2019-08-15 16:25:31,968 DEBUG {conn-10005} pool-recycle
2019-08-15 16:51:39,484 DEBUG {conn-10005} pool-connect
2019-08-15 16:51:39,484 DEBUG {conn-10005, pstmt-20007} Parameters : [9]
2019-08-15 16:51:39,484 DEBUG {conn-10005, pstmt-20007} Types : [INTEGER]
2019-08-15 16:51:39,485 DEBUG {conn-10005, pstmt-20007} executed. 0.913476 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 16:51:39,485 DEBUG {conn-10005, pstmt-20007, rs-50044} open
2019-08-15 16:51:39,485 DEBUG {conn-10005, pstmt-20007, rs-50044} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 16:51:39,485 DEBUG {conn-10005, pstmt-20007, rs-50044} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 16:51:39,486 DEBUG {conn-10005, pstmt-20007, rs-50044} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 16:51:39,486 DEBUG {conn-10005, pstmt-20007, rs-50044} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 16:51:39,486 DEBUG {conn-10005, pstmt-20007, rs-50044} closed
2019-08-15 16:51:39,486 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 16:51:39,486 DEBUG {conn-10005} pool-recycle
2019-08-15 16:51:39,487 DEBUG {conn-10005} pool-connect
2019-08-15 16:51:39,487 DEBUG {conn-10005, pstmt-20008} Parameters : [9]
2019-08-15 16:51:39,487 DEBUG {conn-10005, pstmt-20008} Types : [INTEGER]
2019-08-15 16:51:39,487 DEBUG {conn-10005, pstmt-20008} executed. 0.618409 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 16:51:39,487 DEBUG {conn-10005, pstmt-20008, rs-50045} open
2019-08-15 16:51:39,487 DEBUG {conn-10005, pstmt-20008, rs-50045} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 16:51:39,488 DEBUG {conn-10005, pstmt-20008, rs-50045} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 16:51:39,488 DEBUG {conn-10005, pstmt-20008, rs-50045} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 16:51:39,490 DEBUG {conn-10005, pstmt-20008, rs-50045} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 16:51:39,491 DEBUG {conn-10005, pstmt-20008, rs-50045} closed
2019-08-15 16:51:39,491 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 16:51:39,491 DEBUG {conn-10005} pool-recycle
2019-08-15 16:51:39,491 DEBUG {conn-10005} pool-connect
2019-08-15 16:51:39,491 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 16:51:39,491 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 16:51:39,492 DEBUG {conn-10005, pstmt-20009} executed. 0.799356 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 16:51:39,492 DEBUG {conn-10005, pstmt-20009, rs-50046} open
2019-08-15 16:51:39,492 DEBUG {conn-10005, pstmt-20009, rs-50046} Header: [tag_id, tag_count, tag_name]
2019-08-15 16:51:39,492 DEBUG {conn-10005, pstmt-20009, rs-50046} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 16:51:39,492 DEBUG {conn-10005, pstmt-20009, rs-50046} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 16:51:39,492 DEBUG {conn-10005, pstmt-20009, rs-50046} Result: [139, 1, jqGrid]
2019-08-15 16:51:39,492 DEBUG {conn-10005, pstmt-20009, rs-50046} Result: [140, 1, spring security]
2019-08-15 16:51:39,492 DEBUG {conn-10005, pstmt-20009, rs-50046} closed
2019-08-15 16:51:39,492 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 16:51:39,493 DEBUG {conn-10005} pool-recycle
2019-08-15 16:51:39,493 DEBUG {conn-10005} pool-connect
2019-08-15 16:51:39,493 DEBUG {conn-10005, pstmt-20005} Parameters : []
2019-08-15 16:51:39,493 DEBUG {conn-10005, pstmt-20005} Types : []
2019-08-15 16:51:39,493 DEBUG {conn-10005, pstmt-20005} executed. 0.505316 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 16:51:39,493 DEBUG {conn-10005, pstmt-20005, rs-50047} open
2019-08-15 16:51:39,493 DEBUG {conn-10005, pstmt-20005, rs-50047} Header: [config_name, config_value, create_time, update_time]
2019-08-15 16:51:39,494 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 16:51:39,494 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 16:51:39,494 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 16:51:39,494 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 16:51:39,494 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 16:51:39,494 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 16:51:39,494 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 16:51:39,494 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 16:51:39,495 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 16:51:39,495 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 16:51:39,495 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 16:51:39,495 DEBUG {conn-10005, pstmt-20005, rs-50047} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 16:51:39,495 DEBUG {conn-10005, pstmt-20005, rs-50047} closed
2019-08-15 16:51:39,495 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 16:51:39,495 DEBUG {conn-10005} pool-recycle
2019-08-15 16:51:39,531 DEBUG {conn-10005} pool-connect
2019-08-15 16:51:39,532 DEBUG {conn-10005, pstmt-20010} Parameters : [admin]
2019-08-15 16:51:39,532 DEBUG {conn-10005, pstmt-20010} Types : [VARCHAR]
2019-08-15 16:51:39,532 DEBUG {conn-10005, pstmt-20010} executed. 0.652335 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 16:51:39,532 DEBUG {conn-10005, pstmt-20010, rs-50048} open
2019-08-15 16:51:39,532 DEBUG {conn-10005, pstmt-20010, rs-50048} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 16:51:39,532 DEBUG {conn-10005, pstmt-20010, rs-50048} closed
2019-08-15 16:51:39,532 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 16:51:39,532 DEBUG {conn-10005} pool-recycle
2019-08-15 16:59:38,551 DEBUG {conn-10005} pool-connect
2019-08-15 16:59:38,551 DEBUG {conn-10005, pstmt-20012} Parameters : [admin]
2019-08-15 16:59:38,551 DEBUG {conn-10005, pstmt-20012} Types : [VARCHAR]
2019-08-15 16:59:38,552 DEBUG {conn-10005, pstmt-20012} executed. 1.186439 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 16:59:38,552 DEBUG {conn-10005, pstmt-20012, rs-50049} open
2019-08-15 16:59:38,552 DEBUG {conn-10005, pstmt-20012, rs-50049} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 16:59:38,552 DEBUG {conn-10005, pstmt-20012, rs-50049} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 16:59:38,553 DEBUG {conn-10005, pstmt-20012, rs-50049} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 16:59:38,553 DEBUG {conn-10005, pstmt-20012, rs-50049} closed
2019-08-15 16:59:38,553 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 16:59:38,553 DEBUG {conn-10005} pool-recycle
2019-08-15 16:59:38,703 DEBUG {conn-10005} pool-connect
2019-08-15 16:59:38,703 DEBUG {conn-10005, pstmt-20019} Parameters : []
2019-08-15 16:59:38,703 DEBUG {conn-10005, pstmt-20019} Types : []
2019-08-15 16:59:38,704 DEBUG {conn-10005, pstmt-20019} executed. 0.832769 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 16:59:38,704 DEBUG {conn-10005, pstmt-20019, rs-50050} open
2019-08-15 16:59:38,704 DEBUG {conn-10005, pstmt-20019, rs-50050} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 16:59:38,705 DEBUG {conn-10005, pstmt-20019, rs-50050} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 16:59:38,705 DEBUG {conn-10005, pstmt-20019, rs-50050} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 16:59:38,708 DEBUG {conn-10005, pstmt-20019, rs-50050} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 16:59:38,708 DEBUG {conn-10005, pstmt-20019, rs-50050} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 16:59:38,708 DEBUG {conn-10005, pstmt-20019, rs-50050} closed
2019-08-15 16:59:38,709 DEBUG {conn-10005, pstmt-20019} clearParameters. 
2019-08-15 16:59:38,709 DEBUG {conn-10005} pool-recycle
2019-08-15 17:01:11,542 DEBUG {conn-10005} pool-connect
2019-08-15 17:01:11,542 DEBUG {conn-10005} setAutoCommit false
2019-08-15 17:01:11,556 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-15 17:01:11,556 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 17:01:11,556 DEBUG {conn-10005, pstmt-20002} executed. 0.48681 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 17:01:11,556 DEBUG {conn-10005, pstmt-20002, rs-50051} open
2019-08-15 17:01:11,556 DEBUG {conn-10005, pstmt-20002, rs-50051} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 17:01:11,556 DEBUG {conn-10005, pstmt-20002, rs-50051} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 19, 0, 2018-11-12 18:42:25.0]
2019-08-15 17:01:11,557 DEBUG {conn-10005, pstmt-20002, rs-50051} closed
2019-08-15 17:01:11,557 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 17:01:11,567 DEBUG {conn-10005, pstmt-20023} created. insert into tb_blog
     ( blog_title,
      
      
        blog_sub_url,
      
      
        blog_cover_image,
      
      
        blog_category_id,
      
      
        blog_category_name,
      
      
        blog_tags,
      
      
        blog_status,
      
      
      
        enable_comment,
      
      
      
      
      
        blog_vote_size,
      
      
        blog_content,
      
       
         blog_summary ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
        ?,
      
      
      
      
      
        ?,
      
      
        ?,
      
       
        ? )
2019-08-15 17:01:11,569 DEBUG {conn-10005, pstmt-20023} Parameters : [SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, ###  一、在build.gradle中添加：
```java
compile group: 'org.apache.poi', name: 'poi', version: '3.16'
compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.14'
compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.1'
compile group: 'commons-io', name: 'commons-io', version: '2.4'
```
###二、自定义异常类
### 三、在controller中
```java
@RequestMapping(value = "/export")
    @ResponseBody
    public void export(HttpServletResponse response) throws IOException {
        List<BlogLink> links = linkService.selectLink();
        log.info("links:"+links);
        for (int i=0;i<links.size();i++){
            log.info("i:"+i);
            log.info("links:"+links);
        }
        HSSFWorkbook wb = new HSSFWorkbook();

        HSSFSheet sheet = wb.createSheet("获取excel测试表格");

        HSSFRow row = null;

        row = sheet.createRow(0);//创建第一个单元格
        row.setHeight((short) (26.25 * 20));
        row.createCell(0).setCellValue("友情链接列表");//为第一行单元格设值

        /*为标题设计空间
         * firstRow从第1行开始
         * lastRow从第0行结束
         *
         *从第1个单元格开始
         * 从第3个单元格结束
         */
        CellRangeAddress rowRegion = new CellRangeAddress(0, 0, 0, 2);
        sheet.addMergedRegion(rowRegion);

		/*CellRangeAddress columnRegion = new CellRangeAddress(1,4,0,0);
		sheet.addMergedRegion(columnRegion);*/


        /*
         * 动态获取数据库列 sql语句 select COLUMN_NAME from INFORMATION_SCHEMA.Columns where table_name='user' and table_schema='test'
         * 第一个table_name 表名字
         * 第二个table_name 数据库名称
         * */
        row = sheet.createRow(1);
        row.setHeight((short) (22.50 * 20));//设置行高
        row.createCell(0).setCellValue("链接Id");//为第一个单元格设值
        row.createCell(1).setCellValue("友链类型");//为第二个单元格设值
        row.createCell(2).setCellValue("友链名称");//为第三个单元格设值
        row.createCell(3).setCellValue("友链地址");
        row.createCell(4).setCellValue("友链描述");
        row.createCell(5).setCellValue("友链排序");
        row.createCell(6).setCellValue("是否存在");
        row.createCell(7).setCellValue("创建时间");
        for (int i = 0; i < links.size(); i++) {

            row = sheet.createRow(i + 2);

            BlogLink link = links.get(i);

            row.createCell(0).setCellValue(link.getLinkId());
            row.createCell(1).setCellValue(link.getLinkType());
            row.createCell(2).setCellValue(link.getLinkName());
            row.createCell(3).setCellValue(link.getLinkUrl());
            row.createCell(4).setCellValue(link.getLinkDescription());
            row.createCell(5).setCellValue(link.getLinkRank());
            row.createCell(6).setCellValue(link.getIsDeleted());
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd ");
            row.createCell(7).setCellValue(format.format(link.getCreateTime()));
        }
        sheet.setDefaultRowHeight((short) (16.5 * 20));
        //列宽自适应
        for (int i = 0; i <= 13; i++) {
            sheet.autoSizeColumn(i);
        }

        response.setContentType("application/vnd.ms-excel;charset=utf-8");
        OutputStream os = response.getOutputStream();
        response.setHeader("Content-disposition", "attachment;filename=user.xls");//默认Excel名称
        wb.write(os);
        os.flush();
        os.close();


    }


    @RequestMapping(value = "/import")
    public String exImport(@RequestParam(value = "filename") MultipartFile file, HttpSession session) {

        boolean a = false;

        String fileName = file.getOriginalFilename();

        try {
            a = linkService.batchImport(fileName, file);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "admin/link";
    }
```

四、serviceImpl中
@Transactional(readOnly = false,rollbackFor = Exception.class)
    @Override
    public boolean batchImport(String fileName, MultipartFile file) throws Exception {
        boolean notNull = false;
        List<BlogLink> linkList = new ArrayList<>();
        if (!fileName.matches("^.+\\.(?i)(xls)$") && !fileName.matches("^.+\\.(?i)(xlsx)$")) {
            throw new MyException("上传文件格式不正确");
        }
        boolean isExcel2003 = true;
        if (fileName.matches("^.+\\.(?i)(xlsx)$")) {
            isExcel2003 = false;
        }
        InputStream is = file.getInputStream();
        Workbook wb = null;
        if (isExcel2003) {
            wb = new HSSFWorkbook(is);
        } else {
            wb = new XSSFWorkbook(is);
        }
        Sheet sheet = wb.getSheetAt(0);
        if(sheet!=null){
            notNull = true;
        }
        BlogLink link;
        for (int r = 2; r < sheet.getLastRowNum(); r++) {//r = 2 表示从第三行开始循环 如果你的第三行开始是数据
            Row row = sheet.getRow(r);//通过sheet表单对象得到 行对象
            if (row == null){
                continue;
            }

            //sheet.getLastRowNum() 的值是 10，所以Excel表中的数据至少是10条；不然报错 NullPointerException
            link = new BlogLink();

          /* if( row.getCell(0).getCellType() !=1){//循环时，得到每一行的单元格进行判断
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型请设为文本格式)");
            }*/
           row.getCell(0).setCellType(HSSFCell.CELL_TYPE_STRING);
            String linkType = row.getCell(0).getStringCellValue();//得到每一行第一个单元格的值
            if(linkType == null || linkType.isEmpty()){//判断是否为空
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型未填写)");
            }

            row.getCell(1).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第二个单元格的值
            String linkName = row.getCell(1).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链名称未填写)");
            }
            row.getCell(2).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第三个单元格的值
            String linkUrl = row.getCell(2).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链地址未填写)");
            }
            row.getCell(3).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第四个单元格的值
            String linkDescription = row.getCell(3).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链描述详情未填写)");
            }
            row.getCell(4).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第五个单元格的值
            String linkRank = row.getCell(4).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链序号未填写)");
            }
            row.getCell(5).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第六个单元格的值
            String isDelete = row.getCell(5).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链是否存在未填写)");
            }
            row.getCell(6).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第七个单元格的值
            String createTime = row.getCell(6).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链创建时间未填写)");
            }


            //完整的循环一次 就组成了一个对象
            link.setLinkType(Byte.valueOf(linkType));
            link.setLinkName(linkName);
            link.setLinkUrl(linkUrl);
            link.setLinkDescription(linkDescription);
            link.setLinkRank(Integer.parseInt(linkRank));
            link.setIsDeleted(Byte.valueOf(isDelete));
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            link.setCreateTime(format.parse(createTime));


            linkList.add(link);
        }
        for (BlogLink linkResord : linkList) {
            Integer linkId = linkResord.getLinkId();
            BlogLink blogLink = blogLinkMapper.selectByPrimaryKey(linkId);
            if (blogLink==null) {
                blogLinkMapper.insertSelective(linkResord);
                log.info(" 插入 "+linkResord);
            } else {
                blogLinkMapper.updateByPrimaryKeySelective(linkResord);
                log.info(" 更新 "+linkResord);
            }
        }
        return notNull;
    }```java
@Transactional(readOnly = false,rollbackFor = Exception.class)
    @Override
    public boolean batchImport(String fileName, MultipartFile file) throws Exception {
        boolean notNull = false;
        List<BlogLink> linkList = new ArrayList<>();
        if (!fileName.matches("^.+\\.(?i)(xls)$") && !fileName.matches("^.+\\.(?i)(xlsx)$")) {
            throw new MyException("上传文件格式不正确");
        }
        boolean isExcel2003 = true;
        if (fileName.matches("^.+\\.(?i)(xlsx)$")) {
            isExcel2003 = false;
        }
        InputStream is = file.getInputStream();
        Workbook wb = null;
        if (isExcel2003) {
            wb = new HSSFWorkbook(is);
        } else {
            wb = new XSSFWorkbook(is);
        }
        Sheet sheet = wb.getSheetAt(0);
        if(sheet!=null){
            notNull = true;
        }
        BlogLink link;
        for (int r = 2; r < sheet.getLastRowNum(); r++) {//r = 2 表示从第三行开始循环 如果你的第三行开始是数据
            Row row = sheet.getRow(r);//通过sheet表单对象得到 行对象
            if (row == null){
                continue;
            }

            //sheet.getLastRowNum() 的值是 10，所以Excel表中的数据至少是10条；不然报错 NullPointerException
            link = new BlogLink();

          /* if( row.getCell(0).getCellType() !=1){//循环时，得到每一行的单元格进行判断
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型请设为文本格式)");
            }*/
           row.getCell(0).setCellType(HSSFCell.CELL_TYPE_STRING);
            String linkType = row.getCell(0).getStringCellValue();//得到每一行第一个单元格的值
            if(linkType == null || linkType.isEmpty()){//判断是否为空
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型未填写)");
            }

            row.getCell(1).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第二个单元格的值
            String linkName = row.getCell(1).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链名称未填写)");
            }
            row.getCell(2).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第三个单元格的值
            String linkUrl = row.getCell(2).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链地址未填写)");
            }
            row.getCell(3).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第四个单元格的值
            String linkDescription = row.getCell(3).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链描述详情未填写)");
            }
            row.getCell(4).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第五个单元格的值
            String linkRank = row.getCell(4).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链序号未填写)");
            }
            row.getCell(5).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第六个单元格的值
            String isDelete = row.getCell(5).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链是否存在未填写)");
            }
            row.getCell(6).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第七个单元格的值
            String createTime = row.getCell(6).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链创建时间未填写)");
            }


            //完整的循环一次 就组成了一个对象
            link.setLinkType(Byte.valueOf(linkType));
            link.setLinkName(linkName);
            link.setLinkUrl(linkUrl);
            link.setLinkDescription(linkDescription);
            link.setLinkRank(Integer.parseInt(linkRank));
            link.setIsDeleted(Byte.valueOf(isDelete));
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            link.setCreateTime(format.parse(createTime));


            linkList.add(link);
        }
        for (BlogLink linkResord : linkList) {
            Integer linkId = linkResord.getLinkId();
            BlogLink blogLink = blogLinkMapper.selectByPrimaryKey(linkId);
            if (blogLink==null) {
                blogLinkMapper.insertSelective(linkResord);
                log.info(" 插入 "+linkResord);
            } else {
                blogLinkMapper.updateByPrimaryKeySelective(linkResord);
                log.info(" 更新 "+linkResord);
            }
        }
        return notNull;
    }
```
### 五、ExcelImportUtils工具类
```java
public class ExcelImportUtils {
    
    
    // @描述：是否是2003的excel，返回true是2003 
    public static boolean isExcel2003(String filePath)  {  
        return filePath.matches("^.+\\.(?i)(xls)$");  
    }  
   
    //@描述：是否是2007的excel，返回true是2007 
    public static boolean isExcel2007(String filePath)  {  
        return filePath.matches("^.+\\.(?i)(xlsx)$");  
    }  
    
  /**
   * 验证EXCEL文件
   * @param filePath
   * @return
   */
  public static boolean validateExcel(String filePath){
        if (filePath == null || !(isExcel2003(filePath) || isExcel2007(filePath))){  
            return false;  
        }  
        return true;
  }
    
 

```

整个核心也就是上传和下载两个功能，中间出现了一些小错误以后会记录完善一下。, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:01:11,569 DEBUG {conn-10005, pstmt-20023} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, TINYINT, INTEGER, VARCHAR, VARCHAR]
2019-08-15 17:01:11,573 DEBUG {conn-10005, pstmt-20023} executed. 4.611074 millis. insert into tb_blog
     ( blog_title,
      
      
        blog_sub_url,
      
      
        blog_cover_image,
      
      
        blog_category_id,
      
      
        blog_category_name,
      
      
        blog_tags,
      
      
        blog_status,
      
      
      
        enable_comment,
      
      
      
      
      
        blog_vote_size,
      
      
        blog_content,
      
       
         blog_summary ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
        ?,
      
      
      
      
      
        ?,
      
      
        ?,
      
       
        ? )
2019-08-15 17:01:11,573 DEBUG {conn-10005, pstmt-20023, rs-50052} open
2019-08-15 17:01:11,573 DEBUG {conn-10005, pstmt-20023, rs-50052} Header: [GENERATED_KEY]
2019-08-15 17:01:11,575 DEBUG {conn-10005, pstmt-20023, rs-50052} Result: [25]
2019-08-15 17:01:11,575 DEBUG {conn-10005, pstmt-20023, rs-50052} closed
2019-08-15 17:01:11,575 DEBUG {conn-10005, pstmt-20023} clearParameters. 
2019-08-15 17:01:11,576 DEBUG {conn-10005, pstmt-20003} closed
2019-08-15 17:01:11,576 DEBUG {conn-10005, pstmt-20024} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   ,
     
    blog_content
   
    from tb_blog where blog_title = ?
2019-08-15 17:01:11,576 DEBUG {conn-10005, pstmt-20024} Parameters : [SpringBoot整合POI实现文件导出Excel，导入Excel]
2019-08-15 17:01:11,576 DEBUG {conn-10005, pstmt-20024} Types : [VARCHAR]
2019-08-15 17:01:11,577 DEBUG {conn-10005, pstmt-20024} executed. 0.85693 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   ,
     
    blog_content
   
    from tb_blog where blog_title = ?
2019-08-15 17:01:11,577 DEBUG {conn-10005, pstmt-20024, rs-50053} open
2019-08-15 17:01:11,577 DEBUG {conn-10005, pstmt-20024, rs-50053} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 17:01:11,578 DEBUG {conn-10005, pstmt-20024, rs-50053} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。, ###  一、在build.gradle中添加：
```java
compile group: 'org.apache.poi', name: 'poi', version: '3.16'
compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.14'
compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.1'
compile group: 'commons-io', name: 'commons-io', version: '2.4'
```
###二、自定义异常类
### 三、在controller中
```java
@RequestMapping(value = "/export")
    @ResponseBody
    public void export(HttpServletResponse response) throws IOException {
        List<BlogLink> links = linkService.selectLink();
        log.info("links:"+links);
        for (int i=0;i<links.size();i++){
            log.info("i:"+i);
            log.info("links:"+links);
        }
        HSSFWorkbook wb = new HSSFWorkbook();

        HSSFSheet sheet = wb.createSheet("获取excel测试表格");

        HSSFRow row = null;

        row = sheet.createRow(0);//创建第一个单元格
        row.setHeight((short) (26.25 * 20));
        row.createCell(0).setCellValue("友情链接列表");//为第一行单元格设值

        /*为标题设计空间
         * firstRow从第1行开始
         * lastRow从第0行结束
         *
         *从第1个单元格开始
         * 从第3个单元格结束
         */
        CellRangeAddress rowRegion = new CellRangeAddress(0, 0, 0, 2);
        sheet.addMergedRegion(rowRegion);

		/*CellRangeAddress columnRegion = new CellRangeAddress(1,4,0,0);
		sheet.addMergedRegion(columnRegion);*/


        /*
         * 动态获取数据库列 sql语句 select COLUMN_NAME from INFORMATION_SCHEMA.Columns where table_name='user' and table_schema='test'
         * 第一个table_name 表名字
         * 第二个table_name 数据库名称
         * */
        row = sheet.createRow(1);
        row.setHeight((short) (22.50 * 20));//设置行高
        row.createCell(0).setCellValue("链接Id");//为第一个单元格设值
        row.createCell(1).setCellValue("友链类型");//为第二个单元格设值
        row.createCell(2).setCellValue("友链名称");//为第三个单元格设值
        row.createCell(3).setCellValue("友链地址");
        row.createCell(4).setCellValue("友链描述");
        row.createCell(5).setCellValue("友链排序");
        row.createCell(6).setCellValue("是否存在");
        row.createCell(7).setCellValue("创建时间");
        for (int i = 0; i < links.size(); i++) {

            row = sheet.createRow(i + 2);

            BlogLink link = links.get(i);

            row.createCell(0).setCellValue(link.getLinkId());
            row.createCell(1).setCellValue(link.getLinkType());
            row.createCell(2).setCellValue(link.getLinkName());
            row.createCell(3).setCellValue(link.getLinkUrl());
            row.createCell(4).setCellValue(link.getLinkDescription());
            row.createCell(5).setCellValue(link.getLinkRank());
            row.createCell(6).setCellValue(link.getIsDeleted());
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd ");
            row.createCell(7).setCellValue(format.format(link.getCreateTime()));
        }
        sheet.setDefaultRowHeight((short) (16.5 * 20));
        //列宽自适应
        for (int i = 0; i <= 13; i++) {
            sheet.autoSizeColumn(i);
        }

        response.setContentType("application/vnd.ms-excel;charset=utf-8");
        OutputStream os = response.getOutputStream();
        response.setHeader("Content-disposition", "attachment;filename=user.xls");//默认Excel名称
        wb.write(os);
        os.flush();
        os.close();


    }


    @RequestMapping(value = "/import")
    public String exImport(@RequestParam(value = "filename") MultipartFile file, HttpSession session) {

        boolean a = false;

        String fileName = file.getOriginalFilename();

        try {
            a = linkService.batchImport(fileName, file);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "admin/link";
    }
```

四、serviceImpl中
@Transactional(readOnly = false,rollbackFor = Exception.class)
    @Override
    public boolean batchImport(String fileName, MultipartFile file) throws Exception {
        boolean notNull = false;
        List<BlogLink> linkList = new ArrayList<>();
        if (!fileName.matches("^.+\\.(?i)(xls)$") && !fileName.matches("^.+\\.(?i)(xlsx)$")) {
            throw new MyException("上传文件格式不正确");
        }
        boolean isExcel2003 = true;
        if (fileName.matches("^.+\\.(?i)(xlsx)$")) {
            isExcel2003 = false;
        }
        InputStream is = file.getInputStream();
        Workbook wb = null;
        if (isExcel2003) {
            wb = new HSSFWorkbook(is);
        } else {
            wb = new XSSFWorkbook(is);
        }
        Sheet sheet = wb.getSheetAt(0);
        if(sheet!=null){
            notNull = true;
        }
        BlogLink link;
        for (int r = 2; r < sheet.getLastRowNum(); r++) {//r = 2 表示从第三行开始循环 如果你的第三行开始是数据
            Row row = sheet.getRow(r);//通过sheet表单对象得到 行对象
            if (row == null){
                continue;
            }

            //sheet.getLastRowNum() 的值是 10，所以Excel表中的数据至少是10条；不然报错 NullPointerException
            link = new BlogLink();

          /* if( row.getCell(0).getCellType() !=1){//循环时，得到每一行的单元格进行判断
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型请设为文本格式)");
            }*/
           row.getCell(0).setCellType(HSSFCell.CELL_TYPE_STRING);
            String linkType = row.getCell(0).getStringCellValue();//得到每一行第一个单元格的值
            if(linkType == null || linkType.isEmpty()){//判断是否为空
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型未填写)");
            }

            row.getCell(1).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第二个单元格的值
            String linkName = row.getCell(1).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链名称未填写)");
            }
            row.getCell(2).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第三个单元格的值
            String linkUrl = row.getCell(2).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链地址未填写)");
            }
            row.getCell(3).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第四个单元格的值
            String linkDescription = row.getCell(3).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链描述详情未填写)");
            }
            row.getCell(4).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第五个单元格的值
            String linkRank = row.getCell(4).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链序号未填写)");
            }
            row.getCell(5).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第六个单元格的值
            String isDelete = row.getCell(5).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链是否存在未填写)");
            }
            row.getCell(6).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第七个单元格的值
            String createTime = row.getCell(6).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链创建时间未填写)");
            }


            //完整的循环一次 就组成了一个对象
            link.setLinkType(Byte.valueOf(linkType));
            link.setLinkName(linkName);
            link.setLinkUrl(linkUrl);
            link.setLinkDescription(linkDescription);
            link.setLinkRank(Integer.parseInt(linkRank));
            link.setIsDeleted(Byte.valueOf(isDelete));
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            link.setCreateTime(format.parse(createTime));


            linkList.add(link);
        }
        for (BlogLink linkResord : linkList) {
            Integer linkId = linkResord.getLinkId();
            BlogLink blogLink = blogLinkMapper.selectByPrimaryKey(linkId);
            if (blogLink==null) {
                blogLinkMapper.insertSelective(linkResord);
                log.info(" 插入 "+linkResord);
            } else {
                blogLinkMapper.updateByPrimaryKeySelective(linkResord);
                log.info(" 更新 "+linkResord);
            }
        }
        return notNull;
    }```java
@Transactional(readOnly = false,rollbackFor = Exception.class)
    @Override
    public boolean batchImport(String fileName, MultipartFile file) throws Exception {
        boolean notNull = false;
        List<BlogLink> linkList = new ArrayList<>();
        if (!fileName.matches("^.+\\.(?i)(xls)$") && !fileName.matches("^.+\\.(?i)(xlsx)$")) {
            throw new MyException("上传文件格式不正确");
        }
        boolean isExcel2003 = true;
        if (fileName.matches("^.+\\.(?i)(xlsx)$")) {
            isExcel2003 = false;
        }
        InputStream is = file.getInputStream();
        Workbook wb = null;
        if (isExcel2003) {
            wb = new HSSFWorkbook(is);
        } else {
            wb = new XSSFWorkbook(is);
        }
        Sheet sheet = wb.getSheetAt(0);
        if(sheet!=null){
            notNull = true;
        }
        BlogLink link;
        for (int r = 2; r < sheet.getLastRowNum(); r++) {//r = 2 表示从第三行开始循环 如果你的第三行开始是数据
            Row row = sheet.getRow(r);//通过sheet表单对象得到 行对象
            if (row == null){
                continue;
            }

            //sheet.getLastRowNum() 的值是 10，所以Excel表中的数据至少是10条；不然报错 NullPointerException
            link = new BlogLink();

          /* if( row.getCell(0).getCellType() !=1){//循环时，得到每一行的单元格进行判断
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型请设为文本格式)");
            }*/
           row.getCell(0).setCellType(HSSFCell.CELL_TYPE_STRING);
            String linkType = row.getCell(0).getStringCellValue();//得到每一行第一个单元格的值
            if(linkType == null || linkType.isEmpty()){//判断是否为空
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型未填写)");
            }

            row.getCell(1).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第二个单元格的值
            String linkName = row.getCell(1).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链名称未填写)");
            }
            row.getCell(2).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第三个单元格的值
            String linkUrl = row.getCell(2).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链地址未填写)");
            }
            row.getCell(3).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第四个单元格的值
            String linkDescription = row.getCell(3).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链描述详情未填写)");
            }
            row.getCell(4).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第五个单元格的值
            String linkRank = row.getCell(4).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链序号未填写)");
            }
            row.getCell(5).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第六个单元格的值
            String isDelete = row.getCell(5).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链是否存在未填写)");
            }
            row.getCell(6).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第七个单元格的值
            String createTime = row.getCell(6).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链创建时间未填写)");
            }


            //完整的循环一次 就组成了一个对象
            link.setLinkType(Byte.valueOf(linkType));
            link.setLinkName(linkName);
            link.setLinkUrl(linkUrl);
            link.setLinkDescription(linkDescription);
            link.setLinkRank(Integer.parseInt(linkRank));
            link.setIsDeleted(Byte.valueOf(isDelete));
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            link.setCreateTime(format.parse(createTime));


            linkList.add(link);
        }
        for (BlogLink linkResord : linkList) {
            Integer linkId = linkResord.getLinkId();
            BlogLink blogLink = blogLinkMapper.selectByPrimaryKey(linkId);
            if (blogLink==null) {
                blogLinkMapper.insertSelective(linkResord);
                log.info(" 插入 "+linkResord);
            } else {
                blogLinkMapper.updateByPrimaryKeySelective(linkResord);
                log.info(" 更新 "+linkResord);
            }
        }
        return notNull;
    }
```
### 五、ExcelImportUtils工具类
```java
public class ExcelImportUtils {
    
    
    // @描述：是否是2003的excel，返回true是2003 
    public static boolean isExcel2003(String filePath)  {  
        return filePath.matches("^.+\\.(?i)(xls)$");  
    }  
   
    //@描述：是否是2007的excel，返回true是2007 
    public static boolean isExcel2007(String filePath)  {  
        return filePath.matches("^.+\\.(?i)(xlsx)$");  
    }  
    
  /**
   * 验证EXCEL文件
   * @param filePath
   * @return
   */
  public static boolean validateExcel(String filePath){
        if (filePath == null || !(isExcel2003(filePath) || isExcel2007(filePath))){  
            return false;  
        }  
        return true;
  }
    
 

```

整个核心也就是上传和下载两个功能，中间出现了一些小错误以后会记录完善一下。]
2019-08-15 17:01:11,578 DEBUG {conn-10005, pstmt-20024, rs-50053} closed
2019-08-15 17:01:11,578 DEBUG {conn-10005, pstmt-20024} clearParameters. 
2019-08-15 17:01:11,578 DEBUG {conn-10005, pstmt-20006} closed
2019-08-15 17:01:11,578 DEBUG {conn-10005, pstmt-20012} Parameters : [admin]
2019-08-15 17:01:11,578 DEBUG {conn-10005, pstmt-20012} Types : [VARCHAR]
2019-08-15 17:01:11,579 DEBUG {conn-10005, pstmt-20012} executed. 0.559805 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 17:01:11,579 DEBUG {conn-10005, pstmt-20012, rs-50054} open
2019-08-15 17:01:11,579 DEBUG {conn-10005, pstmt-20012, rs-50054} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 17:01:11,579 DEBUG {conn-10005, pstmt-20012, rs-50054} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 17:01:11,579 DEBUG {conn-10005, pstmt-20012, rs-50054} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 17:01:11,580 DEBUG {conn-10005, pstmt-20012, rs-50054} closed
2019-08-15 17:01:11,580 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 17:01:11,873 DEBUG {conn-10005, pstmt-20025} created. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 17:01:11,873 DEBUG {conn-10005, pstmt-20025} Parameters : [spring boot]
2019-08-15 17:01:11,873 DEBUG {conn-10005, pstmt-20025} Types : [VARCHAR]
2019-08-15 17:01:11,874 DEBUG {conn-10005, pstmt-20025} executed. 0.463163 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 17:01:11,874 DEBUG {conn-10005, pstmt-20025, rs-50055} open
2019-08-15 17:01:11,874 DEBUG {conn-10005, pstmt-20025, rs-50055} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 17:01:11,874 DEBUG {conn-10005, pstmt-20025, rs-50055} closed
2019-08-15 17:01:11,874 DEBUG {conn-10005, pstmt-20025} clearParameters. 
2019-08-15 17:01:11,874 DEBUG {conn-10005, pstmt-20011} closed
2019-08-15 17:01:11,877 DEBUG {conn-10005, pstmt-20026} created. INSERT into tb_blog_tag(tag_name)
    VALUES
      
      (?)
2019-08-15 17:01:11,877 DEBUG {conn-10005, pstmt-20026} Parameters : [spring boot]
2019-08-15 17:01:11,877 DEBUG {conn-10005, pstmt-20026} Types : [VARCHAR]
2019-08-15 17:01:11,878 DEBUG {conn-10005, pstmt-20026} executed. 0.833798 millis. INSERT into tb_blog_tag(tag_name)
    VALUES
      
      (?)
2019-08-15 17:01:11,878 DEBUG {conn-10005, pstmt-20026, rs-50056} open
2019-08-15 17:01:11,878 DEBUG {conn-10005, pstmt-20026, rs-50056} Header: [GENERATED_KEY]
2019-08-15 17:01:11,885 DEBUG {conn-10005, pstmt-20026, rs-50056} Result: [141]
2019-08-15 17:01:11,886 DEBUG {conn-10005, pstmt-20026, rs-50056} closed
2019-08-15 17:01:11,886 DEBUG {conn-10005, pstmt-20026} clearParameters. 
2019-08-15 17:01:11,886 DEBUG {conn-10005, pstmt-20020} closed
2019-08-15 17:01:11,887 DEBUG {conn-10005, pstmt-20027} created. update tb_blog_category
     SET category_name = ?,
      
      
        category_icon = ?,
      
      
        category_rank = ?,
      
      
        is_deleted = ?,
      
      
        create_time = ? 
    where category_id = ?
2019-08-15 17:01:11,887 DEBUG {conn-10005, pstmt-20027} Parameters : [SSM整合进阶篇, /admin/dist/img/category/02.png, 20, 0, 2018-11-12 18:42:25.0, 22]
2019-08-15 17:01:11,887 DEBUG {conn-10005, pstmt-20027} Types : [VARCHAR, VARCHAR, INTEGER, TINYINT, TIMESTAMP, INTEGER]
2019-08-15 17:01:11,888 DEBUG {conn-10005, pstmt-20027} executed. 0.84048 millis. update tb_blog_category
     SET category_name = ?,
      
      
        category_icon = ?,
      
      
        category_rank = ?,
      
      
        is_deleted = ?,
      
      
        create_time = ? 
    where category_id = ?
2019-08-15 17:01:11,888 DEBUG {conn-10005, pstmt-20027} clearParameters. 
2019-08-15 17:01:11,888 DEBUG {conn-10005, pstmt-20021} closed
2019-08-15 17:01:11,889 DEBUG {conn-10005, pstmt-20028} created. INSERT into tb_blog_tag_relation(blog_id,tag_id)
    VALUES
      
      (?,?)
2019-08-15 17:01:11,889 DEBUG {conn-10005, pstmt-20028} Parameters : [25, 141]
2019-08-15 17:01:11,889 DEBUG {conn-10005, pstmt-20028} Types : [BIGINT, INTEGER]
2019-08-15 17:01:11,893 DEBUG {conn-10005, pstmt-20028} executed. 0.664159 millis. INSERT into tb_blog_tag_relation(blog_id,tag_id)
    VALUES
      
      (?,?)
2019-08-15 17:01:11,893 DEBUG {conn-10005, pstmt-20028} clearParameters. 
2019-08-15 17:01:11,893 DEBUG {conn-10005, pstmt-20022} closed
2019-08-15 17:01:11,898 DEBUG {conn-10005} commited
2019-08-15 17:01:11,898 DEBUG {conn-10005} setAutoCommit true
2019-08-15 17:01:11,900 DEBUG {conn-10005} pool-recycle
2019-08-15 17:02:28,427 DEBUG {conn-10005} pool-connect
2019-08-15 17:02:28,427 DEBUG {conn-10005} setAutoCommit false
2019-08-15 17:02:28,428 DEBUG {conn-10005, pstmt-20002} Parameters : [22]
2019-08-15 17:02:28,428 DEBUG {conn-10005, pstmt-20002} Types : [INTEGER]
2019-08-15 17:02:28,428 DEBUG {conn-10005, pstmt-20002} executed. 0.518168 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 17:02:28,428 DEBUG {conn-10005, pstmt-20002, rs-50057} open
2019-08-15 17:02:28,428 DEBUG {conn-10005, pstmt-20002, rs-50057} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 17:02:28,428 DEBUG {conn-10005, pstmt-20002, rs-50057} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 20, 0, 2018-11-12 18:42:25.0]
2019-08-15 17:02:28,428 DEBUG {conn-10005, pstmt-20002, rs-50057} closed
2019-08-15 17:02:28,428 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 17:02:28,430 DEBUG {conn-10005, pstmt-20023} Parameters : [SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, ###  一、在build.gradle中添加：
```java
compile group: 'org.apache.poi', name: 'poi', version: '3.16'
compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.14'
compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.1'
compile group: 'commons-io', name: 'commons-io', version: '2.4'
```
###二、自定义异常类
### 三、在controller中
```java
@RequestMapping(value = "/export")
    @ResponseBody
    public void export(HttpServletResponse response) throws IOException {
        List<BlogLink> links = linkService.selectLink();
        log.info("links:"+links);
        for (int i=0;i<links.size();i++){
            log.info("i:"+i);
            log.info("links:"+links);
        }
        HSSFWorkbook wb = new HSSFWorkbook();

        HSSFSheet sheet = wb.createSheet("获取excel测试表格");

        HSSFRow row = null;

        row = sheet.createRow(0);//创建第一个单元格
        row.setHeight((short) (26.25 * 20));
        row.createCell(0).setCellValue("友情链接列表");//为第一行单元格设值

        /*为标题设计空间
         * firstRow从第1行开始
         * lastRow从第0行结束
         *
         *从第1个单元格开始
         * 从第3个单元格结束
         */
        CellRangeAddress rowRegion = new CellRangeAddress(0, 0, 0, 2);
        sheet.addMergedRegion(rowRegion);

		/*CellRangeAddress columnRegion = new CellRangeAddress(1,4,0,0);
		sheet.addMergedRegion(columnRegion);*/


        /*
         * 动态获取数据库列 sql语句 select COLUMN_NAME from INFORMATION_SCHEMA.Columns where table_name='user' and table_schema='test'
         * 第一个table_name 表名字
         * 第二个table_name 数据库名称
         * */
        row = sheet.createRow(1);
        row.setHeight((short) (22.50 * 20));//设置行高
        row.createCell(0).setCellValue("链接Id");//为第一个单元格设值
        row.createCell(1).setCellValue("友链类型");//为第二个单元格设值
        row.createCell(2).setCellValue("友链名称");//为第三个单元格设值
        row.createCell(3).setCellValue("友链地址");
        row.createCell(4).setCellValue("友链描述");
        row.createCell(5).setCellValue("友链排序");
        row.createCell(6).setCellValue("是否存在");
        row.createCell(7).setCellValue("创建时间");
        for (int i = 0; i < links.size(); i++) {

            row = sheet.createRow(i + 2);

            BlogLink link = links.get(i);

            row.createCell(0).setCellValue(link.getLinkId());
            row.createCell(1).setCellValue(link.getLinkType());
            row.createCell(2).setCellValue(link.getLinkName());
            row.createCell(3).setCellValue(link.getLinkUrl());
            row.createCell(4).setCellValue(link.getLinkDescription());
            row.createCell(5).setCellValue(link.getLinkRank());
            row.createCell(6).setCellValue(link.getIsDeleted());
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd ");
            row.createCell(7).setCellValue(format.format(link.getCreateTime()));
        }
        sheet.setDefaultRowHeight((short) (16.5 * 20));
        //列宽自适应
        for (int i = 0; i <= 13; i++) {
            sheet.autoSizeColumn(i);
        }

        response.setContentType("application/vnd.ms-excel;charset=utf-8");
        OutputStream os = response.getOutputStream();
        response.setHeader("Content-disposition", "attachment;filename=user.xls");//默认Excel名称
        wb.write(os);
        os.flush();
        os.close();


    }


    @RequestMapping(value = "/import")
    public String exImport(@RequestParam(value = "filename") MultipartFile file, HttpSession session) {

        boolean a = false;

        String fileName = file.getOriginalFilename();

        try {
            a = linkService.batchImport(fileName, file);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "admin/link";
    }
```

四、serviceImpl中
@Transactional(readOnly = false,rollbackFor = Exception.class)
    @Override
    public boolean batchImport(String fileName, MultipartFile file) throws Exception {
        boolean notNull = false;
        List<BlogLink> linkList = new ArrayList<>();
        if (!fileName.matches("^.+\\.(?i)(xls)$") && !fileName.matches("^.+\\.(?i)(xlsx)$")) {
            throw new MyException("上传文件格式不正确");
        }
        boolean isExcel2003 = true;
        if (fileName.matches("^.+\\.(?i)(xlsx)$")) {
            isExcel2003 = false;
        }
        InputStream is = file.getInputStream();
        Workbook wb = null;
        if (isExcel2003) {
            wb = new HSSFWorkbook(is);
        } else {
            wb = new XSSFWorkbook(is);
        }
        Sheet sheet = wb.getSheetAt(0);
        if(sheet!=null){
            notNull = true;
        }
        BlogLink link;
        for (int r = 2; r < sheet.getLastRowNum(); r++) {//r = 2 表示从第三行开始循环 如果你的第三行开始是数据
            Row row = sheet.getRow(r);//通过sheet表单对象得到 行对象
            if (row == null){
                continue;
            }

            //sheet.getLastRowNum() 的值是 10，所以Excel表中的数据至少是10条；不然报错 NullPointerException
            link = new BlogLink();

          /* if( row.getCell(0).getCellType() !=1){//循环时，得到每一行的单元格进行判断
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型请设为文本格式)");
            }*/
           row.getCell(0).setCellType(HSSFCell.CELL_TYPE_STRING);
            String linkType = row.getCell(0).getStringCellValue();//得到每一行第一个单元格的值
            if(linkType == null || linkType.isEmpty()){//判断是否为空
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型未填写)");
            }

            row.getCell(1).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第二个单元格的值
            String linkName = row.getCell(1).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链名称未填写)");
            }
            row.getCell(2).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第三个单元格的值
            String linkUrl = row.getCell(2).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链地址未填写)");
            }
            row.getCell(3).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第四个单元格的值
            String linkDescription = row.getCell(3).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链描述详情未填写)");
            }
            row.getCell(4).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第五个单元格的值
            String linkRank = row.getCell(4).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链序号未填写)");
            }
            row.getCell(5).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第六个单元格的值
            String isDelete = row.getCell(5).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链是否存在未填写)");
            }
            row.getCell(6).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第七个单元格的值
            String createTime = row.getCell(6).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链创建时间未填写)");
            }


            //完整的循环一次 就组成了一个对象
            link.setLinkType(Byte.valueOf(linkType));
            link.setLinkName(linkName);
            link.setLinkUrl(linkUrl);
            link.setLinkDescription(linkDescription);
            link.setLinkRank(Integer.parseInt(linkRank));
            link.setIsDeleted(Byte.valueOf(isDelete));
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            link.setCreateTime(format.parse(createTime));


            linkList.add(link);
        }
        for (BlogLink linkResord : linkList) {
            Integer linkId = linkResord.getLinkId();
            BlogLink blogLink = blogLinkMapper.selectByPrimaryKey(linkId);
            if (blogLink==null) {
                blogLinkMapper.insertSelective(linkResord);
                log.info(" 插入 "+linkResord);
            } else {
                blogLinkMapper.updateByPrimaryKeySelective(linkResord);
                log.info(" 更新 "+linkResord);
            }
        }
        return notNull;
    }```java
@Transactional(readOnly = false,rollbackFor = Exception.class)
    @Override
    public boolean batchImport(String fileName, MultipartFile file) throws Exception {
        boolean notNull = false;
        List<BlogLink> linkList = new ArrayList<>();
        if (!fileName.matches("^.+\\.(?i)(xls)$") && !fileName.matches("^.+\\.(?i)(xlsx)$")) {
            throw new MyException("上传文件格式不正确");
        }
        boolean isExcel2003 = true;
        if (fileName.matches("^.+\\.(?i)(xlsx)$")) {
            isExcel2003 = false;
        }
        InputStream is = file.getInputStream();
        Workbook wb = null;
        if (isExcel2003) {
            wb = new HSSFWorkbook(is);
        } else {
            wb = new XSSFWorkbook(is);
        }
        Sheet sheet = wb.getSheetAt(0);
        if(sheet!=null){
            notNull = true;
        }
        BlogLink link;
        for (int r = 2; r < sheet.getLastRowNum(); r++) {//r = 2 表示从第三行开始循环 如果你的第三行开始是数据
            Row row = sheet.getRow(r);//通过sheet表单对象得到 行对象
            if (row == null){
                continue;
            }

            //sheet.getLastRowNum() 的值是 10，所以Excel表中的数据至少是10条；不然报错 NullPointerException
            link = new BlogLink();

          /* if( row.getCell(0).getCellType() !=1){//循环时，得到每一行的单元格进行判断
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型请设为文本格式)");
            }*/
           row.getCell(0).setCellType(HSSFCell.CELL_TYPE_STRING);
            String linkType = row.getCell(0).getStringCellValue();//得到每一行第一个单元格的值
            if(linkType == null || linkType.isEmpty()){//判断是否为空
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型未填写)");
            }

            row.getCell(1).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第二个单元格的值
            String linkName = row.getCell(1).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链名称未填写)");
            }
            row.getCell(2).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第三个单元格的值
            String linkUrl = row.getCell(2).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链地址未填写)");
            }
            row.getCell(3).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第四个单元格的值
            String linkDescription = row.getCell(3).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链描述详情未填写)");
            }
            row.getCell(4).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第五个单元格的值
            String linkRank = row.getCell(4).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链序号未填写)");
            }
            row.getCell(5).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第六个单元格的值
            String isDelete = row.getCell(5).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链是否存在未填写)");
            }
            row.getCell(6).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第七个单元格的值
            String createTime = row.getCell(6).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链创建时间未填写)");
            }


            //完整的循环一次 就组成了一个对象
            link.setLinkType(Byte.valueOf(linkType));
            link.setLinkName(linkName);
            link.setLinkUrl(linkUrl);
            link.setLinkDescription(linkDescription);
            link.setLinkRank(Integer.parseInt(linkRank));
            link.setIsDeleted(Byte.valueOf(isDelete));
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            link.setCreateTime(format.parse(createTime));


            linkList.add(link);
        }
        for (BlogLink linkResord : linkList) {
            Integer linkId = linkResord.getLinkId();
            BlogLink blogLink = blogLinkMapper.selectByPrimaryKey(linkId);
            if (blogLink==null) {
                blogLinkMapper.insertSelective(linkResord);
                log.info(" 插入 "+linkResord);
            } else {
                blogLinkMapper.updateByPrimaryKeySelective(linkResord);
                log.info(" 更新 "+linkResord);
            }
        }
        return notNull;
    }
```
### 五、ExcelImportUtils工具类
```java
public class ExcelImportUtils {
    
    
    // @描述：是否是2003的excel，返回true是2003 
    public static boolean isExcel2003(String filePath)  {  
        return filePath.matches("^.+\\.(?i)(xls)$");  
    }  
   
    //@描述：是否是2007的excel，返回true是2007 
    public static boolean isExcel2007(String filePath)  {  
        return filePath.matches("^.+\\.(?i)(xlsx)$");  
    }  
    
  /**
   * 验证EXCEL文件
   * @param filePath
   * @return
   */
  public static boolean validateExcel(String filePath){
        if (filePath == null || !(isExcel2003(filePath) || isExcel2007(filePath))){  
            return false;  
        }  
        return true;
  }
    
 

```

整个核心也就是上传和下载两个功能，中间出现了一些小错误以后会记录完善一下。, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:02:28,430 DEBUG {conn-10005, pstmt-20023} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, TINYINT, INTEGER, VARCHAR, VARCHAR]
2019-08-15 17:02:28,430 DEBUG {conn-10005, pstmt-20023} executed. 1.194149 millis. insert into tb_blog
     ( blog_title,
      
      
        blog_sub_url,
      
      
        blog_cover_image,
      
      
        blog_category_id,
      
      
        blog_category_name,
      
      
        blog_tags,
      
      
        blog_status,
      
      
      
        enable_comment,
      
      
      
      
      
        blog_vote_size,
      
      
        blog_content,
      
       
         blog_summary ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
        ?,
      
      
      
      
      
        ?,
      
      
        ?,
      
       
        ? )
2019-08-15 17:02:28,430 DEBUG {conn-10005, pstmt-20023, rs-50058} open
2019-08-15 17:02:28,431 DEBUG {conn-10005, pstmt-20023, rs-50058} Header: [GENERATED_KEY]
2019-08-15 17:02:28,431 DEBUG {conn-10005, pstmt-20023, rs-50058} Result: [26]
2019-08-15 17:02:28,431 DEBUG {conn-10005, pstmt-20023, rs-50058} closed
2019-08-15 17:02:28,431 DEBUG {conn-10005, pstmt-20023} clearParameters. 
2019-08-15 17:02:28,431 DEBUG {conn-10005, pstmt-20024} Parameters : [SpringBoot整合POI实现文件导出Excel，导入Excel]
2019-08-15 17:02:28,431 DEBUG {conn-10005, pstmt-20024} Types : [VARCHAR]
2019-08-15 17:02:28,437 DEBUG {conn-10005, pstmt-20024} executed. 6.055569 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   ,
     
    blog_content
   
    from tb_blog where blog_title = ?
2019-08-15 17:02:28,437 DEBUG {conn-10005, pstmt-20024, rs-50059} open
2019-08-15 17:02:28,437 DEBUG {conn-10005, pstmt-20024, rs-50059} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 17:02:28,437 DEBUG {conn-10005, pstmt-20024, rs-50059} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。, ###  一、在build.gradle中添加：
```java
compile group: 'org.apache.poi', name: 'poi', version: '3.16'
compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.14'
compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.1'
compile group: 'commons-io', name: 'commons-io', version: '2.4'
```
###二、自定义异常类
### 三、在controller中
```java
@RequestMapping(value = "/export")
    @ResponseBody
    public void export(HttpServletResponse response) throws IOException {
        List<BlogLink> links = linkService.selectLink();
        log.info("links:"+links);
        for (int i=0;i<links.size();i++){
            log.info("i:"+i);
            log.info("links:"+links);
        }
        HSSFWorkbook wb = new HSSFWorkbook();

        HSSFSheet sheet = wb.createSheet("获取excel测试表格");

        HSSFRow row = null;

        row = sheet.createRow(0);//创建第一个单元格
        row.setHeight((short) (26.25 * 20));
        row.createCell(0).setCellValue("友情链接列表");//为第一行单元格设值

        /*为标题设计空间
         * firstRow从第1行开始
         * lastRow从第0行结束
         *
         *从第1个单元格开始
         * 从第3个单元格结束
         */
        CellRangeAddress rowRegion = new CellRangeAddress(0, 0, 0, 2);
        sheet.addMergedRegion(rowRegion);

		/*CellRangeAddress columnRegion = new CellRangeAddress(1,4,0,0);
		sheet.addMergedRegion(columnRegion);*/


        /*
         * 动态获取数据库列 sql语句 select COLUMN_NAME from INFORMATION_SCHEMA.Columns where table_name='user' and table_schema='test'
         * 第一个table_name 表名字
         * 第二个table_name 数据库名称
         * */
        row = sheet.createRow(1);
        row.setHeight((short) (22.50 * 20));//设置行高
        row.createCell(0).setCellValue("链接Id");//为第一个单元格设值
        row.createCell(1).setCellValue("友链类型");//为第二个单元格设值
        row.createCell(2).setCellValue("友链名称");//为第三个单元格设值
        row.createCell(3).setCellValue("友链地址");
        row.createCell(4).setCellValue("友链描述");
        row.createCell(5).setCellValue("友链排序");
        row.createCell(6).setCellValue("是否存在");
        row.createCell(7).setCellValue("创建时间");
        for (int i = 0; i < links.size(); i++) {

            row = sheet.createRow(i + 2);

            BlogLink link = links.get(i);

            row.createCell(0).setCellValue(link.getLinkId());
            row.createCell(1).setCellValue(link.getLinkType());
            row.createCell(2).setCellValue(link.getLinkName());
            row.createCell(3).setCellValue(link.getLinkUrl());
            row.createCell(4).setCellValue(link.getLinkDescription());
            row.createCell(5).setCellValue(link.getLinkRank());
            row.createCell(6).setCellValue(link.getIsDeleted());
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd ");
            row.createCell(7).setCellValue(format.format(link.getCreateTime()));
        }
        sheet.setDefaultRowHeight((short) (16.5 * 20));
        //列宽自适应
        for (int i = 0; i <= 13; i++) {
            sheet.autoSizeColumn(i);
        }

        response.setContentType("application/vnd.ms-excel;charset=utf-8");
        OutputStream os = response.getOutputStream();
        response.setHeader("Content-disposition", "attachment;filename=user.xls");//默认Excel名称
        wb.write(os);
        os.flush();
        os.close();


    }


    @RequestMapping(value = "/import")
    public String exImport(@RequestParam(value = "filename") MultipartFile file, HttpSession session) {

        boolean a = false;

        String fileName = file.getOriginalFilename();

        try {
            a = linkService.batchImport(fileName, file);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "admin/link";
    }
```

四、serviceImpl中
@Transactional(readOnly = false,rollbackFor = Exception.class)
    @Override
    public boolean batchImport(String fileName, MultipartFile file) throws Exception {
        boolean notNull = false;
        List<BlogLink> linkList = new ArrayList<>();
        if (!fileName.matches("^.+\\.(?i)(xls)$") && !fileName.matches("^.+\\.(?i)(xlsx)$")) {
            throw new MyException("上传文件格式不正确");
        }
        boolean isExcel2003 = true;
        if (fileName.matches("^.+\\.(?i)(xlsx)$")) {
            isExcel2003 = false;
        }
        InputStream is = file.getInputStream();
        Workbook wb = null;
        if (isExcel2003) {
            wb = new HSSFWorkbook(is);
        } else {
            wb = new XSSFWorkbook(is);
        }
        Sheet sheet = wb.getSheetAt(0);
        if(sheet!=null){
            notNull = true;
        }
        BlogLink link;
        for (int r = 2; r < sheet.getLastRowNum(); r++) {//r = 2 表示从第三行开始循环 如果你的第三行开始是数据
            Row row = sheet.getRow(r);//通过sheet表单对象得到 行对象
            if (row == null){
                continue;
            }

            //sheet.getLastRowNum() 的值是 10，所以Excel表中的数据至少是10条；不然报错 NullPointerException
            link = new BlogLink();

          /* if( row.getCell(0).getCellType() !=1){//循环时，得到每一行的单元格进行判断
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型请设为文本格式)");
            }*/
           row.getCell(0).setCellType(HSSFCell.CELL_TYPE_STRING);
            String linkType = row.getCell(0).getStringCellValue();//得到每一行第一个单元格的值
            if(linkType == null || linkType.isEmpty()){//判断是否为空
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型未填写)");
            }

            row.getCell(1).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第二个单元格的值
            String linkName = row.getCell(1).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链名称未填写)");
            }
            row.getCell(2).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第三个单元格的值
            String linkUrl = row.getCell(2).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链地址未填写)");
            }
            row.getCell(3).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第四个单元格的值
            String linkDescription = row.getCell(3).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链描述详情未填写)");
            }
            row.getCell(4).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第五个单元格的值
            String linkRank = row.getCell(4).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链序号未填写)");
            }
            row.getCell(5).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第六个单元格的值
            String isDelete = row.getCell(5).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链是否存在未填写)");
            }
            row.getCell(6).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第七个单元格的值
            String createTime = row.getCell(6).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链创建时间未填写)");
            }


            //完整的循环一次 就组成了一个对象
            link.setLinkType(Byte.valueOf(linkType));
            link.setLinkName(linkName);
            link.setLinkUrl(linkUrl);
            link.setLinkDescription(linkDescription);
            link.setLinkRank(Integer.parseInt(linkRank));
            link.setIsDeleted(Byte.valueOf(isDelete));
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            link.setCreateTime(format.parse(createTime));


            linkList.add(link);
        }
        for (BlogLink linkResord : linkList) {
            Integer linkId = linkResord.getLinkId();
            BlogLink blogLink = blogLinkMapper.selectByPrimaryKey(linkId);
            if (blogLink==null) {
                blogLinkMapper.insertSelective(linkResord);
                log.info(" 插入 "+linkResord);
            } else {
                blogLinkMapper.updateByPrimaryKeySelective(linkResord);
                log.info(" 更新 "+linkResord);
            }
        }
        return notNull;
    }```java
@Transactional(readOnly = false,rollbackFor = Exception.class)
    @Override
    public boolean batchImport(String fileName, MultipartFile file) throws Exception {
        boolean notNull = false;
        List<BlogLink> linkList = new ArrayList<>();
        if (!fileName.matches("^.+\\.(?i)(xls)$") && !fileName.matches("^.+\\.(?i)(xlsx)$")) {
            throw new MyException("上传文件格式不正确");
        }
        boolean isExcel2003 = true;
        if (fileName.matches("^.+\\.(?i)(xlsx)$")) {
            isExcel2003 = false;
        }
        InputStream is = file.getInputStream();
        Workbook wb = null;
        if (isExcel2003) {
            wb = new HSSFWorkbook(is);
        } else {
            wb = new XSSFWorkbook(is);
        }
        Sheet sheet = wb.getSheetAt(0);
        if(sheet!=null){
            notNull = true;
        }
        BlogLink link;
        for (int r = 2; r < sheet.getLastRowNum(); r++) {//r = 2 表示从第三行开始循环 如果你的第三行开始是数据
            Row row = sheet.getRow(r);//通过sheet表单对象得到 行对象
            if (row == null){
                continue;
            }

            //sheet.getLastRowNum() 的值是 10，所以Excel表中的数据至少是10条；不然报错 NullPointerException
            link = new BlogLink();

          /* if( row.getCell(0).getCellType() !=1){//循环时，得到每一行的单元格进行判断
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型请设为文本格式)");
            }*/
           row.getCell(0).setCellType(HSSFCell.CELL_TYPE_STRING);
            String linkType = row.getCell(0).getStringCellValue();//得到每一行第一个单元格的值
            if(linkType == null || linkType.isEmpty()){//判断是否为空
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型未填写)");
            }

            row.getCell(1).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第二个单元格的值
            String linkName = row.getCell(1).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链名称未填写)");
            }
            row.getCell(2).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第三个单元格的值
            String linkUrl = row.getCell(2).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链地址未填写)");
            }
            row.getCell(3).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第四个单元格的值
            String linkDescription = row.getCell(3).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链描述详情未填写)");
            }
            row.getCell(4).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第五个单元格的值
            String linkRank = row.getCell(4).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链序号未填写)");
            }
            row.getCell(5).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第六个单元格的值
            String isDelete = row.getCell(5).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链是否存在未填写)");
            }
            row.getCell(6).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第七个单元格的值
            String createTime = row.getCell(6).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链创建时间未填写)");
            }


            //完整的循环一次 就组成了一个对象
            link.setLinkType(Byte.valueOf(linkType));
            link.setLinkName(linkName);
            link.setLinkUrl(linkUrl);
            link.setLinkDescription(linkDescription);
            link.setLinkRank(Integer.parseInt(linkRank));
            link.setIsDeleted(Byte.valueOf(isDelete));
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            link.setCreateTime(format.parse(createTime));


            linkList.add(link);
        }
        for (BlogLink linkResord : linkList) {
            Integer linkId = linkResord.getLinkId();
            BlogLink blogLink = blogLinkMapper.selectByPrimaryKey(linkId);
            if (blogLink==null) {
                blogLinkMapper.insertSelective(linkResord);
                log.info(" 插入 "+linkResord);
            } else {
                blogLinkMapper.updateByPrimaryKeySelective(linkResord);
                log.info(" 更新 "+linkResord);
            }
        }
        return notNull;
    }
```
### 五、ExcelImportUtils工具类
```java
public class ExcelImportUtils {
    
    
    // @描述：是否是2003的excel，返回true是2003 
    public static boolean isExcel2003(String filePath)  {  
        return filePath.matches("^.+\\.(?i)(xls)$");  
    }  
   
    //@描述：是否是2007的excel，返回true是2007 
    public static boolean isExcel2007(String filePath)  {  
        return filePath.matches("^.+\\.(?i)(xlsx)$");  
    }  
    
  /**
   * 验证EXCEL文件
   * @param filePath
   * @return
   */
  public static boolean validateExcel(String filePath){
        if (filePath == null || !(isExcel2003(filePath) || isExcel2007(filePath))){  
            return false;  
        }  
        return true;
  }
    
 

```

整个核心也就是上传和下载两个功能，中间出现了一些小错误以后会记录完善一下。]
2019-08-15 17:02:28,438 DEBUG {conn-10005, pstmt-20024, rs-50059} Result: [26, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:02:28.0, 2019-08-16 01:02:28.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。, ###  一、在build.gradle中添加：
```java
compile group: 'org.apache.poi', name: 'poi', version: '3.16'
compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.14'
compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.1'
compile group: 'commons-io', name: 'commons-io', version: '2.4'
```
###二、自定义异常类
### 三、在controller中
```java
@RequestMapping(value = "/export")
    @ResponseBody
    public void export(HttpServletResponse response) throws IOException {
        List<BlogLink> links = linkService.selectLink();
        log.info("links:"+links);
        for (int i=0;i<links.size();i++){
            log.info("i:"+i);
            log.info("links:"+links);
        }
        HSSFWorkbook wb = new HSSFWorkbook();

        HSSFSheet sheet = wb.createSheet("获取excel测试表格");

        HSSFRow row = null;

        row = sheet.createRow(0);//创建第一个单元格
        row.setHeight((short) (26.25 * 20));
        row.createCell(0).setCellValue("友情链接列表");//为第一行单元格设值

        /*为标题设计空间
         * firstRow从第1行开始
         * lastRow从第0行结束
         *
         *从第1个单元格开始
         * 从第3个单元格结束
         */
        CellRangeAddress rowRegion = new CellRangeAddress(0, 0, 0, 2);
        sheet.addMergedRegion(rowRegion);

		/*CellRangeAddress columnRegion = new CellRangeAddress(1,4,0,0);
		sheet.addMergedRegion(columnRegion);*/


        /*
         * 动态获取数据库列 sql语句 select COLUMN_NAME from INFORMATION_SCHEMA.Columns where table_name='user' and table_schema='test'
         * 第一个table_name 表名字
         * 第二个table_name 数据库名称
         * */
        row = sheet.createRow(1);
        row.setHeight((short) (22.50 * 20));//设置行高
        row.createCell(0).setCellValue("链接Id");//为第一个单元格设值
        row.createCell(1).setCellValue("友链类型");//为第二个单元格设值
        row.createCell(2).setCellValue("友链名称");//为第三个单元格设值
        row.createCell(3).setCellValue("友链地址");
        row.createCell(4).setCellValue("友链描述");
        row.createCell(5).setCellValue("友链排序");
        row.createCell(6).setCellValue("是否存在");
        row.createCell(7).setCellValue("创建时间");
        for (int i = 0; i < links.size(); i++) {

            row = sheet.createRow(i + 2);

            BlogLink link = links.get(i);

            row.createCell(0).setCellValue(link.getLinkId());
            row.createCell(1).setCellValue(link.getLinkType());
            row.createCell(2).setCellValue(link.getLinkName());
            row.createCell(3).setCellValue(link.getLinkUrl());
            row.createCell(4).setCellValue(link.getLinkDescription());
            row.createCell(5).setCellValue(link.getLinkRank());
            row.createCell(6).setCellValue(link.getIsDeleted());
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd ");
            row.createCell(7).setCellValue(format.format(link.getCreateTime()));
        }
        sheet.setDefaultRowHeight((short) (16.5 * 20));
        //列宽自适应
        for (int i = 0; i <= 13; i++) {
            sheet.autoSizeColumn(i);
        }

        response.setContentType("application/vnd.ms-excel;charset=utf-8");
        OutputStream os = response.getOutputStream();
        response.setHeader("Content-disposition", "attachment;filename=user.xls");//默认Excel名称
        wb.write(os);
        os.flush();
        os.close();


    }


    @RequestMapping(value = "/import")
    public String exImport(@RequestParam(value = "filename") MultipartFile file, HttpSession session) {

        boolean a = false;

        String fileName = file.getOriginalFilename();

        try {
            a = linkService.batchImport(fileName, file);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "admin/link";
    }
```

四、serviceImpl中
@Transactional(readOnly = false,rollbackFor = Exception.class)
    @Override
    public boolean batchImport(String fileName, MultipartFile file) throws Exception {
        boolean notNull = false;
        List<BlogLink> linkList = new ArrayList<>();
        if (!fileName.matches("^.+\\.(?i)(xls)$") && !fileName.matches("^.+\\.(?i)(xlsx)$")) {
            throw new MyException("上传文件格式不正确");
        }
        boolean isExcel2003 = true;
        if (fileName.matches("^.+\\.(?i)(xlsx)$")) {
            isExcel2003 = false;
        }
        InputStream is = file.getInputStream();
        Workbook wb = null;
        if (isExcel2003) {
            wb = new HSSFWorkbook(is);
        } else {
            wb = new XSSFWorkbook(is);
        }
        Sheet sheet = wb.getSheetAt(0);
        if(sheet!=null){
            notNull = true;
        }
        BlogLink link;
        for (int r = 2; r < sheet.getLastRowNum(); r++) {//r = 2 表示从第三行开始循环 如果你的第三行开始是数据
            Row row = sheet.getRow(r);//通过sheet表单对象得到 行对象
            if (row == null){
                continue;
            }

            //sheet.getLastRowNum() 的值是 10，所以Excel表中的数据至少是10条；不然报错 NullPointerException
            link = new BlogLink();

          /* if( row.getCell(0).getCellType() !=1){//循环时，得到每一行的单元格进行判断
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型请设为文本格式)");
            }*/
           row.getCell(0).setCellType(HSSFCell.CELL_TYPE_STRING);
            String linkType = row.getCell(0).getStringCellValue();//得到每一行第一个单元格的值
            if(linkType == null || linkType.isEmpty()){//判断是否为空
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型未填写)");
            }

            row.getCell(1).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第二个单元格的值
            String linkName = row.getCell(1).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链名称未填写)");
            }
            row.getCell(2).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第三个单元格的值
            String linkUrl = row.getCell(2).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链地址未填写)");
            }
            row.getCell(3).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第四个单元格的值
            String linkDescription = row.getCell(3).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链描述详情未填写)");
            }
            row.getCell(4).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第五个单元格的值
            String linkRank = row.getCell(4).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链序号未填写)");
            }
            row.getCell(5).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第六个单元格的值
            String isDelete = row.getCell(5).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链是否存在未填写)");
            }
            row.getCell(6).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第七个单元格的值
            String createTime = row.getCell(6).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链创建时间未填写)");
            }


            //完整的循环一次 就组成了一个对象
            link.setLinkType(Byte.valueOf(linkType));
            link.setLinkName(linkName);
            link.setLinkUrl(linkUrl);
            link.setLinkDescription(linkDescription);
            link.setLinkRank(Integer.parseInt(linkRank));
            link.setIsDeleted(Byte.valueOf(isDelete));
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            link.setCreateTime(format.parse(createTime));


            linkList.add(link);
        }
        for (BlogLink linkResord : linkList) {
            Integer linkId = linkResord.getLinkId();
            BlogLink blogLink = blogLinkMapper.selectByPrimaryKey(linkId);
            if (blogLink==null) {
                blogLinkMapper.insertSelective(linkResord);
                log.info(" 插入 "+linkResord);
            } else {
                blogLinkMapper.updateByPrimaryKeySelective(linkResord);
                log.info(" 更新 "+linkResord);
            }
        }
        return notNull;
    }```java
@Transactional(readOnly = false,rollbackFor = Exception.class)
    @Override
    public boolean batchImport(String fileName, MultipartFile file) throws Exception {
        boolean notNull = false;
        List<BlogLink> linkList = new ArrayList<>();
        if (!fileName.matches("^.+\\.(?i)(xls)$") && !fileName.matches("^.+\\.(?i)(xlsx)$")) {
            throw new MyException("上传文件格式不正确");
        }
        boolean isExcel2003 = true;
        if (fileName.matches("^.+\\.(?i)(xlsx)$")) {
            isExcel2003 = false;
        }
        InputStream is = file.getInputStream();
        Workbook wb = null;
        if (isExcel2003) {
            wb = new HSSFWorkbook(is);
        } else {
            wb = new XSSFWorkbook(is);
        }
        Sheet sheet = wb.getSheetAt(0);
        if(sheet!=null){
            notNull = true;
        }
        BlogLink link;
        for (int r = 2; r < sheet.getLastRowNum(); r++) {//r = 2 表示从第三行开始循环 如果你的第三行开始是数据
            Row row = sheet.getRow(r);//通过sheet表单对象得到 行对象
            if (row == null){
                continue;
            }

            //sheet.getLastRowNum() 的值是 10，所以Excel表中的数据至少是10条；不然报错 NullPointerException
            link = new BlogLink();

          /* if( row.getCell(0).getCellType() !=1){//循环时，得到每一行的单元格进行判断
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型请设为文本格式)");
            }*/
           row.getCell(0).setCellType(HSSFCell.CELL_TYPE_STRING);
            String linkType = row.getCell(0).getStringCellValue();//得到每一行第一个单元格的值
            if(linkType == null || linkType.isEmpty()){//判断是否为空
                throw new MyException("导入失败(第"+(r+1)+"行,友链类型未填写)");
            }

            row.getCell(1).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第二个单元格的值
            String linkName = row.getCell(1).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链名称未填写)");
            }
            row.getCell(2).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第三个单元格的值
            String linkUrl = row.getCell(2).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链地址未填写)");
            }
            row.getCell(3).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第四个单元格的值
            String linkDescription = row.getCell(3).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链描述详情未填写)");
            }
            row.getCell(4).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第五个单元格的值
            String linkRank = row.getCell(4).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链序号未填写)");
            }
            row.getCell(5).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第六个单元格的值
            String isDelete = row.getCell(5).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链是否存在未填写)");
            }
            row.getCell(6).setCellType(Cell.CELL_TYPE_STRING);//得到每一行的 第七个单元格的值
            String createTime = row.getCell(6).getStringCellValue();
            if(linkName==null || linkName.isEmpty()){
                throw new MyException("导入失败(第"+(r+1)+"行,友链创建时间未填写)");
            }


            //完整的循环一次 就组成了一个对象
            link.setLinkType(Byte.valueOf(linkType));
            link.setLinkName(linkName);
            link.setLinkUrl(linkUrl);
            link.setLinkDescription(linkDescription);
            link.setLinkRank(Integer.parseInt(linkRank));
            link.setIsDeleted(Byte.valueOf(isDelete));
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            link.setCreateTime(format.parse(createTime));


            linkList.add(link);
        }
        for (BlogLink linkResord : linkList) {
            Integer linkId = linkResord.getLinkId();
            BlogLink blogLink = blogLinkMapper.selectByPrimaryKey(linkId);
            if (blogLink==null) {
                blogLinkMapper.insertSelective(linkResord);
                log.info(" 插入 "+linkResord);
            } else {
                blogLinkMapper.updateByPrimaryKeySelective(linkResord);
                log.info(" 更新 "+linkResord);
            }
        }
        return notNull;
    }
```
### 五、ExcelImportUtils工具类
```java
public class ExcelImportUtils {
    
    
    // @描述：是否是2003的excel，返回true是2003 
    public static boolean isExcel2003(String filePath)  {  
        return filePath.matches("^.+\\.(?i)(xls)$");  
    }  
   
    //@描述：是否是2007的excel，返回true是2007 
    public static boolean isExcel2007(String filePath)  {  
        return filePath.matches("^.+\\.(?i)(xlsx)$");  
    }  
    
  /**
   * 验证EXCEL文件
   * @param filePath
   * @return
   */
  public static boolean validateExcel(String filePath){
        if (filePath == null || !(isExcel2003(filePath) || isExcel2007(filePath))){  
            return false;  
        }  
        return true;
  }
    
 

```

整个核心也就是上传和下载两个功能，中间出现了一些小错误以后会记录完善一下。]
2019-08-15 17:02:28,438 DEBUG {conn-10005, pstmt-20024, rs-50059} closed
2019-08-15 17:02:28,438 DEBUG {conn-10005, pstmt-20024} clearParameters. 
2019-08-15 17:02:28,445 DEBUG {conn 10005} rollback
2019-08-15 17:02:28,445 DEBUG {conn-10005} setAutoCommit true
2019-08-15 17:02:28,456 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:30,293 DEBUG {conn-10001,procId-32} connected
2019-08-15 17:10:30,300 DEBUG {conn-10002,procId-33} connected
2019-08-15 17:10:30,306 DEBUG {conn-10003,procId-34} connected
2019-08-15 17:10:30,312 DEBUG {conn-10004,procId-35} connected
2019-08-15 17:10:30,317 DEBUG {conn-10005,procId-36} connected
2019-08-15 17:10:30,325 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:30,326 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:30,336 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:30,338 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:30,730 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:30,774 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:31,482 INFO [Penance II] modules [], plugins [], sites []
2019-08-15 17:10:31,512 DEBUG [Penance II] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 17:10:31,523 DEBUG [Penance II] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 17:10:31,534 DEBUG [Penance II] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 17:10:31,535 DEBUG [Penance II] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 17:10:31,535 DEBUG [Penance II] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 17:10:31,535 DEBUG [Penance II] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 17:10:31,535 DEBUG [Penance II] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 17:10:31,535 DEBUG [Penance II] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 17:10:31,536 DEBUG [Penance II] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 17:10:31,536 DEBUG [Penance II] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 17:10:31,536 DEBUG [Penance II] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 17:10:31,536 DEBUG [Penance II] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 17:10:31,536 DEBUG [Penance II] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 17:10:31,536 DEBUG [Penance II] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 17:10:31,536 DEBUG [Penance II] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 17:10:31,537 DEBUG [Penance II] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 17:10:32,996 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:51d9:691:64d9:afc4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 17:10:33,015 DEBUG using gathering [true]
2019-08-15 17:10:33,037 DEBUG [Penance II] node_sampler_interval[5s]
2019-08-15 17:10:33,049 DEBUG Using select timeout of 500
2019-08-15 17:10:33,049 DEBUG Epoll-bug workaround enabled = false
2019-08-15 17:10:33,093 DEBUG [Penance II] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 17:10:33,118 DEBUG [Penance II] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 17:10:33,155 DEBUG [Penance II] connected to node [{Maximus}{qvkqYeT2R3qndm3-HpsGMQ}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 17:10:33,866 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:33,866 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:40,886 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 17:10:40,993 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:41,101 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 17:10:41,109 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 17:10:41,110 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 17:10:41,112 DEBUG {conn-10005, pstmt-20000} executed. 5.45104 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 17:10:41,116 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 17:10:41,117 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:10:41,123 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:10:41,125 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:10:41,126 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:10:41,126 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:10:41,126 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 17:10:41,126 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 17:10:41,127 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:41,132 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:41,134 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 17:10:41,135 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 17:10:41,135 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 17:10:41,136 DEBUG {conn-10005, pstmt-20001} executed. 0.900111 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 17:10:41,136 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 17:10:41,136 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:10:41,136 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:10:41,137 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:10:41,137 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:10:41,138 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:10:41,138 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 17:10:41,138 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 17:10:41,138 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:41,139 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:41,143 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 17:10:41,143 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 17:10:41,143 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 17:10:41,146 DEBUG {conn-10005, pstmt-20002} executed. 2.407833 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 17:10:41,146 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 17:10:41,146 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 17:10:41,146 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 17:10:41,146 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 17:10:41,146 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 17:10:41,147 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [140, 1, spring security]
2019-08-15 17:10:41,147 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [141, 1, spring boot]
2019-08-15 17:10:41,147 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 17:10:41,147 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 17:10:41,147 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:41,151 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:41,152 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 17:10:41,152 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 17:10:41,152 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 17:10:41,153 DEBUG {conn-10005, pstmt-20003} executed. 1.459917 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 17:10:41,153 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 17:10:41,154 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 17:10:41,154 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 17:10:41,154 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 17:10:41,155 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 17:10:41,155 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 17:10:41,155 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 17:10:41,156 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 17:10:41,156 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 17:10:41,156 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 17:10:41,156 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 17:10:41,157 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 17:10:41,157 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 17:10:41,157 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 17:10:41,157 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 17:10:41,157 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 17:10:41,158 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:41,261 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:41,262 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 17:10:41,263 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 17:10:41,263 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 17:10:41,265 DEBUG {conn-10005, pstmt-20004} executed. 1.655771 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 17:10:41,265 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 17:10:41,265 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 17:10:41,265 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 17:10:41,265 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 17:10:41,265 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:52,310 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:52,311 DEBUG {conn-10005, pstmt-20005} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 17:10:52,312 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 17:10:52,312 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 17:10:52,315 DEBUG {conn-10005, pstmt-20005} executed. 3.539269 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 17:10:52,315 DEBUG {conn-10005, pstmt-20005, rs-50005} open
2019-08-15 17:10:52,316 DEBUG {conn-10005, pstmt-20005, rs-50005} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 17:10:52,316 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 17:10:52,317 DEBUG {conn-10005, pstmt-20005, rs-50005} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 17:10:52,317 DEBUG {conn-10005, pstmt-20005, rs-50005} closed
2019-08-15 17:10:52,317 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 17:10:52,317 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:52,439 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:52,439 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 17:10:52,439 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 17:10:52,440 DEBUG {conn-10005, pstmt-20000} executed. 0.899082 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 17:10:52,440 DEBUG {conn-10005, pstmt-20000, rs-50006} open
2019-08-15 17:10:52,440 DEBUG {conn-10005, pstmt-20000, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:10:52,440 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:10:52,441 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:10:52,441 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:10:52,441 DEBUG {conn-10005, pstmt-20000, rs-50006} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:10:52,442 DEBUG {conn-10005, pstmt-20000, rs-50006} closed
2019-08-15 17:10:52,442 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 17:10:52,442 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:52,442 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:52,443 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 17:10:52,443 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 17:10:52,444 DEBUG {conn-10005, pstmt-20001} executed. 1.188495 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 17:10:52,444 DEBUG {conn-10005, pstmt-20001, rs-50007} open
2019-08-15 17:10:52,444 DEBUG {conn-10005, pstmt-20001, rs-50007} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:10:52,444 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:10:52,445 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:10:52,445 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:10:52,446 DEBUG {conn-10005, pstmt-20001, rs-50007} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:10:52,448 DEBUG {conn-10005, pstmt-20001, rs-50007} closed
2019-08-15 17:10:52,448 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 17:10:52,448 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:52,449 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:52,450 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 17:10:52,450 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 17:10:52,450 DEBUG {conn-10005, pstmt-20002} executed. 0.667243 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 17:10:52,450 DEBUG {conn-10005, pstmt-20002, rs-50008} open
2019-08-15 17:10:52,450 DEBUG {conn-10005, pstmt-20002, rs-50008} Header: [tag_id, tag_count, tag_name]
2019-08-15 17:10:52,450 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 17:10:52,451 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 17:10:52,451 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [139, 1, jqGrid]
2019-08-15 17:10:52,451 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [140, 1, spring security]
2019-08-15 17:10:52,451 DEBUG {conn-10005, pstmt-20002, rs-50008} Result: [141, 1, spring boot]
2019-08-15 17:10:52,451 DEBUG {conn-10005, pstmt-20002, rs-50008} closed
2019-08-15 17:10:52,451 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 17:10:52,451 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:52,451 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:52,451 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 17:10:52,451 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 17:10:52,452 DEBUG {conn-10005, pstmt-20003} executed. 0.368577 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 17:10:52,452 DEBUG {conn-10005, pstmt-20003, rs-50009} open
2019-08-15 17:10:52,452 DEBUG {conn-10005, pstmt-20003, rs-50009} Header: [config_name, config_value, create_time, update_time]
2019-08-15 17:10:52,452 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 17:10:52,452 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 17:10:52,452 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 17:10:52,452 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 17:10:52,453 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 17:10:52,453 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 17:10:52,453 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 17:10:52,453 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 17:10:52,453 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 17:10:52,453 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 17:10:52,454 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 17:10:52,454 DEBUG {conn-10005, pstmt-20003, rs-50009} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 17:10:52,454 DEBUG {conn-10005, pstmt-20003, rs-50009} closed
2019-08-15 17:10:52,454 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 17:10:52,454 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:52,539 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:52,539 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 17:10:52,539 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 17:10:52,540 DEBUG {conn-10005, pstmt-20004} executed. 0.61224 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 17:10:52,540 DEBUG {conn-10005, pstmt-20004, rs-50010} open
2019-08-15 17:10:52,540 DEBUG {conn-10005, pstmt-20004, rs-50010} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 17:10:52,540 DEBUG {conn-10005, pstmt-20004, rs-50010} closed
2019-08-15 17:10:52,540 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 17:10:52,540 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:58,722 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:58,722 DEBUG {conn-10005, pstmt-20006} created. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 17:10:58,722 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 17:10:58,722 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 17:10:58,724 DEBUG {conn-10005, pstmt-20006} executed. 1.832092 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 17:10:58,724 DEBUG {conn-10005, pstmt-20006, rs-50011} open
2019-08-15 17:10:58,724 DEBUG {conn-10005, pstmt-20006, rs-50011} Header: [count(*)]
2019-08-15 17:10:58,725 DEBUG {conn-10005, pstmt-20006, rs-50011} Result: [4]
2019-08-15 17:10:58,726 DEBUG {conn-10005, pstmt-20006, rs-50011} closed
2019-08-15 17:10:58,726 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 17:10:58,727 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:58,727 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:58,728 DEBUG {conn-10005, pstmt-20007} created. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 17:10:58,728 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 17:10:58,728 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 17:10:58,729 DEBUG {conn-10005, pstmt-20007} executed. 0.574714 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 17:10:58,729 DEBUG {conn-10005, pstmt-20007, rs-50012} open
2019-08-15 17:10:58,729 DEBUG {conn-10005, pstmt-20007, rs-50012} Header: [count(*)]
2019-08-15 17:10:58,729 DEBUG {conn-10005, pstmt-20007, rs-50012} Result: [4]
2019-08-15 17:10:58,729 DEBUG {conn-10005, pstmt-20007, rs-50012} closed
2019-08-15 17:10:58,729 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 17:10:58,729 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:58,732 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:58,732 DEBUG {conn-10005, pstmt-20008} created. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 17:10:58,732 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 17:10:58,732 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 17:10:58,733 DEBUG {conn-10005, pstmt-20008} executed. 1.252238 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 17:10:58,734 DEBUG {conn-10005, pstmt-20008, rs-50013} open
2019-08-15 17:10:58,734 DEBUG {conn-10005, pstmt-20008, rs-50013} Header: [count(*)]
2019-08-15 17:10:58,734 DEBUG {conn-10005, pstmt-20008, rs-50013} Result: [27]
2019-08-15 17:10:58,734 DEBUG {conn-10005, pstmt-20008, rs-50013} closed
2019-08-15 17:10:58,734 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 17:10:58,734 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:58,734 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:58,735 DEBUG {conn-10005, pstmt-20009} created. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 17:10:58,735 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 17:10:58,735 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 17:10:58,735 DEBUG {conn-10005, pstmt-20009} executed. 0.531533 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 17:10:58,736 DEBUG {conn-10005, pstmt-20009, rs-50014} open
2019-08-15 17:10:58,736 DEBUG {conn-10005, pstmt-20009, rs-50014} Header: [count(*)]
2019-08-15 17:10:58,736 DEBUG {conn-10005, pstmt-20009, rs-50014} Result: [16]
2019-08-15 17:10:58,736 DEBUG {conn-10005, pstmt-20009, rs-50014} closed
2019-08-15 17:10:58,736 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 17:10:58,736 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:58,736 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:58,737 DEBUG {conn-10005, pstmt-20010} created. select count(*)  from tb_admin_user
2019-08-15 17:10:58,737 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 17:10:58,737 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 17:10:58,738 DEBUG {conn-10005, pstmt-20010} executed. 0.656448 millis. select count(*)  from tb_admin_user
2019-08-15 17:10:58,738 DEBUG {conn-10005, pstmt-20010, rs-50015} open
2019-08-15 17:10:58,738 DEBUG {conn-10005, pstmt-20010, rs-50015} Header: [count(*)]
2019-08-15 17:10:58,738 DEBUG {conn-10005, pstmt-20010, rs-50015} Result: [3]
2019-08-15 17:10:58,738 DEBUG {conn-10005, pstmt-20010, rs-50015} closed
2019-08-15 17:10:58,738 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 17:10:58,739 DEBUG {conn-10005} pool-recycle
2019-08-15 17:10:58,739 DEBUG {conn-10005} pool-connect
2019-08-15 17:10:58,740 DEBUG {conn-10005, pstmt-20011} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 17:10:58,741 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 17:10:58,741 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 17:10:58,743 DEBUG {conn-10005, pstmt-20011} executed. 2.494709 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 17:10:58,743 DEBUG {conn-10005, pstmt-20011, rs-50016} open
2019-08-15 17:10:58,743 DEBUG {conn-10005, pstmt-20011, rs-50016} Header: [count(*)]
2019-08-15 17:10:58,743 DEBUG {conn-10005, pstmt-20011, rs-50016} Result: [5]
2019-08-15 17:10:58,744 DEBUG {conn-10005, pstmt-20011, rs-50016} closed
2019-08-15 17:10:58,744 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 17:10:58,744 DEBUG {conn-10005} pool-recycle
2019-08-15 17:11:00,066 DEBUG {conn-10005} pool-connect
2019-08-15 17:11:00,067 DEBUG {conn-10005, pstmt-20012} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 17:11:00,067 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 17:11:00,067 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 17:11:00,067 DEBUG {conn-10005, pstmt-20012} executed. 0.674954 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 17:11:00,067 DEBUG {conn-10005, pstmt-20012, rs-50017} open
2019-08-15 17:11:00,067 DEBUG {conn-10005, pstmt-20012, rs-50017} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 17:11:00,068 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 17:11:00,068 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 20, 0, 2018-11-12 18:42:25.0]
2019-08-15 17:11:00,068 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 17:11:00,068 DEBUG {conn-10005, pstmt-20012, rs-50017} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 17:11:00,068 DEBUG {conn-10005, pstmt-20012, rs-50017} closed
2019-08-15 17:11:00,068 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 17:11:00,069 DEBUG {conn-10005} pool-recycle
2019-08-15 17:11:21,887 DEBUG {conn-10005} pool-connect
2019-08-15 17:11:21,888 DEBUG {conn-10005} setAutoCommit false
2019-08-15 17:11:21,897 DEBUG {conn-10005, pstmt-20013} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 17:11:21,898 DEBUG {conn-10005, pstmt-20013} Parameters : [24]
2019-08-15 17:11:21,898 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER]
2019-08-15 17:11:21,898 DEBUG {conn-10005, pstmt-20013} executed. 0.539244 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 17:11:21,898 DEBUG {conn-10005, pstmt-20013, rs-50018} open
2019-08-15 17:11:21,898 DEBUG {conn-10005, pstmt-20013, rs-50018} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 17:11:21,898 DEBUG {conn-10005, pstmt-20013, rs-50018} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 17:11:21,899 DEBUG {conn-10005, pstmt-20013, rs-50018} closed
2019-08-15 17:11:21,899 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 17:11:21,908 DEBUG {conn-10005, pstmt-20014} created. insert into tb_blog
     ( blog_title,
      
      
        blog_sub_url,
      
      
        blog_cover_image,
      
      
        blog_category_id,
      
      
        blog_category_name,
      
      
        blog_tags,
      
      
        blog_status,
      
      
      
        enable_comment,
      
      
      
      
      
        blog_vote_size,
      
      
        blog_content,
      
       
         blog_summary ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
        ?,
      
      
      
      
      
        ?,
      
      
        ?,
      
       
        ? )
2019-08-15 17:11:21,910 DEBUG {conn-10005, pstmt-20014} Parameters : [test22, dfgdf, http://localhost/admin/dist/img/rand/39.jpg, 24, 日常随笔, spring boot, 1, 0, 0, sdgdffffffffffffffff哈哈哈哈哈哈哈哈哈哈或或或或或, gsdgdf]
2019-08-15 17:11:21,910 DEBUG {conn-10005, pstmt-20014} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, TINYINT, INTEGER, VARCHAR, VARCHAR]
2019-08-15 17:11:21,911 DEBUG {conn-10005, pstmt-20014} executed. 1.13452 millis. insert into tb_blog
     ( blog_title,
      
      
        blog_sub_url,
      
      
        blog_cover_image,
      
      
        blog_category_id,
      
      
        blog_category_name,
      
      
        blog_tags,
      
      
        blog_status,
      
      
      
        enable_comment,
      
      
      
      
      
        blog_vote_size,
      
      
        blog_content,
      
       
         blog_summary ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
        ?,
      
      
      
      
      
        ?,
      
      
        ?,
      
       
        ? )
2019-08-15 17:11:21,911 DEBUG {conn-10005, pstmt-20014, rs-50019} open
2019-08-15 17:11:21,911 DEBUG {conn-10005, pstmt-20014, rs-50019} Header: [GENERATED_KEY]
2019-08-15 17:11:21,913 DEBUG {conn-10005, pstmt-20014, rs-50019} Result: [27]
2019-08-15 17:11:21,913 DEBUG {conn-10005, pstmt-20014, rs-50019} closed
2019-08-15 17:11:21,913 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 17:11:21,914 DEBUG {conn-10005, pstmt-20015} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   ,
     
    blog_content
   
    from tb_blog where blog_title = ?
2019-08-15 17:11:21,914 DEBUG {conn-10005, pstmt-20015} Parameters : [test22]
2019-08-15 17:11:21,914 DEBUG {conn-10005, pstmt-20015} Types : [VARCHAR]
2019-08-15 17:11:21,915 DEBUG {conn-10005, pstmt-20015} executed. 0.630745 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   ,
     
    blog_content
   
    from tb_blog where blog_title = ?
2019-08-15 17:11:21,915 DEBUG {conn-10005, pstmt-20015, rs-50020} open
2019-08-15 17:11:21,915 DEBUG {conn-10005, pstmt-20015, rs-50020} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 17:11:21,915 DEBUG {conn-10005, pstmt-20015, rs-50020} Result: [27, test22, dfgdf, http://localhost/admin/dist/img/rand/39.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:11:21.0, 2019-08-16 01:11:21.0, 0, gsdgdf, sdgdffffffffffffffff哈哈哈哈哈哈哈哈哈哈或或或或或]
2019-08-15 17:11:21,915 DEBUG {conn-10005, pstmt-20015, rs-50020} closed
2019-08-15 17:11:21,916 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 17:11:21,916 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 17:11:21,916 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 17:11:21,916 DEBUG {conn-10005, pstmt-20005} executed. 0.463677 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 17:11:21,916 DEBUG {conn-10005, pstmt-20005, rs-50021} open
2019-08-15 17:11:21,916 DEBUG {conn-10005, pstmt-20005, rs-50021} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 17:11:21,916 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 17:11:21,917 DEBUG {conn-10005, pstmt-20005, rs-50021} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 17:11:21,917 DEBUG {conn-10005, pstmt-20005, rs-50021} closed
2019-08-15 17:11:21,917 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 17:11:21,926 DEBUG {conn 10005} rollback
2019-08-15 17:11:21,926 DEBUG {conn-10005} setAutoCommit true
2019-08-15 17:11:21,932 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:46,383 DEBUG {conn-10001,procId-37} connected
2019-08-15 17:14:46,391 DEBUG {conn-10002,procId-38} connected
2019-08-15 17:14:46,397 DEBUG {conn-10003,procId-39} connected
2019-08-15 17:14:46,403 DEBUG {conn-10004,procId-40} connected
2019-08-15 17:14:46,408 DEBUG {conn-10005,procId-41} connected
2019-08-15 17:14:46,414 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:46,417 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:46,426 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:46,428 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:46,856 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:46,906 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:47,609 INFO [Shathra] modules [], plugins [], sites []
2019-08-15 17:14:47,622 DEBUG [Shathra] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
2019-08-15 17:14:47,634 DEBUG [Shathra] creating thread_pool [percolate], type [fixed], size [8], queue_size [1k]
2019-08-15 17:14:47,647 DEBUG [Shathra] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 17:14:47,648 DEBUG [Shathra] creating thread_pool [listener], type [fixed], size [4], queue_size [null]
2019-08-15 17:14:47,648 DEBUG [Shathra] creating thread_pool [index], type [fixed], size [8], queue_size [200]
2019-08-15 17:14:47,648 DEBUG [Shathra] creating thread_pool [refresh], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 17:14:47,648 DEBUG [Shathra] creating thread_pool [suggest], type [fixed], size [8], queue_size [1k]
2019-08-15 17:14:47,648 DEBUG [Shathra] creating thread_pool [generic], type [cached], keep_alive [30s]
2019-08-15 17:14:47,648 DEBUG [Shathra] creating thread_pool [warmer], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 17:14:47,649 DEBUG [Shathra] creating thread_pool [search], type [fixed], size [13], queue_size [1k]
2019-08-15 17:14:47,649 DEBUG [Shathra] creating thread_pool [flush], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 17:14:47,649 DEBUG [Shathra] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [16], keep_alive [5m]
2019-08-15 17:14:47,649 DEBUG [Shathra] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
2019-08-15 17:14:47,649 DEBUG [Shathra] creating thread_pool [get], type [fixed], size [8], queue_size [1k]
2019-08-15 17:14:47,649 DEBUG [Shathra] creating thread_pool [bulk], type [fixed], size [8], queue_size [50]
2019-08-15 17:14:47,649 DEBUG [Shathra] creating thread_pool [snapshot], type [scaling], min [1], size [4], keep_alive [5m]
2019-08-15 17:14:49,074 DEBUG configuration:

lo
        Software Loopback Interface 1
        inet 127.0.0.1 netmask:255.0.0.0 broadcast:127.255.255.255 scope:host
        inet6 ::1 prefixlen:128 scope:host
        UP MULTICAST LOOPBACK mtu:-1 index:1

net0
        Microsoft 6to4 Adapter
        MULTICAST mtu:-1 index:2

eth0
        WAN Miniport (IPv6)
        MULTICAST mtu:-1 index:3

net1
        WAN Miniport (L2TP)
        MULTICAST mtu:-1 index:4

net2
        WAN Miniport (PPTP)
        MULTICAST mtu:-1 index:5

net3
        Microsoft IP-HTTPS Platform Adapter
        MULTICAST mtu:-1 index:6

wlan0
        Intel(R) Dual Band Wireless-AC 8265
        inet 192.168.1.3 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
        inet6 2409:8a55:5263:75d0:2c77:9a3:6b46:aeb9 prefixlen:64
        inet6 2409:8a55:5263:75d0:51d9:691:64d9:afc4 prefixlen:128
        inet6 fe80::2c77:9a3:6b46:aeb9 prefixlen:128 scope:link
        hardware 7C:2A:31:3A:77:8F
        UP MULTICAST mtu:1500 index:7

net4
        Bluetooth Device (RFCOMM Protocol TDI)
        MULTICAST mtu:-1 index:8

eth1
        Bluetooth Device (Personal Area Network) #2
        inet6 fe80::109a:721d:76d4:8374 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:93
        MULTICAST mtu:1500 index:9

eth2
        Bluetooth Device (Personal Area Network)
        MULTICAST mtu:-1 index:10

wlan1
        Microsoft Wi-Fi Direct Virtual Adapter #2
        inet6 fe80::cc82:adc3:7881:391b prefixlen:64 scope:link
        hardware 7E:2A:31:3A:77:8F
        MULTICAST mtu:1500 index:11

eth3
        Microsoft Kernel Debug Network Adapter
        MULTICAST mtu:-1 index:12

eth4
        VMware Virtual Ethernet Adapter for VMnet1
        inet 192.168.10.1 netmask:255.255.255.0 broadcast:192.168.10.255 scope:site
        inet6 fe80::88d:2b7f:7946:d786 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:01
        UP MULTICAST mtu:1500 index:13

net5
        Microsoft Teredo Tunneling Adapter
        MULTICAST mtu:-1 index:14

eth5
        WAN Miniport (IP)
        MULTICAST mtu:-1 index:15

net6
        WAN Miniport (SSTP)
        MULTICAST mtu:-1 index:16

net7
        WAN Miniport (IKEv2)
        MULTICAST mtu:-1 index:17

eth6
        WAN Miniport (Network Monitor)
        MULTICAST mtu:-1 index:18

ppp0
        WAN Miniport (PPPOE)
        MULTICAST mtu:-1 index:19

wlan2
        Microsoft Wi-Fi Direct Virtual Adapter
        inet6 fe80::ed81:dc76:c445:6ce5 prefixlen:64 scope:link
        hardware 7C:2A:31:3A:77:90
        MULTICAST mtu:1500 index:20

eth7
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter #2
        MULTICAST mtu:-1 index:21

eth8
        ASIX AX88179 USB 3.0 to Gigabit Ethernet Adapter
        MULTICAST mtu:-1 index:22

eth9
        VMware Virtual Ethernet Adapter for VMnet8
        inet 192.168.80.1 netmask:255.255.255.0 broadcast:192.168.80.255 scope:site
        inet6 fe80::1c42:d67f:7f9d:8491 prefixlen:64 scope:link
        hardware 00:50:56:C0:00:08
        UP MULTICAST mtu:1500 index:23

wlan3
        Intel(R) Dual Band Wireless-AC 8265-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:24

wlan4
        Intel(R) Dual Band Wireless-AC 8265-Virtual WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:25

wlan5
        Intel(R) Dual Band Wireless-AC 8265-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:26

wlan6
        Intel(R) Dual Band Wireless-AC 8265-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:27

wlan7
        Intel(R) Dual Band Wireless-AC 8265-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:28

eth10
        WAN Miniport (IPv6)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:29

eth11
        WAN Miniport (IPv6)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:30

eth12
        WAN Miniport (IP)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:31

eth13
        WAN Miniport (IP)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:32

eth14
        WAN Miniport (Network Monitor)-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:33

eth15
        WAN Miniport (Network Monitor)-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:34

wlan8
        Microsoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:35

wlan9
        Microsoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:36

wlan10
        Microsoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:37

wlan11
        Microsoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:38

wlan12
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP Native MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:39

wlan13
        Microsoft Wi-Fi Direct Virtual Adapter #2-Native WiFi Filter Driver-0000
        MULTICAST mtu:-1 index:40

wlan14
        Microsoft Wi-Fi Direct Virtual Adapter #2-QoS Packet Scheduler-0000
        MULTICAST mtu:-1 index:41

wlan15
        Microsoft Wi-Fi Direct Virtual Adapter #2-WFP 802.3 MAC Layer LightWeight Filter-0000
        MULTICAST mtu:-1 index:42

2019-08-15 17:14:49,093 DEBUG using gathering [true]
2019-08-15 17:14:49,115 DEBUG [Shathra] node_sampler_interval[5s]
2019-08-15 17:14:49,128 DEBUG Using select timeout of 500
2019-08-15 17:14:49,128 DEBUG Epoll-bug workaround enabled = false
2019-08-15 17:14:49,174 DEBUG [Shathra] adding address [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 17:14:49,199 DEBUG [Shathra] connected to node [{#transport#-1}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 17:14:49,234 DEBUG [Shathra] connected to node [{Maximus}{qvkqYeT2R3qndm3-HpsGMQ}{127.0.0.1}{127.0.0.1:9300}]
2019-08-15 17:14:49,955 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:49,956 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:56,240 DEBUG using decoder[VanillaChunkDecoder] 
2019-08-15 17:14:56,349 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:56,459 DEBUG {conn-10005, pstmt-20000} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 17:14:56,467 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 17:14:56,467 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 17:14:56,469 DEBUG {conn-10005, pstmt-20000} executed. 5.424822 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 17:14:56,473 DEBUG {conn-10005, pstmt-20000, rs-50000} open
2019-08-15 17:14:56,475 DEBUG {conn-10005, pstmt-20000, rs-50000} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:14:56,481 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:14:56,484 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:14:56,484 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:14:56,484 DEBUG {conn-10005, pstmt-20000, rs-50000} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:14:56,485 DEBUG {conn-10005, pstmt-20000, rs-50000} closed
2019-08-15 17:14:56,485 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 17:14:56,486 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:56,491 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:56,491 DEBUG {conn-10005, pstmt-20001} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 17:14:56,491 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 17:14:56,491 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 17:14:56,492 DEBUG {conn-10005, pstmt-20001} executed. 1.07746 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 17:14:56,493 DEBUG {conn-10005, pstmt-20001, rs-50001} open
2019-08-15 17:14:56,493 DEBUG {conn-10005, pstmt-20001, rs-50001} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:14:56,493 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:14:56,494 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:14:56,494 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:14:56,495 DEBUG {conn-10005, pstmt-20001, rs-50001} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:14:56,495 DEBUG {conn-10005, pstmt-20001, rs-50001} closed
2019-08-15 17:14:56,495 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 17:14:56,495 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:56,496 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:56,500 DEBUG {conn-10005, pstmt-20002} created. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 17:14:56,501 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 17:14:56,501 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 17:14:56,503 DEBUG {conn-10005, pstmt-20002} executed. 2.393954 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 17:14:56,503 DEBUG {conn-10005, pstmt-20002, rs-50002} open
2019-08-15 17:14:56,503 DEBUG {conn-10005, pstmt-20002, rs-50002} Header: [tag_id, tag_count, tag_name]
2019-08-15 17:14:56,504 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 17:14:56,504 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 17:14:56,504 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [139, 1, jqGrid]
2019-08-15 17:14:56,504 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [140, 1, spring security]
2019-08-15 17:14:56,504 DEBUG {conn-10005, pstmt-20002, rs-50002} Result: [141, 1, spring boot]
2019-08-15 17:14:56,505 DEBUG {conn-10005, pstmt-20002, rs-50002} closed
2019-08-15 17:14:56,505 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 17:14:56,505 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:56,508 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:56,508 DEBUG {conn-10005, pstmt-20003} created. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 17:14:56,509 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 17:14:56,509 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 17:14:56,510 DEBUG {conn-10005, pstmt-20003} executed. 1.618245 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 17:14:56,510 DEBUG {conn-10005, pstmt-20003, rs-50003} open
2019-08-15 17:14:56,510 DEBUG {conn-10005, pstmt-20003, rs-50003} Header: [config_name, config_value, create_time, update_time]
2019-08-15 17:14:56,511 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 17:14:56,511 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 17:14:56,511 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 17:14:56,512 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 17:14:56,512 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 17:14:56,512 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 17:14:56,513 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 17:14:56,513 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 17:14:56,513 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 17:14:56,513 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 17:14:56,513 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 17:14:56,514 DEBUG {conn-10005, pstmt-20003, rs-50003} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 17:14:56,514 DEBUG {conn-10005, pstmt-20003, rs-50003} closed
2019-08-15 17:14:56,514 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 17:14:56,514 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:56,597 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:56,598 DEBUG {conn-10005, pstmt-20004} created. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 17:14:56,599 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 17:14:56,599 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 17:14:56,601 DEBUG {conn-10005, pstmt-20004} executed. 1.641891 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 17:14:56,601 DEBUG {conn-10005, pstmt-20004, rs-50004} open
2019-08-15 17:14:56,601 DEBUG {conn-10005, pstmt-20004, rs-50004} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 17:14:56,601 DEBUG {conn-10005, pstmt-20004, rs-50004} closed
2019-08-15 17:14:56,601 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 17:14:56,602 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:58,704 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:58,705 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 17:14:58,705 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 17:14:58,706 DEBUG {conn-10005, pstmt-20000} executed. 1.034793 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 17:14:58,706 DEBUG {conn-10005, pstmt-20000, rs-50005} open
2019-08-15 17:14:58,706 DEBUG {conn-10005, pstmt-20000, rs-50005} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:14:58,706 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:14:58,707 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:14:58,707 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:14:58,708 DEBUG {conn-10005, pstmt-20000, rs-50005} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:14:58,708 DEBUG {conn-10005, pstmt-20000, rs-50005} closed
2019-08-15 17:14:58,708 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 17:14:58,708 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:58,709 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:58,709 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 17:14:58,709 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 17:14:58,710 DEBUG {conn-10005, pstmt-20001} executed. 0.847163 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 17:14:58,710 DEBUG {conn-10005, pstmt-20001, rs-50006} open
2019-08-15 17:14:58,710 DEBUG {conn-10005, pstmt-20001, rs-50006} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:14:58,710 DEBUG {conn-10005, pstmt-20001, rs-50006} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:14:58,711 DEBUG {conn-10005, pstmt-20001, rs-50006} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:14:58,711 DEBUG {conn-10005, pstmt-20001, rs-50006} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:14:58,712 DEBUG {conn-10005, pstmt-20001, rs-50006} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:14:58,715 DEBUG {conn-10005, pstmt-20001, rs-50006} closed
2019-08-15 17:14:58,715 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 17:14:58,715 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:58,717 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:58,718 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 17:14:58,718 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 17:14:58,718 DEBUG {conn-10005, pstmt-20002} executed. 0.850247 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 17:14:58,719 DEBUG {conn-10005, pstmt-20002, rs-50007} open
2019-08-15 17:14:58,719 DEBUG {conn-10005, pstmt-20002, rs-50007} Header: [tag_id, tag_count, tag_name]
2019-08-15 17:14:58,719 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 17:14:58,719 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 17:14:58,719 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [139, 1, jqGrid]
2019-08-15 17:14:58,719 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [140, 1, spring security]
2019-08-15 17:14:58,719 DEBUG {conn-10005, pstmt-20002, rs-50007} Result: [141, 1, spring boot]
2019-08-15 17:14:58,719 DEBUG {conn-10005, pstmt-20002, rs-50007} closed
2019-08-15 17:14:58,719 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 17:14:58,720 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:58,720 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:58,720 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 17:14:58,720 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 17:14:58,720 DEBUG {conn-10005, pstmt-20003} executed. 0.48424 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 17:14:58,720 DEBUG {conn-10005, pstmt-20003, rs-50008} open
2019-08-15 17:14:58,720 DEBUG {conn-10005, pstmt-20003, rs-50008} Header: [config_name, config_value, create_time, update_time]
2019-08-15 17:14:58,720 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 17:14:58,721 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 17:14:58,721 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 17:14:58,721 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 17:14:58,722 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 17:14:58,722 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 17:14:58,722 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 17:14:58,722 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 17:14:58,723 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 17:14:58,723 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 17:14:58,723 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 17:14:58,723 DEBUG {conn-10005, pstmt-20003, rs-50008} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 17:14:58,723 DEBUG {conn-10005, pstmt-20003, rs-50008} closed
2019-08-15 17:14:58,724 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 17:14:58,724 DEBUG {conn-10005} pool-recycle
2019-08-15 17:14:58,767 DEBUG {conn-10005} pool-connect
2019-08-15 17:14:58,768 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 17:14:58,768 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 17:14:58,768 DEBUG {conn-10005, pstmt-20004} executed. 0.664673 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 17:14:58,768 DEBUG {conn-10005, pstmt-20004, rs-50009} open
2019-08-15 17:14:58,768 DEBUG {conn-10005, pstmt-20004, rs-50009} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 17:14:58,769 DEBUG {conn-10005, pstmt-20004, rs-50009} closed
2019-08-15 17:14:58,769 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 17:14:58,769 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:13,006 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:13,006 DEBUG {conn-10005, pstmt-20005} created. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 17:15:13,007 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 17:15:13,007 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 17:15:13,011 DEBUG {conn-10005, pstmt-20005} executed. 3.807092 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 17:15:13,011 DEBUG {conn-10005, pstmt-20005, rs-50010} open
2019-08-15 17:15:13,011 DEBUG {conn-10005, pstmt-20005, rs-50010} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 17:15:13,011 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 17:15:13,012 DEBUG {conn-10005, pstmt-20005, rs-50010} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 17:15:13,012 DEBUG {conn-10005, pstmt-20005, rs-50010} closed
2019-08-15 17:15:13,012 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 17:15:13,012 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:13,130 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:13,130 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 17:15:13,130 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 17:15:13,130 DEBUG {conn-10005, pstmt-20000} executed. 0.660561 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 17:15:13,130 DEBUG {conn-10005, pstmt-20000, rs-50011} open
2019-08-15 17:15:13,130 DEBUG {conn-10005, pstmt-20000, rs-50011} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:15:13,131 DEBUG {conn-10005, pstmt-20000, rs-50011} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:15:13,131 DEBUG {conn-10005, pstmt-20000, rs-50011} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:15:13,131 DEBUG {conn-10005, pstmt-20000, rs-50011} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:15:13,132 DEBUG {conn-10005, pstmt-20000, rs-50011} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:15:13,132 DEBUG {conn-10005, pstmt-20000, rs-50011} closed
2019-08-15 17:15:13,132 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 17:15:13,132 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:13,133 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:13,134 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 17:15:13,134 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 17:15:13,134 DEBUG {conn-10005, pstmt-20001} executed. 0.781364 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 17:15:13,135 DEBUG {conn-10005, pstmt-20001, rs-50012} open
2019-08-15 17:15:13,135 DEBUG {conn-10005, pstmt-20001, rs-50012} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:15:13,135 DEBUG {conn-10005, pstmt-20001, rs-50012} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:15:13,135 DEBUG {conn-10005, pstmt-20001, rs-50012} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:15:13,136 DEBUG {conn-10005, pstmt-20001, rs-50012} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:15:13,136 DEBUG {conn-10005, pstmt-20001, rs-50012} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:15:13,136 DEBUG {conn-10005, pstmt-20001, rs-50012} closed
2019-08-15 17:15:13,136 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 17:15:13,136 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:13,136 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:13,136 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 17:15:13,136 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 17:15:13,137 DEBUG {conn-10005, pstmt-20002} executed. 0.748979 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 17:15:13,137 DEBUG {conn-10005, pstmt-20002, rs-50013} open
2019-08-15 17:15:13,137 DEBUG {conn-10005, pstmt-20002, rs-50013} Header: [tag_id, tag_count, tag_name]
2019-08-15 17:15:13,137 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 17:15:13,137 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 17:15:13,138 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [139, 1, jqGrid]
2019-08-15 17:15:13,138 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [140, 1, spring security]
2019-08-15 17:15:13,138 DEBUG {conn-10005, pstmt-20002, rs-50013} Result: [141, 1, spring boot]
2019-08-15 17:15:13,138 DEBUG {conn-10005, pstmt-20002, rs-50013} closed
2019-08-15 17:15:13,138 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 17:15:13,138 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:13,138 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:13,138 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 17:15:13,138 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 17:15:13,139 DEBUG {conn-10005, pstmt-20003} executed. 0.470874 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 17:15:13,139 DEBUG {conn-10005, pstmt-20003, rs-50014} open
2019-08-15 17:15:13,139 DEBUG {conn-10005, pstmt-20003, rs-50014} Header: [config_name, config_value, create_time, update_time]
2019-08-15 17:15:13,139 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 17:15:13,139 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 17:15:13,139 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 17:15:13,140 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 17:15:13,140 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 17:15:13,140 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 17:15:13,140 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 17:15:13,140 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 17:15:13,140 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 17:15:13,140 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 17:15:13,140 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 17:15:13,141 DEBUG {conn-10005, pstmt-20003, rs-50014} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 17:15:13,141 DEBUG {conn-10005, pstmt-20003, rs-50014} closed
2019-08-15 17:15:13,141 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 17:15:13,141 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:13,191 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:13,191 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 17:15:13,191 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 17:15:13,192 DEBUG {conn-10005, pstmt-20004} executed. 0.670842 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 17:15:13,192 DEBUG {conn-10005, pstmt-20004, rs-50015} open
2019-08-15 17:15:13,192 DEBUG {conn-10005, pstmt-20004, rs-50015} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 17:15:13,192 DEBUG {conn-10005, pstmt-20004, rs-50015} closed
2019-08-15 17:15:13,192 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 17:15:13,192 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:18,664 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:18,665 DEBUG {conn-10005, pstmt-20006} created. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 17:15:18,665 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 17:15:18,665 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 17:15:18,667 DEBUG {conn-10005, pstmt-20006} executed. 1.921538 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 17:15:18,667 DEBUG {conn-10005, pstmt-20006, rs-50016} open
2019-08-15 17:15:18,667 DEBUG {conn-10005, pstmt-20006, rs-50016} Header: [count(*)]
2019-08-15 17:15:18,667 DEBUG {conn-10005, pstmt-20006, rs-50016} Result: [4]
2019-08-15 17:15:18,671 DEBUG {conn-10005, pstmt-20006, rs-50016} closed
2019-08-15 17:15:18,671 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 17:15:18,672 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:18,672 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:18,673 DEBUG {conn-10005, pstmt-20007} created. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 17:15:18,673 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 17:15:18,673 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 17:15:18,673 DEBUG {conn-10005, pstmt-20007} executed. 0.510971 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 17:15:18,674 DEBUG {conn-10005, pstmt-20007, rs-50017} open
2019-08-15 17:15:18,674 DEBUG {conn-10005, pstmt-20007, rs-50017} Header: [count(*)]
2019-08-15 17:15:18,674 DEBUG {conn-10005, pstmt-20007, rs-50017} Result: [4]
2019-08-15 17:15:18,674 DEBUG {conn-10005, pstmt-20007, rs-50017} closed
2019-08-15 17:15:18,674 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 17:15:18,674 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:18,676 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:18,677 DEBUG {conn-10005, pstmt-20008} created. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 17:15:18,677 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 17:15:18,677 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 17:15:18,678 DEBUG {conn-10005, pstmt-20008} executed. 1.137604 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 17:15:18,678 DEBUG {conn-10005, pstmt-20008, rs-50018} open
2019-08-15 17:15:18,678 DEBUG {conn-10005, pstmt-20008, rs-50018} Header: [count(*)]
2019-08-15 17:15:18,678 DEBUG {conn-10005, pstmt-20008, rs-50018} Result: [27]
2019-08-15 17:15:18,679 DEBUG {conn-10005, pstmt-20008, rs-50018} closed
2019-08-15 17:15:18,679 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 17:15:18,679 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:18,679 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:18,679 DEBUG {conn-10005, pstmt-20009} created. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 17:15:18,679 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 17:15:18,679 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 17:15:18,680 DEBUG {conn-10005, pstmt-20009} executed. 0.774681 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 17:15:18,680 DEBUG {conn-10005, pstmt-20009, rs-50019} open
2019-08-15 17:15:18,680 DEBUG {conn-10005, pstmt-20009, rs-50019} Header: [count(*)]
2019-08-15 17:15:18,681 DEBUG {conn-10005, pstmt-20009, rs-50019} Result: [16]
2019-08-15 17:15:18,681 DEBUG {conn-10005, pstmt-20009, rs-50019} closed
2019-08-15 17:15:18,681 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 17:15:18,681 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:18,682 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:18,682 DEBUG {conn-10005, pstmt-20010} created. select count(*)  from tb_admin_user
2019-08-15 17:15:18,682 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 17:15:18,682 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 17:15:18,683 DEBUG {conn-10005, pstmt-20010} executed. 0.661075 millis. select count(*)  from tb_admin_user
2019-08-15 17:15:18,683 DEBUG {conn-10005, pstmt-20010, rs-50020} open
2019-08-15 17:15:18,683 DEBUG {conn-10005, pstmt-20010, rs-50020} Header: [count(*)]
2019-08-15 17:15:18,683 DEBUG {conn-10005, pstmt-20010, rs-50020} Result: [3]
2019-08-15 17:15:18,684 DEBUG {conn-10005, pstmt-20010, rs-50020} closed
2019-08-15 17:15:18,684 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 17:15:18,684 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:18,685 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:18,686 DEBUG {conn-10005, pstmt-20011} created. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 17:15:18,686 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 17:15:18,686 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 17:15:18,687 DEBUG {conn-10005, pstmt-20011} executed. 1.444495 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 17:15:18,687 DEBUG {conn-10005, pstmt-20011, rs-50021} open
2019-08-15 17:15:18,687 DEBUG {conn-10005, pstmt-20011, rs-50021} Header: [count(*)]
2019-08-15 17:15:18,687 DEBUG {conn-10005, pstmt-20011, rs-50021} Result: [5]
2019-08-15 17:15:18,688 DEBUG {conn-10005, pstmt-20011, rs-50021} closed
2019-08-15 17:15:18,688 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 17:15:18,688 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:20,155 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:20,156 DEBUG {conn-10005, pstmt-20012} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 17:15:20,156 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 17:15:20,156 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 17:15:20,157 DEBUG {conn-10005, pstmt-20012} executed. 0.507373 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 17:15:20,157 DEBUG {conn-10005, pstmt-20012, rs-50022} open
2019-08-15 17:15:20,157 DEBUG {conn-10005, pstmt-20012, rs-50022} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 17:15:20,157 DEBUG {conn-10005, pstmt-20012, rs-50022} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 17:15:20,157 DEBUG {conn-10005, pstmt-20012, rs-50022} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 20, 0, 2018-11-12 18:42:25.0]
2019-08-15 17:15:20,157 DEBUG {conn-10005, pstmt-20012, rs-50022} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 17:15:20,157 DEBUG {conn-10005, pstmt-20012, rs-50022} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 17:15:20,157 DEBUG {conn-10005, pstmt-20012, rs-50022} closed
2019-08-15 17:15:20,157 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 17:15:20,158 DEBUG {conn-10005} pool-recycle
2019-08-15 17:15:40,422 DEBUG {conn-10005} pool-connect
2019-08-15 17:15:40,422 DEBUG {conn-10005} setAutoCommit false
2019-08-15 17:15:40,431 DEBUG {conn-10005, pstmt-20013} created. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 17:15:40,431 DEBUG {conn-10005, pstmt-20013} Parameters : [24]
2019-08-15 17:15:40,431 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER]
2019-08-15 17:15:40,432 DEBUG {conn-10005, pstmt-20013} executed. 0.809636 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 17:15:40,432 DEBUG {conn-10005, pstmt-20013, rs-50023} open
2019-08-15 17:15:40,432 DEBUG {conn-10005, pstmt-20013, rs-50023} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 17:15:40,433 DEBUG {conn-10005, pstmt-20013, rs-50023} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 26, 0, 2018-11-12 18:43:21.0]
2019-08-15 17:15:40,433 DEBUG {conn-10005, pstmt-20013, rs-50023} closed
2019-08-15 17:15:40,433 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 17:15:40,442 DEBUG {conn-10005, pstmt-20014} created. insert into tb_blog
     ( blog_title,
      
      
        blog_sub_url,
      
      
        blog_cover_image,
      
      
        blog_category_id,
      
      
        blog_category_name,
      
      
        blog_tags,
      
      
        blog_status,
      
      
      
        enable_comment,
      
      
      
      
      
        blog_vote_size,
      
      
        blog_content,
      
       
         blog_summary ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
        ?,
      
      
      
      
      
        ?,
      
      
        ?,
      
       
        ? )
2019-08-15 17:15:40,443 DEBUG {conn-10005, pstmt-20014} Parameters : [test22, sdd, http://localhost/admin/dist/img/rand/30.jpg, 24, 日常随笔, spring boot, 1, 0, 0, dgdssgdffffffffffffffffffffffffffffff, dfgdsf]
2019-08-15 17:15:40,443 DEBUG {conn-10005, pstmt-20014} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, TINYINT, INTEGER, VARCHAR, VARCHAR]
2019-08-15 17:15:40,444 DEBUG {conn-10005, pstmt-20014} executed. 1.046102 millis. insert into tb_blog
     ( blog_title,
      
      
        blog_sub_url,
      
      
        blog_cover_image,
      
      
        blog_category_id,
      
      
        blog_category_name,
      
      
        blog_tags,
      
      
        blog_status,
      
      
      
        enable_comment,
      
      
      
      
      
        blog_vote_size,
      
      
        blog_content,
      
       
         blog_summary ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
        ?,
      
      
      
      
      
        ?,
      
      
        ?,
      
       
        ? )
2019-08-15 17:15:40,444 DEBUG {conn-10005, pstmt-20014, rs-50024} open
2019-08-15 17:15:40,444 DEBUG {conn-10005, pstmt-20014, rs-50024} Header: [GENERATED_KEY]
2019-08-15 17:15:40,446 DEBUG {conn-10005, pstmt-20014, rs-50024} Result: [28]
2019-08-15 17:15:40,446 DEBUG {conn-10005, pstmt-20014, rs-50024} closed
2019-08-15 17:15:40,446 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 17:15:40,447 DEBUG {conn-10005, pstmt-20015} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   ,
     
    blog_content
   
    from tb_blog where blog_title = ?
2019-08-15 17:15:40,447 DEBUG {conn-10005, pstmt-20015} Parameters : [test22]
2019-08-15 17:15:40,447 DEBUG {conn-10005, pstmt-20015} Types : [VARCHAR]
2019-08-15 17:15:40,448 DEBUG {conn-10005, pstmt-20015} executed. 0.570087 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   ,
     
    blog_content
   
    from tb_blog where blog_title = ?
2019-08-15 17:15:40,448 DEBUG {conn-10005, pstmt-20015, rs-50025} open
2019-08-15 17:15:40,448 DEBUG {conn-10005, pstmt-20015, rs-50025} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 17:15:40,448 DEBUG {conn-10005, pstmt-20015, rs-50025} Result: [28, test22, sdd, http://localhost/admin/dist/img/rand/30.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:15:40.0, 2019-08-16 01:15:40.0, 0, dfgdsf, dgdssgdffffffffffffffffffffffffffffff]
2019-08-15 17:15:40,449 DEBUG {conn-10005, pstmt-20015, rs-50025} closed
2019-08-15 17:15:40,449 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 17:15:40,450 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 17:15:40,450 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 17:15:40,450 DEBUG {conn-10005, pstmt-20005} executed. 0.792673 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 17:15:40,451 DEBUG {conn-10005, pstmt-20005, rs-50026} open
2019-08-15 17:15:40,451 DEBUG {conn-10005, pstmt-20005, rs-50026} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 17:15:40,451 DEBUG {conn-10005, pstmt-20005, rs-50026} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 17:15:40,451 DEBUG {conn-10005, pstmt-20005, rs-50026} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 17:15:40,452 DEBUG {conn-10005, pstmt-20005, rs-50026} closed
2019-08-15 17:15:40,452 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 17:15:40,561 DEBUG {conn-10005, pstmt-20016} created. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 17:15:40,562 DEBUG {conn-10005, pstmt-20016} Parameters : [spring boot]
2019-08-15 17:15:40,562 DEBUG {conn-10005, pstmt-20016} Types : [VARCHAR]
2019-08-15 17:15:40,562 DEBUG {conn-10005, pstmt-20016} executed. 0.425123 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 17:15:40,562 DEBUG {conn-10005, pstmt-20016, rs-50027} open
2019-08-15 17:15:40,562 DEBUG {conn-10005, pstmt-20016, rs-50027} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 17:15:40,562 DEBUG {conn-10005, pstmt-20016, rs-50027} Result: [141, spring boot, 0, 2019-08-16 01:01:11.0]
2019-08-15 17:15:40,563 DEBUG {conn-10005, pstmt-20016, rs-50027} closed
2019-08-15 17:15:40,563 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 17:15:40,566 DEBUG {conn-10005, pstmt-20017} created. update tb_blog_category
     SET category_name = ?,
      
      
        category_icon = ?,
      
      
        category_rank = ?,
      
      
        is_deleted = ?,
      
      
        create_time = ? 
    where category_id = ?
2019-08-15 17:15:40,568 DEBUG {conn-10005, pstmt-20017} Parameters : [日常随笔, /admin/dist/img/category/06.png, 27, 0, 2018-11-12 18:43:21.0, 24]
2019-08-15 17:15:40,568 DEBUG {conn-10005, pstmt-20017} Types : [VARCHAR, VARCHAR, INTEGER, TINYINT, TIMESTAMP, INTEGER]
2019-08-15 17:15:40,569 DEBUG {conn-10005, pstmt-20017} executed. 1.337058 millis. update tb_blog_category
     SET category_name = ?,
      
      
        category_icon = ?,
      
      
        category_rank = ?,
      
      
        is_deleted = ?,
      
      
        create_time = ? 
    where category_id = ?
2019-08-15 17:15:40,569 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-15 17:15:40,573 DEBUG {conn-10005, pstmt-20018} created. INSERT into tb_blog_tag_relation(blog_id,tag_id)
    VALUES
      
      (?,?)
2019-08-15 17:15:40,574 DEBUG {conn-10005, pstmt-20018} Parameters : [28, 141]
2019-08-15 17:15:40,574 DEBUG {conn-10005, pstmt-20018} Types : [BIGINT, INTEGER]
2019-08-15 17:15:40,575 DEBUG {conn-10005, pstmt-20018} executed. 0.850247 millis. INSERT into tb_blog_tag_relation(blog_id,tag_id)
    VALUES
      
      (?,?)
2019-08-15 17:15:40,575 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 17:15:40,579 DEBUG {conn-10005} commited
2019-08-15 17:15:40,579 DEBUG {conn-10005} setAutoCommit true
2019-08-15 17:15:40,583 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:03,196 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:03,196 DEBUG {conn-10005} setAutoCommit false
2019-08-15 17:18:03,197 DEBUG {conn-10005, pstmt-20013} Parameters : [24]
2019-08-15 17:18:03,197 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER]
2019-08-15 17:18:03,197 DEBUG {conn-10005, pstmt-20013} executed. 0.554152 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 17:18:03,197 DEBUG {conn-10005, pstmt-20013, rs-50028} open
2019-08-15 17:18:03,197 DEBUG {conn-10005, pstmt-20013, rs-50028} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 17:18:03,198 DEBUG {conn-10005, pstmt-20013, rs-50028} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 27, 0, 2018-11-12 18:43:21.0]
2019-08-15 17:18:03,198 DEBUG {conn-10005, pstmt-20013, rs-50028} closed
2019-08-15 17:18:03,198 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 17:18:03,199 DEBUG {conn-10005, pstmt-20014} Parameters : [tes5456, sdd, http://localhost/admin/dist/img/rand/6.jpg, 24, 日常随笔, spring boot, 1, 0, 0, dgdssgdffffffffffffffffffffffffffffff, dfgdsf]
2019-08-15 17:18:03,199 DEBUG {conn-10005, pstmt-20014} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, TINYINT, INTEGER, VARCHAR, VARCHAR]
2019-08-15 17:18:03,200 DEBUG {conn-10005, pstmt-20014} executed. 1.032737 millis. insert into tb_blog
     ( blog_title,
      
      
        blog_sub_url,
      
      
        blog_cover_image,
      
      
        blog_category_id,
      
      
        blog_category_name,
      
      
        blog_tags,
      
      
        blog_status,
      
      
      
        enable_comment,
      
      
      
      
      
        blog_vote_size,
      
      
        blog_content,
      
       
         blog_summary ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
        ?,
      
      
      
      
      
        ?,
      
      
        ?,
      
       
        ? )
2019-08-15 17:18:03,200 DEBUG {conn-10005, pstmt-20014, rs-50029} open
2019-08-15 17:18:03,200 DEBUG {conn-10005, pstmt-20014, rs-50029} Header: [GENERATED_KEY]
2019-08-15 17:18:03,200 DEBUG {conn-10005, pstmt-20014, rs-50029} Result: [29]
2019-08-15 17:18:03,200 DEBUG {conn-10005, pstmt-20014, rs-50029} closed
2019-08-15 17:18:03,200 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 17:18:03,200 DEBUG {conn-10005, pstmt-20015} Parameters : [tes5456]
2019-08-15 17:18:03,200 DEBUG {conn-10005, pstmt-20015} Types : [VARCHAR]
2019-08-15 17:18:03,201 DEBUG {conn-10005, pstmt-20015} executed. 0.477043 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   ,
     
    blog_content
   
    from tb_blog where blog_title = ?
2019-08-15 17:18:03,201 DEBUG {conn-10005, pstmt-20015, rs-50030} open
2019-08-15 17:18:03,201 DEBUG {conn-10005, pstmt-20015, rs-50030} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 17:18:03,201 DEBUG {conn-10005, pstmt-20015, rs-50030} Result: [29, tes5456, sdd, http://localhost/admin/dist/img/rand/6.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:18:03.0, 2019-08-16 01:18:03.0, 0, dfgdsf, dgdssgdffffffffffffffffffffffffffffff]
2019-08-15 17:18:03,202 DEBUG {conn-10005, pstmt-20015, rs-50030} closed
2019-08-15 17:18:03,202 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 17:18:03,202 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 17:18:03,202 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 17:18:03,203 DEBUG {conn-10005, pstmt-20005} executed. 0.54387 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 17:18:03,203 DEBUG {conn-10005, pstmt-20005, rs-50031} open
2019-08-15 17:18:03,203 DEBUG {conn-10005, pstmt-20005, rs-50031} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 17:18:03,203 DEBUG {conn-10005, pstmt-20005, rs-50031} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 17:18:03,203 DEBUG {conn-10005, pstmt-20005, rs-50031} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 17:18:03,204 DEBUG {conn-10005, pstmt-20005, rs-50031} closed
2019-08-15 17:18:03,204 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 17:18:03,300 DEBUG {conn-10005, pstmt-20016} Parameters : [spring boot]
2019-08-15 17:18:03,300 DEBUG {conn-10005, pstmt-20016} Types : [VARCHAR]
2019-08-15 17:18:03,300 DEBUG {conn-10005, pstmt-20016} executed. 0.839452 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 17:18:03,300 DEBUG {conn-10005, pstmt-20016, rs-50032} open
2019-08-15 17:18:03,300 DEBUG {conn-10005, pstmt-20016, rs-50032} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 17:18:03,301 DEBUG {conn-10005, pstmt-20016, rs-50032} Result: [141, spring boot, 0, 2019-08-16 01:01:11.0]
2019-08-15 17:18:03,301 DEBUG {conn-10005, pstmt-20016, rs-50032} closed
2019-08-15 17:18:03,301 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 17:18:03,301 DEBUG {conn-10005, pstmt-20017} Parameters : [日常随笔, /admin/dist/img/category/06.png, 28, 0, 2018-11-12 18:43:21.0, 24]
2019-08-15 17:18:03,301 DEBUG {conn-10005, pstmt-20017} Types : [VARCHAR, VARCHAR, INTEGER, TINYINT, TIMESTAMP, INTEGER]
2019-08-15 17:18:03,302 DEBUG {conn-10005, pstmt-20017} executed. 0.659018 millis. update tb_blog_category
     SET category_name = ?,
      
      
        category_icon = ?,
      
      
        category_rank = ?,
      
      
        is_deleted = ?,
      
      
        create_time = ? 
    where category_id = ?
2019-08-15 17:18:03,302 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-15 17:18:03,302 DEBUG {conn-10005, pstmt-20018} Parameters : [29, 141]
2019-08-15 17:18:03,302 DEBUG {conn-10005, pstmt-20018} Types : [BIGINT, INTEGER]
2019-08-15 17:18:03,302 DEBUG {conn-10005, pstmt-20018} executed. 0.530505 millis. INSERT into tb_blog_tag_relation(blog_id,tag_id)
    VALUES
      
      (?,?)
2019-08-15 17:18:03,302 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 17:18:03,303 DEBUG {conn-10005} commited
2019-08-15 17:18:03,304 DEBUG {conn-10005} setAutoCommit true
2019-08-15 17:18:03,304 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:26,211 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:26,212 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 17:18:26,212 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 17:18:26,213 DEBUG {conn-10005, pstmt-20000} executed. 0.907307 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 17:18:26,213 DEBUG {conn-10005, pstmt-20000, rs-50033} open
2019-08-15 17:18:26,213 DEBUG {conn-10005, pstmt-20000, rs-50033} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:18:26,213 DEBUG {conn-10005, pstmt-20000, rs-50033} Result: [29, tes5456, sdd, http://localhost/admin/dist/img/rand/6.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:18:03.0, 2019-08-16 01:18:03.0, 0, dfgdsf]
2019-08-15 17:18:26,214 DEBUG {conn-10005, pstmt-20000, rs-50033} Result: [28, test22, sdd, http://localhost/admin/dist/img/rand/30.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:15:40.0, 2019-08-16 01:15:40.0, 0, dfgdsf]
2019-08-15 17:18:26,214 DEBUG {conn-10005, pstmt-20000, rs-50033} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:18:26,214 DEBUG {conn-10005, pstmt-20000, rs-50033} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:18:26,215 DEBUG {conn-10005, pstmt-20000, rs-50033} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:18:26,215 DEBUG {conn-10005, pstmt-20000, rs-50033} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:18:26,215 DEBUG {conn-10005, pstmt-20000, rs-50033} closed
2019-08-15 17:18:26,216 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 17:18:26,216 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:26,216 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:26,216 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 17:18:26,216 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 17:18:26,217 DEBUG {conn-10005, pstmt-20001} executed. 0.706312 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 17:18:26,217 DEBUG {conn-10005, pstmt-20001, rs-50034} open
2019-08-15 17:18:26,217 DEBUG {conn-10005, pstmt-20001, rs-50034} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:18:26,217 DEBUG {conn-10005, pstmt-20001, rs-50034} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:18:26,218 DEBUG {conn-10005, pstmt-20001, rs-50034} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:18:26,218 DEBUG {conn-10005, pstmt-20001, rs-50034} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:18:26,218 DEBUG {conn-10005, pstmt-20001, rs-50034} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:18:26,218 DEBUG {conn-10005, pstmt-20001, rs-50034} Result: [28, test22, sdd, http://localhost/admin/dist/img/rand/30.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:15:40.0, 2019-08-16 01:15:40.0, 0, dfgdsf]
2019-08-15 17:18:26,219 DEBUG {conn-10005, pstmt-20001, rs-50034} Result: [29, tes5456, sdd, http://localhost/admin/dist/img/rand/6.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:18:03.0, 2019-08-16 01:18:03.0, 0, dfgdsf]
2019-08-15 17:18:26,219 DEBUG {conn-10005, pstmt-20001, rs-50034} closed
2019-08-15 17:18:26,219 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 17:18:26,219 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:26,219 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:26,219 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 17:18:26,219 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 17:18:26,220 DEBUG {conn-10005, pstmt-20002} executed. 0.852818 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 17:18:26,220 DEBUG {conn-10005, pstmt-20002, rs-50035} open
2019-08-15 17:18:26,220 DEBUG {conn-10005, pstmt-20002, rs-50035} Header: [tag_id, tag_count, tag_name]
2019-08-15 17:18:26,221 DEBUG {conn-10005, pstmt-20002, rs-50035} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 17:18:26,222 DEBUG {conn-10005, pstmt-20002, rs-50035} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 17:18:26,222 DEBUG {conn-10005, pstmt-20002, rs-50035} Result: [139, 1, jqGrid]
2019-08-15 17:18:26,222 DEBUG {conn-10005, pstmt-20002, rs-50035} Result: [140, 1, spring security]
2019-08-15 17:18:26,222 DEBUG {conn-10005, pstmt-20002, rs-50035} Result: [141, 3, spring boot]
2019-08-15 17:18:26,222 DEBUG {conn-10005, pstmt-20002, rs-50035} closed
2019-08-15 17:18:26,222 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 17:18:26,222 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:26,222 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:26,222 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 17:18:26,222 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 17:18:26,222 DEBUG {conn-10005, pstmt-20003} executed. 0.567516 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 17:18:26,222 DEBUG {conn-10005, pstmt-20003, rs-50036} open
2019-08-15 17:18:26,222 DEBUG {conn-10005, pstmt-20003, rs-50036} Header: [config_name, config_value, create_time, update_time]
2019-08-15 17:18:26,223 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 17:18:26,223 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 17:18:26,224 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 17:18:26,224 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 17:18:26,224 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 17:18:26,224 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 17:18:26,224 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 17:18:26,224 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 17:18:26,225 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 17:18:26,225 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 17:18:26,225 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 17:18:26,225 DEBUG {conn-10005, pstmt-20003, rs-50036} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 17:18:26,225 DEBUG {conn-10005, pstmt-20003, rs-50036} closed
2019-08-15 17:18:26,225 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 17:18:26,225 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:26,270 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:26,270 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 17:18:26,270 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 17:18:26,271 DEBUG {conn-10005, pstmt-20004} executed. 0.469846 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 17:18:26,271 DEBUG {conn-10005, pstmt-20004, rs-50037} open
2019-08-15 17:18:26,271 DEBUG {conn-10005, pstmt-20004, rs-50037} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 17:18:26,271 DEBUG {conn-10005, pstmt-20004, rs-50037} closed
2019-08-15 17:18:26,271 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 17:18:26,271 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:40,541 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:40,542 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 17:18:40,542 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 17:18:40,542 DEBUG {conn-10005, pstmt-20005} executed. 0.602986 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 17:18:40,542 DEBUG {conn-10005, pstmt-20005, rs-50038} open
2019-08-15 17:18:40,543 DEBUG {conn-10005, pstmt-20005, rs-50038} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 17:18:40,543 DEBUG {conn-10005, pstmt-20005, rs-50038} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 17:18:40,543 DEBUG {conn-10005, pstmt-20005, rs-50038} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 17:18:40,543 DEBUG {conn-10005, pstmt-20005, rs-50038} closed
2019-08-15 17:18:40,543 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 17:18:40,543 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:40,641 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:40,641 DEBUG {conn-10005, pstmt-20000} Parameters : [9]
2019-08-15 17:18:40,641 DEBUG {conn-10005, pstmt-20000} Types : [INTEGER]
2019-08-15 17:18:40,642 DEBUG {conn-10005, pstmt-20000} executed. 0.584481 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
     
      order by blog_id desc
     
    limit ?
2019-08-15 17:18:40,642 DEBUG {conn-10005, pstmt-20000, rs-50039} open
2019-08-15 17:18:40,642 DEBUG {conn-10005, pstmt-20000, rs-50039} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:18:40,642 DEBUG {conn-10005, pstmt-20000, rs-50039} Result: [29, tes5456, sdd, http://localhost/admin/dist/img/rand/6.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:18:03.0, 2019-08-16 01:18:03.0, 0, dfgdsf]
2019-08-15 17:18:40,642 DEBUG {conn-10005, pstmt-20000, rs-50039} Result: [28, test22, sdd, http://localhost/admin/dist/img/rand/30.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:15:40.0, 2019-08-16 01:15:40.0, 0, dfgdsf]
2019-08-15 17:18:40,642 DEBUG {conn-10005, pstmt-20000, rs-50039} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:18:40,642 DEBUG {conn-10005, pstmt-20000, rs-50039} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:18:40,642 DEBUG {conn-10005, pstmt-20000, rs-50039} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:18:40,643 DEBUG {conn-10005, pstmt-20000, rs-50039} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:18:40,643 DEBUG {conn-10005, pstmt-20000, rs-50039} closed
2019-08-15 17:18:40,643 DEBUG {conn-10005, pstmt-20000} clearParameters. 
2019-08-15 17:18:40,643 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:40,643 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:40,643 DEBUG {conn-10005, pstmt-20001} Parameters : [9]
2019-08-15 17:18:40,643 DEBUG {conn-10005, pstmt-20001} Types : [INTEGER]
2019-08-15 17:18:40,644 DEBUG {conn-10005, pstmt-20001} executed. 0.604015 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0 AND blog_status = 1
     
      order by blog_views desc
     
     
    limit ?
2019-08-15 17:18:40,644 DEBUG {conn-10005, pstmt-20001, rs-50040} open
2019-08-15 17:18:40,644 DEBUG {conn-10005, pstmt-20001, rs-50040} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:18:40,644 DEBUG {conn-10005, pstmt-20001, rs-50040} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:18:40,644 DEBUG {conn-10005, pstmt-20001, rs-50040} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:18:40,644 DEBUG {conn-10005, pstmt-20001, rs-50040} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:18:40,645 DEBUG {conn-10005, pstmt-20001, rs-50040} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:18:40,645 DEBUG {conn-10005, pstmt-20001, rs-50040} Result: [28, test22, sdd, http://localhost/admin/dist/img/rand/30.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:15:40.0, 2019-08-16 01:15:40.0, 0, dfgdsf]
2019-08-15 17:18:40,645 DEBUG {conn-10005, pstmt-20001, rs-50040} Result: [29, tes5456, sdd, http://localhost/admin/dist/img/rand/6.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:18:03.0, 2019-08-16 01:18:03.0, 0, dfgdsf]
2019-08-15 17:18:40,645 DEBUG {conn-10005, pstmt-20001, rs-50040} closed
2019-08-15 17:18:40,645 DEBUG {conn-10005, pstmt-20001} clearParameters. 
2019-08-15 17:18:40,645 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:40,645 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:40,645 DEBUG {conn-10005, pstmt-20002} Parameters : []
2019-08-15 17:18:40,645 DEBUG {conn-10005, pstmt-20002} Types : []
2019-08-15 17:18:40,646 DEBUG {conn-10005, pstmt-20002} executed. 0.582939 millis. SELECT t_r.*,t.tag_name FROM
        (SELECT r.tag_id,r.tag_count FROM
         (SELECT tag_id ,COUNT(*) AS tag_count FROM
	      (SELECT tr.tag_id FROM tb_blog_tag_relation tr LEFT JOIN tb_blog b ON tr.blog_id = b.blog_id WHERE b.is_deleted=0)
	        trb GROUP BY tag_id) AS r ORDER BY tag_count DESC LIMIT 20 ) AS t_r LEFT JOIN tb_blog_tag t ON t_r.tag_id = t.tag_id WHERE t.is_deleted=0
2019-08-15 17:18:40,646 DEBUG {conn-10005, pstmt-20002, rs-50041} open
2019-08-15 17:18:40,646 DEBUG {conn-10005, pstmt-20002, rs-50041} Header: [tag_id, tag_count, tag_name]
2019-08-15 17:18:40,646 DEBUG {conn-10005, pstmt-20002, rs-50041} Result: [57, 1, 世界上有一个很可爱的人]
2019-08-15 17:18:40,646 DEBUG {conn-10005, pstmt-20002, rs-50041} Result: [58, 1, 现在这个人就在看这句话]
2019-08-15 17:18:40,646 DEBUG {conn-10005, pstmt-20002, rs-50041} Result: [139, 1, jqGrid]
2019-08-15 17:18:40,646 DEBUG {conn-10005, pstmt-20002, rs-50041} Result: [140, 1, spring security]
2019-08-15 17:18:40,646 DEBUG {conn-10005, pstmt-20002, rs-50041} Result: [141, 3, spring boot]
2019-08-15 17:18:40,646 DEBUG {conn-10005, pstmt-20002, rs-50041} closed
2019-08-15 17:18:40,646 DEBUG {conn-10005, pstmt-20002} clearParameters. 
2019-08-15 17:18:40,646 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:40,647 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:40,647 DEBUG {conn-10005, pstmt-20003} Parameters : []
2019-08-15 17:18:40,647 DEBUG {conn-10005, pstmt-20003} Types : []
2019-08-15 17:18:40,647 DEBUG {conn-10005, pstmt-20003} executed. 0.369606 millis. select
     
    config_name, config_value, create_time, update_time
   
    from tb_config
2019-08-15 17:18:40,647 DEBUG {conn-10005, pstmt-20003, rs-50042} open
2019-08-15 17:18:40,647 DEBUG {conn-10005, pstmt-20003, rs-50042} Header: [config_name, config_value, create_time, update_time]
2019-08-15 17:18:40,647 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [footerAbout, your personal blog. have fun., 2018-11-12 04:33:23.0, 2019-07-24 23:53:36.0]
2019-08-15 17:18:40,647 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [footerCopyRight, 2019 Kuky, 2018-11-12 04:33:31.0, 2019-07-24 23:53:36.0]
2019-08-15 17:18:40,647 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [footerICP, 浙ICP备17008806号-3, 2018-11-12 04:33:27.0, 2019-07-24 23:53:36.0]
2019-08-15 17:18:40,647 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [footerPoweredBy, https://github.com/Kukyhmy, 2018-11-12 04:33:36.0, 2019-07-24 23:53:36.0]
2019-08-15 17:18:40,647 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [footerPoweredByURL, https://github.com/Kukyhmy, 2018-11-12 04:33:39.0, 2019-07-24 23:53:36.0]
2019-08-15 17:18:40,647 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [websiteDescription, 321 blog是SpringBoot2+Thymeleaf+Mybatis建造的个人博客网站.SpringBoot实战博客源码.个人博客搭建, 2018-11-12 04:33:04.0, 2019-07-24 23:54:16.0]
2019-08-15 17:18:40,648 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [websiteIcon, /admin/dist/img/favicon.png, 2018-11-12 04:33:11.0, 2019-07-24 23:54:16.0]
2019-08-15 17:18:40,648 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [websiteLogo, /admin/dist/img/logo2.png, 2018-11-12 04:33:08.0, 2019-07-24 23:54:16.0]
2019-08-15 17:18:40,648 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [websiteName, 321 blog, 2018-11-12 04:33:01.0, 2019-07-24 23:54:16.0]
2019-08-15 17:18:40,648 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [yourAvatar, /admin/dist/img/kuky.png, 2018-11-12 04:33:14.0, 2019-08-15 02:13:35.0]
2019-08-15 17:18:40,648 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [yourEmail, 13336470132@163.com, 2018-11-12 04:33:17.0, 2019-08-15 02:13:35.0]
2019-08-15 17:18:40,648 DEBUG {conn-10005, pstmt-20003, rs-50042} Result: [yourName, Kuky, 2018-11-12 04:33:20.0, 2019-08-15 02:13:35.0]
2019-08-15 17:18:40,648 DEBUG {conn-10005, pstmt-20003, rs-50042} closed
2019-08-15 17:18:40,648 DEBUG {conn-10005, pstmt-20003} clearParameters. 
2019-08-15 17:18:40,648 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:40,679 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:40,679 DEBUG {conn-10005, pstmt-20004} Parameters : [admin]
2019-08-15 17:18:40,679 DEBUG {conn-10005, pstmt-20004} Types : [VARCHAR]
2019-08-15 17:18:40,679 DEBUG {conn-10005, pstmt-20004} executed. 0.50583 millis. select
     
    id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail
   
    from tb_admin_user
    where id IN
     (  ?
     )
2019-08-15 17:18:40,680 DEBUG {conn-10005, pstmt-20004, rs-50043} open
2019-08-15 17:18:40,680 DEBUG {conn-10005, pstmt-20004, rs-50043} Header: [id, login_user_name, login_password, nick_name, locked, avatar, email, phone, detail]
2019-08-15 17:18:40,680 DEBUG {conn-10005, pstmt-20004, rs-50043} closed
2019-08-15 17:18:40,680 DEBUG {conn-10005, pstmt-20004} clearParameters. 
2019-08-15 17:18:40,680 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:46,580 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:46,581 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 17:18:46,581 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 17:18:46,581 DEBUG {conn-10005, pstmt-20006} executed. 0.845107 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 17:18:46,582 DEBUG {conn-10005, pstmt-20006, rs-50044} open
2019-08-15 17:18:46,582 DEBUG {conn-10005, pstmt-20006, rs-50044} Header: [count(*)]
2019-08-15 17:18:46,582 DEBUG {conn-10005, pstmt-20006, rs-50044} Result: [4]
2019-08-15 17:18:46,583 DEBUG {conn-10005, pstmt-20006, rs-50044} closed
2019-08-15 17:18:46,583 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 17:18:46,583 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:46,583 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:46,583 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 17:18:46,583 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 17:18:46,584 DEBUG {conn-10005, pstmt-20007} executed. 0.882633 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 17:18:46,584 DEBUG {conn-10005, pstmt-20007, rs-50045} open
2019-08-15 17:18:46,585 DEBUG {conn-10005, pstmt-20007, rs-50045} Header: [count(*)]
2019-08-15 17:18:46,585 DEBUG {conn-10005, pstmt-20007, rs-50045} Result: [6]
2019-08-15 17:18:46,585 DEBUG {conn-10005, pstmt-20007, rs-50045} closed
2019-08-15 17:18:46,585 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 17:18:46,585 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:46,585 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:46,586 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 17:18:46,586 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 17:18:46,586 DEBUG {conn-10005, pstmt-20008} executed. 0.848191 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 17:18:46,587 DEBUG {conn-10005, pstmt-20008, rs-50046} open
2019-08-15 17:18:46,587 DEBUG {conn-10005, pstmt-20008, rs-50046} Header: [count(*)]
2019-08-15 17:18:46,587 DEBUG {conn-10005, pstmt-20008, rs-50046} Result: [27]
2019-08-15 17:18:46,587 DEBUG {conn-10005, pstmt-20008, rs-50046} closed
2019-08-15 17:18:46,587 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 17:18:46,587 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:46,587 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:46,588 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 17:18:46,588 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 17:18:46,588 DEBUG {conn-10005, pstmt-20009} executed. 0.622521 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 17:18:46,588 DEBUG {conn-10005, pstmt-20009, rs-50047} open
2019-08-15 17:18:46,588 DEBUG {conn-10005, pstmt-20009, rs-50047} Header: [count(*)]
2019-08-15 17:18:46,588 DEBUG {conn-10005, pstmt-20009, rs-50047} Result: [16]
2019-08-15 17:18:46,589 DEBUG {conn-10005, pstmt-20009, rs-50047} closed
2019-08-15 17:18:46,589 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 17:18:46,589 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:46,589 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:46,589 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 17:18:46,589 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 17:18:46,590 DEBUG {conn-10005, pstmt-20010} executed. 0.512513 millis. select count(*)  from tb_admin_user
2019-08-15 17:18:46,590 DEBUG {conn-10005, pstmt-20010, rs-50048} open
2019-08-15 17:18:46,590 DEBUG {conn-10005, pstmt-20010, rs-50048} Header: [count(*)]
2019-08-15 17:18:46,590 DEBUG {conn-10005, pstmt-20010, rs-50048} Result: [3]
2019-08-15 17:18:46,590 DEBUG {conn-10005, pstmt-20010, rs-50048} closed
2019-08-15 17:18:46,590 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 17:18:46,590 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:46,590 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:46,591 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 17:18:46,591 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 17:18:46,591 DEBUG {conn-10005, pstmt-20011} executed. 0.608127 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 17:18:46,591 DEBUG {conn-10005, pstmt-20011, rs-50049} open
2019-08-15 17:18:46,591 DEBUG {conn-10005, pstmt-20011, rs-50049} Header: [count(*)]
2019-08-15 17:18:46,591 DEBUG {conn-10005, pstmt-20011, rs-50049} Result: [5]
2019-08-15 17:18:46,592 DEBUG {conn-10005, pstmt-20011, rs-50049} closed
2019-08-15 17:18:46,592 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 17:18:46,592 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:47,719 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:47,720 DEBUG {conn-10005, pstmt-20006} Parameters : []
2019-08-15 17:18:47,720 DEBUG {conn-10005, pstmt-20006} Types : []
2019-08-15 17:18:47,720 DEBUG {conn-10005, pstmt-20006} executed. 0.564433 millis. select count(*)  from tb_blog_category
    where is_deleted=0
2019-08-15 17:18:47,720 DEBUG {conn-10005, pstmt-20006, rs-50050} open
2019-08-15 17:18:47,720 DEBUG {conn-10005, pstmt-20006, rs-50050} Header: [count(*)]
2019-08-15 17:18:47,720 DEBUG {conn-10005, pstmt-20006, rs-50050} Result: [4]
2019-08-15 17:18:47,720 DEBUG {conn-10005, pstmt-20006, rs-50050} closed
2019-08-15 17:18:47,721 DEBUG {conn-10005, pstmt-20006} clearParameters. 
2019-08-15 17:18:47,721 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:47,721 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:47,721 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 17:18:47,721 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 17:18:47,721 DEBUG {conn-10005, pstmt-20007} executed. 0.37783 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 17:18:47,721 DEBUG {conn-10005, pstmt-20007, rs-50051} open
2019-08-15 17:18:47,721 DEBUG {conn-10005, pstmt-20007, rs-50051} Header: [count(*)]
2019-08-15 17:18:47,721 DEBUG {conn-10005, pstmt-20007, rs-50051} Result: [6]
2019-08-15 17:18:47,722 DEBUG {conn-10005, pstmt-20007, rs-50051} closed
2019-08-15 17:18:47,722 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 17:18:47,722 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:47,722 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:47,722 DEBUG {conn-10005, pstmt-20008} Parameters : []
2019-08-15 17:18:47,722 DEBUG {conn-10005, pstmt-20008} Types : []
2019-08-15 17:18:47,722 DEBUG {conn-10005, pstmt-20008} executed. 0.468304 millis. select count(*)  from tb_link
        where is_deleted=0
2019-08-15 17:18:47,722 DEBUG {conn-10005, pstmt-20008, rs-50052} open
2019-08-15 17:18:47,722 DEBUG {conn-10005, pstmt-20008, rs-50052} Header: [count(*)]
2019-08-15 17:18:47,723 DEBUG {conn-10005, pstmt-20008, rs-50052} Result: [27]
2019-08-15 17:18:47,723 DEBUG {conn-10005, pstmt-20008, rs-50052} closed
2019-08-15 17:18:47,723 DEBUG {conn-10005, pstmt-20008} clearParameters. 
2019-08-15 17:18:47,723 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:47,723 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:47,723 DEBUG {conn-10005, pstmt-20009} Parameters : []
2019-08-15 17:18:47,723 DEBUG {conn-10005, pstmt-20009} Types : []
2019-08-15 17:18:47,724 DEBUG {conn-10005, pstmt-20009} executed. 0.466762 millis. select count(*)  from tb_blog_tag
    where is_deleted=0
2019-08-15 17:18:47,724 DEBUG {conn-10005, pstmt-20009, rs-50053} open
2019-08-15 17:18:47,724 DEBUG {conn-10005, pstmt-20009, rs-50053} Header: [count(*)]
2019-08-15 17:18:47,724 DEBUG {conn-10005, pstmt-20009, rs-50053} Result: [16]
2019-08-15 17:18:47,724 DEBUG {conn-10005, pstmt-20009, rs-50053} closed
2019-08-15 17:18:47,724 DEBUG {conn-10005, pstmt-20009} clearParameters. 
2019-08-15 17:18:47,724 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:47,724 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:47,724 DEBUG {conn-10005, pstmt-20010} Parameters : []
2019-08-15 17:18:47,724 DEBUG {conn-10005, pstmt-20010} Types : []
2019-08-15 17:18:47,725 DEBUG {conn-10005, pstmt-20010} executed. 0.443115 millis. select count(*)  from tb_admin_user
2019-08-15 17:18:47,725 DEBUG {conn-10005, pstmt-20010, rs-50054} open
2019-08-15 17:18:47,725 DEBUG {conn-10005, pstmt-20010, rs-50054} Header: [count(*)]
2019-08-15 17:18:47,725 DEBUG {conn-10005, pstmt-20010, rs-50054} Result: [3]
2019-08-15 17:18:47,725 DEBUG {conn-10005, pstmt-20010, rs-50054} closed
2019-08-15 17:18:47,725 DEBUG {conn-10005, pstmt-20010} clearParameters. 
2019-08-15 17:18:47,725 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:47,725 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:47,725 DEBUG {conn-10005, pstmt-20011} Parameters : []
2019-08-15 17:18:47,725 DEBUG {conn-10005, pstmt-20011} Types : []
2019-08-15 17:18:47,726 DEBUG {conn-10005, pstmt-20011} executed. 0.449798 millis. SELECT count(*) FROM tb_blog_comment
    WHERE is_deleted=0
2019-08-15 17:18:47,726 DEBUG {conn-10005, pstmt-20011, rs-50055} open
2019-08-15 17:18:47,726 DEBUG {conn-10005, pstmt-20011, rs-50055} Header: [count(*)]
2019-08-15 17:18:47,726 DEBUG {conn-10005, pstmt-20011, rs-50055} Result: [5]
2019-08-15 17:18:47,726 DEBUG {conn-10005, pstmt-20011, rs-50055} closed
2019-08-15 17:18:47,726 DEBUG {conn-10005, pstmt-20011} clearParameters. 
2019-08-15 17:18:47,726 DEBUG {conn-10005} pool-recycle
2019-08-15 17:18:49,679 DEBUG {conn-10005} pool-connect
2019-08-15 17:18:49,679 DEBUG {conn-10005, pstmt-20012} Parameters : []
2019-08-15 17:18:49,679 DEBUG {conn-10005, pstmt-20012} Types : []
2019-08-15 17:18:49,680 DEBUG {conn-10005, pstmt-20012} executed. 0.502746 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where is_deleted=0
    order by category_rank desc,create_time desc
2019-08-15 17:18:49,680 DEBUG {conn-10005, pstmt-20012, rs-50056} open
2019-08-15 17:18:49,680 DEBUG {conn-10005, pstmt-20012, rs-50056} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 17:18:49,680 DEBUG {conn-10005, pstmt-20012, rs-50056} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 28, 0, 2018-11-12 18:43:21.0]
2019-08-15 17:18:49,680 DEBUG {conn-10005, pstmt-20012, rs-50056} Result: [22, SSM整合进阶篇, /admin/dist/img/category/02.png, 20, 0, 2018-11-12 18:42:25.0]
2019-08-15 17:18:49,680 DEBUG {conn-10005, pstmt-20012, rs-50056} Result: [20, About, /admin/dist/img/category/10.png, 8, 0, 2018-11-12 08:28:49.0]
2019-08-15 17:18:49,680 DEBUG {conn-10005, pstmt-20012, rs-50056} Result: [25, 前端, /admin/dist/img/category/18.png, 2, 0, 2019-08-14 19:08:03.0]
2019-08-15 17:18:49,680 DEBUG {conn-10005, pstmt-20012, rs-50056} closed
2019-08-15 17:18:49,680 DEBUG {conn-10005, pstmt-20012} clearParameters. 
2019-08-15 17:18:49,680 DEBUG {conn-10005} pool-recycle
2019-08-15 17:19:07,326 DEBUG {conn-10005} pool-connect
2019-08-15 17:19:07,326 DEBUG {conn-10005} setAutoCommit false
2019-08-15 17:19:07,326 DEBUG {conn-10005, pstmt-20013} Parameters : [24]
2019-08-15 17:19:07,326 DEBUG {conn-10005, pstmt-20013} Types : [INTEGER]
2019-08-15 17:19:07,327 DEBUG {conn-10005, pstmt-20013} executed. 0.520224 millis. select
     
    category_id, category_name, category_icon, category_rank, is_deleted, create_time
   
    from tb_blog_category
    where category_id = ? AND is_deleted = 0
2019-08-15 17:19:07,327 DEBUG {conn-10005, pstmt-20013, rs-50057} open
2019-08-15 17:19:07,327 DEBUG {conn-10005, pstmt-20013, rs-50057} Header: [category_id, category_name, category_icon, category_rank, is_deleted, create_time]
2019-08-15 17:19:07,327 DEBUG {conn-10005, pstmt-20013, rs-50057} Result: [24, 日常随笔, /admin/dist/img/category/06.png, 28, 0, 2018-11-12 18:43:21.0]
2019-08-15 17:19:07,327 DEBUG {conn-10005, pstmt-20013, rs-50057} closed
2019-08-15 17:19:07,327 DEBUG {conn-10005, pstmt-20013} clearParameters. 
2019-08-15 17:19:07,328 DEBUG {conn-10005, pstmt-20014} Parameters : [sdfsdgd, dfgdf, http://localhost/admin/dist/img/rand/3.jpg, 24, 日常随笔, spring boot, 1, 0, 0, dfgdf, dfgdf]
2019-08-15 17:19:07,328 DEBUG {conn-10005, pstmt-20014} Types : [VARCHAR, VARCHAR, VARCHAR, INTEGER, VARCHAR, VARCHAR, TINYINT, TINYINT, INTEGER, VARCHAR, VARCHAR]
2019-08-15 17:19:07,329 DEBUG {conn-10005, pstmt-20014} executed. 0.794729 millis. insert into tb_blog
     ( blog_title,
      
      
        blog_sub_url,
      
      
        blog_cover_image,
      
      
        blog_category_id,
      
      
        blog_category_name,
      
      
        blog_tags,
      
      
        blog_status,
      
      
      
        enable_comment,
      
      
      
      
      
        blog_vote_size,
      
      
        blog_content,
      
       
         blog_summary ) 
     values ( ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
        ?,
      
      
      
        ?,
      
      
      
      
      
        ?,
      
      
        ?,
      
       
        ? )
2019-08-15 17:19:07,329 DEBUG {conn-10005, pstmt-20014, rs-50058} open
2019-08-15 17:19:07,329 DEBUG {conn-10005, pstmt-20014, rs-50058} Header: [GENERATED_KEY]
2019-08-15 17:19:07,329 DEBUG {conn-10005, pstmt-20014, rs-50058} Result: [30]
2019-08-15 17:19:07,329 DEBUG {conn-10005, pstmt-20014, rs-50058} closed
2019-08-15 17:19:07,329 DEBUG {conn-10005, pstmt-20014} clearParameters. 
2019-08-15 17:19:07,329 DEBUG {conn-10005, pstmt-20015} Parameters : [sdfsdgd]
2019-08-15 17:19:07,329 DEBUG {conn-10005, pstmt-20015} Types : [VARCHAR]
2019-08-15 17:19:07,330 DEBUG {conn-10005, pstmt-20015} executed. 0.425124 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   ,
     
    blog_content
   
    from tb_blog where blog_title = ?
2019-08-15 17:19:07,330 DEBUG {conn-10005, pstmt-20015, rs-50059} open
2019-08-15 17:19:07,330 DEBUG {conn-10005, pstmt-20015, rs-50059} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary, blog_content]
2019-08-15 17:19:07,330 DEBUG {conn-10005, pstmt-20015, rs-50059} Result: [30, sdfsdgd, dfgdf, http://localhost/admin/dist/img/rand/3.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:19:07.0, 2019-08-16 01:19:07.0, 0, dfgdf, dfgdf]
2019-08-15 17:19:07,330 DEBUG {conn-10005, pstmt-20015, rs-50059} closed
2019-08-15 17:19:07,330 DEBUG {conn-10005, pstmt-20015} clearParameters. 
2019-08-15 17:19:07,331 DEBUG {conn-10005, pstmt-20005} Parameters : [admin]
2019-08-15 17:19:07,331 DEBUG {conn-10005, pstmt-20005} Types : [VARCHAR]
2019-08-15 17:19:07,331 DEBUG {conn-10005, pstmt-20005} executed. 0.461107 millis. SELECT u.*
  ,r.name
  FROM tb_admin_user u
  LEFT JOIN tb_user_authority sru ON u.id= sru.user_id
  LEFT JOIN tb_authority r ON sru.authority_id=r.id
  WHERE u.login_user_name= ?
2019-08-15 17:19:07,331 DEBUG {conn-10005, pstmt-20005, rs-50060} open
2019-08-15 17:19:07,331 DEBUG {conn-10005, pstmt-20005, rs-50060} Header: [id, login_user_name, login_password, nick_name, locked, email, phone, detail, avatar, name]
2019-08-15 17:19:07,331 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_ADMIN]
2019-08-15 17:19:07,332 DEBUG {conn-10005, pstmt-20005, rs-50060} Result: [545927266, admin, $2a$10$w1TUeH1CLpPvWXtRavmE4.W3emRny.9abSmhpBVUJftsWHH5GvOK6, kuky, 0, 13336470132@163.com, 17388657185, null, null, ROLE_USER]
2019-08-15 17:19:07,332 DEBUG {conn-10005, pstmt-20005, rs-50060} closed
2019-08-15 17:19:07,332 DEBUG {conn-10005, pstmt-20005} clearParameters. 
2019-08-15 17:19:07,425 DEBUG {conn-10005, pstmt-20016} Parameters : [spring boot]
2019-08-15 17:19:07,425 DEBUG {conn-10005, pstmt-20016} Types : [VARCHAR]
2019-08-15 17:19:07,426 DEBUG {conn-10005, pstmt-20016} executed. 0.534617 millis. select
     
    tag_id, tag_name, is_deleted, create_time
   
    from tb_blog_tag
    where tag_name = ? AND is_deleted = 0
2019-08-15 17:19:07,426 DEBUG {conn-10005, pstmt-20016, rs-50061} open
2019-08-15 17:19:07,426 DEBUG {conn-10005, pstmt-20016, rs-50061} Header: [tag_id, tag_name, is_deleted, create_time]
2019-08-15 17:19:07,426 DEBUG {conn-10005, pstmt-20016, rs-50061} Result: [141, spring boot, 0, 2019-08-16 01:01:11.0]
2019-08-15 17:19:07,426 DEBUG {conn-10005, pstmt-20016, rs-50061} closed
2019-08-15 17:19:07,426 DEBUG {conn-10005, pstmt-20016} clearParameters. 
2019-08-15 17:19:07,426 DEBUG {conn-10005, pstmt-20017} Parameters : [日常随笔, /admin/dist/img/category/06.png, 29, 0, 2018-11-12 18:43:21.0, 24]
2019-08-15 17:19:07,426 DEBUG {conn-10005, pstmt-20017} Types : [VARCHAR, VARCHAR, INTEGER, TINYINT, TIMESTAMP, INTEGER]
2019-08-15 17:19:07,432 DEBUG {conn-10005, pstmt-20017} executed. 5.260325 millis. update tb_blog_category
     SET category_name = ?,
      
      
        category_icon = ?,
      
      
        category_rank = ?,
      
      
        is_deleted = ?,
      
      
        create_time = ? 
    where category_id = ?
2019-08-15 17:19:07,432 DEBUG {conn-10005, pstmt-20017} clearParameters. 
2019-08-15 17:19:07,432 DEBUG {conn-10005, pstmt-20018} Parameters : [30, 141]
2019-08-15 17:19:07,432 DEBUG {conn-10005, pstmt-20018} Types : [BIGINT, INTEGER]
2019-08-15 17:19:07,433 DEBUG {conn-10005, pstmt-20018} executed. 1.00652 millis. INSERT into tb_blog_tag_relation(blog_id,tag_id)
    VALUES
      
      (?,?)
2019-08-15 17:19:07,433 DEBUG {conn-10005, pstmt-20018} clearParameters. 
2019-08-15 17:19:07,434 DEBUG {conn-10005} commited
2019-08-15 17:19:07,434 DEBUG {conn-10005} setAutoCommit true
2019-08-15 17:19:07,435 DEBUG {conn-10005} pool-recycle
2019-08-15 17:19:08,644 DEBUG {conn-10005} pool-connect
2019-08-15 17:19:08,645 DEBUG {conn-10005, pstmt-20019} created. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 17:19:08,645 DEBUG {conn-10005, pstmt-20019} Parameters : [0, 10]
2019-08-15 17:19:08,645 DEBUG {conn-10005, pstmt-20019} Types : [INTEGER, INTEGER]
2019-08-15 17:19:08,646 DEBUG {conn-10005, pstmt-20019} executed. 0.74795 millis. select
     
    blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, 
    blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, 
    blog_vote_size,blog_summary
   
    from tb_blog
    where is_deleted=0
     
     
     
    order by blog_id desc
     
      limit ?,?
2019-08-15 17:19:08,646 DEBUG {conn-10005, pstmt-20019, rs-50062} open
2019-08-15 17:19:08,646 DEBUG {conn-10005, pstmt-20019, rs-50062} Header: [blog_id, blog_title, blog_sub_url, blog_cover_image, blog_category_id, blog_category_name, blog_tags, blog_status, blog_views, enable_comment, is_deleted, create_time, update_time, blog_vote_size, blog_summary]
2019-08-15 17:19:08,647 DEBUG {conn-10005, pstmt-20019, rs-50062} Result: [30, sdfsdgd, dfgdf, http://localhost/admin/dist/img/rand/3.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:19:07.0, 2019-08-16 01:19:07.0, 0, dfgdf]
2019-08-15 17:19:08,647 DEBUG {conn-10005, pstmt-20019, rs-50062} Result: [29, tes5456, sdd, http://localhost/admin/dist/img/rand/6.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:18:03.0, 2019-08-16 01:18:03.0, 0, dfgdsf]
2019-08-15 17:19:08,647 DEBUG {conn-10005, pstmt-20019, rs-50062} Result: [28, test22, sdd, http://localhost/admin/dist/img/rand/30.jpg, 24, 日常随笔, spring boot, 1, 0, 0, 0, 2019-08-16 01:15:40.0, 2019-08-16 01:15:40.0, 0, dfgdsf]
2019-08-15 17:19:08,647 DEBUG {conn-10005, pstmt-20019, rs-50062} Result: [25, SpringBoot整合POI实现文件导出Excel，导入Excel, dsggs, http://localhost/admin/dist/img/rand/12.jpg, 22, SSM整合进阶篇, spring boot, 1, 0, 0, 0, 2019-08-16 01:01:11.0, 2019-08-16 01:01:11.0, 0, Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。本文仅用来记录Excel的部分。毕竟，Excel的导入导出，是后台数据库常用的方法。]
2019-08-15 17:19:08,647 DEBUG {conn-10005, pstmt-20019, rs-50062} Result: [24, Spring boot +Spring Security + Thymeleaf 认证失败返回错误信息, sgsgdf, http://localhost/admin/dist/img/rand/29.jpg, 24, 日常随笔, spring security, 1, 30, 0, 0, 2019-08-15 10:34:02.0, 2019-08-15 10:34:02.0, 20, 通过表单提交登录的用户名和密码,登录成功，完成正常的主页面跳转，这个不存在问题。存在问题的是，登录失败了该咋办呢？如何自定义登录验证失败后的提示信息给表单？]
2019-08-15 17:19:08,647 DEBUG {conn-10005, pstmt-20019, rs-50062} Result: [23, jqGrid中的formatter, sdfhdhdf, http://localhost/admin/dist/img/rand/21.jpg, 25, 前端, jqGrid, 1, 28, 0, 0, 2019-08-14 19:46:03.0, 2019-08-14 19:46:03.0, 8, jqGrid是使用ajax技术代表和处理web表格数据的一种解决方案，在客户端使用ajax异步加载数据,其中对列表cell属性格式化设置主要通过colModel中formatter、formatoptions来设置]
2019-08-15 17:19:08,648 DEBUG {conn-10005, pstmt-20019, rs-50062} Result: [1, 我是Kuky, about, /admin/dist/img/rand/33.jpg, 20, About, 世界上有一个很可爱的人,现在这个人就在看这句话, 1, 268, 0, 0, 2017-03-12 08:31:15.0, 2018-11-12 08:31:15.0, 2, 烦得很地方还是电话费]
2019-08-15 17:19:08,648 DEBUG {conn-10005, pstmt-20019, rs-50062} closed
2019-08-15 17:19:08,648 DEBUG {conn-10005, pstmt-20019} clearParameters. 
2019-08-15 17:19:08,648 DEBUG {conn-10005} pool-recycle
2019-08-15 17:19:08,648 DEBUG {conn-10005} pool-connect
2019-08-15 17:19:08,648 DEBUG {conn-10005, pstmt-20007} Parameters : []
2019-08-15 17:19:08,648 DEBUG {conn-10005, pstmt-20007} Types : []
2019-08-15 17:19:08,649 DEBUG {conn-10005, pstmt-20007} executed. 0.567516 millis. select count(*) from tb_blog
    where is_deleted=0
2019-08-15 17:19:08,649 DEBUG {conn-10005, pstmt-20007, rs-50063} open
2019-08-15 17:19:08,649 DEBUG {conn-10005, pstmt-20007, rs-50063} Header: [count(*)]
2019-08-15 17:19:08,649 DEBUG {conn-10005, pstmt-20007, rs-50063} Result: [7]
2019-08-15 17:19:08,649 DEBUG {conn-10005, pstmt-20007, rs-50063} closed
2019-08-15 17:19:08,649 DEBUG {conn-10005, pstmt-20007} clearParameters. 
2019-08-15 17:19:08,649 DEBUG {conn-10005} pool-recycle
